/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import category_theory.sites.sheaf
import category_theory.flat_functors

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
noncomputable theory

open category_theory
open opposite
open category_theory.presieve.family_of_elements
open category_theory.presieve
open category_theory.limits

namespace category_theory
section cover_lifting
variables {C : Type*} [category C] {D : Type*} [category D] {E : Type*} [category E]
variables {J : grothendieck_topology C} {K : grothendieck_topology D}
variables {L : grothendieck_topology E}

/--
A functor `u : (C, J) ‚•§ (D, K)` between sites is called to have the cover-preserving property
if for all covering sieves `R` in `D`, `R.pushforward u` is a covering sieve in `C`.
-/
@[nolint has_inhabited_instance]
structure cover_preserving (J : grothendieck_topology C) (K : grothendieck_topology D) (u : C ‚•§ D) :=
(cover_preserve : ‚àÄ {U : C} {S : sieve U} (hS : S ‚àà J U), S.functor_pushforward u ‚àà K (u.obj U))

open category_theory.limits.walking_cospan (left right)

/-
We ought to show that for each `f‚ÇÅ ‚â´ u.map g‚ÇÅ = f‚ÇÇ ‚â´ u.map g‚ÇÇ`, the restriction of
`x` along the two paths are the same given `x` is compatible in the image of `u`.
  -/
lemma family_of_elements_compatible_of_flat {C : Type*} {D : Type*} [category.{v‚ÇÅ} C] [category.{v‚ÇÅ} D]
  (u : C ‚•§ D) [representably_flat u] {P : D·µí·µñ ‚•§ Type*} {Y‚ÇÅ Y‚ÇÇ Z : C} {T : presieve Z}
  {x : family_of_elements (u.op ‚ãô P) T} (h : x.compatible) {X : D}
  (f‚ÇÅ : X ‚ü∂ u.obj Y‚ÇÅ) (f‚ÇÇ : X ‚ü∂ u.obj Y‚ÇÇ) {g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z} {g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z} (hg‚ÇÅ : T g‚ÇÅ) (hg‚ÇÇ : T g‚ÇÇ)
  (eq : f‚ÇÅ ‚â´ u.map g‚ÇÅ = f‚ÇÇ ‚â´ u.map g‚ÇÇ) : P.map f‚ÇÅ.op (x g‚ÇÅ hg‚ÇÅ) = P.map f‚ÇÇ.op (x g‚ÇÇ hg‚ÇÇ) :=
begin
  /- First, `f‚ÇÅ` and `f‚ÇÇ` forms a cone over `cospan g‚ÇÅ g‚ÇÇ ‚ãô u`. -/
  let c : cone (cospan g‚ÇÅ g‚ÇÇ ‚ãô u) :=
    (cones.postcompose (diagram_iso_cospan (cospan g‚ÇÅ g‚ÇÇ ‚ãô u)).inv).obj
      (pullback_cone.mk f‚ÇÅ f‚ÇÇ eq),

  /-
  This can then be viewed as a cospan of structured arrows, and we may obtain an arbitrary cone
  over it since `structured_arrow W u` is cofiltered.
  Then, it suffices to prove that it is compatible when restricted onto `u(c'.X.right)`.
  -/
  let c' := is_cofiltered.cone (structured_arrow_cone.to_diagram c ‚ãô structured_arrow.pre _ _ _),
  have eq‚ÇÅ : f‚ÇÅ = (c'.X.hom ‚â´ u.map (c'.œÄ.app left).right) ‚â´ eq_to_hom (by simp),
  { erw ‚Üê (c'.œÄ.app left).w, dsimp, simp },
  have eq‚ÇÇ : f‚ÇÇ = (c'.X.hom ‚â´ u.map (c'.œÄ.app right).right) ‚â´ eq_to_hom (by simp),
  { erw ‚Üê (c'.œÄ.app right).w, dsimp, simp },
  conv_lhs { rw eq‚ÇÅ },
  conv_rhs { rw eq‚ÇÇ },
  simp only [op_comp, functor.map_comp, types_comp_apply, eq_to_hom_op, eq_to_hom_map],
  congr' 1,

  /-
  Now, since everything now falls in the image of `u`,
  the result follows from the compatibleness of `x` in the image of `u`.
  -/
  injection c'.œÄ.naturality walking_cospan.hom.inl with _ e‚ÇÅ,
  injection c'.œÄ.naturality walking_cospan.hom.inr with _ e‚ÇÇ,
  exact h (c'.œÄ.app left).right (c'.œÄ.app right).right hg‚ÇÅ hg‚ÇÇ (e‚ÇÅ.symm.trans e‚ÇÇ),

end

lemma presieve.family_of_elements.compatible.functor_pushforward {C : Type*} {D : Type*}
  [category.{v‚ÇÅ} C] [category.{v‚ÇÅ} D]
  (u : C ‚•§ D) [representably_flat u] {P : D·µí·µñ ‚•§ Type _} {Z : C} {T : presieve Z}
  {x : family_of_elements (u.op ‚ãô P) T} (h : x.compatible) :
  (x.functor_pushforward u).compatible :=
begin
  rintros Z‚ÇÅ Z‚ÇÇ W g‚ÇÅ g‚ÇÇ f‚ÇÅ' f‚ÇÇ' H‚ÇÅ H‚ÇÇ eq,
  unfold family_of_elements.functor_pushforward,
  rcases get_functor_pushforward_structure H‚ÇÅ with ‚ü®X‚ÇÅ, f‚ÇÅ, h‚ÇÅ, hf‚ÇÅ, rfl‚ü©,
  rcases get_functor_pushforward_structure H‚ÇÇ with ‚ü®X‚ÇÇ, f‚ÇÇ, h‚ÇÇ, hf‚ÇÇ, rfl‚ü©,
  suffices : P.map (g‚ÇÅ ‚â´ h‚ÇÅ).op (x f‚ÇÅ hf‚ÇÅ) = P.map (g‚ÇÇ ‚â´ h‚ÇÇ).op (x f‚ÇÇ hf‚ÇÇ), simpa using this,
  apply family_of_elements_compatible_of_flat u h,
  simpa using eq,
end


/-- The identity functor on a site is cover-preserving. -/
def id_cover_preserving : cover_preserving J J (ùü≠ _) := ‚ü®Œª U S hS, by simpa using hS‚ü©

/-- The composition of two cover-preserving functors are cover-lifting -/
def comp_cover_preserving {u} (hu : cover_preserving J K u) {v} (hv : cover_preserving K L v) :
  cover_preserving J L (u ‚ãô v) := ‚ü®Œª U S hS,
begin
  rw sieve.functor_pushforward_comp,
  exact hv.cover_preserve (hu.cover_preserve hS)
end‚ü©

lemma functor_pushforward_apply_map {C : Type*} {D : Type*} [category.{v‚ÇÅ} C] [category.{v‚ÇÅ} D]
  (u : C ‚•§ D) [representably_flat u] {P : D·µí·µñ ‚•§ Type _} {Y Z : C} {T : presieve Z}
  {x : family_of_elements (u.op ‚ãô P) T} (hx : x.compatible) {f: Y ‚ü∂ Z} (hf) :
  x.functor_pushforward u (u.map f) (image_mem_functor_pushforward u T hf) = x f hf :=
begin
  unfold family_of_elements.functor_pushforward,
  rcases e‚ÇÅ : get_functor_pushforward_structure (image_mem_functor_pushforward u T hf) with
    ‚ü®X, g, h, hg, eq‚ü©,
  simpa using family_of_elements_compatible_of_flat u hx h (ùüô _) hg hf (by simp[eq]),
end

end cover_lifting

variables {C D : Type u‚ÇÅ} [category.{v‚ÇÅ} C] [category.{v‚ÇÅ} D]
variables {A : Type u‚ÇÇ} [category.{v‚ÇÅ} A] [has_limits A]
variables {J : grothendieck_topology C} {K : grothendieck_topology D}

/--
If `u` is cover-preserving, then `u.op ‚ãô _` pulls sheaves back to sheaves.

This result is basically https://stacks.math.columbia.edu/tag/00WW,
but without the condition that `C` or `D` has pullbacks.
-/
theorem pullback_is_sheaf_of_cover_preserving {u : C ‚•§ D} [representably_flat u]
  (hu : cover_preserving J K u) (‚Ñ± : Sheaf K A) :
  presheaf.is_sheaf J (((whiskering_left _ _ _).obj u.op).obj ‚Ñ±.val) :=
begin
  intros X U S hS x hx,
  change family_of_elements (u.op ‚ãô ‚Ñ±.val ‚ãô coyoneda.obj (op X)) ‚áëS at x,
  let H := ‚Ñ±.2 X _ (hu.cover_preserve hS),
  split, swap,
  { apply H.amalgamate (x.functor_pushforward u),
    exact hx.functor_pushforward u },
  split,
  { intros V f hf,
    convert H.is_amalgamation (hx.functor_pushforward u)
      (u.map f) (image_mem_functor_pushforward u S hf),
    rw functor_pushforward_apply_map u hx },
  { intros y hy,
    refine H.is_separated_for _ y _ _ (H.is_amalgamation (hx.functor_pushforward u)),
    rintros V f ‚ü®Z, f', g', h, rfl‚ü©,
    erw family_of_elements.comp_of_compatible (S.functor_pushforward u)
      (hx.functor_pushforward u) (image_mem_functor_pushforward u S h) g',
    simpa [functor_pushforward_apply_map u hx h, ‚Üêhy f' h], }
end

end category_theory
