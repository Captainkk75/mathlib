/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import group_theory.subgroup.pointwise
import group_theory.quotient_group
import data.real.basic
import data.complex.basic

/-!
# Divisible Group

An abelian group `A` is said to be divisible iff for all `n ‚â† 0` `y ‚àà A`, there is an `x ‚àà A`
such that `n ‚Ä¢ x = y`. In this file, we adpot a constructive approach, i.e. we ask for an explicit
`div_int : A ‚Üí ‚Ñ§ ‚Üí A` function such that `div_int a 0 = 0` and `n ‚Ä¢ div_int a n = a` for `n ‚â† 0`.

## Main results
* `add_comm_group.divisible_of_smul_surj` : the constructive definition of divisiblity is implied by
  the condition that `n ‚Ä¢ x = a` has solutions for all `n ‚â† 0` and `a ‚àà A`.
* `add_comm_group.smul_surj_of_divisible` : the constructive definition of divisiblity implies
  the condition that `n ‚Ä¢ x = a` has solutions for all `n ‚â† 0` and `a ‚àà A`.
* `add_comm_group.divisible_of_smul_top_eq_top` : the constructive definition of divisiblity is
  implied by the condition that `n ‚Ä¢ A = A` for all `n ‚â† 0`.
* `add_comm_group.smul_top_eq_top_of_divisible` : the constructive definition of divisiblity implies
  the condition that `n ‚Ä¢ A = A` for all `n ‚â† 0`.
* `add_comm_group.divisible_prod` : `A √ó B` is divisible for any divisible `A` and `B`.
* `add_comm_group.divisible_pi` : Any product of divisble group is divisible.
* `add_comm_group.divisible_of_char_zero` : Any field of characteristic zero is divisible.
* `add_comm_group.divisible_quotient` : Quotient group of divisible group is divisible.
* `add_comm_group.divisible_of_surj` : if `A` is divisible and `A ‚Üí+ B` is surjective, then `B` is
  divisible.
TODO: Show that divisibility implies injectivity in the category of `AddCommGroup`.
-/

open_locale pointwise

namespace add_monoid

variables (A Œ± : Type*) [add_monoid A] [has_scalar Œ± A] [has_zero Œ±]

/--
An `add_monoid A` is `Œ±`-divisible iff `n ‚Ä¢ x = a` has a solution for all `n ‚â† 0 ‚àà Œ±` and `a ‚àà A`.
Here we adpot a constructive approach where we ask an explicit `div : A ‚Üí Œ± ‚Üí A` function such that
* `div a 0 = 0` for all `a ‚àà A`
* `n ‚Ä¢ div a n = a` for all `n ‚â† 0 ‚àà Œ±` and `a ‚àà A`.
-/
class divisible_by :=
(div : A ‚Üí Œ± ‚Üí A)
(div_zero : ‚àÄ a, div a 0 = 0)
(div_cancel : ‚àÄ {n : Œ±} (a : A), n ‚â† 0 ‚Üí n ‚Ä¢ (div a n) = a)

lemma smul_surj_of_divisible_by [divisible_by A Œ±] {n : Œ±} (hn : n ‚â† 0) :
  function.surjective ((‚Ä¢) n : A ‚Üí A) :=
Œª x, ‚ü®divisible_by.div x n, divisible_by.div_cancel _ hn‚ü©

/--
An `add_monoid A` is `Œ±`-divisible iff `n ‚Ä¢ _` is a surjective function, i.e. the constructive
version implies the textbook approach.
-/
noncomputable def divisible_by_of_smul_surj
  [Œ† (n : Œ±), decidable (n = 0)]
  (H : ‚àÄ {n : Œ±}, n ‚â† 0 ‚Üí function.surjective ((‚Ä¢) n : A ‚Üí A)) :
  divisible_by A Œ± :=
{ div := Œª a n, dite (n = 0) (Œª _, 0) (Œª hn, (H hn a).some),
  div_zero := Œª _, dif_pos rfl,
  div_cancel := Œª n a hn, by rw [dif_neg hn, (H hn a).some_spec] }

section pi

variables {Œπ Œ≤ : Type*} (B : Œπ ‚Üí Type*) [Œ† (i : Œπ), add_monoid (B i)] [Œ† (i : Œπ), has_scalar Œ≤ (B i)]
variables [has_zero Œ≤] [Œ† i, divisible_by (B i) Œ≤]

instance divsible_by_pi : divisible_by (Œ† i, B i) Œ≤ :=
{ div := Œª x n i, (divisible_by.div (x i) n),
  div_zero := Œª x, funext $ Œª i, divisible_by.div_zero _,
  div_cancel := Œª n x hn, funext $ Œª i, divisible_by.div_cancel _ hn }

end pi

section prod

variables {Œ≤ B B' : Type*} [has_zero Œ≤] [add_monoid B] [add_monoid B']
variables [has_scalar Œ≤ B] [has_scalar Œ≤ B'] [divisible_by B Œ≤] [divisible_by B' Œ≤]

instance divisible_by_prod : divisible_by (B √ó B') Œ≤ :=
{ div := Œª p n, (divisible_by.div p.1 n, divisible_by.div p.2 n),
  div_zero := Œª p, prod.ext (divisible_by.div_zero _) (divisible_by.div_zero _),
  div_cancel := Œª n p hn, prod.ext (divisible_by.div_cancel _ hn) (divisible_by.div_cancel _ hn) }

end prod

end add_monoid

namespace monoid

variables (A Œ± : Type*) [monoid A] [has_pow A Œ±] [has_zero Œ±]

/--
A `monoid A` is `Œ±`-rootable iff `x‚Åø = a` has a solution for all `n ‚â† 0 ‚àà Œ±` and `a ‚àà A`.
Here we adpot a constructive approach where we ask an explicit `root : A ‚Üí Œ± ‚Üí A` function such that
* `root a 0 = 1` for all `a ‚àà A`
* `(root a n)‚Åø = a` for all `n ‚â† 0 ‚àà Œ±` and `a ‚àà A`.
-/
@[to_additive add_monoid.divisible_by]
class rootable_by :=
(root : A ‚Üí Œ± ‚Üí A)
(root_zero : ‚àÄ a, root a 0 = 1)
(root_pow : ‚àÄ {n : Œ±} (a : A), n ‚â† 0 ‚Üí (root a n)^n = a)

@[to_additive add_monoid.smul_surj_of_divisible_by]
lemma root_surj_of_rootable_by [rootable_by A Œ±] {n : Œ±} (hn : n ‚â† 0) :
  function.surjective ((flip (^)) n : A ‚Üí A) :=
Œª x, ‚ü®rootable_by.root x n, rootable_by.root_pow _ hn‚ü©

/--
A `monoid A` is `Œ±`-rootable iff the `pow _ n` function is surjective, i.e. the constructivec version
implies the textbook approach.
-/
@[to_additive add_monoid.divisible_by_of_smul_surj]
noncomputable def rootable_by_of_root_surj
  [Œ† (n : Œ±), decidable (n = 0)]
  (H : ‚àÄ {n : Œ±}, n ‚â† 0 ‚Üí function.surjective ((flip (^)) n : A ‚Üí A)) :
rootable_by A Œ± :=
{ root := Œª a n, dite (n = 0) (Œª _, 1) (Œª hn, (H hn a).some),
  root_zero := Œª _, dif_pos rfl,
  root_pow := Œª n a hn, by rw dif_neg hn; exact (H hn a).some_spec }

section pi

variables {Œπ Œ≤ : Type*} (B : Œπ ‚Üí Type*) [Œ† (i : Œπ), has_pow (B i) Œ≤]

instance has_pow_pi : has_pow (Œ† i, B i) Œ≤ :=
{ pow := Œª x n i, (x i)^n }

variables [has_zero Œ≤] [Œ† (i : Œπ), monoid (B i)] [Œ† i, rootable_by (B i) Œ≤]

instance rootable_by_pi : rootable_by (Œ† i, B i) Œ≤ :=
{ root := Œª x n i, rootable_by.root (x i) n,
  root_zero := Œª x, funext $ Œª i, rootable_by.root_zero _,
  root_pow := Œª n x hn, funext $ Œª i, rootable_by.root_pow _ hn }

end pi

section prod

variables {Œ≤ B B' : Type*} [has_pow B Œ≤] [has_pow B' Œ≤]

instance has_pow_prod : has_pow (B √ó B') Œ≤ :=
{ pow := Œª p n, (p.1^n, p.2^n) }

variables [has_zero Œ≤] [monoid B] [monoid B'] [rootable_by B Œ≤] [rootable_by B' Œ≤]

instance rootable_by_prod : rootable_by (B √ó B') Œ≤ :=
{ root := Œª p n, (rootable_by.root p.1 n, rootable_by.root p.2 n),
  root_zero := Œª p, prod.ext (rootable_by.root_zero _) (rootable_by.root_zero _),
  root_pow := Œª n p hn, prod.ext (rootable_by.root_pow _ hn) (rootable_by.root_pow _ hn) }

end prod

end monoid

namespace add_group

open add_monoid

variables (A : Type*) [add_group A]

/--
An add_group is `‚Ñ§` divisible if it is `‚Ñï`-divisible.
-/
def divisible_by_int_of_divisible_by_nat [divisible_by A ‚Ñï] :
  divisible_by A ‚Ñ§ :=
{ div := Œª a z, match z with
  | int.of_nat m := divisible_by.div a m
  | int.neg_succ_of_nat m := - divisible_by.div a (m + 1)
  end,
  div_zero := Œª a, divisible_by.div_zero a,
  div_cancel := Œª z a hn, begin
    cases z,
    { norm_num,
      change z ‚Ä¢ (divisible_by.div _ _) = _,
      rw divisible_by.div_cancel _ _,
      rw [int.of_nat_eq_coe] at hn,
      exact_mod_cast hn, },
    { norm_num,
      change - ((z+1) ‚Ä¢ - (divisible_by.div _ _)) = _,
      have := nsmul_zero_sub (divisible_by.div a (z + 1)) (z + 1),
      rw [zero_sub, zero_sub] at this,
      rw [this, neg_neg, divisible_by.div_cancel],
      norm_num, },
  end}

/--
An add_group is `‚Ñï`-divisible if it is `‚Ñ§`-divisible.
-/
def divisible_by_nat_of_divisible_by_int [divisible_by A ‚Ñ§] :
  divisible_by A ‚Ñï :=
{ div := Œª a n, divisible_by.div a (n : ‚Ñ§),
  div_zero := Œª a, divisible_by.div_zero a,
  div_cancel := Œª n a hn, begin
    have := divisible_by.div_cancel a (by exact_mod_cast hn : (n : ‚Ñ§) ‚â† 0),
    norm_num at this,
    assumption,
  end }

end add_group

namespace add_comm_group

open add_monoid

variables (A : Type*) [add_comm_group A]

lemma smul_top_eq_top_of_divisible_by_int [divisible_by A ‚Ñ§] {n : ‚Ñ§} (hn : n ‚â† 0) :
  n ‚Ä¢ (‚ä§ : add_subgroup A) = ‚ä§ :=
add_subgroup.map_top_of_surjective _ $ Œª a, ‚ü®divisible_by.div a n, divisible_by.div_cancel _ hn‚ü©

noncomputable lemma divisible_by_int_of_smul_top_eq_top
  (H : ‚àÄ {n : ‚Ñ§} (hn : n ‚â† 0), n ‚Ä¢ (‚ä§ : add_subgroup A) = ‚ä§) :
  divisible_by A ‚Ñ§ :=
{ div := Œª a n, dite (n = 0) (Œª _, 0)
    (Œª hn, (show a ‚àà n ‚Ä¢ (‚ä§ : add_subgroup A), by rw [H hn]; trivial).some),
  div_zero := Œª a, dif_pos rfl,
  div_cancel := Œª n a hn, begin
    rw [dif_neg hn],
    generalize_proofs h1,
    exact h1.some_spec.2,
  end }

@[priority 100]
instance divisible_of_char_zero {ùïú} [division_ring ùïú] [char_zero ùïú] : divisible_by ùïú ‚Ñ§ :=
{ div := Œª q n, q / n,
  div_zero := Œª q, by norm_num,
  div_cancel := Œª n q hn,
    by rw [zsmul_eq_mul, (int.cast_commute n _).eq, div_mul_cancel q (int.cast_ne_zero.mpr hn)] }

section quotient

variables {B : add_subgroup A} [divisible_by A ‚Ñï]

noncomputable instance divisible_by_quotient : divisible_by (A ‚ß∏ B) ‚Ñï :=
add_monoid.divisible_by_of_smul_surj _ _ $ Œª n hn x, quotient.induction_on' x $ Œª a,
  ‚ü®quotient.mk' (divisible_by.div a n),
    (congr_arg _ (divisible_by.div_cancel _ hn) : quotient.mk' _ = _)‚ü©

end quotient

section hom

variables {A} [divisible_by A ‚Ñï] {B : Type*} [add_comm_group B] (f : A ‚Üí+ B)

noncomputable instance divisible_by_of_surj (hf : function.surjective f) : divisible_by B ‚Ñï :=
add_monoid.divisible_by_of_smul_surj _ _ $ Œª n hn x,
  ‚ü®f $ divisible_by.div (hf x).some n, by rw [‚Üêf.map_nsmul (divisible_by.div (hf x).some n) n,
    divisible_by.div_cancel _ hn, (hf x).some_spec]‚ü©

end hom


end add_comm_group

namespace group

open monoid

variables (A : Type*) [group A]

/--
A group is `‚Ñ§`-rootable if it is `‚Ñï`-rootable.
-/
def rootable_by_int_of_rootable_by_nat [rootable_by A ‚Ñï] :
  rootable_by A ‚Ñ§ :=
{ root := Œª a z, match z with
  | int.of_nat n := rootable_by.root a n
  | int.neg_succ_of_nat n := (rootable_by.root a (n + 1))‚Åª¬π
  end,
  root_zero := Œª a, rootable_by.root_zero a,
  root_pow := Œª n a hn, begin
    induction n,
    { change (rootable_by.root a _) ^ _ = a,
      norm_num,
      rw [rootable_by.root_pow],
      rw [int.of_nat_eq_coe] at hn,
      exact_mod_cast hn, },
    { change ((rootable_by.root a _) ‚Åª¬π)^_ = a,
      norm_num,
      rw [rootable_by.root_pow],
      norm_num, }
  end}

attribute [to_additive group.rootable_by_int_of_rootable_by_nat]
  add_group.divisible_by_int_of_divisible_by_nat

/--
A group is `‚Ñ§`-rootable if it is `‚Ñï`-rootable
-/
def rootable_by_nat_of_rootable_by_int [rootable_by A ‚Ñ§] :
  rootable_by A ‚Ñï :=
{ root := Œª a n, rootable_by.root a (n : ‚Ñ§),
  root_zero := Œª a, rootable_by.root_zero a,
  root_pow := Œª n a hn, begin
    have := rootable_by.root_pow a (show (n : ‚Ñ§) ‚â† 0, by exact_mod_cast hn),
    norm_num at this,
    exact this,
  end }

attribute [to_additive group.rootable_by_nat_of_rootable_by_int]
  add_group.divisible_by_nat_of_divisible_by_int

end group

namespace comm_group

open monoid

section quotient

variables (A : Type*) [comm_group A] (B : subgroup A)

noncomputable instance rootable_by_quotient [rootable_by A ‚Ñï] : rootable_by (A ‚ß∏ B) ‚Ñï :=
rootable_by_of_root_surj _ _ $ Œª n hn x, quotient.induction_on' x $ Œª a,
  ‚ü®quotient.mk' (rootable_by.root a n),
    (congr_arg _ $ rootable_by.root_pow _ hn : quotient.mk' _ = _)‚ü©

attribute [to_additive rootable_by_quotient] add_comm_group.divisible_by_quotient

end quotient

section hom

variables {A B : Type*} [comm_group A] [comm_group B] [rootable_by A ‚Ñï] (f : A ‚Üí* B)

noncomputable instance rootable_by_of_surj (hf : function.surjective f) : rootable_by B ‚Ñï :=
rootable_by_of_root_surj _ _ $ Œª n hn x,
  ‚ü®f $ rootable_by.root (hf x).some n, (by rw [‚Üêf.map_pow (rootable_by.root (hf x).some n) n,
    rootable_by.root_pow _ hn, (hf x).some_spec] : _ ^ _ = x)‚ü©

end hom

end comm_group
