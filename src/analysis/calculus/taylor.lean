/-
Copyright (c) 2022 Moritz Doll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Moritz Doll
-/

import analysis.calculus.iterated_deriv
import analysis.calculus.mean_value
import measure_theory.integral.interval_integral
import data.polynomial.basic

/-!
# Taylor's theorem

This file defines the Taylor polynomial of a real function `f : ‚Ñù ‚Üí ‚Ñù`
and proves Taylor's theorem, which states that if `f` is suffiently smooth
`f` can be approximated by the Taylor polynomial up to an explicit error term.

## Main definitions

* `taylor_coeff_within`: the Taylor coefficient using `deriv_within`
* `taylor_within`: the Taylor polynomial using `deriv_within`

## Main statements

* `taylor_mean_remainder`: Taylor's theorem with the general form of the remainder term
* `taylor_mean_remainder_lagrange`: Taylor's theorem with the Lagrange remainder
* `taylor_mean_remainder_cauchy`: Taylor's theorem with the Cauchy remainder

## TODO

* the Peano form of the remainder
* the integral form of the remainder
* Generalization to higher dimensions

## Tags

Taylor polynomial, Taylor's theorem
-/


open_locale big_operators interval topological_space

variables {ùïú E F : Type*}

/-- The `k`th coefficient of the Taylor polynomial. -/
noncomputable
def taylor_coeff (f : ‚Ñù ‚Üí ‚Ñù) (k : ‚Ñï) (s : set ‚Ñù) (x‚ÇÄ : ‚Ñù) : ‚Ñù :=
(iterated_deriv_within k f s x‚ÇÄ) / k.factorial

/-- The Taylor polynomial. -/
noncomputable
def taylor_polynomial (f : ‚Ñù ‚Üí ‚Ñù) (n : ‚Ñï) (s : set ‚Ñù) (x‚ÇÄ : ‚Ñù) : polynomial ‚Ñù :=
(finset.range (n+1)).sum (Œª k, (polynomial.monomial k (taylor_coeff f k s x‚ÇÄ)).comp
  (polynomial.X - polynomial.C x‚ÇÄ))

lemma taylor_polynomial_succ {f : ‚Ñù ‚Üí ‚Ñù} {n : ‚Ñï} {s : set ‚Ñù} {x‚ÇÄ : ‚Ñù} :
  taylor_polynomial f (n+1) s x‚ÇÄ = taylor_polynomial f n s x‚ÇÄ
  + (polynomial.monomial (n+1) (taylor_coeff f (n+1) s x‚ÇÄ)).comp (polynomial.X - polynomial.C x‚ÇÄ) :=
begin
  dunfold taylor_polynomial,
  rw finset.sum_range_succ,
end

/-- The evaluation of the Taylor polynomial. -/
noncomputable
def taylor_sum (f : ‚Ñù ‚Üí ‚Ñù) (n : ‚Ñï) (s : set ‚Ñù) (x‚ÇÄ x : ‚Ñù) : ‚Ñù :=
(taylor_polynomial f n s x‚ÇÄ).eval x

lemma div_mul_comm' (a b : ‚Ñù) {c : ‚Ñù} (hc : c ‚â† 0) : a / c * b = a * b / c :=
by rw [eq_div_iff hc, mul_assoc, mul_comm b c, ‚Üêmul_assoc, div_mul_cancel a hc]

@[simp] lemma taylor_sum_succ {f : ‚Ñù ‚Üí ‚Ñù} {n : ‚Ñï} {s : set ‚Ñù} {x‚ÇÄ x : ‚Ñù} :
  taylor_sum f (n+1) s x‚ÇÄ x = taylor_sum f n s x‚ÇÄ x
    + iterated_deriv_within (n + 1) f s x‚ÇÄ
    * (x - x‚ÇÄ) ^ (n + 1) / ((‚Üën + 1) * ‚Üë(n.factorial)) :=
begin
  dunfold taylor_sum,
  rw [taylor_polynomial_succ, polynomial.eval_add],
  simp only [add_right_inj, taylor_coeff, polynomial.eval_comp, polynomial.eval_monomial,
    nat.factorial_succ, nat.cast_mul, nat.cast_add, nat.cast_one, polynomial.eval_sub,
    polynomial.eval_X, polynomial.eval_C],
  refine div_mul_comm' _ _ _,
  refine mul_ne_zero (nat.cast_add_one_ne_zero n) _,
  rw nat.cast_ne_zero,
  exact nat.factorial_ne_zero n,
end

/-- The Taylor polynomial of order zero evaluates to `f x`. -/
@[simp] lemma taylor_sum_zero {f : ‚Ñù ‚Üí ‚Ñù} {s : set ‚Ñù} {x‚ÇÄ x : ‚Ñù} :
  taylor_sum f 0 s x‚ÇÄ x = f x‚ÇÄ :=
begin
  dunfold taylor_sum,
  dunfold taylor_polynomial,
  dunfold taylor_coeff,
  simp,
end

/-- Evaluating the Taylor polynomial at `x = x‚ÇÄ` yields `f x`. -/
@[simp] lemma taylor_sum_self {f : ‚Ñù ‚Üí ‚Ñù} {n : ‚Ñï} {s : set ‚Ñù} {x‚ÇÄ : ‚Ñù} :
  taylor_sum f n s x‚ÇÄ x‚ÇÄ = f x‚ÇÄ :=
begin
  induction n with k hk,
  { exact taylor_sum_zero },
  simp [hk]
end

lemma taylor_polynomial_apply {f : ‚Ñù ‚Üí ‚Ñù} {n : ‚Ñï} {s : set ‚Ñù} {x‚ÇÄ x : ‚Ñù} : taylor_sum f n s x‚ÇÄ x =
  ‚àë k in finset.range (n+1), (iterated_deriv_within k f s x‚ÇÄ)
    * (x - x‚ÇÄ)^k / k.factorial :=
begin
  induction n with k hk,
  { simp },
  rw [taylor_sum_succ, finset.sum_range_succ, hk],
  simp,
end

/-- If `f` is `n` times continuous differentiable, then the Taylor polynomial is continuous in the
  second variable. -/
lemma taylor_sum_continuous_on {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ x : ‚Ñù} {n : ‚Ñï} (hx : x‚ÇÄ < x)
  (hf : cont_diff_on ‚Ñù n f (set.Icc x‚ÇÄ x)) :
  continuous_on (Œª t, taylor_sum f n (set.Icc x‚ÇÄ x) t x) (set.Icc x‚ÇÄ x) :=
begin
  simp_rw taylor_polynomial_apply,
  refine continuous_on_finset_sum (finset.range (n+1)) (Œª i hi, _),
  refine (continuous_on.mul _ ((continuous_on_const.sub continuous_on_id).pow _)).mul
    continuous_on_const,
  rw cont_diff_on_iff_continuous_on_differentiable_on_deriv (unique_diff_on_Icc hx) at hf,
  cases hf,
  specialize hf_left i,
  simp only [finset.mem_range] at hi,
  refine (hf_left _),
  simp only [with_top.coe_le_coe],
  exact nat.lt_succ_iff.mp hi,
end

lemma monomial_has_deriv (t x : ‚Ñù) {n : ‚Ñï} :
  has_deriv_at (Œª y, (x - y)^(n+1)) ((-(n+1) * (x - t)^n)) t :=
begin
  simp_rw sub_eq_neg_add,
  rw [‚Üêneg_one_mul, mul_comm (-1 : ‚Ñù), mul_assoc, mul_comm (-1 : ‚Ñù), ‚Üêmul_assoc],
  convert @has_deriv_at.pow _ _ _ _ _ (n+1) ((has_deriv_at_id t).neg.add_const x),
  simp only [nat.cast_add, nat.cast_one],
end

theorem cont_diff_on.of_succ [nondiscrete_normed_field ùïú] [normed_group E]
  [normed_space ùïú E] [normed_group F] [normed_space ùïú F] {s : set E} {f : E ‚Üí F} {n : ‚Ñï}
  (hs : unique_diff_on ùïú s) (h : cont_diff_on ùïú (‚Üën + 1) f s) :
  cont_diff_on ùïú ‚Üën f s :=
begin
  rw cont_diff_on_iff_continuous_on_differentiable_on hs at ‚ä¢ h,
  cases h,
  split; intros m hm,
  { refine h_left m (hm.trans _),
    rw [‚Üêwith_top.coe_one, ‚Üêwith_top.coe_add, with_top.coe_le_coe, le_add_iff_nonneg_right],
    exact zero_le' },
  refine h_right m (hm.trans _),
  rw [‚Üêwith_top.coe_one, ‚Üêwith_top.coe_add, with_top.coe_lt_coe, lt_add_iff_pos_right,
    nat.lt_one_iff],
end

lemma taylor_coeff_has_deriv {f : ‚Ñù ‚Üí ‚Ñù} {x y : ‚Ñù} {k : ‚Ñï} {s s' : set ‚Ñù}
  (hs : unique_diff_within_at ‚Ñù s y) (hs' : s' ‚àà ùìù y)
  (hf' : differentiable_on ‚Ñù (iterated_deriv_within (k+1) f s) s') :
  has_deriv_at (Œª t, iterated_deriv_within (k+1) f s t
    * (x - t)^(k+1) / ((k+1)* k.factorial))
    (iterated_deriv_within (k+2) f s y * (x - y)^(k+1) / ((k+1)* k.factorial) -
    iterated_deriv_within (k+1) f s y * (x - y)^k / k.factorial) y :=
begin
  have hf'' : has_deriv_at (Œª t, iterated_deriv_within (k+1) f s t)
    (iterated_deriv_within (k+2) f s y) y :=
  begin
    convert hf'.has_deriv_at hs',
    rw @iterated_deriv_within_succ _ _ _ _ _ (k.succ) _ _ _ hs,
    exact (hf'.differentiable_at hs').deriv_within hs,
  end,
  convert (hf''.mul (monomial_has_deriv y x)).div_const ((k+1)* k.factorial),
  rw [sub_eq_neg_add, add_comm, add_div, add_right_inj, ‚Üêneg_one_mul, ‚Üêneg_one_mul (‚Üëk+1 : ‚Ñù)],
  rw [mul_assoc, mul_comm (‚Üëk+1 : ‚Ñù) ((x - y) ^ k), mul_comm (‚Üëk+1 : ‚Ñù), ‚Üêmul_assoc, ‚Üêmul_assoc],
  rw mul_div_mul_right,
  { simp[neg_div] },
  exact nat.cast_add_one_ne_zero k,
end

/-- Calculate the derivative of the Taylor polynomial with respect to `x‚ÇÄ`. -/
lemma taylor_sum_has_deriv {f : ‚Ñù ‚Üí ‚Ñù} {x x‚ÇÄ t : ‚Ñù} {n : ‚Ñï}
  (hx : x‚ÇÄ < x) (ht : t ‚àà set.Ioo x‚ÇÄ x)
  (hf : cont_diff_on ‚Ñù n f (set.Icc x‚ÇÄ x))
  (hf' : differentiable_on ‚Ñù (iterated_deriv_within n f (set.Icc x‚ÇÄ x)) (set.Ioo x‚ÇÄ x)) :
  has_deriv_at (Œª t', taylor_sum f n (set.Icc x‚ÇÄ x) t' x)
    ((iterated_deriv_within (n+1) f (set.Icc x‚ÇÄ x) t) * (x - t)^n /n.factorial) t :=
begin
  have ht' := is_open.mem_nhds is_open_Ioo ht,
  have unique_Icc := ((unique_diff_within_at_Ioo ht).mono set.Ioo_subset_Icc_self),
  induction n with k hk,
  { simp only [taylor_sum_zero, iterated_deriv_one, pow_zero, mul_one, nat.factorial_zero,
      nat.cast_one, div_one, has_deriv_at_deriv_iff, zero_add],
    simp only [iterated_deriv_within_zero] at hf',
    rw iterated_deriv_within_one (unique_diff_on_Icc hx)
      (set.mem_of_subset_of_mem set.Ioo_subset_Icc_self ht),
    rw (hf'.differentiable_at ht').deriv_within unique_Icc,
    exact (hf'.differentiable_at ht').has_deriv_at },
  simp_rw [nat.add_succ, taylor_sum_succ],
  simp only [add_zero, nat.factorial_succ, nat.cast_mul, nat.cast_add, nat.cast_one],
  have hdiff : differentiable_on ‚Ñù (iterated_deriv_within k f (set.Icc x‚ÇÄ x)) (set.Ioo x‚ÇÄ x) :=
  begin
    have coe_lt_succ : (‚Üëk : with_top ‚Ñï) < k.succ :=
    by { rw [with_top.coe_lt_coe], exact lt_add_one k },
    refine differentiable_on.mono _ set.Ioo_subset_Icc_self,
    exact hf.differentiable_on_iterated_deriv_within coe_lt_succ (unique_diff_on_Icc hx),
  end,
  specialize hk (cont_diff_on.of_succ (unique_diff_on_Icc hx) hf) hdiff,
  convert hk.add (taylor_coeff_has_deriv unique_Icc ht' hf'),
  exact (add_sub_cancel'_right _ _).symm,
end

/-- **Taylor's theorem** with the general mean value form of the remainder. -/
lemma taylor_mean_remainder {f g g' : ‚Ñù ‚Üí ‚Ñù} {x x‚ÇÄ : ‚Ñù} {n : ‚Ñï}
  (hf : cont_diff_on ‚Ñù n f (set.Icc x‚ÇÄ x))
  (hf' : differentiable_on ‚Ñù (iterated_deriv_within n f (set.Icc x‚ÇÄ x)) (set.Ioo x‚ÇÄ x))
  (hx : x‚ÇÄ < x)
  (gcont : continuous_on g (set.Icc x‚ÇÄ x))
  (gdiff : ‚àÄ (x_1 : ‚Ñù), x_1 ‚àà set.Ioo x‚ÇÄ x ‚Üí has_deriv_at g (g' x_1) x_1)
  (g'_ne : ‚àÄ (x_1 : ‚Ñù), x_1 ‚àà set.Ioo x‚ÇÄ x ‚Üí g' x_1 ‚â† 0) :
  ‚àÉ (x' : ‚Ñù) (hx' : x' ‚àà set.Ioo x‚ÇÄ x), f x - taylor_sum f n (set.Icc x‚ÇÄ x) x‚ÇÄ x =
  (iterated_deriv_within (n+1) f (set.Icc x‚ÇÄ x) x') * (x - x')^n /n.factorial * (g x - g x‚ÇÄ) / g' x'
  :=
begin
  rcases exists_ratio_has_deriv_at_eq_ratio_slope (Œª t, taylor_sum f n (set.Icc x‚ÇÄ x) t x)
    (Œª t, (iterated_deriv_within (n+1) f (set.Icc x‚ÇÄ x) t) * (x - t)^n /n.factorial) hx
    (taylor_sum_continuous_on hx hf) (Œª _ hy, taylor_sum_has_deriv hx hy hf hf')
    g g' gcont gdiff with ‚ü®y, hy, h‚ü©,
  use [y, hy],
  simp only [taylor_sum_self] at h,
  rw [mul_comm, ‚Üêdiv_left_inj' (g'_ne y hy), mul_div_cancel _ (g'_ne y hy)] at h,
  exact h.symm,
end

/-- **Taylor's theorem** with the Lagrange form of the remainder. -/
lemma taylor_mean_remainder_lagrange {f : ‚Ñù ‚Üí ‚Ñù} {x x‚ÇÄ : ‚Ñù} {n : ‚Ñï}
  (hf : cont_diff_on ‚Ñù n f (set.Icc x‚ÇÄ x))
  (hf' : differentiable_on ‚Ñù (iterated_deriv_within n f (set.Icc x‚ÇÄ x)) (set.Ioo x‚ÇÄ x))
  (hx : x‚ÇÄ < x) :
  ‚àÉ (x' : ‚Ñù) (hx' : x' ‚àà set.Ioo x‚ÇÄ x), f x - taylor_sum f n (set.Icc x‚ÇÄ x) x‚ÇÄ x =
  (iterated_deriv_within (n+1) f (set.Icc x‚ÇÄ x) x') * (x - x‚ÇÄ)^(n+1) /(n+1).factorial :=
begin
  have gcont : continuous_on (Œª (t : ‚Ñù), (x - t) ^ (n + 1)) (set.Icc x‚ÇÄ x) :=
  by { refine continuous.continuous_on _, continuity },
  have xy_ne : ‚àÄ (y : ‚Ñù), y ‚àà set.Ioo x‚ÇÄ x ‚Üí (x - y)^n ‚â† 0 :=
  begin
    intros y hy,
    refine pow_ne_zero _ _,
    rw [set.mem_Ioo] at hy,
    rw sub_ne_zero,
    exact hy.2.ne.symm,
  end,
  have hg' : ‚àÄ (y : ‚Ñù), y ‚àà set.Ioo x‚ÇÄ x ‚Üí -(‚Üën + 1) * (x - y) ^ n ‚â† 0 :=
  Œª y hy, mul_ne_zero (neg_ne_zero.mpr (nat.cast_add_one_ne_zero n)) (xy_ne y hy),
  rcases taylor_mean_remainder hf hf' hx gcont (Œª y _, monomial_has_deriv y x) hg' with ‚ü®y, hy, h‚ü©,
  use [y, hy],
  simp only [sub_self, zero_pow', ne.def, nat.succ_ne_zero, not_false_iff, zero_sub, mul_neg] at h,
  rw [h, neg_div, ‚Üêdiv_neg, neg_mul, neg_neg],
  field_simp,
  rw [mul_assoc, mul_comm ((x - y)^n), ‚Üêmul_assoc, ‚Üêmul_assoc, mul_comm (‚Üën+1 : ‚Ñù),
    mul_div_mul_right _ _ (xy_ne y hy)]
end

/-- **Taylor's theorem** with the Cauchy form of the remainder. -/
lemma taylor_mean_remainder_cauchy {f : ‚Ñù ‚Üí ‚Ñù} {x x‚ÇÄ : ‚Ñù} {n : ‚Ñï}
  (hf : cont_diff_on ‚Ñù n f (set.Icc x‚ÇÄ x))
  (hf' : differentiable_on ‚Ñù (iterated_deriv_within n f (set.Icc x‚ÇÄ x)) (set.Ioo x‚ÇÄ x))
  (hx : x‚ÇÄ < x) :
  ‚àÉ (x' : ‚Ñù) (hx' : x' ‚àà set.Ioo x‚ÇÄ x), f x - taylor_sum f n (set.Icc x‚ÇÄ x) x‚ÇÄ x =
  (iterated_deriv_within (n+1) f (set.Icc x‚ÇÄ x) x') * (x - x')^n /n.factorial * (x - x‚ÇÄ) :=
begin
  have gcont : continuous_on id (set.Icc x‚ÇÄ x) :=
  by { refine continuous.continuous_on _, continuity },
  have gdiff : (‚àÄ (x_1 : ‚Ñù), x_1 ‚àà set.Ioo x‚ÇÄ x ‚Üí has_deriv_at id
    ((Œª (t : ‚Ñù), (1 : ‚Ñù)) x_1) x_1) := Œª _ _, has_deriv_at_id _,
  rcases taylor_mean_remainder hf hf' hx gcont gdiff (Œª _ _, by simp) with ‚ü®y, hy, h‚ü©,
  use [y, hy],
  simp only [id.def, div_one] at h,
  exact h,
end
