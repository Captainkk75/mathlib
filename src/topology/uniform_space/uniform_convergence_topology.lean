/-
Copyright (c) 2022 Anatole Dedecker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anatole Dedecker
-/
import topology.uniform_space.uniform_convergence

/-!
# TODO
-/
noncomputable theory
open_locale topological_space classical uniformity filter

open set filter

namespace uniform_convergence

variables (Œ± : Type*) {Œ≤ Œ≥ Œπ : Type*} [uniform_space Œ≤]
variables {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : set Œ±} {x : Œ±} {p : filter Œπ} {g : Œπ ‚Üí Œ±}

protected def gen (V : set (Œ≤ √ó Œ≤)) : set ((Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤)) :=
  {uv : (Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤) | ‚àÄ x, (uv.1 x, uv.2 x) ‚àà V}

protected lemma is_basis_gen : is_basis (Œª V : set (Œ≤ √ó Œ≤), V ‚àà ùì§ Œ≤) (uniform_convergence.gen Œ±) :=
‚ü®‚ü®univ, univ_mem‚ü©, Œª U V hU hV, ‚ü®U ‚à© V, inter_mem hU hV, Œª uv huv,
  ‚ü®Œª x, (huv x).left, Œª x, (huv x).right‚ü©‚ü©‚ü©

protected def uniformity_basis : filter_basis ((Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤)) :=
(uniform_convergence.is_basis_gen Œ±).filter_basis

protected def uniform_core : uniform_space.core (Œ± ‚Üí Œ≤) :=
uniform_space.core.mk_of_basis (uniform_convergence.uniformity_basis Œ±)
  (Œª U ‚ü®V, hV, hVU‚ü© f, hVU ‚ñ∏ Œª x, refl_mem_uniformity hV)
  (Œª U ‚ü®V, hV, hVU‚ü©, hVU ‚ñ∏ ‚ü®uniform_convergence.gen Œ± (prod.swap ‚Åª¬π' V),
    ‚ü®prod.swap ‚Åª¬π' V, tendsto_swap_uniformity hV, rfl‚ü©, Œª uv huv x, huv x‚ü©)
  (Œª U ‚ü®V, hV, hVU‚ü©, hVU ‚ñ∏ let ‚ü®W, hW, hWV‚ü© := comp_mem_uniformity_sets hV in
    ‚ü®uniform_convergence.gen Œ± W, ‚ü®W, hW, rfl‚ü©, Œª uv ‚ü®w, huw, hwv‚ü© x, hWV
      ‚ü®w x, by exact ‚ü®huw x, hwv x‚ü©‚ü©‚ü©)

protected def uniform_space : uniform_space (Œ± ‚Üí Œ≤) :=
uniform_space.of_core (uniform_convergence.uniform_core Œ±)

end uniform_convergence

namespace uniform_convergence_on

variables {Œ± : Type*} {Œ≤ Œ≥ Œπ : Type*} [uniform_space Œ≤] (ùîñ : set (set Œ±))
variables {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : set Œ±} {x : Œ±} {p : filter Œπ} {g : Œπ ‚Üí Œ±}

protected def restrict (S : set Œ±) (f : Œ± ‚Üí Œ≤) : S ‚Üí Œ≤ :=
f ‚àò coe

variables {Œ±}

def uniform_space : uniform_space (Œ± ‚Üí Œ≤) :=
‚®Ö (S : set Œ±) (hS : S ‚àà ùîñ), uniform_space.comap (Œª f, f ‚àò coe) (uniform_convergence.uniform_space S)

end uniform_convergence_on
