/-
Copyright (c) 2022 Moritz Doll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Moritz Doll
-/

import analysis.calculus.cont_diff
import analysis.inner_product_space.basic
import analysis.normed_space.basic
import analysis.normed_space.operator_norm
import analysis.asymptotics.superpolynomial_decay
import algebra.big_operators.fin
import analysis.seminorm
import analysis.normed_space.multilinear

/-!
# Schwartz

## Main definitions

* `foo_bar`

## Main statements

* `foo_bar_unique`

## Notation



## Implementation details



## References

* [F. Bar, *Quuxes*][bibkey]

## Tags

Foobars, barfoos
-/

open filter
open_locale big_operators ennreal nnreal

variables {R E F Œπ : Type*}
variables [normed_add_comm_group E] [normed_space ‚Ñù E]
variables [normed_add_comm_group F] [normed_space ‚Ñù F]

variables (E F)

/-- A function is a Schwartz function if it is smooth and all derivatives decay faster than
  any power of ‚à•x‚à•. -/
structure schwartz :=
  (to_fun : E ‚Üí F)
  (smooth' : cont_diff ‚Ñù ‚ä§ to_fun)
  (decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ (C : ‚Ñù) (hC : 0 < C), ‚àÄ x, ‚à•x‚à•^k * ‚à•iterated_fderiv ‚Ñù n to_fun x‚à• ‚â§ C)

variables {E F}

namespace schwartz

-- General nonsense for `fun_like` structures

instance fun_like : fun_like (schwartz E F) E (Œª _, F) :=
{ coe := Œª f, f.to_fun,
  coe_injective' := Œª f g h, by cases f; cases g; congr' }

/-- Helper instance for when there's too many metavariables to apply `fun_like.has_coe_to_fun`. -/
instance : has_coe_to_fun (schwartz E F) (Œª _, E ‚Üí F) := ‚ü®Œª p, p.to_fun‚ü©

def decay (f : schwartz E F) (k n : ‚Ñï) : ‚àÉ (C : ‚Ñù) (hC : 0 < C),
  ‚àÄ x, ‚à•x‚à•^k * ‚à•iterated_fderiv ‚Ñù n f x‚à• ‚â§ C :=
f.decay' k n

def smooth (f : schwartz E F) : cont_diff ‚Ñù ‚ä§ f := f.smooth'

@[ext] lemma ext {f g : schwartz E F} (h : ‚àÄ x, (f : E ‚Üí F) x = g x) : f = g := fun_like.ext f g h

section aux

lemma seminorm_add_le_aux (k n : ‚Ñï) (f g : schwartz E F) (x : E) :
  ‚à•x‚à•^k * ‚à•iterated_fderiv ‚Ñù n (f+g) x‚à• ‚â§
  ‚à•x‚à•^k * ‚à•iterated_fderiv ‚Ñù n f x‚à•
  + ‚à•x‚à•^k * ‚à•iterated_fderiv ‚Ñù n g x‚à• :=
begin
  rw ‚Üêmul_add,
  refine mul_le_mul rfl.le _ (by positivity) (by positivity),
  convert norm_add_le _ _,
  -- need lemma iterated_fderiv_add
  sorry,
end

end aux

section seminorms

variables (e : basis Œπ ‚Ñù E) (i : Œπ) (x : E) (n : ‚Ñï) (a : fin n ‚Üí Œπ)
variables (f : E ‚Üí F) (f': E ‚Üí ‚ÑÇ )

#check iterated_fderiv ‚Ñù n f x (e ‚àò a)
#check finset.univ.prod (Œª i, ‚à•e (a i)‚à•)


variables [has_smul ‚Ñù F]

@[protected]
noncomputable
def seminorm (k n : ‚Ñï) (f : schwartz E F) : ‚Ñù :=
Inf {c | 0 ‚â§ c ‚àß ‚àÄ x, ‚à•x‚à•^k * ‚à•iterated_fderiv ‚Ñù n f x‚à• ‚â§ c}

lemma bounds_nonempty (k n : ‚Ñï) (f : schwartz E F) :
  ‚àÉ (c : ‚Ñù), c ‚àà {c : ‚Ñù | 0 ‚â§ c ‚àß ‚àÄ (x : E), ‚à•x‚à•^k * ‚à•iterated_fderiv ‚Ñù n f x‚à• ‚â§ c} :=
let ‚ü®M, hMp, hMb‚ü© := f.decay k n in ‚ü®M, le_of_lt hMp, hMb‚ü©

lemma bounds_bdd_below (k n : ‚Ñï) (f : schwartz E F) :
  bdd_below { c | 0 ‚â§ c ‚àß ‚àÄ x, ‚à•x‚à•^k * ‚à•iterated_fderiv ‚Ñù n f x‚à• ‚â§ c } :=
‚ü®0, Œª _ ‚ü®hn, _‚ü©, hn‚ü©

/-- If one controls the norm of every `A x`, then one controls the norm of `A`. -/
lemma seminorm_le_bound (k n : ‚Ñï) (f : schwartz E F) {M : ‚Ñù} (hMp: 0 ‚â§ M)
  (hM : ‚àÄ x, ‚à•x‚à•^k * ‚à•iterated_fderiv ‚Ñù n f x‚à• ‚â§ M) :
  f.seminorm k n ‚â§ M :=
cInf_le (bounds_bdd_below k n f) ‚ü®hMp, hM‚ü©

lemma op_norm_nonneg (k n : ‚Ñï) (f : schwartz E F) : 0 ‚â§ f.seminorm k n :=
le_cInf (bounds_nonempty k n f) (Œª _ ‚ü®hx, _‚ü©, hx)

end seminorms

section smul

variables [semiring R] [module R ‚Ñù] [module R F] [smul_comm_class ‚Ñù R F]
variables [has_continuous_const_smul R F] [has_coe R ‚Ñù]
--[distrib_mul_action R ùïú] [smul_comm_class ùïú R F] [has_continuous_const_smul R F]

variables (r : R)
#check ‚à•(r : ‚Ñù)‚à•

instance : has_smul R (schwartz E F) :=
‚ü®Œª c f, { to_fun := c ‚Ä¢ f,
  smooth' := sorry,
  decay' := Œª k n, begin
    rcases f.decay k n with ‚ü®C, hC, hf‚ü©,
    refine ‚ü®C, by positivity, _‚ü©,
    intros x,
    specialize hf x,
    refine has_le.le.trans _ hf,
    refine mul_le_mul_of_nonneg_left _ (by positivity),
    sorry,
  end}‚ü©
-- need iterated_fderiv_const_smul


end smul


instance : has_zero (schwartz E F) :=
‚ü®{ to_fun := Œª _, 0,
  smooth' := cont_diff_const,
  decay' := Œª k n, ‚ü®1, zero_lt_one, Œª _, by simp [iterated_fderiv_within_zero_fun]‚ü© }‚ü©
-- todo: `iterated_fderiv_within_zero_fun` should be `simp`
-- (and be called `iterated_fderiv_zero_fun`)

@[simp] lemma zero_apply {x : E} : (0 : schwartz E F) x = 0 := rfl

instance : has_add (schwartz E F) :=
‚ü®Œª f g, ‚ü®f + g, f.smooth.add g.smooth,
  begin
    intros k n,
    rcases f.decay k n with ‚ü®Cf, hCf, hf‚ü©,
    rcases g.decay k n with ‚ü®Cg, hCg, hg‚ü©,
    refine ‚ü®Cf + Cg, by positivity, Œª x, _‚ü©,
    specialize hf x,
    specialize hg x,
    refine le_trans _ (add_le_add hf hg),
    exact seminorm_add_le_aux k n f g x,
  end‚ü© ‚ü©

@[simp] lemma add_apply {f g : schwartz E F} {x : E} : (f + g) x = f x + g x := rfl

instance : add_zero_class (schwartz E F) :=
{ zero := has_zero.zero,
  add := has_add.add,
  zero_add := Œª _, by { ext, rw [add_apply, zero_apply, zero_add] },
  add_zero := Œª _, by { ext, rw [add_apply, zero_apply, add_zero] } }


instance : add_comm_monoid (schwartz E F) :=
fun_like.coe_injective.add_comm_monoid _ rfl (Œª _ _, rfl) (Œª _ _, rfl)


variables (f g : schwartz E F) (x : E)

#check f + g

end schwartz
