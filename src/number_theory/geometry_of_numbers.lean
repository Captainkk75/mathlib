/-
Copyright (c) 2021 Alex J. Best. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex J. Best
-/
import measure_theory.lebesgue_measure
import group_theory.subgroup
import analysis.convex.basic
import measure_theory.haar_measure
import tactic

-- TODO change fin n to iota
open measure_theory
variables {n : ‚Ñï}
noncomputable theory
section floris
/-
from floris
-/

open measure_theory measure_theory.measure topological_space set
#check real.map_volume_add_left
def is_add_left_invariant_real_volume : is_add_left_invariant (volume : measure ‚Ñù) :=
by simp [‚Üê map_add_left_eq_self, real.map_volume_add_left]
def is_add_left_invariant_pi_volume (Œπ : Type*) [fintype Œπ] :
is_add_left_invariant (volume : measure (Œπ ‚Üí ‚Ñù)) :=
begin
  simp only [‚Üêmap_add_left_eq_self],
  intro v,
  refine (pi_eq_generate_from (Œª i, real.borel_eq_generate_from_Ioo_rat.symm)
    (Œª i, real.is_pi_system_Ioo_rat) (Œª i, real.finite_spanning_sets_in_Ioo_rat _)
    _).symm,
  intros s hS,
  simp only [exists_prop, mem_Union, mem_singleton_iff] at hS,
  choose a b H using hS,
  obtain rfl : s = Œª i, Ioo (a i) (b i), from funext (Œª i, (H i).2), replace H := Œª i, (H i).1,
  simp only [real.volume_Ioo] at *,
  rw [map_apply, volume_pi],
  rw (_ : has_add.add v ‚Åª¬π' set.pi set.univ (Œª (i : Œπ), Ioo ‚Üë(a i) ‚Üë(b i))
    = set.pi set.univ (Œª (i : Œπ), Ioo (‚Üë(a i) - v i) (‚Üë(b i) - v i))),
  rw pi_pi,
  have : ‚àÄ (i : Œπ), measure_space.volume (Ioo (‚Üë(a i) - v i) (‚Üë(b i) - v i))
    = measure_space.volume (Ioo (‚Üë(a i) : ‚Ñù) (‚Üë(b i))),
  { intro i,
    simp only [real.volume_Ioo],
    congr' 1,
    abel, },
  simp only [real.volume_Ioo] at this,
  simp [this],
  { exact (Œª i, measurable_set_Ioo), },
  { ext,
    simp [sub_lt_iff_lt_add', lt_sub_iff_add_lt'], },
  { refine measurable_const_add v, },
  { rw measurable_set_pi (finite_univ.countable : (univ : set Œπ).countable),
    left,
    intros i hi,
    exact measurable_set_Ioo, },
end

def Icc01 : positive_compacts ‚Ñù :=
‚ü®Icc 0 1, is_compact_Icc, by simp_rw [interior_Icc, nonempty_Ioo, zero_lt_one]‚ü©

def unit_cube (Œπ) [fintype Œπ] : positive_compacts (Œπ ‚Üí ‚Ñù) :=
‚ü®Icc 0 1, begin
  simp_rw [‚Üê pi_univ_Icc, pi.zero_apply, pi.one_apply],
  exact is_compact_univ_pi (Œª i, is_compact_Icc),
end,
begin
  simp_rw [‚Üê pi_univ_Icc, pi.zero_apply, pi.one_apply],
  have : pi univ (Œª i : Œπ, interior (Icc 0 1)) ‚äÜ interior (pi univ (Œª i : Œπ, Icc (0 : ‚Ñù) 1)),
  -- TODO weird dot notation fail?
  { rw subset_interior_iff_subset_of_open,
    { exact pi_mono (Œª i hi, interior_subset), },
    { rw [interior_Icc],
      exact is_open_set_pi finite_univ (Œª i hi, is_open_Ioo), }, },-- TODO general lemma?
  have ok : (pi univ (Œª i : Œπ, interior (Icc (0 : ‚Ñù) 1))).nonempty,
  { rw [interior_Icc, univ_pi_nonempty_iff],
    exact (Œª i, nonempty_Ioo.mpr zero_lt_one) },
  exact nonempty.mono this ok,
end‚ü©

lemma haar_measure_eq_lebesgue_measure : add_haar_measure Icc01 = volume :=
begin
  convert (add_haar_measure_unique _ Icc01).symm,
  { simp [Icc01] },
  { apply_instance },
  { exact is_add_left_invariant_real_volume }
end

lemma pi_haar_measure_eq_lebesgue_measure (Œπ) [fintype Œπ] :
add_haar_measure (unit_cube Œπ) = volume :=
begin
  convert (add_haar_measure_unique _ (unit_cube Œπ)).symm,
  { rw [unit_cube],
    suffices : measure_space.volume (Icc (0 : Œπ ‚Üí ‚Ñù) 1) = 1,
    { rw [this, one_smul], },
    simp_rw [‚Üê pi_univ_Icc, pi.zero_apply, pi.one_apply],
    rw [volume_pi_pi, real.volume_Icc, sub_zero, ennreal.of_real_one, finset.prod_const_one],
    exact (Œª i, measurable_set_Icc), },
  { apply_instance },
  { exact is_add_left_invariant_pi_volume Œπ }
end
end floris


/-- In the space `Œπ ‚Üí ‚Ñù`, Hausdorff measure coincides exactly with Lebesgue measure. -/
-- theorem hausdorff_measure_pi_real {Œπ : Type*} [fintype Œπ] [nonempty Œπ] :
--   (ŒºH[fintype.card Œπ] : measure (Œπ ‚Üí ‚Ñù)) = volume :=
-- begin
--   classical,
--   -- it suffices to check that the two measures coincide on products of rational intervals
--   refine (pi_eq_generate_from (Œª i, real.borel_eq_generate_from_Ioo_rat.symm)
--     (Œª i, real.is_pi_system_Ioo_rat) (Œª i, real.finite_spanning_sets_in_Ioo_rat _)
--     _).symm,
--   simp only [mem_Union, mem_singleton_iff],
--   -- fix such a product `s` of rational intervals, of the form `Œ† (a i, b i)`.
--   intros s hs,
--   choose a b H using hs,
--   obtain rfl : s = Œª i, Ioo (a i) (b i), from funext (Œª i, (H i).2), replace H := Œª i, (H i).1,
--   apply le_antisymm _,
--   -- first check that `volume s ‚â§ ŒºH s`
--   { have Hle : volume ‚â§ (ŒºH[fintype.card Œπ] : measure (Œπ ‚Üí ‚Ñù)),
--     { refine le_hausdorff_measure _ _ ‚àû ennreal.coe_lt_top (Œª s h‚ÇÅ h‚ÇÇ, _),
--       rw [ennreal.rpow_nat_cast],
--       exact real.volume_pi_le_diam_pow s },
--     rw [‚Üê volume_pi_pi (Œª i, Ioo (a i : ‚Ñù) (b i)) (Œª i, measurable_set_Ioo)],
--     exact measure.le_iff'.1 Hle _ },
--   /- For the other inequality `ŒºH s ‚â§ volume s`, we use a covering of `s` by sets of small diameter
--   `1/n`, namely cubes with left-most point of the form `a i + f i / n` with `f i` ranging between
--   `0` and `‚åà(b i - a i) * n‚åâ`. Their number is asymptotic to `n^d * Œ† (b i - a i)`. -/
--   have Hpos' : 0 < fintype.card Œπ := fintype.card_pos_iff.2 ‚Äπnonempty Œπ‚Ä∫,
--   have Hpos : 0 < (fintype.card Œπ : ‚Ñù), by simp only [Hpos', nat.cast_pos],
--   have I : ‚àÄ i, 0 ‚â§ (b i : ‚Ñù) - a i := Œª i, by simpa only [sub_nonneg, rat.cast_le] using (H i).le,
--   let Œ≥ := Œª (n : ‚Ñï), (Œ† (i : Œπ), fin ‚åà((b i : ‚Ñù) - a i) * n‚åâ‚Çä),
--   haveI : ‚àÄ n, encodable (Œ≥ n) := Œª n, (fintype_pi Œπ (Œª (i : Œπ), fin _)).out,
--   let t : Œ† (n : ‚Ñï), Œ≥ n ‚Üí set (Œπ ‚Üí ‚Ñù) :=
--     Œª n f, set.pi univ (Œª i, Icc (a i + f i / n) (a i + (f i + 1) / n)),
--   have A : tendsto (Œª (n : ‚Ñï), 1/(n : ‚Ñù‚â•0‚àû)) at_top (ùìù 0),
--     by simp only [one_div, ennreal.tendsto_inv_nat_nhds_zero],
--   have B : ‚àÄ·∂† n in at_top, ‚àÄ (i : Œ≥ n), diam (t n i) ‚â§ 1 / n,
--   { apply eventually_at_top.2 ‚ü®1, Œª n hn, _‚ü©,
--     assume f,
--     apply diam_pi_le_of_le (Œª b, _),
--     simp only [real.ediam_Icc, add_div, ennreal.of_real_div_of_pos (nat.cast_pos.mpr hn), le_refl,
--       add_sub_add_left_eq_sub, add_sub_cancel', ennreal.of_real_one, ennreal.of_real_coe_nat] },
--   have C : ‚àÄ·∂† n in at_top, set.pi univ (Œª (i : Œπ), Ioo (a i : ‚Ñù) (b i)) ‚äÜ ‚ãÉ (i : Œ≥ n), t n i,
--   { apply eventually_at_top.2 ‚ü®1, Œª n hn, _‚ü©,
--     have npos : (0 : ‚Ñù) < n := nat.cast_pos.2 hn,
--     assume x hx,
--     simp only [mem_Ioo, mem_univ_pi] at hx,
--     simp only [mem_Union, mem_Ioo, mem_univ_pi, coe_coe],
--     let f : Œ≥ n := Œª i, ‚ü®‚åä(x i - a i) * n‚åã‚Çä,
--     begin
--       apply nat_floor_lt_nat_ceil_of_lt_of_pos,
--       { refine (mul_lt_mul_right npos).2 _,
--         simp only [(hx i).right, sub_lt_sub_iff_right] },
--       { refine mul_pos _ npos,
--         simpa only [rat.cast_lt, sub_pos] using H i }
--     end‚ü©,
--     refine ‚ü®f, Œª i, ‚ü®_, _‚ü©‚ü©,
--     { calc (a i : ‚Ñù) + ‚åä(x i - a i) * n‚åã‚Çä / n
--       ‚â§ (a i : ‚Ñù) + ((x i - a i) * n) / n :
--           begin
--             refine add_le_add le_rfl ((div_le_div_right npos).2 _),
--             exact nat_floor_le (mul_nonneg (sub_nonneg.2 (hx i).1.le) npos.le),
--           end
--       ... = x i : by field_simp [npos.ne'] },
--     { calc x i
--       = (a i : ‚Ñù) + ((x i - a i) * n) / n : by field_simp [npos.ne']
--       ... ‚â§ (a i : ‚Ñù) + (‚åä(x i - a i) * n‚åã‚Çä + 1) / n :
--         add_le_add le_rfl ((div_le_div_right npos).2 (lt_nat_floor_add_one _).le) } },
--   calc ŒºH[fintype.card Œπ] (set.pi univ (Œª (i : Œπ), Ioo (a i : ‚Ñù) (b i)))
--     ‚â§ liminf at_top (Œª (n : ‚Ñï), ‚àë' (i : Œ≥ n), diam (t n i) ^ ‚Üë(fintype.card Œπ)) :
--       hausdorff_measure_le Hpos (set.pi univ (Œª i, Ioo (a i : ‚Ñù) (b i)))
--         (Œª (n : ‚Ñï), 1/(n : ‚Ñù‚â•0‚àû)) A t B C
--   ... ‚â§ liminf at_top (Œª (n : ‚Ñï), ‚àë' (i : Œ≥ n), (1/n) ^ (fintype.card Œπ)) :
--     begin
--       refine liminf_le_liminf _ (by is_bounded_default),
--       filter_upwards [B],
--       assume n hn,
--       apply ennreal.tsum_le_tsum (Œª i, _),
--       simp only [‚Üê ennreal.rpow_nat_cast],
--       exact ennreal.rpow_le_rpow (hn i) Hpos.le,
--     end
--   ... = liminf at_top (Œª (n : ‚Ñï), ‚àè (i : Œπ), (‚åà((b i : ‚Ñù) - a i) * n‚åâ‚Çä : ‚Ñù‚â•0‚àû) / n) :
--   begin
--     congr' 1,
--     ext1 n,
--     simp only [tsum_fintype, finset.card_univ, nat.cast_prod, one_div, fintype.card_fin,
--       finset.sum_const, nsmul_eq_mul, fintype.card_pi],
--     simp_rw [‚Üê finset.card_univ, ‚Üê finset.prod_const, ‚Üê finset.prod_mul_distrib],
--     refl,
--   end
--   ... = ‚àè (i : Œπ), volume (Ioo (a i : ‚Ñù) (b i)) :
--   begin
--     simp only [real.volume_Ioo],
--     apply tendsto.liminf_eq,
--     refine ennreal.tendsto_finset_prod_of_ne_top _ (Œª i hi, _) (Œª i hi, _),
--     { apply tendsto.congr' _ ((ennreal.continuous_of_real.tendsto _).comp
--         ((tendsto_nat_ceil_mul_div_at_top (I i)).comp tendsto_coe_nat_at_top_at_top)),
--       apply eventually_at_top.2 ‚ü®1, Œª n hn, _‚ü©,
--       simp only [ennreal.of_real_div_of_pos (nat.cast_pos.mpr hn), comp_app,
--         ennreal.of_real_coe_nat] },
--     { simp only [ennreal.of_real_ne_top, ne.def, not_false_iff] }
--   end
-- end


lemma trans_inv (v : fin n ‚Üí ‚Ñù) (S : set (fin n ‚Üí ‚Ñù)) (hS : measurable_set S) :
volume S = volume ((+ (-v)) '' S) :=
begin
  simp only [set.image_add_left, add_comm],
  suffices : volume = measure.add_haar_measure (unit_cube _),
  { rw [this],
    simp only [set.image_add_right, neg_neg],
    simp_rw add_comm,
    rw [measure.is_add_left_invariant_add_haar_measure (unit_cube _) v hS], },
  rw pi_haar_measure_eq_lebesgue_measure,
end

/-- Blichfeldt's Principle --/
-- def L (n : ‚Ñï) : add_subgroup (fin n ‚Üí ‚Ñù) := set.range (monoid_hom.comp {to_fun := (coe : ‚Ñ§ ‚Üí ‚Ñù),
-- map_one' := int.cast_one, map_mul' := int.cast_mul})

-- instance : is_add_group_hom ((‚àò) (coe : ‚Ñ§ ‚Üí ‚Ñù) : (fin n ‚Üí ‚Ñ§) ‚Üí (fin n ‚Üí ‚Ñù)) :=
-- { map_add := Œª x y, by ext;
--   exact int.cast_add (x x_1) (y x_1), }
-- instance : is_add_subgroup (L n) := is_add_group_hom.range_add_subgroup ((‚àò) coe)
/- this can be generalized any range of a morphism is a subgroup -/

/- TODO decide wether to include measurablity in defn of a fundamental domain-/

structure fundamental_domain (L : add_subgroup (fin n ‚Üí ‚Ñù)) := /- this is _just_ a coset right? -/
  (F : set (fin n ‚Üí ‚Ñù))
  (hF : measurable_set F)
  (disjoint : ‚àÄ (l : fin n ‚Üí ‚Ñù) (hl : l ‚àà L) (h : l ‚â† 0), disjoint ((+ l) '' F) F)
  (covers : ‚àÄ (x : fin n ‚Üí ‚Ñù), ‚àÉ (l : fin n ‚Üí ‚Ñù) (hl : l ‚àà L), l + x ‚àà F)

-- def cube_fund : fundamental_domain (L n) :=
-- { F := {v : fin n ‚Üí ‚Ñù | ‚àÄ m : fin n, 0 ‚â§ v m ‚àß v m < 1},
--   disjoint := Œª l hl h x ‚ü®‚ü®a, ha, hx‚ÇÅ‚ü©, hx‚ÇÇ‚ü©, false.elim (h (begin
--     ext m, specialize ha m, specialize hx‚ÇÇ m,
--     simp only [hx‚ÇÅ.symm, int.cast_zero, pi.add_apply, pi.zero_apply,
--       eq_self_iff_true, ne.def, zero_add] at ha hx‚ÇÇ ‚ä¢,
--     rcases hl with ‚ü®w, hw‚ü©,
--     rw ‚Üê hw at *,
--     dsimp,
--     have wlt : (‚Üë(w m): ‚Ñù) < 1 := by linarith,
--     have ltw : (-1 : ‚Ñù) < w m := by linarith,
--     norm_cast,
--     have : w m < 1 := by exact_mod_cast wlt,
--     have : (-1 : ‚Ñ§) < w m := by exact_mod_cast ltw,
--     linarith,
--   end)),
--   covers := Œª x, ‚ü®-(coe ‚àò floor ‚àò x), ‚ü®is_add_subgroup.neg_mem (set.mem_range_self (floor ‚àò x)),
--   begin
--     intro,
--     simp only [int.cast_zero, pi.add_apply, pi.zero_apply, pi.neg_apply,
--       function.comp_app, zero_add, neg_add_lt_iff_lt_add],
--     split,
--     { linarith [floor_le (x m)], },
--     { linarith [lt_floor_add_one (x m)], }
--   end‚ü©‚ü©}

-- lemma cube_fund_volume : volume (cube_fund.F : set (fin n ‚Üí ‚Ñù)) = 1 :=
-- begin
--   dsimp [cube_fund],
--   rw volume_pi,
--   sorry,
-- end


lemma fundamental_domain.exists_unique {L : add_subgroup (fin n ‚Üí ‚Ñù)} (F : fundamental_domain L)
  (x : fin n ‚Üí ‚Ñù) : ‚àÉ! (p : L), x ‚àà (+ (p : fin n ‚Üí ‚Ñù)) '' F.F :=
exists_unique_of_exists_of_unique
begin
  simp only [exists_prop, set.mem_preimage, set.image_add_right, exists_unique_iff_exists],
  obtain ‚ü®l, hl, lh‚ü© := F.covers x,
  use -l,
  exact L.neg_mem hl,
  simpa [hl, add_comm] using lh,
end
begin
  rintro ‚ü®y‚ÇÅ_val, y‚ÇÅ_property‚ü© ‚ü®y‚ÇÇ_val, y‚ÇÇ_property‚ü© ‚ü®a, ha, rfl‚ü© ‚ü®c, hc, h‚ü©,
  simp only [subtype.mk_eq_mk, add_subgroup.coe_mk] at *,
  rw [‚Üê sub_eq_iff_eq_add, add_sub_assoc] at h,
  have := F.disjoint (y‚ÇÅ_val - y‚ÇÇ_val) (L.sub_mem y‚ÇÅ_property y‚ÇÇ_property),
  contrapose! this,
  rw sub_ne_zero,
  simp only [this, true_and, neg_sub, not_false_iff, set.image_add_right, ne.def],
  intro hd,
  apply hd ‚ü®_, hc‚ü©,
  simpa [h],
end

/- TODO do I want to use this instance instead -/
-- instance {F : fundamental_domain $ L n} (hF : measurable_set F.F) :
--   measurable_space F.F := subtype.measurable_space

instance subtype.measure_space {V : Type*} [measure_space V] {p : set V} :
measure_space (subtype p) :=
{ volume := measure.comap subtype.val volume,
  ..subtype.measurable_space }

lemma volume_subtype_univ {V : Type*} [measure_space V] {p : set V} (hmp : measurable_set p) :
  @volume _ subtype.measure_space (set.univ : set (subtype p)) = volume p :=
begin
  dsimp [measure_space.volume],
  rw [measure.comap_apply _ subtype.val_injective, set.image_univ],
  congr,
  exact subtype.range_val,
  begin
    intros x hx,
    exact measurable_set.subtype_image hmp hx,
  end,
  exact measurable_set.univ,
end

/-instance {F : fundamental_domain $ L n} : measure_space F.F :=
{ measurable_set := Œª s, measure_space.to_measurable_space.measurable_set (subtype.val '' s),
  measurable_set_empty := by rw [set.image_empty];
                          exact measure_space.to_measurable_space.is_measurable_empty,
  measurable_set_compl := Œª S h, begin
    have : subtype.val '' (-S) = -(subtype.val '' S) ‚à© F.F :=
    begin
      ext,
      simp only [not_exists, set.mem_image, set.mem_inter_eq, exists_and_distrib_right,
      exists_eq_right, subtype.exists,
 set.mem_compl_eq], /- TODO is this a logic lemma now ? -/
      split; intro; cases a,
      split,
      intro,
      exact a_h,
      exact a_w,
      exact Exists.intro a_right (a_left a_right),
    end,
    rw this,
    apply measurable_set.inter,
    exact measurable_space.is_measurable_compl _ _ h,
    exact hF,
  end,
  is_measurable_Union := Œª f a, begin
    rw set.image_Union,
    exact measure_space.to_measurable_space.is_measurable_Union (Œª (i : ‚Ñï), subtype.val '' f i) a,
  end,
  Œº := { measure_of := Œª S, begin let l := (subtype.val '' S), exact _inst_1.Œº.measure_of l, end,
  empty := _,
  mono := _,
  Union_nat := _,
  m_Union := sorry,
  trimmed := _ }
  }-/

lemma exists_diff_lattice_of_volume_le_volume (L : add_subgroup (fin n ‚Üí ‚Ñù)) [encodable L]
  {S : set (fin n ‚Üí ‚Ñù)} (hS : measurable_set S) (F : fundamental_domain L)
  (h : volume F.F < volume S) :
‚àÉ (x y : fin n ‚Üí ‚Ñù) (hx : x ‚àà S) (hy : y ‚àà S) (hne : x ‚â† y), x - y ‚àà L :=
begin
  suffices : ‚àÉ (p‚ÇÅ p‚ÇÇ : L) (hne : p‚ÇÅ ‚â† p‚ÇÇ),
    (((+ ‚Üëp‚ÇÅ) '' S ‚à© F.F) ‚à© ((+ ‚Üëp‚ÇÇ) '' S ‚à© F.F)).nonempty,
  begin
    rcases this with ‚ü®p‚ÇÅ, p‚ÇÇ, hne, u, ‚ü®‚ü®q‚ÇÅ, ‚ü®hS‚ÇÅ, ht‚ÇÅ‚ü©‚ü©, hu‚ü©, ‚ü®‚ü®q‚ÇÇ, ‚ü®hS‚ÇÇ, ht‚ÇÇ‚ü©‚ü©, hu‚ü©‚ü©,
    use [u - p‚ÇÅ, u - p‚ÇÇ],
    split,
    { rwa [‚Üê ht‚ÇÅ, add_sub_cancel], },
    split,
    { rwa [‚Üê ht‚ÇÇ, add_sub_cancel], },
    rw (by abel : u - p‚ÇÅ - (u - p‚ÇÇ) = p‚ÇÇ - p‚ÇÅ),
    split,
    { intro a,
      apply hne,
      rw sub_right_inj at a,
      exact subtype.eq a, },
    exact L.sub_mem p‚ÇÇ.mem p‚ÇÅ.mem,
  end,
  rw ‚Üê volume_subtype_univ F.hF at h,
  have := exists_nonempty_inter_of_measure_univ_lt_tsum_measure subtype.measure_space.volume
    (_ : (‚àÄ p : L, measurable_set (Œª a, ((+ ‚Üëp) '' S) a.val : set F.F))) _,
  { rcases this with ‚ü®i, j, hij, t, ht‚ü©,
    use [i, j, hij, t],
    simp only [and_true, set.mem_inter_eq, set.mem_preimage, subtype.coe_prop],
    exact ht, },
  { intros,
    suffices : measurable_set (Œª (a : ‚Ü•(F.F)), S ‚Üëa),
    { simp only [set.image_add_right],
      refine measurable_set_preimage _ hS,
      refine measurable.add_const _ (-‚Üëp),
      exact measurable_subtype_coe, },
    exact ‚ü®S, ‚ü®hS, rfl‚ü©‚ü©, },
  convert h,
  have : (‚àë' (i : L), volume ((+ (i : fin n ‚Üí ‚Ñù)) '' S ‚à© F.F)) = volume S,
  { rw (_ : ‚àë' (i : L), volume ((+ ‚Üëi) '' S ‚à© F.F) =
        ‚àë' (i : L), volume ((+ (-‚Üëi)) '' ((+ ‚Üëi) '' S ‚à© F.F))),
    { conv in (_ '' (_ ‚à© _)) {
        rw [‚Üê set.image_inter (add_left_injective _), ‚Üê set.image_comp],
        simp only [add_neg_cancel_right, function.comp_app, set.image_id',
          comp_add_right, add_zero, add_right_neg, set.image_add_right, neg_neg],
        rw set.inter_comm, },
      rw ‚Üê measure_Union _ _,
      { congr,
        rw [‚Üê set.Union_inter, set.inter_eq_self_of_subset_right],
        convert set.subset_univ _,
        rw set.eq_univ_iff_forall,
        intros,
        rw set.mem_Union,
        rcases F.covers x with ‚ü®w, t, h_1_h‚ü©,
        use ‚ü®w, t‚ü©,
        rw [set.mem_preimage, subtype.coe_mk, add_comm],
        assumption, },
      { apply_instance, },
      { intros x y hxy,
        suffices : (disjoint on Œª (i : ‚Ü•(L)), (Œª (_x : fin n ‚Üí ‚Ñù), _x + -‚Üëi) '' F.F) x y,
        { simp only [comp_add_right, add_zero, add_right_neg,
            set.image_add_right, neg_neg, set.image_id'] at this ‚ä¢,
          rintros z ‚ü®‚ü®hzx, hzS‚ü©, ‚ü®hzy, hzS‚ü©‚ü©,
          apply this,
          simp only [set.mem_preimage, set.mem_inter_eq, set.inf_eq_inter],
          exact ‚ü®hzx, hzy‚ü©, },
        rintros t ‚ü®htx, hty‚ü©,
        simp only [set.mem_empty_eq, set.mem_preimage, set.bot_eq_empty,
          set.image_add_right, neg_neg] at htx hty ‚ä¢,
        apply hxy,
        suffices : -x = -y, by simpa using this,
        apply exists_unique.unique (F.exists_unique t) _ _; simpa, },
    { intro l,
      apply measurable_set.inter _ hS,
      refine measurable_set_preimage _ F.hF,
      exact measurable_add_const ‚Üël, }, },
    { congr,
      ext1 l,
      rw [trans_inv (‚Üë l) _ _],
      apply measurable_set.inter _ F.hF, -- TODO is this a dup goal?
      simp only [set.image_add_right],
      refine measurable_set_preimage _ hS,
      exact measurable_add_const (-‚Üël), }, },
  convert this,
  ext1 l,
  simp only [set.image_add_right],
  dsimp only [subtype.measure_space],
  rw measure.comap_apply _ subtype.val_injective _ _ _,
  { congr,
    ext1 v,
    simp only [set.mem_preimage, set.mem_image, set.mem_inter_eq, exists_and_distrib_right,
      exists_eq_right, subtype.exists, subtype.coe_mk, subtype.val_eq_coe],
    cases l, cases h, cases h_h, cases h_w,
    simp only [set.image_add_right, add_subgroup.coe_mk, option.mem_def,
      ennreal.some_eq_coe, add_subgroup.coe_mk],
    split; { intros a, cases a, split; assumption, }, },
  { intros X hX,
    convert measurable_set.subtype_image F.hF hX, },
  { refine measurable_set_preimage _ hS,
    refine measurable.add_const _ (-‚Üël),
    exact measurable_subtype_coe, },
end

-- how to apply to the usual lattice
    -- exact set.countable.to_encodable (set.countable_range (function.comp coe)),

open ennreal
lemma exists_nonzero_lattice_of_two_dim_le_volume (L : add_subgroup (fin n ‚Üí ‚Ñù)) [encodable L]
  (F : fundamental_domain L) (S : set (fin n ‚Üí ‚Ñù)) (hS : measurable_set S)
  (h : volume F.F * 2 ^ n < volume S) (symmetric : ‚àÄ x ‚àà S, -x ‚àà S) (convex : convex S) :
‚àÉ (x : L) (h : x ‚â† 0), ‚Üëx ‚àà S :=
begin
  have mhalf : measurable_set ((1/2 : ‚Ñù) ‚Ä¢ S),
  { convert measurable_const_smul (2 : ‚Ñù) hS,
    ext x,
    simp only [one_div, set.mem_preimage],
    exact mem_inv_smul_set_iff two_ne_zero S x, },
  have : volume ((1/2 : ‚Ñù) ‚Ä¢ S) * 2^n = volume S,
  {
    suffices : volume ((1/2 : ‚Ñù) ‚Ä¢ S) = (1 / 2)^n * volume S,
    { rw [this, mul_comm _ (volume S), mul_assoc, ‚Üê mul_pow, one_div,
        ennreal.inv_mul_cancel two_ne_zero two_ne_top, one_pow, mul_one], },

    sorry, -- rescaling measures
  },
  have h2 : volume F.F < volume ((1/2 : ‚Ñù) ‚Ä¢ S),
  { rw ‚Üê ennreal.mul_lt_mul_right (pow_ne_zero n two_ne_zero') (pow_ne_top two_ne_top),
    convert h, },

  have : (1/2 : ‚Ñù) ‚Ä¢ S + (1/2 : ‚Ñù) ‚Ä¢ S = S,
  { ext,
    split; intro h,
    { rcases h with ‚ü®v‚ÇÅ, v‚ÇÇ, ‚ü®v‚ÇÅ‚ÇÅ, h‚ÇÅ‚ÇÇ, rfl‚ü©, ‚ü®v‚ÇÇ‚ÇÅ, h‚ÇÇ‚ÇÇ, rfl‚ü©, rfl‚ü©,
      have := convex h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÇ (le_of_lt one_half_pos) (le_of_lt one_half_pos) (by linarith),
      rw [‚Üê inv_eq_one_div] at this,
      suffices hv : ‚àÄ v : fin n ‚Üí ‚Ñù, v = (2‚Åª¬π:‚Ñù) ‚Ä¢ (2 * v),
      { convert this;
        exact one_div 2, },
      intro,
      suffices : v = ((2‚Åª¬π:‚Ñù) * 2) ‚Ä¢ v,
      { conv_lhs { rw this, },
        exact mul_assoc _ _ _, },
      norm_num, },
    { use [(1/2 : ‚Ñù) ‚Ä¢ x, (1/2 : ‚Ñù) ‚Ä¢ x],
      simp only [and_self_left],
      split,
      { exact set.smul_mem_smul_set h, },
      { rw ‚Üê add_smul,
        norm_num, }, }, },
  rw ‚Üê this,
  suffices : ‚àÉ (x y : fin n ‚Üí ‚Ñù) (hx : x ‚àà (1/2 : ‚Ñù) ‚Ä¢ S) (hy : y ‚àà (1/2 : ‚Ñù) ‚Ä¢ S) (hne : x ‚â† y),
    x - y ‚àà L,
  { rcases this with ‚ü®x, y, hx, hy, hne, hsub‚ü©,
    use ‚ü®x - y, hsub‚ü©,
    split,
    { apply subtype.ne_of_val_ne,
      simp [sub_eq_zero, hne], },
    have : ‚àÄ t ‚àà (1/2 : ‚Ñù) ‚Ä¢ S, -t ‚àà (1/2 : ‚Ñù) ‚Ä¢ S,
    { intros t ht,
      rcases ht with ‚ü®v, hv, rfl‚ü©,
      rw ‚Üê smul_neg,
      exact set.smul_mem_smul_set (symmetric _ hv), },
    use [x, -y, hx, this _ hy],
    refl, },
  { exact exists_diff_lattice_of_volume_le_volume L mhalf F h2, }
end

#lint
