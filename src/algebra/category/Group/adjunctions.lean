/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Johannes H√∂lzl
-/
import algebra.category.Group.basic
import group_theory.free_abelian_group
import algebra.category.Ring.basic
import algebra.category.Module.basic

/-!
# Adjunctions regarding the category of (abelian) groups

This file contains construction of basic adjunctions concerning the category of groups and the
category of abelian groups.

## Main definitions

* `AddCommGroup.free`: constructs the functor associating to a type `X` the free abelian group with
  generators `x : X`.
* `Group.free`: constructs the functor associating to a type `X` the free group with
  generators `x : X`.
* `abelianize`: constructs the functor which associates to a group `G` its abelianization `G·µÉ·µá`.

## Main statements

* `AddCommGroup.adj`: proves that `AddCommGroup.free` is the left adjoint of the forgetful functor
  from abelian groups to types.
* `Group.adj`: proves that `Group.free` is the left adjoint of the forgetful functor from groups to
  types.
* `abelianize_adj`: proves that `abelianize` is left adjoint to the forgetful functor from
  abelian groups to groups.
-/

noncomputable theory

universe u

open category_theory

namespace AddCommGroup

open_locale classical

/--
The free functor `Type u ‚•§ AddCommGroup` sending a type `X` to the
free abelian group with generators `x : X`.
-/
def free : Type u ‚•§ AddCommGroup :=
{ obj := Œª Œ±, of (free_abelian_group Œ±),
  map := Œª X Y, free_abelian_group.map,
  map_id' := Œª X, add_monoid_hom.ext free_abelian_group.map_id_apply,
  map_comp' := Œª X Y Z f g, add_monoid_hom.ext free_abelian_group.map_comp_apply, }

@[simp] lemma free_obj_coe {Œ± : Type u} :
  (free.obj Œ± : Type u) = (free_abelian_group Œ±) := rfl

@[simp] lemma free_map_coe {Œ± Œ≤ : Type u} {f : Œ± ‚Üí Œ≤} (x : free_abelian_group Œ±) :
  (free.map f) x = f <$> x := rfl

/--
The free-forgetful adjunction for abelian groups.
-/
def adj : free ‚ä£ forget AddCommGroup.{u} :=
adjunction.mk_of_hom_equiv
{ hom_equiv := Œª X G, free_abelian_group.lift.symm,
  hom_equiv_naturality_left_symm' :=
  by { intros, ext, refl} }

instance : is_right_adjoint (forget AddCommGroup.{u}) := ‚ü®_, adj‚ü©

/--
As an example, we now give a high-powered proof that
the monomorphisms in `AddCommGroup` are just the injective functions.

(This proof works in all universes.)
-/
example {G H : AddCommGroup.{u}} (f : G ‚ü∂ H) [mono f] : function.injective f :=
(mono_iff_injective f).1 (show mono ((forget AddCommGroup.{u}).map f), by apply_instance)

end AddCommGroup

namespace Group

/-- The free functor `Type u ‚•§ Group` sending a type `X` to the free group with generators `x : X`.
-/
def free : Type u ‚•§ Group :=
{ obj := Œª Œ±, of (free_group Œ±),
  map := Œª X Y, free_group.map,
  map_id' := by { intros, ext1, refl },
  map_comp' := by { intros, ext1, refl } }

/-- The free-forgetful adjunction for groups.
-/
def adj : free ‚ä£ forget Group.{u} :=
adjunction.mk_of_hom_equiv
{ hom_equiv := Œª X G, free_group.lift.symm,
  hom_equiv_naturality_left_symm' := Œª X Y G f g, by { ext1, refl } }

instance : is_right_adjoint (forget Group.{u}) := ‚ü®_, adj‚ü©

end Group

section abelianization

/-- The abelianization functor `Group ‚•§ CommGroup` sending a group `G` to its abelianization `G·µÉ·µá`.
 -/
def abelianize : Group.{u} ‚•§ CommGroup.{u} :=
{ obj := Œª G, { Œ± := abelianization G, str := by apply_instance },
  map := Œª G H f, abelianization.lift ( { to_fun := Œª x, abelianization.of (f x),
  map_one' := by simp,
  map_mul' := by simp } ),
  map_id' := by { intros, simp only [monoid_hom.mk_coe, coe_id], ext1, refl },
  map_comp' := by { intros, simp only [coe_comp], ext1, refl } }

/-- The abelianization-forgetful adjuction from `Group` to `CommGroup`.-/
def abelianize_adj : abelianize ‚ä£ forget‚ÇÇ CommGroup.{u} Group.{u} :=
adjunction.mk_of_hom_equiv
{ hom_equiv := Œª G A, abelianization.lift.symm,
  hom_equiv_naturality_left_symm' := Œª G H A f g, by { ext1, refl } }

end abelianization

namespace coextension_of_scalars

/-!
We construct the coextension of scalar functor `AddCommGroup ‚•§ Module R`.
-/

variables (R : Ring.{u}) (A : AddCommGroup.{u})

local notation `Hom` A := ((‚ü®R‚ü© : Ab) ‚ü∂ A)

instance : has_smul R $ Hom A :=
{ smul := Œª r f,
  { to_fun := Œª r', f (r' * r),
    map_zero' := by simp,
    map_add' := Œª _ _, by simp [add_mul] } }

@[simp] lemma smul_apply (r r' : R) (f : Hom A) : (r ‚Ä¢ f) r' = f (r' * r) := rfl

instance : mul_action R $ Hom A :=
{ smul := (‚Ä¢),
  one_smul := Œª r, fun_like.ext _ _ $ Œª r', by simp,
  mul_smul := Œª r r' f, fun_like.ext _ _ $ Œª r'', by simp [mul_assoc], }

instance : distrib_mul_action R $ Hom A :=
{ smul_add := Œª r f g, fun_like.ext _ _ $ Œª r', rfl,
  smul_zero := Œª r, fun_like.ext _ _ $ Œª r', rfl,
  ..(_ : mul_action R $ Hom A)}

instance : module R $ Hom A :=
{ add_smul := Œª r s f, fun_like.ext _ _ $ Œª x, by simp [mul_add],
  zero_smul := Œª f, fun_like.ext _ _ $ Œª x, by simp,
  ..(_ : distrib_mul_action R $ Hom A) }

section map

/--
Given `B C : Ab` and `f : B ‚ü∂ C`,  we get a morphism `(R ‚ü∂ B) ‚Üí (R ‚ü∂ C)` defined by `g ‚Ü¶ g ‚àò f`.
-/
def map {B C : AddCommGroup.{u}} (f : B ‚ü∂ C) : (‚ü®Hom B‚ü© : Module R) ‚ü∂ (‚ü®Hom C‚ü© : Module R) :=
{ to_fun := f.comp,
  map_add' := f.comp_add,
  map_smul' := Œª r g, fun_like.ext _ _ $ Œª x, rfl }

variable {R}

@[simp] lemma map_apply {B C : AddCommGroup.{u}} (f : B ‚ü∂ C) (g : Hom B) (x : R) :
  map R f g x = f (g x) := rfl

lemma map_id {B : AddCommGroup.{u}} : map R (add_monoid_hom.id B) = linear_map.id :=
fun_like.ext _ _ $ Œª f, fun_like.ext _ _ $ Œª x, rfl

lemma map_comp {B C D : AddCommGroup.{u}} (f : B ‚ü∂ C) (g : C ‚ü∂ D) :
  map R (g.comp f) = (map R g).comp (map R f) := rfl

end map

/--
coextension of scalars `Ab ‚•§ Module R` by sending `A ‚Ü¶ Hom(R, A)` and `f ‚Ü¶ g ‚Ü¶ g ‚àò f`.
This functor is adjoint to `forget‚ÇÇ (Module R) Ab`.
-/
@[simps] def _root_.coextension_of_scalars : AddCommGroup.{u} ‚•§ Module.{u} R :=
{ obj := Œª A, ‚ü®Hom A‚ü©,
  map := Œª _ _ f, map R f,
  map_id' := Œª X, map_id,
  map_comp' := Œª _ _ _, map_comp }

namespace adj_forget

variables (M : Module.{u} R)

namespace hom_equiv

/--
If `f : M ‚Üí+ A`, then there is a map `M ‚ü∂ Hom(R, A)` given by `m ‚Ü¶ r ‚Ü¶ f (r ‚Ä¢ m)`
-/
def forward (f : (forget‚ÇÇ (Module.{u} R) Ab.{u}).obj M ‚ü∂ A) :
  M ‚ü∂ (coextension_of_scalars R).obj A :=
{ to_fun := Œª m,
  { to_fun := Œª r, f (@has_smul.smul R M _ r m),
    map_zero' := by rw [zero_smul, map_zero],
    map_add' := Œª x y, by rw [add_smul, map_add] },
  map_add' := Œª x y, begin
    ext1 z,
    simp only [map_add, smul_add, add_monoid_hom.coe_mk, add_monoid_hom.add_apply],
  end,
  map_smul' := Œª r x, begin
    ext1 z,
    simp only [add_monoid_hom.coe_mk, ring_hom.id_apply, smul_apply],
    rw [mul_smul],
  end }

/--
If `f : M ‚ü∂ Hom(R, A)`, then there is `M ‚Üí+ A` given by `m ‚Ü¶ (f m) 1`
-/
def backward (f : M ‚ü∂ (coextension_of_scalars R).obj A) :
  (forget‚ÇÇ (Module.{u} R) Ab.{u}).obj M ‚ü∂ A :=
{ to_fun := Œª m, (f m).to_fun 1,
  map_zero' := by simp,
  map_add' := Œª x y, by simp }

lemma fb (f : (forget‚ÇÇ (Module.{u} R) Ab.{u}).obj M ‚ü∂ A) :
  backward R A M (forward R A M f) = f :=
by ext; simp [backward, forward]

lemma bf (f : M ‚ü∂ (coextension_of_scalars R).obj A) :
  forward R A M (backward R A M f) = f :=
by ext; simp [backward, forward]

end hom_equiv

/--
The unit in the adjunction `forget ‚ä£ coextension of scalars`
-/
@[simps] def unit : ùü≠ (Module R) ‚ü∂ forget‚ÇÇ (Module R) Ab ‚ãô coextension_of_scalars R :=
{ app := Œª M,
  { to_fun := Œª m,
    { to_fun := Œª r, @has_smul.smul R M _ r m,
      map_zero' := by rw [zero_smul],
      map_add' := Œª x y, by rw [add_smul] },
    map_add' := Œª x y, begin
      ext1 z,
      simp only [smul_add, add_monoid_hom.coe_mk, add_monoid_hom.add_apply],
    end,
    map_smul' := Œª r m, begin
      ext1 z,
      simp only [mul_smul, add_monoid_hom.coe_mk, ring_hom.id_apply, smul_apply],
    end },
  naturality' := Œª X Y f, by { ext, simp } }

/--
The counit in the adjunction `forget ‚ä£ coextension of scalars`
-/
@[simps] def counit : (coextension_of_scalars R ‚ãô forget‚ÇÇ (Module.{u} R) Ab.{u}) ‚ü∂ ùü≠ Ab :=
{ app := Œª A,
  { to_fun := Œª f, f.to_fun 1,
    map_zero' := rfl,
    map_add' := Œª x y, by simp only [add_monoid_hom.to_fun_eq_coe, add_monoid_hom.add_apply] },
  naturality' := Œª X Y g, by { ext, simp } }

end adj_forget

/--
`foget‚ÇÇ (Module R) Ab` is adjoint to coextension of scalars.
-/
def adj_forget : forget‚ÇÇ (Module.{u} R) AddCommGroup.{u} ‚ä£ coextension_of_scalars R :=
{ hom_equiv := Œª X Y,
  { to_fun := adj_forget.hom_equiv.forward R Y X,
    inv_fun := adj_forget.hom_equiv.backward R Y X,
    left_inv := adj_forget.hom_equiv.fb R Y X,
    right_inv := adj_forget.hom_equiv.bf R Y X },
  unit := adj_forget.unit R,
  counit := adj_forget.counit R,
  hom_equiv_unit' := Œª M A f, by { ext m r, simp [adj_forget.hom_equiv.forward] },
  hom_equiv_counit' := Œª M A f, by { ext, simp [adj_forget.hom_equiv.backward] } }

instance : is_left_adjoint (forget‚ÇÇ (Module.{u} R) AddCommGroup.{u}) := ‚ü®_, adj_forget R‚ü©

instance : is_right_adjoint (coextension_of_scalars R) := ‚ü®_, adj_forget R‚ü©

end coextension_of_scalars

/-- The functor taking a monoid to its subgroup of units. -/
@[simps]
def Mon.units : Mon.{u} ‚•§ Group.{u} :=
{ obj := Œª R, Group.of RÀ£,
  map := Œª R S f, Group.of_hom $ units.map f,
  map_id' := Œª X, monoid_hom.ext (Œª x, units.ext rfl),
  map_comp' := Œª X Y Z f g, monoid_hom.ext (Œª x, units.ext rfl) }

/-- The forgetful-units adjunction between `Group` and `Mon`. -/
def Group.forget‚ÇÇ_Mon_adj : forget‚ÇÇ Group Mon ‚ä£ Mon.units.{u} :=
{ hom_equiv := Œª X Y,
  { to_fun := Œª f, monoid_hom.to_hom_units f,
    inv_fun := Œª f, (units.coe_hom Y).comp f,
    left_inv := Œª f, monoid_hom.ext $ Œª _, rfl,
    right_inv := Œª f, monoid_hom.ext $ Œª _, units.ext rfl },
  unit :=
  { app := Œª X, { ..(@to_units X _).to_monoid_hom },
    naturality' := Œª X Y f, monoid_hom.ext $ Œª x, units.ext rfl },
  counit :=
  { app := Œª X, units.coe_hom X,
    naturality' := Œª X Y f, monoid_hom.ext $ Œª x, rfl },
  hom_equiv_unit' := Œª X Y f, monoid_hom.ext $ Œª _, units.ext rfl,
  hom_equiv_counit' := Œª X Y f, monoid_hom.ext $ Œª _, rfl }

instance : is_right_adjoint Mon.units.{u} :=
‚ü®_, Group.forget‚ÇÇ_Mon_adj‚ü©

/-- The functor taking a monoid to its subgroup of units. -/
@[simps]
def CommMon.units : CommMon.{u} ‚•§ CommGroup.{u} :=
{ obj := Œª R, CommGroup.of RÀ£,
  map := Œª R S f, CommGroup.of_hom $ units.map f,
  map_id' := Œª X, monoid_hom.ext (Œª x, units.ext rfl),
  map_comp' := Œª X Y Z f g, monoid_hom.ext (Œª x, units.ext rfl) }

/-- The forgetful-units adjunction between `CommGroup` and `CommMon`. -/
def CommGroup.forget‚ÇÇ_CommMon_adj : forget‚ÇÇ CommGroup CommMon ‚ä£ CommMon.units.{u} :=
{ hom_equiv := Œª X Y,
  { to_fun := Œª f, monoid_hom.to_hom_units f,
    inv_fun := Œª f, (units.coe_hom Y).comp f,
    left_inv := Œª f, monoid_hom.ext $ Œª _, rfl,
    right_inv := Œª f, monoid_hom.ext $ Œª _, units.ext rfl },
  unit :=
  { app := Œª X, { ..(@to_units X _).to_monoid_hom },
    naturality' := Œª X Y f, monoid_hom.ext $ Œª x, units.ext rfl },
  counit :=
  { app := Œª X, units.coe_hom X,
    naturality' := Œª X Y f, monoid_hom.ext $ Œª x, rfl },
  hom_equiv_unit' := Œª X Y f, monoid_hom.ext $ Œª _, units.ext rfl,
  hom_equiv_counit' := Œª X Y f, monoid_hom.ext $ Œª _, rfl }

instance : is_right_adjoint CommMon.units.{u} :=
‚ü®_, CommGroup.forget‚ÇÇ_CommMon_adj‚ü©
