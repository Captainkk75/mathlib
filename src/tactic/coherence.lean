/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import category_theory.monoidal.free.coherence
import category_theory.bicategory.coherence

open category_theory

namespace tactic

namespace monoidal_category
open category_theory.monoidal_category category_theory.free_monoidal_category

meta def to_free_aux‚ÇÅ : expr ‚Üí tactic expr
| `(tensor_obj %%X %%Y) := do
    X' ‚Üê to_free_aux‚ÇÅ X,
    Y' ‚Üê to_free_aux‚ÇÅ Y,
    to_expr ``(tensor_obj %%X' %%Y')
| `(@tensor_unit %%C %%cat_inst %%mon_inst) := do
    to_expr ``(tensor_unit (free_monoidal_category %%C))
| f := to_expr ``(free_monoidal_category.of %%f)

meta def to_free_aux‚ÇÇ : expr ‚Üí tactic expr
| `(%%Œ∑ ‚â´ %%Œ∏) := do
    Œ∑' ‚Üê to_free_aux‚ÇÇ Œ∑,
    Œ∏' ‚Üê to_free_aux‚ÇÇ Œ∏,
    to_expr ``(%%Œ∑' ‚â´ %%Œ∏')
| `(tensor_hom %%Œ∑ %%Œ∏) := do Œ∑' ‚Üê to_free_aux‚ÇÇ Œ∑, Œ∏' ‚Üê to_free_aux‚ÇÇ Œ∏,
    to_expr ``(tensor_hom %%Œ∑' %%Œ∏')
| `(iso.hom (Œ±_ %%f %%g %%h)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    g' ‚Üê to_free_aux‚ÇÅ g,
    h' ‚Üê to_free_aux‚ÇÅ h,
    to_expr ``(iso.hom (Œ±_ %%f' %%g' %%h'))
| `(iso.inv (Œ±_ %%f %%g %%h)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    g' ‚Üê to_free_aux‚ÇÅ g,
    h' ‚Üê to_free_aux‚ÇÅ h,
    to_expr ``(iso.inv (Œ±_ %%f' %%g' %%h'))
| `(iso.hom (Œª_ %%f)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(iso.hom (Œª_ %%f'))
| `(iso.inv (Œª_ %%f)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(iso.inv (Œª_ %%f'))
| `(iso.hom (œÅ_ %%f)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(iso.hom (œÅ_ %%f'))
| `(iso.inv (œÅ_ %%f)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(iso.inv (œÅ_ %%f'))
| `(ùüô %%f) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(ùüô %%f')
| _ := fail "expression is not a morphism consisting of associators and unitors."

end monoidal_category

namespace bicategory
open category_theory.bicategory category_theory.free_bicategory
open_locale bicategory

set_option eqn_compiler.max_steps 2500

meta def to_free_aux‚ÇÅ : expr ‚Üí tactic expr
| `(%%f ‚â´ %%g) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    g' ‚Üê to_free_aux‚ÇÅ g,
    to_expr ``(%%f' ‚â´ %%g')
| `(ùüô %%a) := to_expr ``(ùüô (of.obj %%a))
| f := to_expr ``(of.map %%f)

meta def to_free_aux‚ÇÇ : expr ‚Üí tactic expr
| `(%%Œ∑ ‚â´ %%Œ∏) := do
    Œ∑' ‚Üê to_free_aux‚ÇÇ Œ∑,
    Œ∏' ‚Üê to_free_aux‚ÇÇ Œ∏,
    to_expr ``(%%Œ∑' ‚â´ %%Œ∏')
| `(%%f ‚óÅ %%Œ∑) := do f' ‚Üê to_free_aux‚ÇÅ f, Œ∑' ‚Üê to_free_aux‚ÇÇ Œ∑, to_expr ``(%%f' ‚óÅ %%Œ∑')
| `(%%Œ∑ ‚ñ∑ %%h) := do Œ∑' ‚Üê to_free_aux‚ÇÇ Œ∑, h' ‚Üê to_free_aux‚ÇÅ h, to_expr ``(%%Œ∑' ‚ñ∑ %%h')
| `(iso.hom (Œ±_ %%f %%g %%h)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    g' ‚Üê to_free_aux‚ÇÅ g,
    h' ‚Üê to_free_aux‚ÇÅ h,
    to_expr ``(iso.hom (Œ±_ %%f' %%g' %%h'))
| `(iso.inv (Œ±_ %%f %%g %%h)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    g' ‚Üê to_free_aux‚ÇÅ g,
    h' ‚Üê to_free_aux‚ÇÅ h,
    to_expr ``(iso.inv (Œ±_ %%f' %%g' %%h'))
| `(iso.hom (Œª_ %%f)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(iso.hom (Œª_ %%f'))
| `(iso.inv (Œª_ %%f)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(iso.inv (Œª_ %%f'))
| `(iso.hom (œÅ_ %%f)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(iso.hom (œÅ_ %%f'))
| `(iso.inv (œÅ_ %%f)) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(iso.inv (œÅ_ %%f'))
| `(ùüô %%f) := do
    f' ‚Üê to_free_aux‚ÇÅ f,
    to_expr ``(ùüô %%f')
| _ := fail "expression is not a 2-morphism consisting of associators and unitors."

end bicategory

namespace interactive
setup_tactic_parser

/--
`coherence` uses coherence theorem for monoidal categories or bicategories to prove the goal. It
can prove any equality made up only of associators and unitors.
-/
meta def coherence : tactic unit :=
do
  (lhs, rhs) ‚Üê get_goal >>= infer_type >>= match_eq,
  lhs' ‚Üê monoidal_category.to_free_aux‚ÇÇ lhs <|> bicategory.to_free_aux‚ÇÇ lhs,
  rhs' ‚Üê monoidal_category.to_free_aux‚ÇÇ rhs <|> bicategory.to_free_aux‚ÇÇ rhs,
  n ‚Üê mk_fresh_name,
  ¬´have¬ª n ``(%%lhs' = %%rhs') ``(subsingleton.elim _ _),
  h ‚Üê get_local n,
  apply ``(congr_arg (Œª Œ∑, (free_monoidal_category.project id).map Œ∑) %%h) <|>
  apply ``(congr_arg (Œª Œ∑, (free_bicategory.lift (prefunctor.id _)).map‚ÇÇ Œ∑) %%h)

add_tactic_doc
{ name        := "coherence",
  category    := doc_category.tactic,
  decl_names  := [`tactic.interactive.coherence],
  tags        := ["category theory"] }

end interactive

end tactic
