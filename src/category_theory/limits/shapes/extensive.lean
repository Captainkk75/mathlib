/-
Copyright (c) 2021 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.limits.shapes.binary_products
import category_theory.limits.shapes.pullbacks
import category_theory.limits.preserves.shapes.binary_products
import category_theory.limits.over
import category_theory.currying

universes v u u‚ÇÇ

namespace category_theory
namespace limits

open category

variables {C : Type u} [category.{v} C] [has_binary_coproducts C]

@[simps]
noncomputable def over_coproduct (A B : C) :
  over A √ó over B ‚•§ over (A ‚®ø B) :=
{ obj := Œª t, over.mk (coprod.map t.1.hom t.2.hom),
  map := Œª t‚ÇÅ t‚ÇÇ k, over.hom_mk (coprod.map k.1.left k.2.left) }

class extensive (C : Type u) [category.{v} C] [has_binary_coproducts C] :=
(coprod_equiv (A B : C) : is_equivalence (over_coproduct A B))

attribute [instance] extensive.coprod_equiv

/-- The flip of a coproduct diagram is a coproduct diagram. -/
def flip_is_colimit {A‚ÇÅ A‚ÇÇ B : C} {pA‚ÇÅ : A‚ÇÅ ‚ü∂ B} {pA‚ÇÇ : A‚ÇÇ ‚ü∂ B}
  (t : is_colimit (binary_cofan.mk pA‚ÇÅ pA‚ÇÇ)) :
  is_colimit (binary_cofan.mk pA‚ÇÇ pA‚ÇÅ) :=
{ desc := Œª (s : binary_cofan _ _), t.desc (binary_cofan.mk s.inr s.inl),
  fac' := Œª (s : binary_cofan _ _) j,
  begin
    rcases j with _ | _,
    { apply t.fac _ walking_pair.right },
    { apply t.fac _ walking_pair.left },
  end,
  uniq' := Œª (s : binary_cofan _ _) m w,
  begin
    refine t.uniq (binary_cofan.mk _ _) _ _,
    rintro (_ | _),
    { apply w walking_pair.right },
    { apply w walking_pair.left },
  end }

variables {X‚ÇÅ X‚ÇÇ X A‚ÇÅ A‚ÇÇ A : C}

/--
  A‚ÇÅ  ‚Üí A ‚Üê  A‚ÇÇ
  ‚Üì     ‚Üì    ‚Üì
  X‚ÇÅ  ‚Üí X ‚Üê  X‚ÇÇ

In an extensive category, if both rows are coproducts then both squares are pullbacks.
-/
noncomputable def left_pullback_of_coproduct_of_coproduct [extensive C]
  {pA‚ÇÅ : A‚ÇÅ ‚ü∂ A} {pA‚ÇÇ : A‚ÇÇ ‚ü∂ A} (cA : is_colimit (binary_cofan.mk pA‚ÇÅ pA‚ÇÇ))
  {pX‚ÇÅ : X‚ÇÅ ‚ü∂ X} {pX‚ÇÇ : X‚ÇÇ ‚ü∂ X} (cX : is_colimit (binary_cofan.mk pX‚ÇÅ pX‚ÇÇ))
  (f‚ÇÅ : A‚ÇÅ ‚ü∂ X‚ÇÅ) (f‚ÇÇ : A‚ÇÇ ‚ü∂ X‚ÇÇ) (f : A ‚ü∂ X)
  (c‚ÇÅ : f‚ÇÅ ‚â´ pX‚ÇÅ = pA‚ÇÅ ‚â´ f)
  (c‚ÇÇ : f‚ÇÇ ‚â´ pX‚ÇÇ = pA‚ÇÇ ‚â´ f) :
  is_limit (pullback_cone.mk _ _ c‚ÇÅ) :=
pullback_cone.is_limit_aux' _ $ Œª s,
begin
  dsimp,
  let f' : over X‚ÇÅ √ó over X‚ÇÇ := (over.mk f‚ÇÅ, over.mk f‚ÇÇ),
  let g : over X‚ÇÅ √ó over X‚ÇÇ := (over.mk s.fst, over.mk f‚ÇÇ),
  let iA : A ‚âÖ _ ‚®ø _ := cA.cocone_point_unique_up_to_iso (colimit.is_colimit _),
  let iX : X ‚âÖ _ ‚®ø _ := cX.cocone_point_unique_up_to_iso (colimit.is_colimit _),
  have iA‚ÇÅ : pA‚ÇÅ ‚â´ iA.hom = coprod.inl :=
    cA.comp_cocone_point_unique_up_to_iso_hom _ walking_pair.left,
  have iA‚ÇÇ : pA‚ÇÇ ‚â´ iA.hom = coprod.inr :=
    cA.comp_cocone_point_unique_up_to_iso_hom _ walking_pair.right,
  have iX‚ÇÅ : pX‚ÇÅ ‚â´ iX.hom = coprod.inl :=
    cX.comp_cocone_point_unique_up_to_iso_hom _ walking_pair.left,
  have iX‚ÇÇ : pX‚ÇÇ ‚â´ iX.hom = coprod.inr :=
    cX.comp_cocone_point_unique_up_to_iso_hom _ walking_pair.right,
  have : iA.hom ‚â´ coprod.map f‚ÇÅ f‚ÇÇ = f ‚â´ iX.hom,
  { apply binary_cofan.is_colimit.hom_ext cA,
    { change pA‚ÇÅ ‚â´ _ ‚â´ _ = pA‚ÇÅ ‚â´ _ ‚â´ _,
      rw [reassoc_of iA‚ÇÅ, coprod.inl_map, ‚Üêreassoc_of c‚ÇÅ, iX‚ÇÅ] },
    { change pA‚ÇÇ ‚â´ _ ‚â´ _ = pA‚ÇÇ ‚â´ _ ‚â´ _,
      rw [reassoc_of iA‚ÇÇ, coprod.inr_map, ‚Üêreassoc_of c‚ÇÇ, iX‚ÇÇ] } },
  let z : (over_coproduct _ _).obj g ‚ü∂ (over_coproduct _ _).obj f',
  { apply over.hom_mk _ _,
    apply coprod.desc (s.snd ‚â´ iA.hom) coprod.inr,
    change coprod.desc (s.snd ‚â´ iA.hom) coprod.inr ‚â´ coprod.map f‚ÇÅ f‚ÇÇ = coprod.map s.fst f‚ÇÇ,
    simp [this, ‚Üês.condition_assoc, iX‚ÇÅ] },
  let t := functor.preimage _ z,
  have ht‚ÇÅ : t.1.left ‚â´ f‚ÇÅ = s.fst := over.w t.1,
  have ht : coprod.map _ _ = coprod.desc (s.snd ‚â´ iA.hom) coprod.inr :=
    congr_arg comma_morphism.left (functor.image_preimage _ z),
  have ht‚ÇÉ := coprod.inl ‚â´= ht,
  dsimp at ht‚ÇÉ,
  simp only [coprod.map_map, coprod.inr_desc, coprod.inl_desc, coprod.inl_map, coprod.inr_map,
    assoc, id_comp, comp_id] at ht‚ÇÉ,
  refine ‚ü®t.1.left, ht‚ÇÅ, by simpa [‚ÜêiA‚ÇÅ, ‚ÜêiA.comp_inv_eq] using ht‚ÇÉ, _‚ü©,
  intros m m‚ÇÅ m‚ÇÇ,
  let m' : g ‚ü∂ f' := ‚ü®over.hom_mk m m‚ÇÅ, ùüô _‚ü©,
  suffices : m' = t,
  { rw ‚Üêthis,
    refl },
  apply functor.map_injective (over_coproduct X‚ÇÅ X‚ÇÇ),
  rw functor.image_preimage _ z,
  ext : 1,
  dsimp,
  rw [‚Üêm‚ÇÇ, assoc, iA‚ÇÅ],
  ext;
  simp
end

/--
  A‚ÇÅ  ‚Üí A ‚Üê  A‚ÇÇ
  ‚Üì     ‚Üì    ‚Üì
  X‚ÇÅ  ‚Üí X ‚Üê  X‚ÇÇ

In an extensive category, if both rows are coproducts then both squares are pullbacks.
-/
noncomputable def right_pullback_of_coproduct_of_coproduct [extensive C]
  {pA‚ÇÅ : A‚ÇÅ ‚ü∂ A} {pA‚ÇÇ : A‚ÇÇ ‚ü∂ A} (cA : is_colimit (binary_cofan.mk pA‚ÇÅ pA‚ÇÇ))
  {pX‚ÇÅ : X‚ÇÅ ‚ü∂ X} {pX‚ÇÇ : X‚ÇÇ ‚ü∂ X} (cX : is_colimit (binary_cofan.mk pX‚ÇÅ pX‚ÇÇ))
  (f‚ÇÅ : A‚ÇÅ ‚ü∂ X‚ÇÅ) (f‚ÇÇ : A‚ÇÇ ‚ü∂ X‚ÇÇ) (f : A ‚ü∂ X)
  (c‚ÇÅ : f‚ÇÅ ‚â´ pX‚ÇÅ = pA‚ÇÅ ‚â´ f)
  (c‚ÇÇ : f‚ÇÇ ‚â´ pX‚ÇÇ = pA‚ÇÇ ‚â´ f) :
  is_limit (pullback_cone.mk _ _ c‚ÇÇ) :=
left_pullback_of_coproduct_of_coproduct (flip_is_colimit cA) (flip_is_colimit cX) f‚ÇÇ f‚ÇÅ f c‚ÇÇ c‚ÇÅ

def ess_surj_over_coproduct [extensive C] : ess_surj (over_coproduct X‚ÇÅ X‚ÇÇ) :=
equivalence.ess_surj_of_equivalence _

local attribute [instance] ess_surj_over_coproduct

namespace extensive_internal

noncomputable def over_isomorphism [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  over X‚ÇÅ √ó over X‚ÇÇ :=
(over_coproduct X‚ÇÅ X‚ÇÇ).obj_preimage
  (over.mk (f ‚â´ (cX.cocone_point_unique_up_to_iso (colimit.is_colimit _)).hom))

noncomputable def pullback_along_inl [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) : C :=
(over_isomorphism cX f).1.left

noncomputable def pullback_along_inr [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) : C :=
(over_isomorphism cX f).2.left

noncomputable def pullback_fst_along_inl [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) : pullback_along_inl cX f ‚ü∂ X‚ÇÅ :=
(over_isomorphism cX f).1.hom

noncomputable def pullback_fst_along_inr [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) : pullback_along_inr cX f ‚ü∂ X‚ÇÇ :=
(over_isomorphism cX f).2.hom

noncomputable def pullback_coprod_pullback_iso [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  pullback_along_inl cX f ‚®ø pullback_along_inr cX f ‚âÖ A :=
(over.forget _).map_iso ((over_coproduct X‚ÇÅ X‚ÇÇ).obj_obj_preimage_iso (over.mk _))

noncomputable def pullback_snd_along_inl [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) : pullback_along_inl cX f ‚ü∂ A :=
coprod.inl ‚â´ (pullback_coprod_pullback_iso cX f).hom

noncomputable def pullback_snd_along_inr [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) : pullback_along_inr cX f ‚ü∂ A :=
coprod.inr ‚â´ (pullback_coprod_pullback_iso cX f).hom

noncomputable def is_coproduct_snd_snd [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  is_colimit (binary_cofan.mk (pullback_snd_along_inl cX f) (pullback_snd_along_inr cX f)) :=
(colimit.is_colimit _).of_iso_colimit
  (cocones.ext (pullback_coprod_pullback_iso cX f) (by rintro (_ | _); refl))

lemma pullback_condition_along_inl [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  pullback_fst_along_inl cX f ‚â´ x‚ÇÅ = pullback_snd_along_inl cX f ‚â´ f :=
begin
  let iX := cX.cocone_point_unique_up_to_iso (colimit.is_colimit _),
  have iX‚ÇÅ : x‚ÇÅ ‚â´ iX.hom = coprod.inl :=
    cX.comp_cocone_point_unique_up_to_iso_hom _ walking_pair.left,
  have hiA :
    (pullback_coprod_pullback_iso cX f).hom ‚â´ _ ‚â´ iX.hom =
      coprod.map (pullback_fst_along_inl _ _) (pullback_fst_along_inr _ _) :=
    over.w ((over_coproduct X‚ÇÅ X‚ÇÇ).obj_obj_preimage_iso (over.mk _)).hom,
  have : _ ‚â´ _ ‚â´ _ ‚â´ _ = _ := coprod.inl ‚â´= hiA,
  simp only [coprod.inl_map, ‚ÜêiX‚ÇÅ] at this,
  rw [‚ÜêiX.cancel_iso_hom_right _ _, assoc, ‚Üêthis, assoc, pullback_snd_along_inl, assoc],
end

lemma pullback_condition_along_inr [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  pullback_fst_along_inr cX f ‚â´ x‚ÇÇ = pullback_snd_along_inr cX f ‚â´ f :=
begin
  let iX := cX.cocone_point_unique_up_to_iso (colimit.is_colimit _),
  have iX‚ÇÇ : x‚ÇÇ ‚â´ iX.hom = coprod.inr :=
    cX.comp_cocone_point_unique_up_to_iso_hom _ walking_pair.right,
  have hiA :
    (pullback_coprod_pullback_iso cX f).hom ‚â´ _ ‚â´ iX.hom =
      coprod.map (pullback_fst_along_inl _ _) (pullback_fst_along_inr _ _) :=
    over.w ((over_coproduct X‚ÇÅ X‚ÇÇ).obj_obj_preimage_iso (over.mk _)).hom,
  have : _ ‚â´ _ ‚â´ _ ‚â´ _ = _ := coprod.inr ‚â´= hiA,
  simp only [coprod.inr_map, ‚ÜêiX‚ÇÇ] at this,
  rw [‚ÜêiX.cancel_iso_hom_right _ _, assoc, ‚Üêthis, assoc, pullback_snd_along_inr, assoc],
end

noncomputable def is_pullback_along_inl [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  is_limit (pullback_cone.mk _ _ (pullback_condition_along_inl cX f)) :=
left_pullback_of_coproduct_of_coproduct
  (is_coproduct_snd_snd cX f) cX _ _ _ _ (pullback_condition_along_inr cX f)

noncomputable def is_pullback_along_inr [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  is_limit (pullback_cone.mk _ _ (pullback_condition_along_inr cX f)) :=
right_pullback_of_coproduct_of_coproduct
  (is_coproduct_snd_snd cX f) cX _ _ _ (pullback_condition_along_inl cX f) _

end extensive_internal

open extensive_internal

def has_pullback_along_is_inl [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  has_pullback x‚ÇÅ f :=
has_limit.mk ‚ü®_, is_pullback_along_inl cX f‚ü©

def has_pullback_along_is_inr [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  has_pullback x‚ÇÇ f :=
has_limit.mk ‚ü®_, is_pullback_along_inr cX f‚ü©

def has_pullback_along_is_inl' [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  has_pullback f x‚ÇÅ :=
has_limit.mk ‚ü®pullback_cone.mk _ _ (pullback_condition_along_inl cX f).symm,
  pullback_cone.flip_is_limit (is_pullback_along_inl cX f)‚ü©

def has_pullback_along_is_inr' [extensive C] {x‚ÇÅ : X‚ÇÅ ‚ü∂ X} {x‚ÇÇ : X‚ÇÇ ‚ü∂ X}
  (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ)) (f : A ‚ü∂ X) :
  has_pullback f x‚ÇÇ :=
has_limit.mk ‚ü®pullback_cone.mk _ _ (pullback_condition_along_inr cX f).symm,
  pullback_cone.flip_is_limit (is_pullback_along_inr cX f)‚ü©

instance has_pullback_along_inl [extensive C] (f : A ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ) : has_pullback coprod.inl f :=
has_pullback_along_is_inl (coprod_is_coprod _ _) f
instance has_pullback_along_inr [extensive C] (f : A ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ) : has_pullback coprod.inr f :=
has_pullback_along_is_inr (coprod_is_coprod _ _) f
instance has_pullback_along_inl' [extensive C] (f : A ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ) : has_pullback f coprod.inl :=
has_pullback_along_is_inl' (coprod_is_coprod _ _) f
instance has_pullback_along_inr' [extensive C] (f : A ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ) : has_pullback f coprod.inr :=
has_pullback_along_is_inr' (coprod_is_coprod _ _) f

noncomputable def coproduct_of_both_pullback [extensive C]
  (a‚ÇÅ : A‚ÇÅ ‚ü∂ A) (a‚ÇÇ : A‚ÇÇ ‚ü∂ A)
  (x‚ÇÅ : X‚ÇÅ ‚ü∂ X) (x‚ÇÇ : X‚ÇÇ ‚ü∂ X) (cX : is_colimit (binary_cofan.mk x‚ÇÅ x‚ÇÇ))
  (f‚ÇÅ : A‚ÇÅ ‚ü∂ X‚ÇÅ) (f‚ÇÇ : A‚ÇÇ ‚ü∂ X‚ÇÇ) (f : A ‚ü∂ X)
  (c‚ÇÅ : f‚ÇÅ ‚â´ x‚ÇÅ = a‚ÇÅ ‚â´ f) (c‚ÇÇ : f‚ÇÇ ‚â´ x‚ÇÇ = a‚ÇÇ ‚â´ f)
  (hc‚ÇÅ : is_limit (pullback_cone.mk _ _ c‚ÇÅ)) (hc‚ÇÇ : is_limit (pullback_cone.mk _ _ c‚ÇÇ)) :
  is_colimit (binary_cofan.mk a‚ÇÅ a‚ÇÇ) :=
begin
  let iA‚ÇÅ : A‚ÇÅ ‚âÖ pullback_along_inl _ _ :=
    hc‚ÇÅ.cone_point_unique_up_to_iso (is_pullback_along_inl cX _),
  let iA‚ÇÇ : A‚ÇÇ ‚âÖ pullback_along_inr _ _ :=
    hc‚ÇÇ.cone_point_unique_up_to_iso (is_pullback_along_inr cX _),
  have ha‚ÇÅ : iA‚ÇÅ.hom ‚â´ pullback_snd_along_inl cX f = a‚ÇÅ :=
    hc‚ÇÅ.cone_point_unique_up_to_iso_hom_comp _ walking_cospan.right,
  have ha‚ÇÇ : iA‚ÇÇ.hom ‚â´ pullback_snd_along_inr cX f = a‚ÇÇ :=
    hc‚ÇÇ.cone_point_unique_up_to_iso_hom_comp _ walking_cospan.right,
  refine ‚ü®Œª (s : binary_cofan _ _),
            (is_coproduct_snd_snd cX f).desc
              (binary_cofan.mk (iA‚ÇÅ.inv ‚â´ s.inl) (iA‚ÇÇ.inv ‚â´ s.inr)), _, _‚ü©,
  { rintro (s : binary_cofan _ _) (_ | _),
    { change a‚ÇÅ ‚â´ _ = s.inl,
      have : pullback_snd_along_inl cX f ‚â´ _ = _ ‚â´ _ :=
        (is_coproduct_snd_snd cX f).fac (binary_cofan.mk (iA‚ÇÅ.inv ‚â´ s.inl) _) walking_pair.left,
      rw [‚Üêha‚ÇÅ, assoc, this, iso.hom_inv_id_assoc] },
    { change a‚ÇÇ ‚â´ _ = s.inr,
      have : pullback_snd_along_inr cX f ‚â´ _ = _ ‚â´ _ :=
        (is_coproduct_snd_snd cX f).fac (binary_cofan.mk _ (iA‚ÇÇ.inv ‚â´ s.inr)) walking_pair.right,
      rw [‚Üêha‚ÇÇ, assoc, this, iso.hom_inv_id_assoc] } },
  { rintro (s : binary_cofan _ _) m w,
    refine (is_coproduct_snd_snd cX f).uniq
        (binary_cofan.mk (iA‚ÇÅ.inv ‚â´ s.inl) (iA‚ÇÇ.inv ‚â´ s.inr)) _ _,
    rintro (_ | _),
    { change pullback_snd_along_inl cX f ‚â´ m = _ ‚â´ _,
      rw [iA‚ÇÅ.eq_inv_comp, ‚Üêassoc, ha‚ÇÅ],
      exact w walking_pair.left },
    { change pullback_snd_along_inr cX f ‚â´ m = _ ‚â´ _,
      rw [iA‚ÇÇ.eq_inv_comp, ‚Üêassoc, ha‚ÇÇ],
      exact w walking_pair.right } }
end

noncomputable def extensive_of_pullbacks_equiv_coproduct
  (i : ‚àÄ (A X‚ÇÅ X‚ÇÇ : C) (f : A ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ), has_pullback coprod.inl f)
  (h : ‚àÄ (A‚ÇÅ A‚ÇÇ A X‚ÇÅ X‚ÇÇ : C)
    (pA‚ÇÅ : A‚ÇÅ ‚ü∂ A) (pA‚ÇÇ : A‚ÇÇ ‚ü∂ A) (f‚ÇÅ : A‚ÇÅ ‚ü∂ X‚ÇÅ) (f‚ÇÇ : A‚ÇÇ ‚ü∂ X‚ÇÇ) (f : A ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ)
    (c‚ÇÅ : f‚ÇÅ ‚â´ coprod.inl = pA‚ÇÅ ‚â´ f) (c‚ÇÇ : f‚ÇÇ ‚â´ coprod.inr = pA‚ÇÇ ‚â´ f),
    is_colimit (binary_cofan.mk pA‚ÇÅ pA‚ÇÇ) ‚âÉ
      is_limit (pullback_cone.mk _ _ c‚ÇÅ) √ó is_limit (pullback_cone.mk _ _ c‚ÇÇ)) :
  extensive C :=
begin
  constructor,
  have : ‚àÄ (A X‚ÇÅ X‚ÇÇ : C) (f : A ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ), has_pullback coprod.inr f,
  { intros A X‚ÇÅ X‚ÇÇ f,
    let P := pullback coprod.inl (f ‚â´ (coprod.braiding _ _).hom),
    refine has_limit.mk ‚ü®pullback_cone.mk (pullback.fst : P ‚ü∂ _) pullback.snd _, _‚ü©,
    { rw [‚Üê(coprod.braiding _ _).cancel_iso_hom_right _ _, assoc, assoc, ‚Üêpullback.condition],
      simp },
    refine pullback_cone.is_limit.mk _ (Œª s, pullback.lift s.fst s.snd _)
      (Œª s, pullback.lift_fst _ _ _) (Œª s, pullback.lift_snd _ _ _) _,
    { intro s,
      rw ‚Üês.condition_assoc,
      simp },
    { intros s m m‚ÇÅ m‚ÇÇ,
      apply pullback.hom_ext;
      simp [m‚ÇÅ, m‚ÇÇ] } },
  introsI X‚ÇÅ X‚ÇÇ,
  apply equivalence.of_fully_faithfully_ess_surj _,
  { refine ‚ü®Œª f g t, _, _‚ü©,
    let c :=
      h g.1.left g.2.left _ X‚ÇÅ X‚ÇÇ coprod.inl coprod.inr g.1.hom g.2.hom (coprod.map g.1.hom g.2.hom)
        (by simp) (by simp) (coprod_is_coprod _ _),
    have : t.left ‚â´ coprod.map _ _ = coprod.map _ _ := over.w t,
    refine
      ‚ü®over.hom_mk _
        (pullback_cone.is_limit.lift' c.1 f.1.hom (coprod.inl ‚â´ t.left) (by simp [this])).2.1,
       over.hom_mk _
        (pullback_cone.is_limit.lift' c.2 f.2.hom (coprod.inr ‚â´ t.left) (by simp [this])).2.1‚ü©,
    intros f g t,
    ext : 2,
    { dsimp,
      simp only [coprod.inl_map],
      exact (pullback_cone.is_limit.lift' _ f.1.hom (coprod.inl ‚â´ t.left) _).2.2 },
    { dsimp,
      simp only [coprod.inr_map],
      exact (pullback_cone.is_limit.lift' _ f.2.hom (coprod.inr ‚â´ t.left) _).2.2 } },
  { refine ‚ü®_‚ü©,
    rintro ‚ü®g‚ÇÅ, g‚ÇÇ‚ü© ‚ü®f‚ÇÅ, f‚ÇÇ‚ü© ‚ü®k‚ÇÅ : g‚ÇÅ ‚ü∂ f‚ÇÅ, k‚ÇÇ : g‚ÇÇ ‚ü∂ f‚ÇÇ‚ü© ‚ü®l‚ÇÅ : g‚ÇÅ ‚ü∂ f‚ÇÅ, l‚ÇÇ : g‚ÇÇ ‚ü∂ f‚ÇÇ‚ü© t,
    replace t := congr_arg comma_morphism.left t,
    simp only [over_coproduct_map, over.hom_mk_left] at t,
    simp only [prod.mk.inj_iff],
    obtain ‚ü®c‚ÇÅ, c‚ÇÇ‚ü© :=
      h f‚ÇÅ.left f‚ÇÇ.left _ X‚ÇÅ X‚ÇÇ coprod.inl coprod.inr f‚ÇÅ.hom f‚ÇÇ.hom (coprod.map f‚ÇÅ.hom f‚ÇÇ.hom)
        (by simp) (by simp) (coprod_is_coprod _ _),
    split,
    { ext,
      apply pullback_cone.is_limit.hom_ext c‚ÇÅ,
      { rw [pullback_cone.mk_fst, over.w k‚ÇÅ, over.w l‚ÇÅ] },
      { rw [pullback_cone.mk_snd, ‚Üêcoprod.inl_map, t, coprod.inl_map] } },
    { ext,
      apply pullback_cone.is_limit.hom_ext c‚ÇÇ,
      { rw [pullback_cone.mk_fst, over.w k‚ÇÇ, over.w l‚ÇÇ] },
      { rw [pullback_cone.mk_snd, ‚Üêcoprod.inr_map, t, coprod.inr_map] } } },
  { refine ‚ü®Œª Y, ‚ü®‚ü®_, _‚ü©, ‚ü®_‚ü©‚ü©‚ü©,
    { apply over.mk (pullback.fst : pullback coprod.inl Y.hom ‚ü∂ X‚ÇÅ) },
    { apply over.mk (pullback.fst : pullback coprod.inr Y.hom ‚ü∂ X‚ÇÇ) },
    let c := (h _ _ _ _ _ _ _ _ _ Y.hom _ _).symm
                ‚ü®pullback_is_pullback _ _, pullback_is_pullback _ _‚ü©,
    let j : Y.left ‚âÖ _ ‚®ø _ := c.cocone_point_unique_up_to_iso (colimit.is_colimit _),
    refine over.iso_mk _ _,
    refine j.symm,
    ext,
    { dsimp,
      rw [colimit.comp_cocone_point_unique_up_to_iso_inv_assoc, coprod.inl_map, pullback.condition],
      refl },
    { dsimp,
      rw [colimit.comp_cocone_point_unique_up_to_iso_inv_assoc, coprod.inr_map, pullback.condition],
      refl } }
end

end limits
end category_theory
