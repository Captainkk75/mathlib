import analysis.normed_space.dual

open is_R_or_C

open_locale complex_conjugate

set_option old_structure_cmd true
variables {F : Type*} [inner_product_space ‚Ñù F]


--/-- A map `f` between modules over a semiring is linear if it satisfies the two properties
--`f (x + y) = f x + f y` and `f (c ‚Ä¢ x) = c ‚Ä¢ f x`. Elements of `linear_map R M M‚ÇÇ` (available under
--the notation `M ‚Üí‚Çó[R] M‚ÇÇ`) are bundled versions of such maps. -/
--
--structure linear_map (R : Type u) (M : Type v) (M‚ÇÇ : Type w)
--  [semiring R] [add_comm_group M] [add_comm_group M‚ÇÇ] [module R M] [module R M‚ÇÇ]
--  extends add_hom M M‚ÇÇ, M ‚Üí[R] M‚ÇÇ

section bad_def‚ÇÅ

-- Make a totally separate definition for conjugate linear maps like this:
structure conj_linear_map_bad‚ÇÅ (M‚ÇÅ : Type*) (M‚ÇÇ : Type*)
  [add_comm_group M‚ÇÅ] [add_comm_group M‚ÇÇ] [module ‚ÑÇ M‚ÇÅ] [module ‚ÑÇ M‚ÇÇ]
  extends add_hom M‚ÇÅ M‚ÇÇ :=
(map_smul : ‚àÄ (c : ‚ÑÇ) (z : M‚ÇÅ), to_fun (c ‚Ä¢ z) = (conj c) ‚Ä¢ to_fun z)

-- Main problem: totally separate from linear maps, which means massive code duplication

end bad_def‚ÇÅ

section bad_def‚ÇÇ

-- Generalize this construction to real or complex:
structure conj_linear_map_bad‚ÇÇ (ùïú : Type*) (M‚ÇÅ : Type*) (M‚ÇÇ : Type*) [is_R_or_C ùïú]
  [add_comm_group M‚ÇÅ] [add_comm_group M‚ÇÇ] [module ùïú M‚ÇÅ] [module ùïú M‚ÇÇ]
  extends add_hom M‚ÇÅ M‚ÇÇ :=
(map_smul : ‚àÄ (c : ùïú) (z : M‚ÇÅ), to_fun (c ‚Ä¢ z) = (conj c) ‚Ä¢ to_fun z)

variables {M‚ÇÅ M‚ÇÇ : Type*} [add_comm_group M‚ÇÅ] [add_comm_group M‚ÇÇ] [module ‚Ñù M‚ÇÅ]
[module ‚Ñù M‚ÇÇ]

-- Better, could at least unify e.g. vector spaces
-- Not general enough to replace linear maps -> needs to be a separate definition with its own API
-- Also, in the real case, we don't actually get a linear map:
--example (f‚ÇÅ : linear_map ‚Ñù M‚ÇÅ M‚ÇÇ) : conj_linear_map_bad ‚Ñù M‚ÇÅ M‚ÇÇ := f‚ÇÅ

end bad_def‚ÇÇ

section bad_def‚ÇÉ

-- Generalize some more?
structure conj_linear_map_bad‚ÇÉ (b : bool) (ùïú : Type*) (M‚ÇÅ : Type*) (M‚ÇÇ : Type*)
  [ring ùïú] [star_ring ùïú] [add_comm_group M‚ÇÅ] [add_comm_group M‚ÇÇ] [module ùïú M‚ÇÅ] [module ùïú M‚ÇÇ]
  extends add_hom M‚ÇÅ M‚ÇÇ :=
(map_smul : ‚àÄ (c : ùïú) (z : M‚ÇÅ), to_fun (c ‚Ä¢ z) = (if b then star c else c) ‚Ä¢ to_fun z)

-- Problem: in the real case, still have two different definitions when b=0 and b=1
-- Also, still not general enough to actually replace linear maps

end bad_def‚ÇÉ

section solution

/-
Bad solution 4: Conjugate space -> define a type copy of the vector space where
scalar multiplication has complex conjugation baked in.
-/

-- (Part of) our solution
structure semilinear_map {R‚ÇÅ : Type*} {R‚ÇÇ : Type*} [ring R‚ÇÅ] [ring R‚ÇÇ] (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ)
  (M‚ÇÅ : Type*) (M‚ÇÇ : Type*)
  [add_comm_group M‚ÇÅ] [add_comm_group M‚ÇÇ] [module R‚ÇÅ M‚ÇÅ] [module R‚ÇÇ M‚ÇÇ]
  extends add_hom M‚ÇÅ M‚ÇÇ :=
(map_smul' : ‚àÄ (r : R‚ÇÅ) (x : M‚ÇÅ), to_fun (r ‚Ä¢ x) = (œÉ r) ‚Ä¢ to_fun x)

variables {M‚ÇÅ M‚ÇÇ : Type*} [add_comm_group M‚ÇÅ] [add_comm_group M‚ÇÇ] [module ‚Ñù M‚ÇÅ]
[module ‚Ñù M‚ÇÇ]

example (f‚ÇÅ : semilinear_map (ring_hom.id ‚Ñù) M‚ÇÅ M‚ÇÇ) :
  semilinear_map (conj : ‚Ñù ‚Üí+* ‚Ñù) M‚ÇÅ M‚ÇÇ := f‚ÇÅ

/-
Big advantage: can actually replace linear maps, no need to duplicate API
Use notation to hide the ugliness:
`semilinear_map (ring_hom.id ‚ÑÇ) M‚ÇÅ M‚ÇÇ` denoted by `M‚ÇÅ ‚Üí‚Çó[‚ÑÇ] M‚ÇÇ`
Conjugate-linear maps denoted as `M‚ÇÅ ‚Üí‚Çó‚ãÜ[‚ÑÇ] M‚ÇÇ`
Drawback: implies massive refactor
-/

end solution

-- How to deal with composition?
variables {R‚ÇÅ R‚ÇÇ R‚ÇÉ M‚ÇÅ M‚ÇÇ M‚ÇÉ : Type*} [ring R‚ÇÅ] [ring R‚ÇÇ] [ring R‚ÇÉ]
  [add_comm_group M‚ÇÅ] [add_comm_group M‚ÇÇ] [add_comm_group M‚ÇÉ]
  [module R‚ÇÅ M‚ÇÅ] [module R‚ÇÇ M‚ÇÇ] [module R‚ÇÉ M‚ÇÉ]
  {œÉ‚ÇÅ‚ÇÇ : R‚ÇÅ ‚Üí+* R‚ÇÇ} {œÉ‚ÇÇ‚ÇÉ : R‚ÇÇ ‚Üí+* R‚ÇÉ}

namespace semilinear_map

instance : add_hom_class (semilinear_map œÉ‚ÇÅ‚ÇÇ M‚ÇÅ M‚ÇÇ) M‚ÇÅ M‚ÇÇ :=
{ coe := Œª f, f.to_fun,
  coe_injective' := Œª f g h, by cases f; cases g; congr',
  map_add := Œª f, f.map_add' }

def comp (g : semilinear_map œÉ‚ÇÇ‚ÇÉ M‚ÇÇ M‚ÇÉ) (f : semilinear_map œÉ‚ÇÅ‚ÇÇ M‚ÇÅ M‚ÇÇ) :
  semilinear_map (œÉ‚ÇÇ‚ÇÉ.comp œÉ‚ÇÅ‚ÇÇ) M‚ÇÅ M‚ÇÉ :=
{ to_fun := g ‚àò f,
  map_add' := sorry,
  map_smul' := sorry }

variables {N : Type*} [add_comm_group N] [module ‚ÑÇ N]
variables (g : semilinear_map (ring_hom.id ‚ÑÇ) N N) (f : semilinear_map (conj : ‚ÑÇ ‚Üí+* ‚ÑÇ) N N)

#check f.comp f
#check f.comp g
#check g.comp g

example : g.comp g = g := sorry  -- Typechecks
--example : f.comp f = g := sorry  -- Doesn't typecheck!

-- The solution:

/-- Class that expresses the fact that three ring homomorphisms form a composition triple. This is
used to handle composition of semilinear maps. -/
class ring_hom_comp_triple (œÉ‚ÇÅ‚ÇÇ : R‚ÇÅ ‚Üí+* R‚ÇÇ) (œÉ‚ÇÇ‚ÇÉ : R‚ÇÇ ‚Üí+* R‚ÇÉ)
  (œÉ‚ÇÅ‚ÇÉ : out_param (R‚ÇÅ ‚Üí+* R‚ÇÉ)) : Prop :=
(comp_eq : œÉ‚ÇÇ‚ÇÉ.comp œÉ‚ÇÅ‚ÇÇ = œÉ‚ÇÅ‚ÇÉ)

/-- Class that expresses the fact that two ring homomorphisms are inverses of each other. This is
used to handle `symm` for semilinear equivalences. -/
class ring_hom_inv_pair (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ) (œÉ' : out_param (R‚ÇÇ ‚Üí+* R‚ÇÅ)) : Prop :=
(comp_eq : œÉ'.comp œÉ = ring_hom.id R‚ÇÅ)
(comp_eq‚ÇÇ : œÉ.comp œÉ' = ring_hom.id R‚ÇÇ)

-- This one is needed for many lemmas about continuous linear maps:

/-- Class expressing the fact that a `ring_hom` is surjective. This is needed in the context
of semilinear maps, where some lemmas require this. -/
class ring_hom_surjective (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ) : Prop :=
(is_surjective : function.surjective œÉ)


end semilinear_map

-- **Applications**

-- * Riesz representation theorem: `inner_product_space/dual.lean`, line 113
-- * Adjoint of an operator on a Hilbert space: `inner_product_space/adjoint.lean`, line 93
-- * Frobenius-linear maps: over to Rob!
