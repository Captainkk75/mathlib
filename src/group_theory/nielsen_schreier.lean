/-
Copyright (c) 2021 David W√§rn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David W√§rn
-/
import category_theory.action
import combinatorics.quiver
import group_theory.is_free_group
/-!
# The Nielsen-Schreier theorem

This file proves that a subgroup of a free group is itself free.

## Main result

- `subgroup_is_free_of_is_free H`: an instance saying that a subgroup of a free group is free.

## Proof overview

The proof is analogous to the proof using covering spaces and fundamental groups of graphs,
but we work directly with groupoids instead of topological spaces. Under this analogy,

- `is_free_groupoid G` corresponds to saying that a space is a graph.
- `End_mul_equiv_subgroup H` plays the role of replacing 'subgroup of fundamental group' with
  'fundamental group of covering space'.
- `action_category_is_free G A` corresponds to the fact that a covering of a (single-vertex)
  graph is a graph.
- `End_is_free_group_of_arborescence` corresponds to the fact that, given a spanning tree of a
  graph, its fundamental group is free (generated by loops from the complement of the tree).

## Implementation notes

Our definition of `is_free_groupoid` is nonstandard. Normally one would require that functors
`G ‚•§ X` to any _groupoid_ `X` are given by graph homomorphisms from the generators, but we only
consider _groups_ `X`. This simplifies the argument since functor equality is complicated in
general, but simple for functors to single object categories.

## References

https://ncatlab.org/nlab/show/Nielsen-Schreier+theorem

## Tags

free group, Nielsen-Schreier

-/

noncomputable theory
open_locale classical
universes v u

open category_theory category_theory.action_category category_theory.single_obj quiver
  is_free_group as fgp

def is_free_groupoid.generators (G) [groupoid G] := G

/-- A groupoid `G` is free when we have the following data:
 - a wide subquiver `generators` of `G`
 - such that a functor from `G` to any group `X` is uniquely determined
   by assigning labels in `X` to the arrows in `generators.

   This definition is nonstandard. Normally one would require that functors `G ‚•§ X`
   to any _groupoid_ `X` are given by graph homomorphisms from `generators`. -/
class is_free_groupoid (G : Type u) [groupoid.{v} G] :=
(quiver_generators : quiver.{v+1} (is_free_groupoid.generators G))
(of : Œ† {a b : is_free_groupoid.generators G}, (a ‚ü∂ b) ‚Üí ((show G, from a) ‚ü∂ b))
(unique_lift : ‚àÄ {X} [group.{v} X] (f : labelling (is_free_groupoid.generators G) X),
                ‚àÉ! F : G ‚•§ single_obj X, ‚àÄ a b (g : a ‚ü∂ b), F.map (of g) = f g)

namespace is_free_groupoid

attribute [instance] quiver_generators

@[ext]
lemma ext_functor {G : Type u} {X} [groupoid.{v} G] [is_free_groupoid G] [group.{v} X]
  (f g : G ‚•§ single_obj X)
  (h : ‚àÄ (a b : generators G) (e : a ‚ü∂ b), f.map (of e) = g.map (of e)) :
  f = g :=
let ‚ü®_, _, um‚ü© := @unique_lift G _ _ X _ (Œª (a b : generators G) (e : a ‚ü∂ b), g.map (of e)) in
trans (um _ h) (um _ (Œª _ _ _, rfl)).symm

-- FIXME name this. introduce a notation?
-- This only exists to help the typechecker.
def foo {G : Type u} [groupoid.{v} G] [is_free_groupoid G] (g : G) : symmetrify (generators G) :=
g

lemma path_nonempty_of_hom {G} [groupoid.{u u} G] [is_free_groupoid G] {a b : G} :
  nonempty (a ‚ü∂ b) ‚Üí nonempty (path (foo a) (foo b)) :=
begin
  rintro ‚ü®p‚ü©,
  rw [‚Üêweakly_connected_component.eq, eq_comm, ‚Üêfree_group.of_injective.eq_iff, ‚Üêmul_inv_eq_one],
  let X := free_group (weakly_connected_component (symmetrify (generators G))),
  let f : symmetrify (generators G) ‚Üí X := Œª g, free_group.of ‚Üëg,
  let F : G ‚•§ single_obj X := single_obj.difference_functor f,
  change F.map p = ((category_theory.functor.const G).obj ()).map p,
  congr, ext,
  rw [functor.const.obj_map, id_as_one, difference_functor_map, mul_inv_eq_one],
  apply congr_arg free_group.of,
  rw weakly_connected_component.eq,
  exact ‚ü®hom.to_path (sum.inr e)‚ü©,
end

instance generators_connected (G) [groupoid.{u u} G] [is_connected G] [is_free_groupoid G]
  (r : G) : rooted_connected (foo r) :=
‚ü®Œª b, path_nonempty_of_hom (category_theory.nonempty_hom_of_connected_groupoid r b)‚ü©

instance action_category_is_free {G A : Type u} [group G] [is_free_group G] [mul_action G A] :
  is_free_groupoid (action_category G A) :=
{ quiver_generators := ‚ü®Œª a b, { e : fgp.generators G // fgp.of e ‚Ä¢ a.back = b.back }‚ü©,
  of := Œª a b e, ‚ü®fgp.of e.val, e.property‚ü©,
  unique_lift := begin
    introsI X _ f,
    let f' : fgp.generators G ‚Üí (A ‚Üí X) ‚ãä[mul_aut_arrow] G :=
      Œª e, ‚ü®Œª b, @f ‚ü®(), _‚ü© ‚ü®(), b‚ü© ‚ü®e, smul_inv_smul _ b‚ü©, fgp.of e‚ü©,
    rcases fgp.unique_lift f' with ‚ü®F', hF', uF'‚ü©,
    refine ‚ü®uncurry F' _, _, _‚ü©,
    { suffices : semidirect_product.right_hom.comp F' = monoid_hom.id _,
      { exact monoid_hom.ext_iff.mp this },
      ext,
      rw [monoid_hom.comp_apply, hF'],
      refl },
    { rintros ‚ü®‚ü®‚ü©, a : A‚ü© ‚ü®‚ü®‚ü©, b‚ü© ‚ü®e, h : fgp.of e ‚Ä¢ a = b‚ü©,
      change (F' (fgp.of _)).left _ = _,
      rw hF',
      cases (inv_smul_eq_iff.mpr h.symm),
      refl },
    { intros E hE,
      have : curry E = F',
      { apply uF',
        intro e,
        ext,
        { convert hE _ _ _, refl },
        { refl } },
      apply functor.hext,
      { intro, apply unit.ext },
      { refine action_category.cases _, intros,
        simp only [‚Üêthis, uncurry_map, curry_apply_left, coe_back, hom_of_pair.val] } },
  end }

namespace spanning_tree

variables {G : Type u} [groupoid.{u} G] [is_free_groupoid G]
  (T : wide_subquiver (symmetrify (generators G))) [arborescence T]

variable {T}
def bar : T ‚Üí G := id
variable (T)

/-- A path in the tree gives a hom, by composition. -/
-- this has to be marked `noncomputable`, see issue #451
noncomputable def hom_of_path : Œ† {a : G}, path (root T) a ‚Üí ((bar (root T)) ‚ü∂ a)
| _ path.nil := ùüô _
| a (path.cons p f) := hom_of_path p ‚â´ sum.rec_on f.val (Œª e, of e) (Œª e, inv (of e))

/-- For every vertex `a`, there is a canonical hom from the root, given by the
    path in the tree. -/
def tree_hom (a : G) : (bar $ root T) ‚ü∂ a := hom_of_path T (default _)

lemma tree_hom_eq {a : G} (p : path (root T) a) : tree_hom T a = hom_of_path T p :=
by rw [tree_hom, unique.default_eq]

@[simp] lemma tree_hom_root : tree_hom T (bar $ root T) = ùüô _ :=
trans (tree_hom_eq T path.nil) rfl

/-- Any hom in `G` can be made into a loop, by conjugating with `tree_hom`s. -/
def loop_of_hom {a b : G} (p : a ‚ü∂ b) : End (bar $ root T) :=
tree_hom T a ‚â´ p ‚â´ inv (tree_hom T b)

lemma loop_of_hom_eq_id {a b : generators G} {e : a ‚ü∂ b} :
  (sum.inl e) ‚àà T a b ‚à® (sum.inr e) ‚àà T b a
    ‚Üí loop_of_hom T (of e) = ùüô _ :=
begin
  rw [loop_of_hom, ‚Üêcategory.assoc, is_iso.comp_inv_eq, category.id_comp],
  rintro (h | h),
  { rw [tree_hom_eq T (path.cons (default _) ‚ü®sum.inl e, h‚ü©), hom_of_path], refl },
  { rw tree_hom_eq T (path.cons (default _) ‚ü®sum.inr e, h‚ü©),
    simp only [hom_of_path, is_iso.inv_hom_id, category.comp_id, category.assoc, tree_hom] }
end

/-- Since a hom gives a loop, a homomorphism from the vertex group at the root
    extends to a functor on the whole groupoid. -/
@[simps] def functor_of_monoid_hom {X} [monoid X] (f : End (bar $ root T) ‚Üí* X) :
  G ‚•§ single_obj X :=
{ obj := Œª _, (),
  map := Œª a b p, f (loop_of_hom T p),
  map_id' := begin
    intro a,
    rw [loop_of_hom, category.id_comp, is_iso.hom_inv_id, ‚ÜêEnd.one_def, f.map_one, id_as_one],
 end,
  map_comp' := begin
    intros,
    rw [comp_as_mul, ‚Üêf.map_mul],
    simp only [is_iso.inv_hom_id_assoc, loop_of_hom, End.mul_def, category.assoc]
  end }

/-- Given a free groupoid and an arborescence of its generating quiver, the vertex
    group at the root is freely generated by loops coming from generating arrows
    in the complement of the tree. -/
def End_is_free : is_free_group (End (bar $ root T)) :=
{ generators := set.compl (wide_subquiver_equiv_set_total $ wide_subquiver_symmetrify T),
  of := Œª e, loop_of_hom T (of e.val.hom),
  unique_lift' := begin
    introsI X _ f,
    let f' : labelling (generators G) X := Œª a b e,
      if h : sum.inl e ‚àà T a b ‚à® sum.inr e ‚àà T b a then 1
      else f ‚ü®‚ü®a, b, e‚ü©, h‚ü©,
    rcases unique_lift f' with ‚ü®F', hF', uF'‚ü©,
    refine ‚ü®F'.map_End _, _, _‚ü©,
    { suffices : ‚àÄ {x y} (q : x ‚ü∂ y), F'.map (loop_of_hom T q) = (F'.map q : X),
      { rintro ‚ü®‚ü®a, b, e‚ü©, h‚ü©,
        rw [F'.map_End_apply (bar $ root T), this, hF'],
        exact dif_neg h },
      intros,
      suffices : ‚àÄ {a} (p : path (root T) a), F'.map (hom_of_path T p) = 1,
      { simp only [this, tree_hom, comp_as_mul, inv_as_inv, loop_of_hom,
        one_inv, mul_one, one_mul, functor.map_inv, functor.map_comp] },
      intros a p, induction p with b c p e ih,
      { rw [hom_of_path, F'.map_id, id_as_one] },
      rw [hom_of_path, F'.map_comp, comp_as_mul, ih, mul_one],
      rcases e with ‚ü®e | e, eT‚ü©,
      { rw hF', exact dif_pos (or.inl eT) },
      { rw [F'.map_inv, inv_as_inv, inv_eq_one, hF'], exact dif_pos (or.inr eT) } },
    { intros E hE,
      ext,
      suffices : (functor_of_monoid_hom T E).map x = F'.map x,
      { convert this, simp [loop_of_hom] },
      congr,
      apply uF',
      intros a b e,
      change E (loop_of_hom T _) = dite _ _ _,
      split_ifs,
      { rw [loop_of_hom_eq_id T h, ‚ÜêEnd.one_def, E.map_one] },
      { exact hE ‚ü®‚ü®a, b, e‚ü©, h‚ü© } }
  end }

end spanning_tree

instance End_is_free_of_connected_free {G} [groupoid G] [is_connected G] [is_free_groupoid G]
  (r : G) : is_free_group (End r) :=
spanning_tree.End_is_free (geodesic_subtree (foo r))

end is_free_groupoid

/-- The Nielsen-Schreier theorem: a subgroup of a free group is free. -/
instance subgroup_is_free_of_is_free {G} [group.{u} G] [is_free_group G] (H : subgroup G) :
  is_free_group H :=
is_free_group.of_mul_equiv (End_mul_equiv_subgroup H)
