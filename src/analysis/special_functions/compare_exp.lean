/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.special_functions.pow

/-!
# Growth estimates on `x ^ y` for complex `x`, `y`

Let `l` be a filter on `‚ÑÇ` such that `complex.re` tends to infinity along `l` and `complex.im z`
grows at a subexponential rate compared to `complex.re z`. Then

- `complex.is_o_log_abs_re_of_subexponential_im_re`: `real.log ‚àò complex.abs` is `o`-small of
  `complex.re` along `l`;

- `complex.tendsto_cpow_const_mul_exp_const_mul_nhds_zero`: `z ^ a * exp (b * z)` tends to zero for
  any real negative `b`;

- `complex.is_o_cpow_const_mul_exp`: `z ^ a‚ÇÅ * exp (b‚ÇÅ * z)` is `o`-small of `z ^ a‚ÇÇ * exp (b‚ÇÇ * z)`
  for any complex `a‚ÇÅ`, `a‚ÇÇ` and real `b‚ÇÅ < b‚ÇÇ`.
-/

open asymptotics filter
open_locale topological_space

namespace complex

lemma is_o_log_abs_re_of_subexponential_im_re {l : filter ‚ÑÇ}
  (hl‚ÇÅ : tendsto re l at_top) (hl‚ÇÇ : ‚àÄ n : ‚Ñï, ‚àÄ·∂† z : ‚ÑÇ in l, z.im ^ n ‚â§ real.exp z.re) :
  (Œª z, real.log (abs z)) =o[l] re :=
begin
  have h2 : 0 < real.sqrt 2, by simp,
  calc (Œª z, real.log (abs z)) =O[l] (Œª z, real.log (real.sqrt 2) + real.log (max z.re (|z.im|))) :
    is_O.of_bound 1 $ (hl‚ÇÅ.eventually_ge_at_top 1).mono $ Œª z hz,
      begin
        have hz' : 1 ‚â§ abs z, from hz.trans (re_le_abs z),
        have hz‚ÇÄ : 0 < abs z, from one_pos.trans_le hz',
        have hm‚ÇÄ : 0 < max z.re (|z.im|), from lt_max_iff.2 (or.inl $ one_pos.trans_le hz),
        rw [one_mul, real.norm_eq_abs, _root_.abs_of_nonneg (real.log_nonneg hz')],
        refine le_trans _ (le_abs_self _),
        rw [‚Üê real.log_mul, real.log_le_log,
          ‚Üê _root_.abs_of_nonneg (le_trans zero_le_one hz)],
        exacts [abs_le_sqrt_two_mul_max z, one_pos.trans_le hz', (mul_pos h2 hm‚ÇÄ), h2.ne', hm‚ÇÄ.ne']
      end
  ... =o[l] re : is_o.add (is_o_const_left.2 $ or.inr $ tendsto_abs_at_top_at_top.comp hl‚ÇÅ) _,
  refine is_o_iff.2 (Œª Œµ Œµ‚ÇÄ, _),
  obtain ‚ü®n, hnŒµ, hn‚ÇÄ, hn‚ü© : ‚àÉ n : ‚Ñï, Œµ‚Åª¬π < n ‚àß 0 < n ‚àß even n,
  { rcases exists_nat_gt Œµ‚Åª¬π with ‚ü®n, hn‚ü©,
    refine ‚ü®2 * n, hn.trans_le $ nat.mono_cast _, _, even_two_mul _‚ü©,
    exacts [le_mul_of_one_le_left' one_le_two,
      mul_pos two_pos $ nat.cast_pos.1 $ (inv_pos.2 Œµ‚ÇÄ).trans hn] },
  filter_upwards [(real.is_o_log_id_at_top.comp_tendsto hl‚ÇÅ).bound Œµ‚ÇÄ, hl‚ÇÇ n,
    hl‚ÇÅ.eventually_gt_at_top 1] with z hre him h‚ÇÅ,
  cases le_total (|z.im|) z.re with hle hle,
  { rwa [max_eq_left hle] },
  have H : 1 < |z.im|, from h‚ÇÅ.trans_le hle,
  rw [max_eq_right hle, real.norm_eq_abs, real.norm_eq_abs, abs_of_pos (real.log_pos H),
    real.log_le_iff_le_exp (one_pos.trans H)],
  rw [‚Üê (@strict_mono_on_pow ‚Ñù _ _ hn‚ÇÄ).le_iff_le (_root_.abs_nonneg z.im) (real.exp_pos _).le],
  simp only [hn.pow_abs, ‚Üê real.exp_nat_mul, ‚Üê mul_assoc],
  refine him.trans (real.exp_le_exp.2 $ (le_abs_self _).trans _),
  refine le_mul_of_one_le_left (_root_.abs_nonneg _) _,
  rw [‚Üê div_le_iff Œµ‚ÇÄ, one_div],
  exact hnŒµ.le
end

lemma tendsto_cpow_const_mul_exp_const_mul_nhds_zero (a : ‚ÑÇ) {b : ‚Ñù} {l : filter ‚ÑÇ}
  (hl‚ÇÅ : tendsto re l at_top) (hl‚ÇÇ : ‚àÄ n : ‚Ñï, ‚àÄ·∂† z : ‚ÑÇ in l, z.im ^ n ‚â§ real.exp z.re)
  (hb : b < 0) :
  tendsto (Œª z, z ^ a * exp (b * z)) l (ùìù 0) :=
begin
  suffices : tendsto (Œª z, real.exp (a.re * real.log (abs z) + b * re z)) l (ùìù 0),
  { have h‚ÇÄ : ‚àÄ·∂† z : ‚ÑÇ in l, z ‚â† 0, from hl‚ÇÅ.eventually_ne_at_top' 0,
    rw [tendsto_zero_iff_norm_tendsto_zero],
    simp only [norm_mul],
    rw [((is_Theta_cpow_const_rpow (Œª _ _, h‚ÇÄ)).norm_left.mul is_Theta_rfl).tendsto_zero_iff],
    refine this.congr' (h‚ÇÄ.mono $ Œª x hx, _),
    rw [norm_eq_abs, abs_exp, of_real_mul_re, real.rpow_def_of_pos (abs_pos.2 hx), real.exp_add,
      mul_comm a.re] },
  rw [‚Üê tendsto_comap_iff, real.comap_exp_nhds_zero],
  refine is_equivalent.tendsto_at_bot _ (tendsto_const_nhds.neg_mul_at_top hb hl‚ÇÅ),
  have : (Œª z, real.log (abs z)) =o[l] re,
    from is_o_log_abs_re_of_subexponential_im_re hl‚ÇÅ hl‚ÇÇ,
  exact (((is_O_const_const _ hb.ne _).mul_is_o this).add_is_equivalent is_equivalent.refl).symm
end

lemma is_o_cpow_const_mul_exp {a‚ÇÅ a‚ÇÇ : ‚ÑÇ} {b‚ÇÅ b‚ÇÇ : ‚Ñù} {l : filter ‚ÑÇ}
  (hl‚ÇÅ : tendsto re l at_top) (hl‚ÇÇ : ‚àÄ n : ‚Ñï, ‚àÄ·∂† z : ‚ÑÇ in l, z.im ^ n ‚â§ real.exp z.re)
  (hb : b‚ÇÅ < b‚ÇÇ) :
  (Œª z, z ^ a‚ÇÅ * exp (b‚ÇÅ * z)) =o[l] (Œª z, z ^ a‚ÇÇ * exp (b‚ÇÇ * z)) :=
begin
  have h‚ÇÄ : ‚àÄ·∂† z : ‚ÑÇ in l, z ‚â† 0, from (hl‚ÇÅ.eventually_ne_at_top' (0 : ‚ÑÇ)),
  refine (is_o_iff_tendsto' (h‚ÇÄ.mono _)).mpr _,
  { intros x hne h,
    exfalso,
    simpa [hne, exp_ne_zero] using h },
  refine (tendsto_cpow_const_mul_exp_const_mul_nhds_zero (a‚ÇÅ - a‚ÇÇ) hl‚ÇÅ hl‚ÇÇ (sub_neg.2 hb)).congr' _,
  filter_upwards [h‚ÇÄ] with z hz,
  rw [mul_div_mul_comm, ‚Üê exp_sub, ‚Üê sub_mul, ‚Üê of_real_sub, cpow_sub _ _ hz]
end

end complex

