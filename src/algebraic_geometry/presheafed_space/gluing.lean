/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import topology.gluing
import algebraic_geometry.presheafed_space.has_colimits
import category_theory.limits.shapes.binary_products
import algebraic_geometry.stalks
import category_theory.adjunction.fully_faithful

/-!
# Gluing Topological spaces

Given a family of gluing data, consisting of
1. An index type `Œπ`
2. A topological space `U i` for each `i : Œπ`.
3. An open subset `V i j ‚äÜ U i` for each `i j : Œπ`.
4. A transition map `f i j : V i j ‚ü∂ V j i` for each `i j : Œπ`.
such that
5. `V i i = U i`.
6. `f i i` is the identity.
7. `f i j x ‚àà V j k` for all `x ‚àà V i j ‚à© V i k`.
8. `f i j ‚â´ f j k = f i k`.

We can then glue the topological spaces `U i` along `V i j`.

THe construction should be "sealed" and considered as a black box, while only using the API
provided.

## Main definitions

* `Top.gluing_data`: A structure containing the family of gluing data.
* `Top.gluing_data.glued`: The glued topological space.
    This is defined as the coequalizer of `‚àê V i j ‚áâ ‚àê U i`, so that the general colimit API can
    be used.
* `Top.gluing_data.imm`: The immersion `imm i : U i ‚ü∂ glued` for each `i : Œπ`.
* `Top.gluing_data.rel`: A relation on `Œ£ i, D.U i` defined by `‚ü®i, x‚ü© ~ ‚ü®j, y‚ü©` iff
    `‚ü®i, x‚ü© = ‚ü®j, y‚ü©` or `f i j x = y`. See `Top.gluing_data.imm_eq_iff_rel`.

## Main results

* `Top.gluing_data.is_open_iff`: A set in `glued` is open iff its preimage along each `imm i` is
    open.
* `Top.gluing_data.imm_jointly_surjective`: The `imm i`s are jointly surjective.
* `Top.gluing_data.glue_condition` : `f i j ‚â´ imm j = imm i`.
* `Top.gluing_data.rel_equiv`: `rel` is an equivalence relation.
* `Top.gluing_data.imm_eq_iff_rel`: `imm i x = imm j y ‚Üî ‚ü®i, x‚ü© ~ ‚ü®j, y‚ü©`.
* `Top.gluing_data.image_inter`: The intersection of the images of `U i` and `U j` in `glued` is
    `V i j`.
* `Top.gluing_data.preimage_range`: The preimage of the image of `U i` in `U j` is `V i j`.
* `Top.gluing_data.preimage_image_eq_preimage_f`: The preimage of the image of some `U ‚äÜ U i` is
    given by the preimage along `f j i`.
* `Top.gluing_data.imm_open_embedding`: Each of the `imm i`s are open embeddings.

-/

noncomputable theory

open topological_space category_theory
open category_theory.limits
namespace algebraic_geometry

universes v u

variables {C : Type u} [category.{v} C]

-- def is_open_map.functor_comp {X Y Z: Top.{u}} (f : X ‚ü∂ Y)
--   (hf : is_open_map f) (g : Y ‚ü∂ Z) (hg : is_open_map g) :
--   hf.functor ‚ãô hg.functor = @is_open_map.functor _ _ (f ‚â´ g) (hg.comp hf) :=
-- begin
--   fapply category_theory.functor.ext,
--   intro U, ext, simp,
--   intros U V i, delta is_open_map.functor, simp
-- end

lemma heq_id_of_eq {X Y : C} (H : X = Y) (f : Y ‚ü∂ Y) (h‚ÇÅ : f = ùüô _) :
  f == ùüô X := by { cases H, simp[h‚ÇÅ], }

section end

attribute[simps] Top.presheaf.pushforward
open opposite Top.presheaf

@[simps]
def inv_of_iso_pushforward {X Y : PresheafedSpace C} (H‚ÇÅ : X.1 ‚âÖ Y.1) (H‚ÇÇ : H‚ÇÅ.hom _* X.2 ‚ü∂ Y.2) :
   X.presheaf ‚ü∂ H‚ÇÅ.inv _* Y.presheaf :=
({ app := Œª U, X.presheaf.map (eq_to_hom
    (begin
      induction U using opposite.rec,
      simp only [unop_op, op_inj_iff, functor.op_obj, opens.map],
      ext,
      simp only [coe_hom_inv_id, set.mem_preimage, topological_space.opens.mem_coe,
        iff_self, subtype.coe_mk, subtype.val_eq_coe]
    end)),
    naturality' := Œª _ _ f,
    begin
      delta pushforward_obj,
      simp only [quiver.hom.unop_op, functor.comp_map, functor.op_map, ‚Üêfunctor.map_comp],
      congr
    end } : X.presheaf ‚ü∂ H‚ÇÅ.inv _* (H‚ÇÅ.hom _* X.presheaf)) ‚â´
(Top.presheaf.pushforward H‚ÇÅ.inv).map H‚ÇÇ


def hom_of_iso_pushforward {X Y : PresheafedSpace C} (H‚ÇÅ : X.1 ‚âÖ Y.1) (H‚ÇÇ : Y.2 ‚ü∂ H‚ÇÅ.hom _* X.2) :
   H‚ÇÅ.inv _* Y.presheaf ‚ü∂ X.presheaf :=
(Top.presheaf.pushforward H‚ÇÅ.inv).map H‚ÇÇ ‚â´
  ({ app := Œª U, X.presheaf.map (eq_to_hom
    (begin
      induction U using opposite.rec,
      simp only [unop_op, op_inj_iff, functor.op_obj, opens.map],
      ext,
      simp only [coe_hom_inv_id, set.mem_preimage, topological_space.opens.mem_coe,
        iff_self, subtype.coe_mk, subtype.val_eq_coe]
    end)),
    naturality' := Œª _ _ f,
    begin
      delta pushforward_obj,
      simp only [quiver.hom.unop_op, functor.comp_map, functor.op_map, ‚Üêfunctor.map_comp],
      congr
    end } : H‚ÇÅ.inv _* (H‚ÇÅ.hom _* X.presheaf) ‚ü∂ X.presheaf)

@[simps hom inv]
def PresheafedSpace.iso_of_components {X Y : PresheafedSpace C} (H‚ÇÅ : X.1 ‚âÖ Y.1)
  (H‚ÇÇ : H‚ÇÅ.hom _* X.2 ‚âÖ Y.2) : X ‚âÖ Y :=
{ hom := { base := H‚ÇÅ.hom, c := H‚ÇÇ.inv },
  inv := { base := H‚ÇÅ.inv,
    c := inv_of_iso_pushforward H‚ÇÅ H‚ÇÇ.hom },
  hom_inv_id' := by { ext, simp, dsimp only [functor.op], erw category.id_comp, simpa, simp },
  inv_hom_id' :=
  begin
    ext x,
    induction x using opposite.rec,
    change (H‚ÇÇ.inv.app (op x) ‚â´ (X.presheaf.map (eq_to_hom _) ‚â´
      H‚ÇÇ.hom.app _)) ‚â´ Y.presheaf.map _ = _,
    simp only [algebraic_geometry.PresheafedSpace.id_c_app,
      category.assoc, pushforward.comp_inv_app],
    erw [‚ÜêH‚ÇÇ.hom.naturality],
    have := congr_app (H‚ÇÇ.inv_hom_id) (op x),
    cases x,
    rw nat_trans.comp_app at this,
    convert this,
    { dsimp, simp },
    { simp },
    { simp }
  end }

section end

@[simps hom_base inv_base hom_c_app inv_c_app { attrs := [] }]
def restrict_eq {X : Top} (Y : PresheafedSpace C) (f g : X ‚ü∂ Y.1)
  (hf : open_embedding f) (hg : open_embedding g) (eq : f = g) :
  Y.restrict hf ‚âÖ Y.restrict hg :=
PresheafedSpace.iso_of_components (iso.refl X)
begin
  refine (functor.associator _ _ _).symm.trans _,
  refine iso_whisker_right _ Y.presheaf,
  change (opens.map _ ‚ãô is_open_map.functor _).op ‚âÖ _,
  apply nat_iso.op,
  fapply nat_iso.of_components,
  { intro U,
    apply eq_to_iso,
    cases U,
    ext,
    simp only [is_open_map.functor_obj_coe, opens.map, functor.comp_obj, subtype.coe_mk, eq],
    erw iso.refl_hom,
    simp },
  { intros _ _ _,
    simp[is_open_map.functor] },
end

@[simps hom_base inv_base hom_c_app inv_c_app { attrs := [] }]
def restrict_comp {X Y : Top} (Z : PresheafedSpace C) (f : X ‚ü∂ Y)
  (hf : open_embedding f) (g : Y ‚ü∂ Z.1) (hg : open_embedding g) (h : X ‚ü∂ Z.1) (eq : h = f ‚â´ g) :
  Z.restrict (show open_embedding h, by simpa[eq] using hg.comp hf) ‚âÖ
    ((Z.restrict hg).restrict hf) :=
PresheafedSpace.iso_of_components (iso.refl X)
begin
  refine (functor.associator _ _ _).symm.trans
  ((iso_whisker_right _ Z.presheaf).trans (functor.associator _ _ _)),
  change (opens.map _ ‚ãô is_open_map.functor _).op ‚âÖ
    (is_open_map.functor _ ‚ãô is_open_map.functor _).op,
  apply nat_iso.op,
  fapply nat_iso.of_components,
  intro U,
  apply eq_to_iso,
  ext1,
  simp only [set.image_congr, is_open_map.functor, Top.comp_app,
    functor.comp_obj, subtype.coe_mk, eq, ‚Üêset.image_comp],
  congr,
  intros _ _ _,
  simp[is_open_map.functor],
end

attribute [simp]  algebraic_geometry.restrict_eq_hom_base
                  algebraic_geometry.restrict_eq_inv_base
                  algebraic_geometry.restrict_comp_hom_base
                  algebraic_geometry.restrict_comp_inv_base

#check algebraic_geometry.restrict_comp

section end

@[simp]
lemma restrict_eq_hom_c_app' {X : Top} (Y : PresheafedSpace C) (f g : X ‚ü∂ Y.1)
  (hf : open_embedding f) (hg : open_embedding g) (eq : f = g) (U) :
  (restrict_eq Y f g hf hg eq).hom.c.app U = Y.presheaf.map
    (eq_to_hom (begin
      tactic.op_induction',
      cases U,
      cases eq,
      dsimp only [is_open_map.functor, opens.map, functor.op],
      congr
    end)) := by simpa [restrict_eq_hom_c_app]

@[simp]
lemma restrict_comp_hom_c_app' {X Y : Top} (Z : PresheafedSpace C) (f : X ‚ü∂ Y) (hf : open_embedding f)
  (g : Y ‚ü∂ Z.1) (hg : open_embedding g) (h : X ‚ü∂ Z.1) (feq : h = f ‚â´ g) (U) :
  (restrict_comp Z f hf g hg h feq).hom.c.app U = Z.presheaf.map
    (eq_to_hom (begin
      tactic.op_induction',
      cases U,
      cases feq,
      dsimp only [is_open_map.functor, opens.map, functor.op],
      congr' 2,
      erw set.image_image,
      congr
    end)) := by simpa [restrict_comp_hom_c_app]

@[simp] lemma restrict_comp_hom_of_restrict_of_restrict {X Y : Top} (Z : PresheafedSpace C)
  (f : X ‚ü∂ Y) (hf : open_embedding f) (g : Y ‚ü∂ Z.1) (hg : open_embedding g) (h : X ‚ü∂ Z.1)
  (eq : h = f ‚â´ g) :
  (restrict_comp Z f hf g hg h eq).hom ‚â´ (Z.restrict hg).of_restrict hf ‚â´ Z.of_restrict hg =
  Z.of_restrict (show open_embedding h, by simpa[eq] using hg.comp hf) :=
begin
  ext,
  { change ((_ ‚â´ _) ‚â´ (_ ‚â´ _) ‚â´ _) ‚â´ _ = Z.presheaf.map _,
    erw category.comp_id,
    erw category.id_comp,
    erw ‚ÜêZ.presheaf.map_comp,
    erw ‚ÜêZ.presheaf.map_comp,
    erw ‚ÜêZ.presheaf.map_comp,
    congr },
  simp[PresheafedSpace.of_restrict, ‚Üêeq],
end

variables {X Y : PresheafedSpace C} (f : X ‚ü∂ Y)

def PresheafedSpace.base_iso_of_iso (H : X ‚âÖ Y) : X.1 ‚âÖ Y.1 :=
{ hom := H.hom.base,
  inv := H.inv.base,
  hom_inv_id' := congr_arg PresheafedSpace.hom.base H.hom_inv_id,
  inv_hom_id' := congr_arg PresheafedSpace.hom.base H.inv_hom_id }

def PresheafedSpace.sheaf_iso_of_iso (H : X ‚âÖ Y) : Y.2 ‚âÖ H.hom.base _* X.2 :=
{ hom := H.hom.c,
  inv := hom_of_iso_pushforward (PresheafedSpace.base_iso_of_iso H).symm H.inv.c,
  hom_inv_id' :=
  begin
    ext U,
    have := PresheafedSpace.congr_app H.inv_hom_id U,
    simp only [PresheafedSpace.comp_c_app, PresheafedSpace.id_c_app,
      eq_to_hom_map, eq_to_hom_trans] at this,
    generalize_proofs h at this,
    have := (congr_arg (Œª f, f ‚â´ eq_to_hom h.symm) this : _),
    simp [hom_of_iso_pushforward] at this ‚ä¢,
    simpa using this
  end,
  inv_hom_id' :=
  begin
    ext U,
    have := PresheafedSpace.congr_app H.hom_inv_id ((opens.map H.hom.base).op.obj U),
    generalize_proofs h at this,
    have := (congr_arg (Œª f, f ‚â´X.presheaf.map (eq_to_hom h.symm)) this : _),
    simp only [nat_trans.comp_app, hom_of_iso_pushforward, category.assoc, nat_trans.id_app,
      H.hom.c.naturality],
    simpa using this
  end }


section end

instance PresheafedSpace.base_is_iso_of_iso [is_iso f] : is_iso f.base :=
is_iso.of_iso (PresheafedSpace.base_iso_of_iso (as_iso f))

instance PresheafedSpace.c_is_iso_of_iso [is_iso f] : is_iso f.c :=
is_iso.of_iso (PresheafedSpace.sheaf_iso_of_iso (as_iso f))

structure open_immersion :=
(base_open : open_embedding f.base)
(iso_restrict : X ‚âÖ Y.restrict base_open)
(fac : iso_restrict.hom ‚â´ Y.of_restrict _ = f)

attribute [simp] open_immersion.fac


@[simp] lemma open_immersion.inv_fac {C : Type*} [category C] {X Y : PresheafedSpace C} {f : X ‚ü∂ Y}
  (H : open_immersion f) : H.iso_restrict.inv ‚â´ f = Y.of_restrict _ := by { rw iso.inv_comp_eq, simp }

@[simp, elementwise] lemma open_immersion.fac_base {C : Type*} [category C] {X Y : PresheafedSpace C} {f : X ‚ü∂ Y}
  (H : open_immersion f) : H.iso_restrict.hom.base ‚â´ (Y.of_restrict _).base = f.base :=
congr_arg PresheafedSpace.hom.base H.fac

@[simp] lemma open_immersion.inv_fac_base {C : Type*} [category C] {X Y : PresheafedSpace C} {f : X ‚ü∂ Y}
  (H : open_immersion f) : H.iso_restrict.inv.base ‚â´ f.base = (Y.of_restrict _).base :=
congr_arg PresheafedSpace.hom.base H.inv_fac

@[simp, elementwise]
lemma open_immersion.iso_restrict_hom_base {C : Type*} [category C] {X Y : PresheafedSpace C} {f : X ‚ü∂ Y}
  (H : open_immersion f) : H.iso_restrict.hom.base = ùüô _ :=
begin
  haveI := (Top.mono_iff_injective f.base).mpr H.base_open.inj,
  rw ‚Üêcancel_mono f.base,
  refine (congr_arg PresheafedSpace.hom.base H.fac).trans (category.id_comp _).symm,
end

@[simp, elementwise]
lemma open_immersion.iso_restrict_inv_base {C : Type*} [category C] {X Y : PresheafedSpace C} {f : X ‚ü∂ Y}
  (H : open_immersion f) : H.iso_restrict.inv.base = ùüô _ :=
begin
  convert congr_arg PresheafedSpace.hom.base H.iso_restrict.hom_inv_id using 1,
  simp only [PresheafedSpace.comp_base, open_immersion.iso_restrict_hom_base, category.id_comp]
end


def open_immersion.c_iso (H : open_immersion f) : X.presheaf ‚âÖ (Y.restrict H.base_open).presheaf :=
PresheafedSpace.sheaf_iso_of_iso H.iso_restrict.symm ‚â™‚â´
iso_whisker_right (eq_to_iso
  (by { rw [open_immersion.iso_restrict_inv_base], apply functor.hext; simp }) :
    (opens.map H.iso_restrict.inv.base).op ‚ãô
      (is_open_map.functor _).op ‚âÖ (is_open_map.functor _).op) (Y.presheaf)

@[simp, elementwise, reassoc]
lemma open_immersion.map_iso_restrict_hom_c_app {C : Type*} [category C] {X Y : PresheafedSpace C} {f : X ‚ü∂ Y}
(H : open_immersion f) (U : opens (X.carrier)) :
  H.iso_restrict.hom.c.app (op U) =
  f.c.app (op (H.base_open.is_open_map.functor.obj U)) ‚â´ X.presheaf.map
    (eq_to_hom (by { dsimp only [opens.map, functor.op], congr' 2,
      erw set.preimage_image_eq _ H.base_open.inj, simpa })) :=
begin
  have := PresheafedSpace.congr_app H.fac (op (H.base_open.is_open_map.functor.obj U)),
  generalize_proofs _ _ h at this,
  have := congr_arg (Œª x, x ‚â´ X.presheaf.map (eq_to_hom h.symm)) this,
  simp only [eq_to_hom_refl, category.assoc, ‚Üê X.presheaf.map_comp,
    eq_to_hom_trans, X.presheaf.map_id] at this,
  erw category.comp_id at this,
  rw [‚Üêthis, category.assoc, ‚Üêfunctor.map_comp, eq_to_hom_trans, ‚Üêis_iso.comp_inv_eq],
  simp only [PresheafedSpace.comp_c_app, PresheafedSpace.of_restrict_c_app, inv_eq_to_hom,
    ‚Üêfunctor.map_inv],
  have h' := H.iso_restrict.hom.c.naturality,
  dsimp [-forall_3_true_iff] at h',
  convert (h' _).symm using 2,
  swap 4,
  { dsimp only [functor.op],
    apply quiver.hom.op, apply hom_of_le,
    rintros _ ‚ü®_, hx, eq‚ü©,
    cases H.base_open.inj eq,
    exact hx },
  { congr },
  { congr },
  { congr, simp }
end

@[simp, elementwise, reassoc]
lemma open_immersion_map_iso_restrict_inv_c_app {C : Type*} [category C] {X Y : PresheafedSpace C} {f : X ‚ü∂ Y}
(H : open_immersion f) (U : opens (Y.carrier)) :
f.c.app (op U) ‚â´ H.iso_restrict.inv.c.app (op ((opens.map f.base).obj (unop (op U)))) =
  Y.presheaf.map ((@hom_of_le (opens Y.1) _ ‚ü®_, _‚ü© U
  (by { rintros _ ‚ü®x, hx‚ÇÇ, rfl‚ü©, simpa using hx‚ÇÇ })).op) :=
begin
have := PresheafedSpace.congr_app H.inv_fac (op U),
-- unfold PresheafedSpace.restrict at this,
simp only [PresheafedSpace.restrict, PresheafedSpace.comp_c_app,
  PresheafedSpace.of_restrict_c_app] at this,
erw ‚Üêfunctor.map_comp at this,
convert this,
end

section end

lemma eq_to_hom_heq_id {C : Type*} [category C] {X Y Z : C} (H : X = Y) (H' : Y = Z) :
  eq_to_hom H == ùüô Z := by { cases H, cases H', refl }

lemma heq_of_subsingleton (Œ± Œ≤ : Type*) [subsingleton Œ±] (x : Œ±) (y : Œ≤)
   (H : Œ± = Œ≤) : x == y := by { cases H, simp, }

lemma open_immersion_map_iso_restrict_inv_c_app'
(H : open_immersion f) (U : opens X) :
  f.c.app (op (H.base_open.is_open_map.functor.obj U)) ‚â´
  X.presheaf.map
    (eq_to_hom (by { cases U, simp [opens.map, set.preimage_image_eq U_val H.base_open.inj] })) ‚â´
  H.iso_restrict.inv.c.app (op U) =
  Y.presheaf.map ((@eq_to_hom (opens Y.1) _ ‚ü®_, _‚ü© (H.base_open.is_open_map.functor.obj U)
  (by simpa)).op) :=
begin
  have : op U = (opens.map f.base).op.obj (op (H.base_open.is_open_map.functor.obj U)),
  { cases U, simp [opens.map, set.preimage_image_eq U_val H.base_open.inj] },
  convert open_immersion_map_iso_restrict_inv_c_app H (H.base_open.is_open_map.functor.obj U),
  rw H.iso_restrict.inv.c.naturality (eq_to_hom _),
  refine heq.trans _ (heq_iff_eq.mpr (category.comp_id _)),
  congr,
  exact this,
  { rw eq_to_hom_map, apply eq_to_hom_heq_id, simp[this] },
  { apply heq_of_subsingleton, simp[this] }
end

variable {f}

lemma open_immersion.app_is_iso (H : open_immersion f) (U : opens X) :
  is_iso (f.c.app (op (H.base_open.is_open_map.functor.obj U))) :=
begin
  have :=  open_immersion_map_iso_restrict_inv_c_app' f H U,
  rw [‚Üêis_iso.eq_comp_inv] at this,
  rw this,
  apply_instance
end

abbreviation open_immersion.inv_c_app (H : open_immersion f) (U : opens X) :=
@@inv _ (f.c.app (op (H.base_open.is_open_map.functor.obj U))) (H.app_is_iso U)

lemma open_immersion.iso_restrict_inv_c_app_eq_inv_f_app
(H : open_immersion f) (U : opens X) :
  H.iso_restrict.inv.c.app (op U) =
  X.presheaf.map
    (eq_to_hom (by { cases U, simp [opens.map, set.preimage_image_eq U_val H.base_open.inj] })) ‚â´
  H.inv_c_app U ‚â´
  Y.presheaf.map ((@eq_to_hom (opens Y.1) _ ‚ü®_, _‚ü© (H.base_open.is_open_map.functor.obj U)
  (by simpa)).op) :=
begin
  rw ‚Üê open_immersion_map_iso_restrict_inv_c_app' f H U,
  simp,
end

section end

@[simp, reassoc]
lemma open_immersion.iso_restrict_inv_comp_c_app
(H : open_immersion f) (U : opens X) :
  H.iso_restrict.inv.c.app (op U) ‚â´ f.c.app _ =
  X.presheaf.map
    (eq_to_hom (by { cases U, simpa [opens.map, set.preimage_image_eq _ H.base_open.inj] })) :=
begin
  rw open_immersion.iso_restrict_inv_c_app_eq_inv_f_app H U,
  simp only [category.assoc],
  rw f.c.naturality,
  simpa
end

section end

instance is_open_map.functor_full_of_mono {X Y : Top} {f : X ‚ü∂ Y} (hf : is_open_map f)
  [H : mono f] : full hf.functor :=
{ preimage := Œª U V i, hom_of_le (Œª x hx, by
  { obtain ‚ü®y, hy, eq‚ü© := i.le ‚ü®x, hx, rfl‚ü©, exact (Top.mono_iff_injective f).mp H eq ‚ñ∏ hy }) }

instance is_open_map.functor_faithful {X Y : Top} {f : X ‚ü∂ Y} (hf : is_open_map f) :
  faithful hf.functor := { }

lemma is_open_map.functor_faithfuly {X Y : Top} {f : X ‚ü∂ Y} (hf : is_open_map f)
[H : mono f] : is_iso (hf.adjunction.unit) := infer_instance

instance whisker_left_counit_iso {C D : Type*} [category C] [category D] {F : C ‚•§ D} {G : D ‚•§ C} (adj : F ‚ä£ G)
  [full F] [faithful F] : is_iso (whisker_left F adj.counit) :=
begin
  have := adj.left_triangle,
  rw ‚Üêis_iso.eq_inv_comp at this,
  rw this,
  apply_instance
end

instance of_restrict_mono {U : Top} {f : U ‚ü∂ X.1} (hf : open_embedding f) :
  mono (X.of_restrict hf) :=
begin
  haveI : mono f := (Top.mono_iff_injective _).mpr hf.inj,
  constructor,
  intros Z g‚ÇÅ g‚ÇÇ eq,
  ext V,
  { induction V using opposite.rec,
    have hV : (opens.map (X.of_restrict hf).base).obj (hf.is_open_map.functor.obj V) = V,
    { cases V, simp[opens.map, set.preimage_image_eq _ hf.inj] },
    haveI : is_iso (hf.is_open_map.adjunction.counit.app
              (unop (op (hf.is_open_map.functor.obj V)))) :=
      (nat_iso.is_iso_app_of_is_iso (whisker_left
        hf.is_open_map.functor hf.is_open_map.adjunction.counit) V : _),
    have := PresheafedSpace.congr_app eq (op (hf.is_open_map.functor.obj V)),
    simp only [PresheafedSpace.comp_c_app, PresheafedSpace.of_restrict_c_app, category.assoc,
      cancel_epi] at this,
    have h : _ ‚â´ _ = _ ‚â´ _ ‚â´ _ :=
      congr_arg (Œª f, (X.restrict hf).presheaf.map (eq_to_hom hV).op ‚â´ f) this,
    erw [g‚ÇÅ.c.naturality, g‚ÇÇ.c.naturality_assoc] at h,
    simp only [pushforward_obj_map, eq_to_hom_op,
      category.assoc, eq_to_hom_map, eq_to_hom_trans] at h,
    rw ‚Üêis_iso.comp_inv_eq at h,
    simpa using h },
  { have := congr_arg PresheafedSpace.hom.base eq,
    simp only [PresheafedSpace.comp_base, PresheafedSpace.of_restrict_base] at this,
    rw cancel_mono at this,
    exact this }
end

lemma open_immersion.mono (H : open_immersion f) : mono f :=
by { rw ‚Üê H.fac, apply mono_comp }


def pullback_cone_of_open_immersion {C : Type*} [category C] {X Y Z : PresheafedSpace C}
  {f : X ‚ü∂ Z} (hf : open_immersion f) {g : Y ‚ü∂ Z} (hg : open_immersion g) : pullback_cone f g :=
begin
 fapply pullback_cone.mk,
 exact Z.restrict (Top.open_embedding_of_pullback_open_embeddings hf.base_open hg.base_open),
 exact (restrict_comp Z _
  (Top.fst_open_embedding_of_right_open_embedding f.base hg.base_open) f.base hf.base_open
  (limit.œÄ (cospan f.base g.base) walking_cospan.one) (limit.w _ walking_cospan.hom.inl).symm).hom
    ‚â´ PresheafedSpace.of_restrict _ _ ‚â´ (hf.iso_restrict).inv,
 exact (restrict_comp Z _
  (Top.snd_open_embedding_of_left_open_embedding hf.base_open g.base) g.base hg.base_open
  (limit.œÄ (cospan f.base g.base) walking_cospan.one) (limit.w _ walking_cospan.hom.inr).symm).hom
    ‚â´ PresheafedSpace.of_restrict _ _ ‚â´ (hg.iso_restrict).inv,
  simp,
end

def pullback_cone_of_open_immersion_lift {C : Type u} [category.{v} C] {X Y Z : PresheafedSpace C}
  {f : X ‚ü∂ Z} (hf : open_immersion f) {g : Y ‚ü∂ Z} (hg : open_immersion g)
  (s : pullback_cone f g) : s.X ‚ü∂ (pullback_cone_of_open_immersion hf hg).X :=
{ base := pullback.lift s.fst.base s.snd.base
  (congr_arg (Œª x, PresheafedSpace.hom.base x) s.condition),
  c := whisker_left _ (s.œÄ.app walking_cospan.one).c ‚â´
    (whisker_right (nat_trans.op
    { app := Œª U, hom_of_le
      (Œª x (hx : x ‚àà (opens.map (pullback.lift s.fst.base s.snd.base _)).obj U),
        ‚ü®pullback.lift s.fst.base s.snd.base
            (congr_arg (Œª x, PresheafedSpace.hom.base x) s.condition) x, hx,
          show limit.œÄ (cospan f.base g.base) walking_cospan.one
            (pullback.lift s.fst.base s.snd.base _ x) = (s.œÄ.app walking_cospan.one).base x,
          by  { have := s.œÄ.naturality walking_cospan.hom.inl,
                erw category.id_comp at this,
                simp [this] } ‚ü©),
      naturality' := Œª _ _ _, refl _ }) s.X.presheaf
      : (is_open_map.functor _ ‚ãô opens.map _).op ‚ãô s.X.presheaf ‚ü∂ _ ‚ãô s.X.presheaf)}

section end

lemma pullback_cone_of_open_immersion_lift_comp_fst {C : Type u} [category.{v} C]
  {X Y Z : PresheafedSpace C}
  {f : X ‚ü∂ Z} (hf : open_immersion f) {g : Y ‚ü∂ Z} (hg : open_immersion g)
  (s : pullback_cone f g) :
pullback_cone_of_open_immersion_lift hf hg s ‚â´ (pullback_cone_of_open_immersion hf hg).fst = s.fst :=
begin
  delta pullback_cone_of_open_immersion_lift pullback_cone_of_open_immersion,
  ext x,
  { induction x using opposite.rec,
    let fx : ((opens.map f.base).op.obj
      (op (hf.base_open.is_open_map.functor.obj ((opens.map hf.iso_restrict.inv.base).obj x)))) ‚ü∂
        op x,
    { apply eq_to_hom, cases x, simpa[opens.map, set.preimage_image_eq _ hf.base_open.inj] },
    have := Œª x, PresheafedSpace.congr_app
      ((category.id_comp _).symm.trans (s.œÄ.naturality walking_cospan.hom.inl : _)) x,
    dsimp only [PresheafedSpace.comp_c_app, whisker_right_app,
      nat_trans.comp_app],
    erw this,
    dsimp only [pullback_cone.mk_fst, PresheafedSpace.comp_c_app],
    erw restrict_comp_hom_c_app',
    simp only [category.assoc],
    erw ‚ÜêZ.presheaf.map_comp_assoc,
    erw f.c.naturality_assoc,
    erw s.fst.c.naturality_assoc,
    rw [pushforward_obj_map],
    iterate 3 { erw [‚Üês.X.presheaf.map_comp] },
    erw ‚Üê s.fst.c.naturality fx,
    erw hf.iso_restrict_inv_comp_c_app_assoc,
    rw [‚Üêfunctor.map_comp_assoc, eq_to_hom_trans, eq_to_hom_refl,
      X.presheaf.map_id, category.id_comp] },
  { change pullback.lift _ _ _ ‚â´ ùüô _ ‚â´ pullback.fst ‚â´ hf.iso_restrict.inv.base = _,
    simp only [category.comp_id, hf.iso_restrict_inv_base, category.id_comp,
      pullback.lift_fst] }
end

section end

-- set_option trace.dsimplify true
-- #help options

lemma pullback_cone_of_open_immersion_lift_comp_snd {C : Type u} [category.{v} C]
  {X Y Z : PresheafedSpace C}
  {f : X ‚ü∂ Z} (hf : open_immersion f) {g : Y ‚ü∂ Z} (hg : open_immersion g)
  (s : pullback_cone f g) :
pullback_cone_of_open_immersion_lift hf hg s ‚â´
  (pullback_cone_of_open_immersion hf hg).snd = s.snd :=
begin
  delta pullback_cone_of_open_immersion_lift pullback_cone_of_open_immersion,
  ext x,
  { induction x using opposite.rec,
    let gx : ((opens.map g.base).op.obj
      (op (hg.base_open.is_open_map.functor.obj ((opens.map hg.iso_restrict.inv.base).obj x)))) ‚ü∂
        op x,
    { apply eq_to_hom, cases x, simpa[opens.map, set.preimage_image_eq _ hg.base_open.inj] },
    have := Œª x, PresheafedSpace.congr_app
      ((category.id_comp _).symm.trans (s.œÄ.naturality walking_cospan.hom.inr : _)) x,
    dsimp only [PresheafedSpace.comp_c_app, whisker_right_app,
      nat_trans.comp_app],
    erw this,
    dsimp only [pullback_cone.mk_snd, PresheafedSpace.comp_c_app],
    erw restrict_comp_hom_c_app',
    simp only [category.assoc],
    erw ‚ÜêZ.presheaf.map_comp_assoc,
    erw g.c.naturality_assoc,
    erw s.snd.c.naturality_assoc,
    rw [pushforward_obj_map],
    iterate 3 { erw [‚Üês.X.presheaf.map_comp] },
    erw ‚Üê s.snd.c.naturality gx,
    erw hg.iso_restrict_inv_comp_c_app_assoc,
    rw [‚Üêfunctor.map_comp_assoc, eq_to_hom_trans, eq_to_hom_refl,
      Y.presheaf.map_id, category.id_comp] },
  { change pullback.lift _ _ _ ‚â´ ùüô _ ‚â´ pullback.snd ‚â´ hg.iso_restrict.inv.base = _,
    simp only [category.comp_id, hg.iso_restrict_inv_base, category.id_comp,
      pullback.lift_snd] }
end

section end

lemma pullback_cone_œÄ_app_one_base {X Y Z : PresheafedSpace C}
  {f : X ‚ü∂ Z} (hf : open_immersion f) {g : Y ‚ü∂ Z} (hg : open_immersion g) :
  ((pullback_cone_of_open_immersion hf hg).œÄ.app walking_cospan.one).base =
    limit.œÄ (cospan f.base g.base) walking_cospan.one :=
begin
  delta pullback_cone_of_open_immersion,
  simp only [open_immersion.inv_fac, restrict_comp_hom_base, cospan_map_inl,
    category.assoc, PresheafedSpace.comp_base, pullback_cone.mk_œÄ_app_one,
    PresheafedSpace.of_restrict_base, ‚Üê limit.w (cospan f.base g.base) walking_cospan.hom.inl],
  erw category.id_comp
end

def pullback_cone_open_immersion {X Y Z : PresheafedSpace C}
  {f : X ‚ü∂ Z} (hf : open_immersion f) {g : Y ‚ü∂ Z} (hg : open_immersion g) :
  open_immersion ((pullback_cone_of_open_immersion hf hg).œÄ.app walking_cospan.one) :=
{ base_open :=
  begin
    convert Top.open_embedding_of_pullback_open_embeddings hf.base_open hg.base_open,
    apply pullback_cone_œÄ_app_one_base
  end,
  iso_restrict :=
  begin
    refine restrict_eq Z _ _ _ _ _,
    symmetry,
    apply pullback_cone_œÄ_app_one_base,
  end,
  fac :=
  begin
    ext U,
    { dsimp only [nat_trans.comp_app, PresheafedSpace.comp_c_app, whisker_right_app],
      rw restrict_eq_hom_c_app',
      erw category_theory.functor.map_id,
      erw category.comp_id,
      dsimp only [pullback_cone_of_open_immersion, pullback_cone.mk_œÄ_app_one,
        PresheafedSpace.comp_c_app],
      simp only [category.assoc],
      induction U using opposite.rec,
      rw open_immersion_map_iso_restrict_inv_c_app_assoc,
      rw restrict_comp_hom_c_app',
      dsimp only [PresheafedSpace.of_restrict_c_app, cospan_one, PresheafedSpace.restrict_presheaf,
        functor.comp_map],
      simp only [‚Üêfunctor.map_comp],
      congr },
    { simp only [restrict_eq_hom_base, PresheafedSpace.comp_base,
        PresheafedSpace.of_restrict_base],
      erw category.id_comp },
  end }

lemma pullback_cone_of_open_immersion_is_limit {X Y Z : PresheafedSpace C}
  {f : X ‚ü∂ Z} (hf : open_immersion f) {g : Y ‚ü∂ Z} (hg : open_immersion g) :
  is_limit (pullback_cone_of_open_immersion hf hg) :=
begin
  apply pullback_cone.is_limit_aux',
  intro s,
  split,
  swap,
  exact pullback_cone_of_open_immersion_lift hf hg s,
  split,
  apply pullback_cone_of_open_immersion_lift_comp_fst,
  split,
  apply pullback_cone_of_open_immersion_lift_comp_snd,
  intros m h‚ÇÅ h‚ÇÇ,
  haveI := (pullback_cone_open_immersion hf hg).mono,
  have := congr_arg (Œª i, i ‚â´ f)
    (h‚ÇÅ.trans (pullback_cone_of_open_immersion_lift_comp_fst hf hg s).symm),
  simp only [category.assoc] at this,
  erw ‚Üê (pullback_cone_of_open_immersion hf hg).œÄ.naturality walking_cospan.hom.inl at this,
  simp only [‚Üêcategory.assoc] at this,
  rw cancel_mono at this,
  erw cancel_mono (ùüô _) at this,
  exact this,
  apply_instance
end



/--
A family of gluing data consists of
1. An index type `Œπ`
2. A topological space `U i` for each `i : Œπ`.
3. An open subset `V i j ‚äÜ U i` for each `i j : Œπ`.
4. A transition map `f i j : V i j ‚ü∂ V j i` for each `i j : Œπ`.
such that
5. `V i i = U i`.
6. `f i i` is the identity.
7. `f i j x ‚àà V j k` for all `x ‚àà V i j ‚à© V i k`.
8. `f i j ‚â´ f j k = f i k`.

We can then glue the topological spaces `U i` along `V i j`.
-/
@[nolint has_inhabited_instance]
structure glue_data : Type (max u v + 1) :=
  (Œπ : Type u)
  (U : Œπ ‚Üí PresheafedSpace C)
  (V : Œπ √ó Œπ ‚Üí PresheafedSpace C)
  (f : Œ† i j, V (i, j) ‚ü∂ U i)
  (f_open : ‚àÄ i j, open_immersion (f i j))
  (f_id : ‚àÄ i, is_iso (f i i))
  (t : Œ† i j, V (i, j) ‚ü∂ V (j, i))
  (t_id : ‚àÄ i, t i i = ùüô _)
  (t' : Œ† i j k, pullback (f i j) (f i k) ‚ü∂ pullback (f j k) (f j i))
  (t_fac : ‚àÄ i j k, t' i j k ‚â´ pullback.snd = pullback.fst ‚â´ t i j)
  (cocycle : ‚àÄ i j k , t' i j k ‚â´ t' j k i ‚â´ t' k i j = ùüô _)

attribute [simp] glue_data.V_id glue_data.f_id

namespace glue_data

variable (D : glue_data.{u})

-- @[simp, reassoc, elementwise] lemma inv (i j : D.Œπ) :
--   D.f i j ‚â´ D.f j i = ùüô _ :=
-- begin
--   ext x,
--   change ‚Üë(D.f j i (D.f i j x)) = ‚Üëx,
--   have := D.cocycle i j i x (by simp),
--   rw f_id at this,
--   convert this,
--   ext, refl,
-- end

-- /-- (Implementation) The disjoint union of `U i`. -/
-- def sigma_opens : Top := ‚àê D.U

-- /-- (Implementation) The family of `V i j` as topological spaces indexed by `Œπ √ó Œπ`. -/
-- def inters : D.Œπ √ó D.Œπ ‚Üí Top := (Œª p : D.Œπ √ó D.Œπ, (opens.to_Top _).obj (D.V p.1 p.2))

-- /-- (Implementation) The disjoint union of `V i j`. -/
-- def sigma_inters : Top := ‚àê D.inters

-- /-- (Implementation) The projection `‚àê D.inters ‚ü∂ ‚àê D.U` via left projection. -/
-- def left_imm : D.sigma_inters ‚ü∂ D.sigma_opens :=
-- sigma.desc (Œª p : D.Œπ √ó D.Œπ, opens.inclusion _ ‚â´ sigma.Œπ _ p.1)

-- /-- (Implementation) The projection `‚àê D.inters ‚ü∂ ‚àê D.U` via right projection. -/
-- def right_imm : D.sigma_inters ‚ü∂ D.sigma_opens :=
-- sigma.desc (Œª p : D.Œπ √ó D.Œπ, D.f p.1 p.2 ‚â´ opens.inclusion _ ‚â´ sigma.Œπ _ p.2)

-- /-- (Implementation) The diagram to take colimit of. -/
-- def diagram := parallel_pair D.left_imm D.right_imm

-- /-- The glued topological space given a family of gluing data. -/
-- def glued : Top :=
-- coequalizer D.left_imm D.right_imm

-- /-- (Implementation) The projection `‚àê D.U ‚ü∂ D.glued` given by the colimit. -/
-- def œÄ : D.sigma_opens ‚ü∂ D.glued :=
-- coequalizer.œÄ _ _

-- instance œÄ_epi : epi D.œÄ :=
-- coequalizer.œÄ_epi

-- lemma œÄ_surjective : function.surjective D.œÄ :=
-- (Top.epi_iff_surjective D.œÄ).mp infer_instance

-- /-- The open immersion `D.U i ‚ü∂ D.glued` for each `i`. -/
-- def imm (i : D.Œπ) : D.U i ‚ü∂ D.glued :=
-- sigma.Œπ _ _ ‚â´ D.œÄ

-- lemma is_open_iff (U : set D.glued) : is_open U ‚Üî ‚àÄ i, is_open (D.imm i ‚Åª¬π' U) :=
-- by { rw [coequalizer_is_open_iff, colimit_is_open_iff], refl }


-- lemma imm_jointly_surjective (x : D.glued) : ‚àÉ i (y : D.U i), D.imm i y = x :=
-- begin
--   rcases D.œÄ_surjective x with ‚ü®x', rfl‚ü©,
--   rw ‚Üê (show (coprod_iso_sigma _).inv _ = x', from congr_fun (coprod_iso_sigma _).hom_inv_id x'),
--   rcases (coprod_iso_sigma _).hom x' with ‚ü®i, y‚ü©,
--   exact ‚ü®i, y, by simpa‚ü©
-- end

-- @[simp]
-- lemma glue_condition (i j : D.Œπ) :
--   D.f i j ‚â´ opens.inclusion _ ‚â´ D.imm j = opens.inclusion _ ‚â´ D.imm i :=
-- begin
--   ext x,
--   symmetry,
--   simpa [œÄ, left_imm, right_imm] using
--     continuous_map.congr_fun (coequalizer.condition D.left_imm D.right_imm)
--       ((sigma.Œπ D.inters (i, j) : _) x),
-- end

-- @[simp] lemma glue_condition_apply (i j : D.Œπ) (x) :
--   D.imm j ‚Üë(D.f i j x) = D.imm i ‚Üëx :=
-- continuous_map.congr_fun (D.glue_condition i j) x

-- /--
-- An equivalence relation on `Œ£ i, D.U i` that holds iff `D.imm i x = D.imm j x`.
-- See `Top.gluing_data.imm_eq_iff_rel`.
-- -/
-- inductive rel : (Œ£ i, D.U i) ‚Üí (Œ£ i, D.U i) ‚Üí Prop
-- | refl (x : Œ£ i, D.U i) : rel x x
-- | eq {i j : D.Œπ} (x : D.V i j) (y : D.V j i) (h : D.f i j x = y) : rel ‚ü®i, x‚ü© ‚ü®j, y‚ü©

-- lemma rel_equiv : equivalence D.rel :=
-- ‚ü® rel.refl,
--   Œª x y h, by { cases h, exact h, apply rel.eq, simp [‚Üêh_h] },
--   Œª _ _ _ h‚ÇÅ h‚ÇÇ, by
--   { cases h‚ÇÅ with _ i j x y, exact h‚ÇÇ,
--     cases x with x hx, cases y with y hy,
--     cases h‚ÇÇ with _ _ k z _, exact h‚ÇÅ,
--     cases h‚ÇÇ_h,
--     cases z with z hz,
--     dsimp at *,
--     have eq : x = ‚Üë(D.f j i ‚ü®z, hy‚ü©) := by simp [‚Üêh‚ÇÅ_h],
--     refine rel.eq ‚ü®x, _‚ü© ‚ü®(‚Üë(D.f j k ‚ü®z, _‚ü©) : D.U k), _‚ü© _; cases eq,
--     { apply D.f_inter, exact hz },
--     { apply D.f_inter, exact hy },
--     { ext, apply D.cocycle } } ‚ü©

-- open category_theory.limits.walking_parallel_pair

-- lemma eqv_gen_of_œÄ_eq {x y : ‚àê D.U} (h : D.œÄ x = D.œÄ y) :
--   eqv_gen (types.coequalizer_rel (D.left_imm) (D.right_imm)) x y :=
-- begin
--   change colimit.Œπ D.diagram one x = colimit.Œπ D.diagram one y at h,
--   have : colimit.Œπ (D.diagram ‚ãô forget _) one x = colimit.Œπ (D.diagram ‚ãô forget _) one y,
--   { rw ‚ÜêŒπ_preserves_colimits_iso_hom,
--     simp[h] },
--   have :
--     (colimit.Œπ (D.diagram ‚ãô forget _) _ ‚â´ colim.map _ ‚â´ (colimit.iso_colimit_cocone _).hom) _ =
--     (colimit.Œπ (D.diagram ‚ãô forget _) _ ‚â´ colim.map _ ‚â´ (colimit.iso_colimit_cocone _).hom) _ :=
--     (congr_arg (colim.map (diagram_iso_parallel_pair (D.diagram ‚ãô forget _)).hom
--     ‚â´ (colimit.iso_colimit_cocone (types.coequalizer_limit _ _)).hom) this : _),
--   simp only [eq_to_hom_refl, types_comp_apply, colimit.Œπ_map_assoc,
--     diagram_iso_parallel_pair_hom_app, colimit.iso_colimit_cocone_Œπ_hom, types_id_apply] at this,
--   exact quot.eq.1 this,
-- end

-- lemma inv_image.equivalence {Œ± : Sort u} {Œ≤ : Sort v} (r : Œ≤ ‚Üí Œ≤ ‚Üí Prop) (f : Œ± ‚Üí Œ≤)
--   (h : equivalence r) : equivalence (inv_image r f) :=
-- ‚ü®Œª _, h.1 _, Œª _ _ x, h.2.1 x, inv_image.trans r f h.2.2‚ü©

-- lemma imm_eq_iff_rel (i j : D.Œπ) (x : D.U i) (y : D.U j) :
--   D.imm i x = D.imm j y ‚Üî D.rel ‚ü®i, x‚ü© ‚ü®j, y‚ü© :=
-- begin
--   split,
--   { intro h,
--     rw ‚Üê (show _ = sigma.mk i x, from congr_fun (coprod_iso_sigma D.U).inv_hom_id _),
--     rw ‚Üê (show _ = sigma.mk j y, from congr_fun (coprod_iso_sigma D.U).inv_hom_id _),
--     change inv_image D.rel (coprod_iso_sigma D.U).hom _ _,
--     simp only [Top.coprod_iso_sigma_inv_app],
--     rw ‚Üêrelation.eqv_gen_iff_of_equivalence (inv_image.equivalence _ _ D.rel_equiv),
--     refine relation.eqv_gen_mono _ (D.eqv_gen_of_œÄ_eq h : _),
--     rintros _ _ ‚ü®x‚ü©,
--     rw ‚Üê (show (coprod_iso_sigma _).inv _ = x, from congr_fun (coprod_iso_sigma _).hom_inv_id x),
--     generalize : (coprod_iso_sigma D.inters).hom x = x',
--     cases x',
--     unfold inv_image left_imm right_imm,
--     simp only [opens.inclusion_to_fun, Top.comp_app, coprod_iso_sigma_inv_app,
--       category_theory.limits.colimit.Œπ_desc_apply, cofan.mk_Œπ_app,
--       coprod_iso_sigma_hom_app, continuous_map.to_fun_eq_coe],
--     apply rel.eq,
--     simp },
--   { rintro (‚ü®‚ü© | ‚ü®_, _, x,_,rfl‚ü©),
--     refl, simp }
-- end

-- lemma imm_injective (i : D.Œπ) : function.injective (D.imm i) :=
-- begin
--   intros x y h,
--   rcases (D.imm_eq_iff_rel _ _ _ _).mp h with (_ | ‚ü®_,_,_,_,rfl‚ü©); simp,
-- end

-- instance imm_mono (i : D.Œπ) : mono (D.imm i) :=
-- (Top.mono_iff_injective _).mpr (D.imm_injective _)

-- lemma image_inter (i j : D.Œπ) :
--   set.range (D.imm i) ‚à© set.range (D.imm j) = D.imm i '' D.V i j :=
-- begin
--   ext x,
--   split,
--   { rintro ‚ü®‚ü®x‚ÇÅ, eq‚ÇÅ‚ü©, ‚ü®x‚ÇÇ, eq‚ÇÇ‚ü©‚ü©,
--   have := (D.imm_eq_iff_rel _ _ _ _).mp (eq‚ÇÅ.trans eq‚ÇÇ.symm),
--   cases this with _ _ _ x y h,
--   exact ‚ü®x‚ÇÅ, by simp, eq‚ÇÅ‚ü©,
--   exact ‚ü®x, x.property, eq‚ÇÅ‚ü© },
--   { rintro ‚ü®x, hx, rfl‚ü©,
--     split, simp,
--     exact ‚ü®‚Üë(D.f i j ‚ü®x, hx‚ü©), continuous_map.congr_fun (D.glue_condition i j) ‚ü®x, hx‚ü©‚ü© }
-- end

-- lemma preimage_range (i j : D.Œπ) :
--   D.imm j ‚Åª¬π' (set.range (D.imm i)) = D.V j i :=
-- by rw [‚Üêset.preimage_image_eq ‚Üë(D.V j i) (D.imm_injective j),
--        ‚Üêimage_inter, set.preimage_range_inter]

-- lemma preimage_image_eq_preimage_f (i j : D.Œπ) (U : set (D.U i)) :
-- D.imm j ‚Åª¬π' (D.imm i '' U) = opens.inclusion _ '' ((D.f j i ‚â´ opens.inclusion _) ‚Åª¬π' U) :=
-- begin
--   have : coe ‚Åª¬π' (D.imm j ‚Åª¬π' (D.imm i '' U)) = (D.f j i ‚â´ opens.inclusion _) ‚Åª¬π' U,
--   { ext x,
--     conv_rhs { rw ‚Üê set.preimage_image_eq U (D.imm_injective _) },
--     generalize : D.imm i '' U = U',
--     simp },
--   change _ = coe '' _,
--   rw [‚Üêthis, subtype.image_preimage_coe, subtype.val_eq_coe],
--   symmetry,
--   apply set.inter_eq_self_of_subset_left,
--   rw ‚Üê D.preimage_range i j,
--   exact set.preimage_mono (set.image_subset_range _ _),
-- end

-- lemma open_image_open (i : D.Œπ) (U : opens (D.U i)) : is_open (D.imm i '' U) :=
-- begin
--   rw is_open_iff,
--   intro j,
--   rw preimage_image_eq_preimage_f,
--   apply (opens.open_embedding _).is_open_map,
--   apply (D.f j i ‚â´ (D.V i j).inclusion).continuous_to_fun.is_open_preimage,
--   exact U.property
-- end

-- lemma imm_open_embedding (i : D.Œπ) : open_embedding (D.imm i) :=
-- open_embedding_of_continuous_injective_open
--   (D.imm i).continuous_to_fun (D.imm_injective i) (Œª U h, D.open_image_open i ‚ü®U, h‚ü©)

end glue_data

end algebraic_geometry
