import measure_theory.measure.haar
import algebra.order.floor

noncomputable theory

open set filter function metric measure_theory
open_locale nnreal topological_space

-- TODO Relocate this + build basic API
/-- A measure-preserving map is said to be ergodic with a respect to a measure, if the only
invariant sets either have measure zero or their complement has measure zero. -/
@[protect_proj]
structure ergodic {Œ± : Type*} [measurable_space Œ±] (f : Œ± ‚Üí Œ±) (Œº : measure Œ± . volume_tac) extends
  measure_preserving f Œº Œº : Prop :=
(zero_one_law : ‚àÄ s, measurable_set s ‚Üí f ‚Åª¬π' s ‚äÜ s ‚Üí Œº s = 0 ‚à® Œº s·∂ú = 0)

-- TODO Generalise to allow any period (not just 1) and then make `real.angle` and `add_circle` both
-- distinguished special cases.
/-- The "additive circle": `‚Ñù ‚ß∏ ‚Ñ§`.

See also `circle` and `real.angle`. -/
@[derive [add_comm_group, topological_space, topological_add_group]]
def add_circle := ‚Ñù ‚ß∏ add_subgroup.zmultiples (1 : ‚Ñù)

/-- The quotient map `‚Ñù ‚Üí ‚Ñù ‚ß∏ ‚Ñ§`. -/
def real.to_add_circle (x : ‚Ñù) : add_circle := quotient_add_group.mk x

namespace add_circle

instance : inhabited add_circle := ‚ü®(0 : ‚Ñù).to_add_circle‚ü©

/-- The natural equivalence between `‚Ñù ‚ß∏ ‚Ñ§` and the half-open unit interval in `‚Ñù`. -/
def equiv_Ico : add_circle ‚âÉ Ico (0 : ‚Ñù) 1 :=
{ inv_fun := quotient_add_group.mk' _ ‚àò coe,
  to_fun :=
  begin
    letI := quotient_add_group.left_rel (add_subgroup.zmultiples (1 : ‚Ñù)),
    have : ‚àÄ (x y : ‚Ñù) (h: x ‚âà y),
    (‚ü®int.fract x, int.fract_nonneg x, int.fract_lt_one x‚ü© : Ico (0 : ‚Ñù) 1) =
    (‚ü®int.fract y, int.fract_nonneg y, int.fract_lt_one y‚ü© : Ico (0 : ‚Ñù) 1),
    { intros,
      obtain ‚ü®k, hk‚ü© := add_subgroup.mem_zmultiples_iff.mp (quotient_add_group.left_rel_apply.mp h),
      rw (by { rw [‚Üê k.smul_one_eq_coe, hk], abel, } : y = k + x),
      ext,
      simp only [int.fract_int_add, subtype.coe_mk], },
    exact quotient.lift _ this,
  end,
  right_inv :=
  begin
    rintros ‚ü®x, hx, hx'‚ü©,
    ext,
    simpa only [quotient_add_group.coe_mk', comp_app, subtype.coe_mk] using
      int.fract_eq_self.mpr ‚ü®hx, hx'‚ü©,
  end,
  left_inv :=
  begin
    rintros ‚ü®x‚ü©,
    change quotient_add_group.mk (int.fract x) = quotient_add_group.mk x,
    rw [quotient_add_group.eq', add_comm, ‚Üê sub_eq_add_neg, int.self_sub_fract,
      add_subgroup.mem_zmultiples_iff],
    exact ‚ü®‚åäx‚åã, by simp‚ü©,
  end }

instance : has_coe add_circle (Ico (0 : ‚Ñù) 1) := ‚ü®equiv_Ico‚ü©

@[simp] lemma coe_to_add_circle_mk (x : ‚Ñù) :
  ((x.to_add_circle : Ico (0 : ‚Ñù) 1) : ‚Ñù) = int.fract x :=
rfl

lemma continuous_equiv_Ico_symm : continuous equiv_Ico.symm :=
continuous_coinduced_rng.comp continuous_induced_dom

instance : metric_space add_circle :=
metric_space.of_metrizable
  (Œª x y, min (|(x : ‚Ñù) - (y : ‚Ñù)|) (1 - |(x : ‚Ñù) - (y : ‚Ñù)|))
  (Œª x, by simp only [sub_self, abs_zero, tsub_zero, min_eq_left, zero_le_one])
  (Œª x y, by rw abs_sub_comm)
  (begin
    rintros ‚ü®x‚ü© ‚ü®y‚ü© ‚ü®z‚ü©,
    let d‚ÇÅ := |int.fract x - int.fract z|,
    let d‚ÇÇ := |int.fract x - int.fract y|,
    let d‚ÇÉ := |int.fract y - int.fract z|,
    change min d‚ÇÅ (1 - d‚ÇÅ) ‚â§ min d‚ÇÇ (1 - d‚ÇÇ) + min d‚ÇÉ (1 - d‚ÇÉ),
    have ht‚ÇÅ : d‚ÇÅ ‚â§ d‚ÇÇ + d‚ÇÉ := abs_sub_le (int.fract x) (int.fract y) (int.fract z),
    have ht‚ÇÇ : d‚ÇÇ ‚â§ d‚ÇÉ + d‚ÇÅ,
    { convert abs_sub_le (int.fract y) (int.fract z) (int.fract x); rw abs_sub_comm, },
    have ht‚ÇÉ : d‚ÇÉ ‚â§ d‚ÇÅ + d‚ÇÇ,
    { convert abs_sub_le (int.fract z) (int.fract x) (int.fract y); rw abs_sub_comm, },
    have ht‚ÇÑ : d‚ÇÅ + d‚ÇÇ + d‚ÇÉ ‚â§ 2,
    { change | _ | + | _ | + | _ | ‚â§ (2 : ‚Ñù),
      rcases abs_cases (int.fract x - int.fract z) with ‚ü®h‚ÇÅ‚ÇÅ, h‚ÇÅ‚ÇÇ‚ü© | ‚ü®h‚ÇÅ‚ÇÅ, h‚ÇÅ‚ÇÇ‚ü©;
      rcases abs_cases (int.fract x - int.fract y) with ‚ü®h‚ÇÇ‚ÇÅ, h‚ÇÇ‚ÇÇ‚ü© | ‚ü®h‚ÇÇ‚ÇÅ, h‚ÇÇ‚ÇÇ‚ü©;
      rcases abs_cases (int.fract y - int.fract z) with ‚ü®h‚ÇÉ‚ÇÅ, h‚ÇÉ‚ÇÇ‚ü© | ‚ü®h‚ÇÉ‚ÇÅ, h‚ÇÉ‚ÇÇ‚ü©;
      rw [h‚ÇÅ‚ÇÅ, h‚ÇÇ‚ÇÅ, h‚ÇÉ‚ÇÅ];
      linarith [int.fract_nonneg x, int.fract_lt_one x,
                int.fract_nonneg y, int.fract_lt_one y,
                int.fract_nonneg z, int.fract_lt_one z], },
    rcases min_cases d‚ÇÅ (1 - d‚ÇÅ) with ‚ü®h‚ÇÅ‚ÇÅ, h‚ÇÅ‚ÇÇ‚ü© | ‚ü®h‚ÇÅ‚ÇÅ, h‚ÇÅ‚ÇÇ‚ü©;
    rcases min_cases d‚ÇÇ (1 - d‚ÇÇ) with ‚ü®h‚ÇÇ‚ÇÅ, h‚ÇÇ‚ÇÇ‚ü© | ‚ü®h‚ÇÇ‚ÇÅ, h‚ÇÇ‚ÇÇ‚ü©;
    rcases min_cases d‚ÇÉ (1 - d‚ÇÉ) with ‚ü®h‚ÇÉ‚ÇÅ, h‚ÇÉ‚ÇÇ‚ü© | ‚ü®h‚ÇÉ‚ÇÅ, h‚ÇÉ‚ÇÇ‚ü©;
    rw [h‚ÇÅ‚ÇÅ, h‚ÇÇ‚ÇÅ, h‚ÇÉ‚ÇÅ]; linarith,
  end)
  (Œª U,
  begin
    refine ‚ü®Œª hU, _, Œª hU, _‚ü©,
    { rintros ‚ü®x‚ü© (hx : x.to_add_circle ‚àà U),
      sorry, },
    { sorry, },
  end)
  (begin
    -- TODO Golf this, adding missing helper lemmas if necessary.
    rintros ‚ü®x‚ü© ‚ü®y‚ü© (h : min (|int.fract x - int.fract y|) (1 - |int.fract x - int.fract y|) = 0),
    change quotient_add_group.mk x = quotient_add_group.mk y,
    rw [quotient_add_group.eq', add_comm, ‚Üê sub_eq_add_neg, add_subgroup.mem_zmultiples_iff,
      ‚Üê int.fract_add_floor x, ‚Üê int.fract_add_floor y, add_sub_add_comm],
    by_cases hxy : |int.fract x - int.fract y| ‚â§ 1 - |int.fract x - int.fract y|,
    { refine ‚ü®‚åäy‚åã - ‚åäx‚åã, _‚ü©,
      simp only [min_def, hxy, if_true, abs_eq_zero, sub_eq_zero] at h,
      simp only [h, int.smul_one_eq_coe, int.cast_sub, sub_self, zero_add], },
    { simp only [min_def, hxy, if_false, sub_eq_zero] at h,
      rw abs_sub_comm at h,
      cases (abs_eq zero_le_one).mp h.symm with h' h';
      rw h',
      { exact ‚ü®1 + (‚åäy‚åã - ‚åäx‚åã), by simp‚ü©, },
      { exact ‚ü®-1 + (‚åäy‚åã - ‚åäx‚åã), by simp‚ü©, }, },
  end)

lemma dist_eq {x y : add_circle} :
  dist x y = min (|(x : ‚Ñù) - (y : ‚Ñù)|) (1 - |(x : ‚Ñù) - (y : ‚Ñù)|) :=
rfl

instance : compact_space add_circle := sorry

instance : measurable_space add_circle := borel add_circle

instance : borel_space add_circle := ‚ü®rfl‚ü©

instance : measure_space add_circle := ‚ü®measure.add_haar_measure ‚ä§‚ü©

instance : is_finite_measure (volume : measure add_circle) := compact_space.is_finite_measure

@[simp] lemma volume_closed_ball (x : add_circle) (r : ‚Ñù) :
  volume (closed_ball x r) = min 1 (2 * r.to_nnreal) :=
sorry

lemma eventually_volume_closed_ball :
  ‚àÄ·∂† (r : ‚Ñù‚â•0) in ùìù 0, ‚àÄ (x : add_circle), volume (closed_ball x r) = 2 * r :=
begin
  rw nnreal.nhds_zero_basis.eventually_iff,
  refine ‚ü®1/2, by simp, Œª r hr x, _‚ü©,
  simp only [mem_Iio, one_div, nnreal.lt_inv_iff_mul_lt, ne.def, bit0_eq_zero, one_ne_zero,
    not_false_iff, mul_comm r] at hr,
  simp only [real.to_nnreal_coe, min_eq_right_iff, volume_closed_ball],
  norm_cast,
  exact hr.le,
end

/-- Given `t c : ‚Ñù`, this is the map `x ‚Ü¶ t*x + c` on the circle. -/
protected def affine_map (t c : ‚Ñù) (x : add_circle) : add_circle := (t * x + c).to_add_circle

lemma ergodic_affine_map {q : ‚Ñï} {c : ‚Ñù} (hq : 2 ‚â§ q) :
  ergodic $ add_circle.affine_map q c :=
sorry

end add_circle
