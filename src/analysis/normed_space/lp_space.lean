/-
Copyright (c) 2021 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import analysis.mean_inequalities
import analysis.mean_inequalities_pow
import topology.algebra.ordered.liminf_limsup

/-!
# ‚Ñìp space

This file describes properties of elements `f` of a pi-type `Œ† i, E i` with finite seminorm,
defined for `p:‚Ñù‚â•0‚àû` as `if (f = 0) then 0 else ‚àû` if `p=0`, `(‚àë' a, ‚à•f a‚à•^p) ^ (1/p)` for
`0 < p < ‚àû` and `‚®Ü a, ‚à•f a‚à•` for `p=‚àû`.

The Prop-valued `mem_‚Ñìp f p` states that a function `f : Œ† i, E i` has finite seminorm according
to the above definition; that is, `f = 0` if `p = 0`, `summable (Œª a, ‚à•f a‚à•^p)` if `0 < p < ‚àû`, and
`bdd_above (norm '' (set.range f))` if `p = ‚àû`.

The space `Lp E p` is the subtype of elements of `Œ† i : Œ±, E i` which satisfy `mem_‚Ñìp f p`. For
`1 ‚â§ p`, the seminorm is genuinely a norm and `Lp` is a complete metric space.

## Main definitions

* `mem_‚Ñìp f p` : property that the function `f` satisfies, as appropriate, `f = 0` if `p = 0`,
  `summable (Œª a, ‚à•f a‚à•^p)` if `0 < p < ‚àû`, and `bdd_above (norm '' (set.range f))` if `p = ‚àû`
* `Lp E p` : elements of `Œ† i : Œ±, E i` such that `mem_‚Ñìp f p`. Defined as an `add_subgroup` of
  `Œ† i : Œ±, E i`.

## Implementation

Since `Lp` is defined as an `add_subgroup`, dot notation does not work. Use `Lp.norm_neg f` to
say that `‚à•-f‚à• = ‚à•f‚à•`, instead of the non-working `f.norm_neg`.

## TODO

* H√∂lder's inequality
* Completeness of `Lp`
* Equivalence with `pi_Lp`, for `Œ±` finite
* Equivalence with `measure_theory.Lp`, for `f : Œ± ‚Üí E` (i.e., functions rather than pi-types) and
  the counting measure on `Œ±`
* Equivalence with `bounded_continuous_function`, for `f : Œ± ‚Üí E` (i.e., functions rather than
  pi-types) and `p = ‚àû`, and the discrete topology on `Œ±`

-/

noncomputable theory
open_locale nnreal ennreal big_operators

variables {Œ± : Type*} {E : Œ± ‚Üí Type*} {p q : ‚Ñù‚â•0‚àû} [Œ† i, normed_group (E i)]

section ‚Ñìp

/-!
### `mem_‚Ñìp` predicate

-/

section ‚Ñìp_space_definition

/-- The property that `f : Œ† i : Œ±, E i`
* is `0`, if `p = 0`, or
* admits an upper bound for `set.range (Œª i, ‚à•f i‚à•)`, if `p = ‚àû`, or
* has the series `‚àë' i, ‚à•f i‚à• ^ p` be summable, if `0 < p < ‚àû`. -/
def mem_‚Ñìp (f : Œ† i, E i) (p : ‚Ñù‚â•0‚àû) : Prop :=
if p = 0 then (set.finite {i | f i ‚â† 0}) else
  (if p = ‚àû then bdd_above (set.range (Œª i, ‚à•f i‚à•)) else summable (Œª i, ‚à•f i‚à• ^ p.to_real))

end ‚Ñìp_space_definition

lemma mem_‚Ñìp_zero {f : Œ† i, E i} (hf : set.finite {i | f i ‚â† 0}) : mem_‚Ñìp f 0 :=
(if_pos rfl).mpr hf

lemma mem_‚Ñìp_infty {f : Œ† i, E i} (hf : bdd_above (set.range (Œª i, ‚à•f i‚à•))) : mem_‚Ñìp f ‚àû :=
(if_neg ennreal.top_ne_zero).mpr ((if_pos rfl).mpr hf)

lemma mem_‚Ñìp_gen (hp : 0 < p.to_real) {f : Œ† i, E i} (hf : summable (Œª i, ‚à•f i‚à• ^ p.to_real)) :
  mem_‚Ñìp f p :=
begin
  rw ennreal.to_real_pos_iff at hp,
  dsimp [mem_‚Ñìp],
  rw [if_neg hp.1.ne', if_neg hp.2],
  exact hf,
end

lemma mem_‚Ñìp.finite_dsupport {f : Œ† i, E i} (hf : mem_‚Ñìp f 0) : set.finite {i | f i ‚â† 0} :=
(if_pos rfl).mp hf

lemma mem_‚Ñìp.bdd_above {f : Œ† i, E i} (hf : mem_‚Ñìp f ‚àû) : bdd_above (set.range (Œª i, ‚à•f i‚à•)) :=
(if_pos rfl).mp ((if_neg ennreal.top_ne_zero).mp hf)

lemma mem_‚Ñìp.summable (hp : 0 < p.to_real) {f : Œ† i, E i} (hf : mem_‚Ñìp f p) :
  summable (Œª i, ‚à•f i‚à• ^ p.to_real) :=
begin
  rw ennreal.to_real_pos_iff at hp,
  exact (if_neg hp.2).mp ((if_neg hp.1.ne').mp hf)
end

lemma zero_mem_‚Ñìp : mem_‚Ñìp (0 : Œ† i, E i) p :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { apply mem_‚Ñìp_zero,
    simp },
  { apply mem_‚Ñìp_infty,
    cases is_empty_or_nonempty Œ± with _i _i; resetI,
    { convert bdd_above_empty,
      { simp [_i] },
      apply_instance },
    { convert bdd_above_singleton,
      simp } },
  { apply mem_‚Ñìp_gen hp,
    convert summable_zero,
    simp [real.zero_rpow hp.ne'] }
end

lemma zero_mem_‚Ñìp' : mem_‚Ñìp (Œª i : Œ±, (0 : E i)) p := zero_mem_‚Ñìp

lemma mem_‚Ñìp.neg {f : Œ† i, E i} (hf : mem_‚Ñìp f p) : mem_‚Ñìp (-f) p :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { apply mem_‚Ñìp_zero,
    simp [hf.finite_dsupport] },
  { apply mem_‚Ñìp_infty,
    simpa using hf.bdd_above },
  { apply mem_‚Ñìp_gen hp,
    simpa using hf.summable hp },
end

lemma mem_‚Ñìp_neg_iff {f : Œ† i, E i} : mem_‚Ñìp (-f) p ‚Üî mem_‚Ñìp f p :=
‚ü®Œª h, neg_neg f ‚ñ∏ h.neg, mem_‚Ñìp.neg‚ü©

lemma eventually_lt_of_tendsto_lt  {Œ± : Type*} {Œ≥ : Type*} [topological_space Œ±] [linear_order Œ±]
  [order_closed_topology Œ±] {l : filter Œ≥} {f : Œ≥ ‚Üí Œ±} {u v : Œ±} (hv : v < u)
  (h : filter.tendsto f l (nhds v)) : ‚àÄ·∂† a in l, f a < u :=
tendsto_nhds.1 h (< u) is_open_Iio hv

lemma set.finite.bdd_above_image {Œ± : Type*} {Œ≤ : Type*} [hŒ≤ : nonempty Œ≤] [linear_order Œ≤]
  {s : set Œ±} (f : Œ± ‚Üí Œ≤) (h : s.finite) :
  bdd_above (f '' s) :=
begin
  rcases is_empty_or_nonempty Œ± with _i | _i; resetI,
  { inhabit Œ≤,
    use default Œ≤,
    rintros b ‚ü®a, ha, rfl‚ü©,
    revert ha a,
    exact _i.elim },
  exact (h.image f).bdd_above,
end

lemma mem_‚Ñìp.mem_‚Ñìp_of_exponent_ge {p q : ‚Ñù‚â•0‚àû} {f : Œ† i, E i}
  (hfq : mem_‚Ñìp f q) (hpq : q ‚â§ p) :
  mem_‚Ñìp f p :=
begin
  rcases ennreal.trichotomy‚ÇÇ hpq with ‚ü®rfl, rfl‚ü© | ‚ü®rfl, rfl‚ü© | ‚ü®rfl, hp‚ü© | ‚ü®rfl, rfl‚ü© | ‚ü®hq, rfl‚ü©
    | ‚ü®hq, hp, hpq'‚ü©,
  { apply mem_‚Ñìp_zero,
    exact hfq.finite_dsupport },
  { apply mem_‚Ñìp_infty,
    obtain ‚ü®C, hC‚ü© := hfq.finite_dsupport.bdd_above_image (Œª i, ‚à•f i‚à•),
    use max 0 C,
    rintros x ‚ü®i, rfl‚ü©,
    by_cases hi : f i = 0,
    { simp [hi] },
    { exact (hC ‚ü®i, hi, rfl‚ü©).trans (le_max_right _ _) } },
  { apply mem_‚Ñìp_gen hp,
    have : ‚àÄ i ‚àâ hfq.finite_dsupport.to_finset, ‚à•f i‚à• ^ p.to_real = 0,
    { intros i hi,
      have : f i = 0 := by simpa using hi,
      simp [this, real.zero_rpow hp.ne'] },
    exact summable_of_ne_finset_zero this },
  { exact hfq },
  { apply mem_‚Ñìp_infty,
    obtain ‚ü®A, hA‚ü© := (hfq.summable hq).tendsto_cofinite_zero.bdd_above_range_of_cofinite,
    use A ^ (q.to_real‚Åª¬π),
    rintros x ‚ü®i, rfl‚ü©,
    have : 0 ‚â§ ‚à•f i‚à• ^ q.to_real := real.rpow_nonneg_of_nonneg (norm_nonneg _) _,
    simpa [‚Üê real.rpow_mul, mul_inv_cancel hq.ne'] using
      real.rpow_le_rpow this (hA ‚ü®i, rfl‚ü©) (inv_nonneg.mpr hq.le) },
  { apply mem_‚Ñìp_gen hp,
    have hf' := hfq.summable hq,
    refine summable_of_norm_bounded_eventually _ hf' (@set.finite.subset _ {i | 1 ‚â§ ‚à•f i‚à•} _ _ _),
    { have H : {x : Œ± | 1 ‚â§ ‚à•f x‚à• ^ q.to_real}.finite,
      { simpa using eventually_lt_of_tendsto_lt (by norm_num : (0:‚Ñù) < 1)
          hf'.tendsto_cofinite_zero },
      exact H.subset (Œª i hi, real.one_le_rpow hi hq.le) },
    { show ‚àÄ i, ¬¨ (|‚à•f i‚à• ^ p.to_real| ‚â§ ‚à•f i‚à• ^ q.to_real) ‚Üí 1 ‚â§ ‚à•f i‚à•,
      intros i hi,
      have : 0 ‚â§ ‚à•f i‚à• ^ p.to_real := real.rpow_nonneg_of_nonneg (norm_nonneg _) p.to_real,
      simp only [abs_of_nonneg, this] at hi,
      contrapose! hi,
      exact real.rpow_le_rpow_of_exponent_ge' (norm_nonneg _) hi.le hq.le hpq' } }
end

lemma mem_‚Ñìp.add {f g : Œ† i, E i} (hf : mem_‚Ñìp f p) (hg : mem_‚Ñìp g p) : mem_‚Ñìp (f + g) p :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { apply mem_‚Ñìp_zero,
    refine (hf.finite_dsupport.union hg.finite_dsupport).subset _,
    intros i,
    simp only [pi.add_apply, ne.def, set.mem_union_eq, set.mem_set_of_eq],
    contrapose!,
    rintros ‚ü®hf', hg'‚ü©,
    simp [hf', hg'] },
  { apply mem_‚Ñìp_infty,
    obtain ‚ü®A, hA‚ü© := hf.bdd_above,
    obtain ‚ü®B, hB‚ü© := hg.bdd_above,
    refine ‚ü®A + B, _‚ü©,
    rintros a ‚ü®i, rfl‚ü©,
    exact le_trans (norm_add_le _ _) (add_le_add (hA ‚ü®i, rfl‚ü©) (hB ‚ü®i, rfl‚ü©)) },
  apply mem_‚Ñìp_gen hp,
  let C : ‚Ñù := if p.to_real < 1 then 1 else 2 ^ (p.to_real - 1),
  refine summable_of_nonneg_of_le _ _ (((hf.summable hp).add (hg.summable hp)).mul_left C),
  { exact Œª b, real.rpow_nonneg_of_nonneg (norm_nonneg (f b + g b)) p.to_real },
  { intros i,
    refine (real.rpow_le_rpow (norm_nonneg _) (norm_add_le _ _) hp.le).trans _,
    dsimp [C],
    split_ifs,
    { simpa using nnreal.coe_le_coe.2 (nnreal.rpow_add_le_add_rpow (‚à•f i‚à•‚Çä) (‚à•g i‚à•‚Çä) hp h.le) },
    { let F : fin 2 ‚Üí ‚Ñù‚â•0 := ![‚à•f i‚à•‚Çä, ‚à•g i‚à•‚Çä],
      have : ‚àÄ i, (0:‚Ñù) ‚â§ F i := Œª i, (F i).coe_nonneg,
      simp only [not_lt] at h,
      simpa [F, fin.sum_univ_succ] using
        real.rpow_sum_le_const_mul_sum_rpow_of_nonneg (finset.univ : finset (fin 2)) h
        (Œª i _, (F i).coe_nonneg) } }
end

lemma mem_‚Ñìp.sub {f g : Œ† i, E i} (hf : mem_‚Ñìp f p) (hg : mem_‚Ñìp g p) : mem_‚Ñìp (f - g) p :=
by { rw sub_eq_add_neg, exact hf.add hg.neg }

lemma mem_‚Ñìp_finset_sum {Œπ} (s : finset Œπ) {f : Œπ ‚Üí Œ† i, E i} (hf : ‚àÄ i ‚àà s, mem_‚Ñìp (f i) p) :
  mem_‚Ñìp (Œª a, ‚àë i in s, f i a) p :=
begin
  haveI : decidable_eq Œπ := classical.dec_eq _,
  revert hf,
  refine finset.induction_on s _ _,
  { simp only [zero_mem_‚Ñìp', finset.sum_empty, implies_true_iff], },
  { intros i s his ih hf,
    simp only [his, finset.sum_insert, not_false_iff],
    exact (hf i (s.mem_insert_self i)).add (ih (Œª j hj, hf j (finset.mem_insert_of_mem hj))), },
end

section normed_space

variables {ùïú : Type*} [normed_field ùïú] [Œ† i, normed_space ùïú (E i)]

lemma mem_‚Ñìp.const_smul {f : Œ† i, E i} (hf : mem_‚Ñìp f p) (c : ùïú) : mem_‚Ñìp (c ‚Ä¢ f) p :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { apply mem_‚Ñìp_zero,
    refine hf.finite_dsupport.subset _,
    intros i,
    simp only [ne.def, set.mem_set_of_eq, pi.smul_apply],
    contrapose!,
    intros hf',
    simp [hf'] },
  { obtain ‚ü®A, hA‚ü© := hf.bdd_above,
    refine mem_‚Ñìp_infty ‚ü®‚à•c‚à• * A, _‚ü©,
    rintros a ‚ü®i, rfl‚ü©,
    simpa [norm_smul] using mul_le_mul_of_nonneg_left (hA ‚ü®i, rfl‚ü©) (norm_nonneg c) },
  { apply mem_‚Ñìp_gen hp,
    convert (hf.summable hp).mul_left (‚à•c‚à• ^ p.to_real),
    ext i,
    simp [norm_smul, real.mul_rpow (norm_nonneg c) (norm_nonneg (f i))] },
end

lemma mem_‚Ñìp.const_mul {f : Œ± ‚Üí ùïú} (hf : mem_‚Ñìp f p) (c : ùïú) : mem_‚Ñìp (Œª x, c * f x) p :=
by convert hf.const_smul c

end normed_space

end ‚Ñìp

/-!
### Lp space

The space of elements of `Œ† i, E i` satisfying the predicate `mem_‚Ñìp`.
-/

/-- Lp space -/
def Lp (E : Œ± ‚Üí Type*) [Œ† i, normed_group (E i)]
  (p : ‚Ñù‚â•0‚àû) : add_subgroup (Œ† i, E i) :=
{ carrier := {f | mem_‚Ñìp f p},
  zero_mem' := zero_mem_‚Ñìp,
  add_mem' := Œª f g, mem_‚Ñìp.add,
  neg_mem' := Œª f, mem_‚Ñìp.neg }

namespace Lp

instance : has_coe_to_fun (Lp E p) (Œª _, Œ† i, E i) := ‚ü®Œª f, ((f : Œ† i, E i) : Œ† i, E i)‚ü©

@[ext] lemma ext {f g : Lp E p} (h : (f : Œ† i, E i) = g) : f = g :=
subtype.ext h

lemma ext_iff {f g : Lp E p} : f = g ‚Üî (f : Œ† i, E i) = g :=
subtype.ext_iff

-- move to `group_theory.subgroup.basic`
@[to_additive]
instance _root_.subgroup.subsingleton {G : Type*} [group G] [subsingleton G] (H : set G) :
  subsingleton H :=
‚ü® Œª a b, subtype.ext (subsingleton.elim (a:G) b)‚ü©

lemma eq_zero' [is_empty Œ±] (f : Lp E p) : f = 0 := subsingleton.elim f 0

protected lemma monotone {p q : ‚Ñù‚â•0‚àû} (hpq : q ‚â§ p) : Lp E q ‚â§ Lp E p :=
Œª f hf, mem_‚Ñìp.mem_‚Ñìp_of_exponent_ge hf hpq

protected lemma mem_‚Ñìp (f : Lp E p) : mem_‚Ñìp f p := f.prop

variables (E p)
@[simp] lemma coe_fn_zero : ‚áë(0 : Lp E p) = 0 := rfl
variables {E p}

@[simp] lemma coe_fn_neg (f : Lp E p) : ‚áë(-f) = -f := rfl

@[simp] lemma coe_fn_add (f g : Lp E p) : ‚áë(f + g) = f + g := rfl

@[simp] lemma coe_fn_sub (f g : Lp E p) : ‚áë(f - g) = f - g := rfl

-- @[simp] lemma eq_zero (f : Lp E 0) : f = 0 := ext (Lp.mem_‚Ñìp f).eq_zero

instance : has_norm (Lp E p) :=
{ norm := Œª f, if hp : p = 0 then by subst hp; exact (Lp.mem_‚Ñìp f).finite_dsupport.to_finset.card
   else (if p = ‚àû then ‚®Ü i, ‚à•f i‚à• else (‚àë' i, ‚à•f i‚à• ^ p.to_real) ^ (1/p.to_real)) }

lemma norm_eq_card_dsupport (f : Lp E 0) : ‚à•f‚à• = (Lp.mem_‚Ñìp f).finite_dsupport.to_finset.card :=
dif_pos rfl

lemma norm_eq_csupr (f : Lp E ‚àû) : ‚à•f‚à• = ‚®Ü i, ‚à•f i‚à• :=
begin
  dsimp [norm],
  rw [dif_neg ennreal.top_ne_zero, if_pos rfl]
end

lemma is_lub_norm [nonempty Œ±] (f : Lp E ‚àû) : is_lub (set.range (Œª i, ‚à•f i‚à•)) ‚à•f‚à• :=
begin
  rw Lp.norm_eq_csupr,
  exact is_lub_csupr (Lp.mem_‚Ñìp f)
end

lemma norm_eq_tsum_rpow (hp : 0 < p.to_real) (f : Lp E p) :
  ‚à•f‚à• = (‚àë' i, ‚à•f i‚à• ^ p.to_real) ^ (1/p.to_real) :=
begin
  dsimp [norm],
  rw ennreal.to_real_pos_iff at hp,
  rw [dif_neg hp.1.ne', if_neg hp.2],
end

lemma norm_rpow_eq_tsum (hp : 0 < p.to_real) (f : Lp E p) :
  ‚à•f‚à• ^ p.to_real = ‚àë' i, ‚à•f i‚à• ^ p.to_real :=
begin
  rw [norm_eq_tsum_rpow hp, ‚Üê real.rpow_mul],
  { field_simp [hp.ne'] },
  apply tsum_nonneg,
  intros i,
  calc (0:‚Ñù) = 0 ^ p.to_real : by rw real.zero_rpow hp.ne'
  ... ‚â§ _ : real.rpow_le_rpow rfl.le (norm_nonneg (f i)) hp.le
end

lemma has_sum_norm (hp : 0 < p.to_real) (f : Lp E p) :
  has_sum (Œª i, ‚à•f i‚à• ^ p.to_real) (‚à•f‚à• ^ p.to_real) :=
begin
  rw norm_rpow_eq_tsum hp,
  exact ((Lp.mem_‚Ñìp f).summable hp).has_sum
end

-- move this
lemma real.csupr_empty {Œ± : Sort*} [is_empty Œ±] (f : Œ± ‚Üí ‚Ñù) : (‚®Ü i, f i) = 0 :=
begin
  dsimp [supr],
  convert real.Sup_empty,
  rw set.range_eq_empty_iff,
  apply_instance
end

-- move this
@[simp] lemma real.csupr_const_zero {Œ± : Sort*} : (‚®Ü i : Œ±, (0:‚Ñù)) = 0 :=
begin
  cases is_empty_or_nonempty Œ±; resetI,
  { exact real.csupr_empty _ },
  { exact csupr_const },
end

lemma norm_nonneg' (f : Lp E p) : 0 ‚â§ ‚à•f‚à• :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { simp [Lp.norm_eq_card_dsupport f] },
  { cases is_empty_or_nonempty Œ± with _i _i; resetI,
    { rw Lp.norm_eq_csupr,
      simp [real.csupr_empty] },
    inhabit Œ±,
    exact (norm_nonneg (f (default Œ±))).trans ((Lp.is_lub_norm f).1 ‚ü®default Œ±, rfl‚ü©) },
  { rw Lp.norm_eq_tsum_rpow hp f,
    refine real.rpow_nonneg_of_nonneg (tsum_nonneg _) _,
    exact Œª i, real.rpow_nonneg_of_nonneg (norm_nonneg _) _ },
end

@[simp] lemma norm_zero : ‚à•(0 : Lp E p)‚à• = 0 :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { simp [Lp.norm_eq_card_dsupport] },
  { simp [Lp.norm_eq_csupr] },
  { rw Lp.norm_eq_tsum_rpow hp,
    have hp' : 1 / p.to_real ‚â† 0 := one_div_ne_zero hp.ne',
    simpa [real.zero_rpow hp.ne'] using real.zero_rpow hp' }
end

-- move to `topology.algebra.infinite_sum`
lemma _root_.has_sum_zero_iff_of_nonneg {Œπ Œ± : Type*} [ordered_add_comm_group Œ±]
  [topological_space Œ±] [topological_add_group Œ±] [order_closed_topology Œ±]
  {f : Œπ ‚Üí Œ±} (hf : ‚àÄ i, 0 ‚â§ f i) :
  has_sum f 0 ‚Üî f = 0 :=
begin
  split,
  { intros hf',
    ext i,
    by_contra hi',
    have hi : 0 < f i := lt_of_le_of_ne (hf i) (ne.symm hi'),
    simpa using has_sum_lt hf hi has_sum_zero hf' },
  { rintros rfl,
    exact has_sum_zero },
end

lemma norm_eq_zero_iff {f : Lp E p} (hp : 0 < p) : ‚à•f‚à• = 0 ‚Üî f = 0 :=
begin
  classical,
  refine ‚ü®Œª h, _, by { rintros rfl, exact norm_zero }‚ü©,
  rcases p.trichotomy with rfl | rfl | hp,
  { have : {i : Œ± | ¬¨f i = 0} = ‚àÖ := by simpa [Lp.norm_eq_card_dsupport f] using h,
    ext i,
    sorry },
  { cases is_empty_or_nonempty Œ± with _i _i; resetI,
    { simp },
    have H : is_lub (set.range (Œª i, ‚à•f i‚à•)) 0,
    { simpa [h] using Lp.is_lub_norm f },
    ext i,
    have : ‚à•f i‚à• = 0 := le_antisymm (H.1 ‚ü®i, rfl‚ü©) (norm_nonneg _),
    simpa using this },
  { have hf : has_sum (Œª (i : Œ±), ‚à•f i‚à• ^ p.to_real) 0,
    { have := Lp.has_sum_norm hp f ,
      rw h at this,
      simpa [real.zero_rpow hp.ne'] using this }, -- why can't the `simp` and `rw` be combined?
    have : ‚àÄ i, 0 ‚â§ ‚à•f i‚à• ^ p.to_real := Œª i, real.rpow_nonneg_of_nonneg (norm_nonneg _) _,
    rw has_sum_zero_iff_of_nonneg this at hf,
    ext i,
    have : f i = 0 ‚àß p.to_real ‚â† 0,
    { simpa [real.rpow_eq_zero_iff_of_nonneg (norm_nonneg (f i))] using congr_fun hf i },
    exact this.1 },
end

lemma eq_zero_iff_ae_eq_zero {f : Lp E p} : f = 0 ‚Üî ‚áëf = 0 :=
by rw [ext_iff, coe_fn_zero]

@[simp] lemma norm_neg {f : Lp E p} : ‚à•-f‚à• = ‚à•f‚à• :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { simp [Lp.norm_eq_card_dsupport] },
  { cases is_empty_or_nonempty Œ±; resetI,
    { simp [Lp.eq_zero' f], },
    apply (Lp.is_lub_norm (-f)).unique,
    simpa using Lp.is_lub_norm f },
  { suffices : ‚à•-f‚à• ^ p.to_real = ‚à•f‚à• ^ p.to_real,
    { exact real.rpow_left_inj_on hp.ne' (norm_nonneg' _) (norm_nonneg' _) this },
    apply (Lp.has_sum_norm hp (-f)).unique,
    simpa using Lp.has_sum_norm hp f }
end

instance [hp : fact (1 ‚â§ p)] : normed_group (Lp E p) :=
normed_group.of_core _
{ norm_eq_zero_iff := Œª f, norm_eq_zero_iff (ennreal.zero_lt_one.trans_le hp.1),
  triangle := Œª f g, begin
    tactic.unfreeze_local_instances,
    rcases p.dichotomy with rfl | hp',
    { cases is_empty_or_nonempty Œ±; resetI,
      { simp [Lp.eq_zero' f] },
      refine (Lp.is_lub_norm (f + g)).2 _,
      rintros x ‚ü®i, rfl‚ü©,
      refine le_trans _ (add_mem_upper_bounds_add (Lp.is_lub_norm f).1 (Lp.is_lub_norm g).1
        ‚ü®_, _, ‚ü®i, rfl‚ü©, ‚ü®i, rfl‚ü©, rfl‚ü©),
      exact norm_add_le (f i) (g i) },
    { have hp'' : 0 < p.to_real := zero_lt_one.trans_le hp',
      have hf‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚à•f i‚à• := Œª i, norm_nonneg _,
      have hg‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚à•g i‚à• := Œª i, norm_nonneg _,
      have hf‚ÇÇ := Lp.has_sum_norm hp'' f,
      have hg‚ÇÇ := Lp.has_sum_norm hp'' g,
      -- apply Minkowski's inequality
      obtain ‚ü®C, hC‚ÇÅ, hC‚ÇÇ, hCfg‚ü© :=
        real.Lp_add_le_has_sum_of_nonneg hp' hf‚ÇÅ hg‚ÇÅ (norm_nonneg' _) (norm_nonneg' _) hf‚ÇÇ hg‚ÇÇ,
      refine le_trans _ hC‚ÇÇ,
      rw ‚Üê real.rpow_le_rpow_iff (norm_nonneg' (f + g)) hC‚ÇÅ hp'',
      refine has_sum_le _ (Lp.has_sum_norm hp'' (f + g)) hCfg,
      intros i,
      exact real.rpow_le_rpow (norm_nonneg _) (norm_add_le _ _) hp''.le },
  end,
  norm_neg := by simp }

section normed_space

variables {ùïú : Type*} [normed_field ùïú] [Œ† i, normed_space ùïú (E i)]

lemma mem_Lp_const_smul (c : ùïú) (f : Lp E p) : c ‚Ä¢ ‚Üëf ‚àà Lp E p := (Lp.mem_‚Ñìp f).const_smul c

variables (E p ùïú)

/-- The `ùïú`-submodule of elements of `Œ† i : Œ±, E i` whose `Lp` norm is finite.  This is `Lp E p`,
with extra structure. -/
def Lp_submodule : submodule ùïú (Œ† i, E i) :=
{ smul_mem' := Œª c f hf, by simpa using mem_Lp_const_smul c ‚ü®f, hf‚ü©,
  .. Lp E p }

variables {E p ùïú}

lemma coe_Lp_submodule : (Lp_submodule E p ùïú).to_add_subgroup = Lp E p := rfl

instance : module ùïú (Lp E p) :=
{ .. (Lp_submodule E p ùïú).module }

lemma coe_fn_smul (c : ùïú) (f : Lp E p) : ‚áë(c ‚Ä¢ f) = c ‚Ä¢ f := rfl

-- move
lemma is_lub_mul {K : Type*} [linear_ordered_field K] {s : set K} {c : K} (hc : 0 ‚â§ c) {A : K}
  (hs : is_lub s A) :
  is_lub {x | ‚àÉ a ‚àà s, c * a = x} (c * A) :=
begin
  rcases lt_or_eq_of_le hc with hc | rfl,
  { rw ‚Üê (order_iso.mul_left‚ÇÄ _ hc).is_lub_image' at hs,
    convert hs using 1,
    ext x,
    simp },
  { convert is_lub_singleton using 1,
    ext x,
    have : s.nonempty ‚àß 0 = x ‚Üî x = 0 := by rw [and_iff_right hs.nonempty, eq_comm],
    simpa using this },
end

lemma norm_const_smul (c : ùïú) (f : Lp E p) : ‚à•c ‚Ä¢ f‚à• = ‚à•c‚à• * ‚à•f‚à• :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { sorry },
  { cases is_empty_or_nonempty Œ±; resetI,
    { simp [Lp.eq_zero' f], },
    apply (Lp.is_lub_norm (c ‚Ä¢ f)).unique,
    convert is_lub_mul (norm_nonneg c) (Lp.is_lub_norm f),
    ext a,
    simp [coe_fn_smul, norm_smul] },
  { suffices : ‚à•c ‚Ä¢ f‚à• ^ p.to_real = (‚à•c‚à• * ‚à•f‚à•) ^ p.to_real,
    { refine real.rpow_left_inj_on hp.ne' _ _ this,
      { exact norm_nonneg' _ },
      { exact mul_nonneg (norm_nonneg _) (norm_nonneg' _) } },
    apply (Lp.has_sum_norm hp (c ‚Ä¢ f)).unique,
    convert (Lp.has_sum_norm hp f).mul_left (‚à•c‚à• ^ p.to_real),
    { simp [coe_fn_smul, norm_smul, real.mul_rpow (norm_nonneg c) (norm_nonneg _)] },
    have hf : 0 ‚â§ ‚à•f‚à• := Lp.norm_nonneg' f,
    simp [coe_fn_smul, norm_smul, real.mul_rpow (norm_nonneg c) hf] }
end

instance [fact (1 ‚â§ p)] : normed_space ùïú (Lp E p) :=
{ norm_smul_le := Œª _ _, by simp [norm_const_smul] }

instance [Œ† i, normed_space ‚Ñù (E i)] [has_scalar ‚Ñù ùïú] [Œ† i, is_scalar_tower ‚Ñù ùïú (E i)] :
  is_scalar_tower ‚Ñù ùïú (Lp E p) :=
begin
  refine ‚ü®Œª r c f, _‚ü©,
  ext1,
  exact (Lp.coe_fn_smul _ _).trans (smul_assoc _ _ _)
end

end normed_space

end Lp
