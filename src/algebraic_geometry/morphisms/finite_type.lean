/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import algebraic_geometry.morphisms.ring_hom_properties
import algebraic_geometry.morphisms.quasi_compact

/-!
# Morphisms of finite type

A morphism of schemes `f : X ‚ü∂ Y` is locally of finite type if for each affine `U ‚äÜ Y` and
`V ‚äÜ f ‚Åª¬π' U`, The induced map `Œì(Y, U) ‚ü∂ Œì(X, V)` is of finite type.

A morphism of schemes is of finite type if it is both locally of finite type and quasi-compact.

We show that these properties is local, and is stable under compositions and base-changes.

-/

noncomputable theory

open category_theory category_theory.limits opposite topological_space

universe u

namespace algebraic_geometry

variables {X Y : Scheme.{u}} (f : X ‚ü∂ Y)

/--
A morphism is `affine` if the preimages of affine open sets are affine.
-/
@[mk_iff]
class locally_of_finite_type (f : X ‚ü∂ Y) : Prop :=
(of_finite_type_of_affine_subset :
  ‚àÄ (U : Y.affine_opens) (V : X.affine_opens) (e : V.1 ‚â§ (opens.map f.1.base).obj U.1),
  (f.1.c.app (op U) ‚â´ X.presheaf.map (hom_of_le e).op).finite_type)

lemma _root_.ring_hom.finite_type_is_local : ring_hom.property_is_local @ring_hom.finite_type :=
sorry

lemma _root_.ring_hom.finite_type_stable_under_base_change :
  ring_hom.stable_under_base_change @ring_hom.finite_type := sorry

lemma _root_.ring_hom.finite_type_respects_iso : ring_hom.respects_iso @ring_hom.finite_type :=
ring_hom.finite_type_is_local.respects_iso

lemma locally_of_finite_type_eq :
  @locally_of_finite_type = affine_locally @ring_hom.finite_type :=
begin
  ext X Y f,
  rw [locally_of_finite_type_iff, affine_locally_iff_affine_opens_le],
  exact ring_hom.finite_type_respects_iso
end

@[priority 900]
instance locally_of_finite_type_of_is_open_immersion {X Y : Scheme} (f : X ‚ü∂ Y)
  [is_open_immersion f] : locally_of_finite_type f :=
locally_of_finite_type_eq.symm ‚ñ∏ affine_locally_of_is_open_immersion ring_hom.finite_type_is_local f

lemma locally_of_finite_type_stable_under_composition :
  stable_under_composition @locally_of_finite_type :=
locally_of_finite_type_eq.symm ‚ñ∏ affine_locally_stable_under_composition ring_hom.finite_type_is_local

instance locally_of_finite_type_comp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [hf : locally_of_finite_type f] [hg : locally_of_finite_type g] :
  locally_of_finite_type (f ‚â´ g) :=
locally_of_finite_type_stable_under_composition f g hf hg

lemma locally_of_finite_type.affine_open_cover_iff {X Y : Scheme.{u}} (f : X ‚ü∂ Y)
  (ùí∞ : Scheme.open_cover.{u} Y) [‚àÄ i, is_affine (ùí∞.obj i)]
  (ùí∞' : ‚àÄ i, Scheme.open_cover.{u} ((ùí∞.pullback_cover f).obj i)) [‚àÄ i j, is_affine ((ùí∞' i).obj j)] :
  locally_of_finite_type f ‚Üî (‚àÄ i j, (Scheme.Œì.map ((ùí∞' i).map j ‚â´ pullback.snd).op).finite_type) :=
locally_of_finite_type_eq.symm ‚ñ∏ ring_hom.finite_type_is_local.affine_open_cover_iff f ùí∞ ùí∞'

lemma locally_of_finite_type.source_open_cover_iff {X Y : Scheme.{u}} (f : X ‚ü∂ Y)
  (ùí∞ : Scheme.open_cover.{u} X) :
  locally_of_finite_type f ‚Üî (‚àÄ i, locally_of_finite_type (ùí∞.map i ‚â´ f)) :=
locally_of_finite_type_eq.symm ‚ñ∏ ring_hom.finite_type_is_local.source_open_cover_iff f ùí∞

lemma locally_of_finite_type.open_cover_iff {X Y : Scheme.{u}} (f : X ‚ü∂ Y)
  (ùí∞ : Scheme.open_cover.{u} Y) :
  locally_of_finite_type f ‚Üî
    (‚àÄ i, locally_of_finite_type (pullback.snd : pullback f (ùí∞.map i) ‚ü∂ _)) :=
locally_of_finite_type_eq.symm ‚ñ∏
  ring_hom.finite_type_is_local.is_local_source_affine_locally.open_cover_iff f ùí∞

lemma locally_of_finite_type_respects_iso :
  respects_iso @locally_of_finite_type :=
locally_of_finite_type_eq.symm ‚ñ∏ target_affine_locally_respects_iso
  (source_affine_locally_respects_iso ring_hom.finite_type_respects_iso)

lemma locally_of_finite_type_stable_under_base_change :
  stable_under_base_change @locally_of_finite_type :=
locally_of_finite_type_eq.symm ‚ñ∏ affine_locally_stable_under_base_change ring_hom.finite_type_is_local
  ring_hom.finite_type_stable_under_base_change

instance {X Y S : Scheme} (f : X ‚ü∂ S) (g : Y ‚ü∂ S) [locally_of_finite_type g] :
  locally_of_finite_type (pullback.fst : pullback f g ‚ü∂ X) :=
locally_of_finite_type_stable_under_base_change f g infer_instance

instance {X Y S : Scheme} (f : X ‚ü∂ S) (g : Y ‚ü∂ S) [locally_of_finite_type f] :
  locally_of_finite_type (pullback.snd : pullback f g ‚ü∂ Y) :=
locally_of_finite_type_stable_under_base_change.symmetry
  locally_of_finite_type_respects_iso f g infer_instance

class finite_type extends locally_of_finite_type f, quasi_compact f

@[priority 900]
instance of_finite_type_of_iso {X Y Z : Scheme} (f : X ‚ü∂ Y) [is_iso f] : finite_type f := {}

instance of_finite_type_comp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [hf : finite_type f] [hg : finite_type g] : finite_type (f ‚â´ g) := {}

instance {X Y S : Scheme} (f : X ‚ü∂ S) (g : Y ‚ü∂ S) [finite_type g] :
  finite_type (pullback.fst : pullback f g ‚ü∂ X) := {}

instance {X Y S : Scheme} (f : X ‚ü∂ S) (g : Y ‚ü∂ S) [finite_type f] :
  finite_type (pullback.snd : pullback f g ‚ü∂ Y) := {}

end algebraic_geometry
