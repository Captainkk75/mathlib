/-
Copyleft 2020 Johan Commelin. No rights reserved.
Authors: Johan Commelin
-/

import category_theory.comma
import topology.simplicial.singular
import topology.category.Top
import category_theory.category.Cat

/-! # Geometric realization of simplicial types -/

noncomputable theory

universe variables u

open category_theory category_theory.limits

namespace sSet
open Top function opposite

structure has_realization (S : sSet.{u}) (Y : Top.{u}) :=
(hom   : S ‚ü∂ singular.obj Y)
(equiv : Œ† X, (Y ‚ü∂ X) ‚âÉ (S ‚ü∂ singular.obj X))
(equiv_apply : ‚àÄ (X : Top.{u}) (f : Y ‚ü∂ X), equiv _ f = hom ‚â´ singular.map f . obviously)

namespace has_realization
variables {S : sSet.{u}} {Y : Top.{u}} (h : S.has_realization Y)

attribute [simp] equiv_apply

def map {S‚ÇÅ S‚ÇÇ : sSet} {Y‚ÇÅ Y‚ÇÇ : Top}
  (h‚ÇÅ : S‚ÇÅ.has_realization Y‚ÇÅ) (h‚ÇÇ : S‚ÇÇ.has_realization Y‚ÇÇ) (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) : Y‚ÇÅ ‚ü∂ Y‚ÇÇ :=
(h‚ÇÅ.equiv _).symm (f ‚â´ h‚ÇÇ.hom)

@[simp, reassoc]
lemma map_spec {S‚ÇÅ S‚ÇÇ : sSet} {Y‚ÇÅ Y‚ÇÇ : Top}
  (h‚ÇÅ : S‚ÇÅ.has_realization Y‚ÇÅ) (h‚ÇÇ : S‚ÇÇ.has_realization Y‚ÇÇ) (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  h‚ÇÅ.hom ‚â´ singular.map (h‚ÇÅ.map h‚ÇÇ f) = f ‚â´ h‚ÇÇ.hom :=
begin
  apply (h‚ÇÅ.equiv _).symm.injective,
  rw [‚Üê equiv_apply, equiv.symm_apply_apply], refl
end

@[simp] lemma map_id {S : sSet} {Y : Top} (h : S.has_realization Y) :
  h.map h (ùüô S) = ùüô Y :=
by { apply (h.equiv _).injective, simp [h.map_spec h (ùüô S)], }

lemma map_comp {S‚ÇÅ S‚ÇÇ S‚ÇÉ : sSet} {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Top}
  (h‚ÇÅ : S‚ÇÅ.has_realization Y‚ÇÅ) (h‚ÇÇ : S‚ÇÇ.has_realization Y‚ÇÇ) (h‚ÇÉ : S‚ÇÉ.has_realization Y‚ÇÉ)
  (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) (g : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
  h‚ÇÅ.map h‚ÇÉ (f ‚â´ g) = h‚ÇÅ.map h‚ÇÇ f ‚â´ h‚ÇÇ.map h‚ÇÉ g :=
begin
  apply (h‚ÇÅ.equiv _).injective,
  simp only [equiv_apply, functor.map_comp, category.assoc,
    has_realization.map_spec, has_realization.map_spec_assoc],
end

end has_realization

lemma standard_simplex_has_realization (n : NonemptyFinLinOrd) :
  (standard_simplex.obj n).has_realization (singular_standard_simplex.obj n) :=
{ hom := (yoneda_hom_comp_yoneda singular_standard_simplex).app n,
  equiv := Œª X,
  { to_fun    := Œª f, (yoneda_hom_comp_yoneda singular_standard_simplex).app n ‚â´ singular.map f,
    inv_fun   := Œª f, f.app (op n) (ùüô n),
    left_inv  := by tidy,
    right_inv :=
    begin
      intro f,
      ext1, ext1 m, dsimp [singular],
      ext1 i, change unop m ‚ü∂ n at i,
      ext1 x,
      have := congr_fun (f.naturality i.op).symm (ùüô n),
      replace := congr_arg continuous_map.to_fun this,
      replace := congr_fun this x,
      dsimp [standard_simplex, singular, singular_standard_simplex] at this,
      rw [category.comp_id] at this,
      exact this,
    end } }

open simplex_category opposite

def category_of_simplices (S : sSet.{u}) : Type u :=
Œ£ (n : simplex_category), (skeletal_functor.{u}.op ‚ãô S).obj (op n)

-- The following definition has universe issues
-- Œ£ (n : simplex_category), (skeletal_functor.{u}.op ‚ãô X).obj (op n)

namespace category_of_simplices
variables (S : sSet.{u}) {S‚ÇÅ S‚ÇÇ : sSet.{u}}

-- slow, sigh
instance : small_category (category_of_simplices S) :=
{ hom := Œª s t, ulift { f : s.1 ‚ü∂ t.1 // (skeletal_functor.{u}.op ‚ãô S).map f.op t.2 = s.2 },
  id := Œª s, ‚ü®‚ü®ùüô _, by { cases s, dsimp at *, simp at *, }‚ü©‚ü©,
  comp := Œª s t u f g, ‚ü®‚ü®f.down.1 ‚â´ g.down.1,
    begin
      cases s, cases t, cases u, cases g, cases f, dsimp at *,
      rcases f with ‚ü®f, rfl‚ü©, rcases g with ‚ü®g, rfl‚ü©, dsimp at *,
      simp only [eq_self_iff_true, op_comp, functor_to_types.map_comp_apply, functor.map_comp],
      simp only [types_comp_apply],
    end ‚ü©‚ü©,
  id_comp' := by { rintros ‚ü®m, s‚ü© ‚ü®n, t‚ü© ‚ü®f, hf‚ü©, simp only [category.id_comp], },
  comp_id' := by { rintros ‚ü®m, s‚ü© ‚ü®n, t‚ü© ‚ü®f, hf‚ü©, simp only [category.comp_id], },
  assoc' := by { intros, refl, } }
.

@[simps]
def map (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) : category_of_simplices S‚ÇÅ ‚•§ category_of_simplices S‚ÇÇ :=
{ obj := Œª s, ‚ü®s.1, f.app _ s.2‚ü©,
  map := Œª s t i, ‚ü®‚ü®i.down.1,
    begin
      rcases s with ‚ü®m, s‚ü©,
      rcases t with ‚ü®n, t‚ü©,
      rcases i with ‚ü®‚ü®i, hi‚ü©‚ü©,
      dsimp at *, subst hi,
      have := f.naturality (skeletal_functor.{u}.map i).op,
      exact congr_fun this.symm t,
    end‚ü©‚ü©, }

@[simps]
def proj : (category_of_simplices S) ‚•§ simplex_category :=
{ obj := Œª s, s.1,
  map := Œª s t f, f.1, }

end category_of_simplices

@[simps]
def Category_of_simplices : sSet ‚•§ Cat.{u} :=
{ obj := Œª S, ‚ü®category_of_simplices S, sSet.category_of_simplices.category_theory.small_category _‚ü©,
  map := Œª S‚ÇÅ S‚ÇÇ f, category_of_simplices.map f,
  map_id' :=
  begin
    intros S', apply category_theory.functor.ext,
    { intros s t i, ext1, ext1, ext1, refl, },
    { rintro ‚ü®n,s‚ü©, apply (functor.id_obj _).symm, }
  end,
  map_comp' :=
  begin
    intros S‚ÇÅ S‚ÇÇ S‚ÇÉ i j, apply category_theory.functor.ext,
    { intros X Y f, simp only [category.id_comp, eq_to_hom_refl, category.comp_id], refl, },
    { intros X, refl }
  end }

def realization_obj_functor (S : sSet.{u}) :
  (category_of_simplices S) ‚•§ Top.{u} :=
category_of_simplices.proj S ‚ãô skeletal_functor ‚ãô singular_standard_simplex

@[simps]
def realization_obj_functor_comp_hom {S‚ÇÅ S‚ÇÇ : sSet.{u}} (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  realization_obj_functor S‚ÇÅ ‚ü∂ category_of_simplices.map f ‚ãô realization_obj_functor S‚ÇÇ :=
{ app := Œª s, ùüô _, }

def realization_obj (S : sSet.{u}) : Top.{u} :=
colimit (realization_obj_functor S)

def realization_map {S‚ÇÅ S‚ÇÇ : sSet.{u}} (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  realization_obj S‚ÇÅ ‚ü∂ realization_obj S‚ÇÇ :=
colim.map (realization_obj_functor_comp_hom f) ‚â´ colimit.pre _ _

/-- The geometric realization of a simplicial type.
This functor is left adjoint to `Top.singular`. -/
-- TODO: Use Kan extensions
@[simps]
def realization : sSet.{u} ‚•§ Top.{u} :=
{ obj := realization_obj,
  map := Œª S‚ÇÅ S‚ÇÇ f, realization_map f, }
.
-- def has_realization_realization (S : sSet.{u}) :
--   S.has_realization (realization.obj S) :=
-- { hom :=
--   { app := Œª n s, show singular_standard_simplex.obj (n.unop) ‚ü∂  _,
--     begin
--       have := (standard_simplex_has_realization n.unop).w (realization.obj S),
--       have := this.2 _,
--     end ,
--     naturality' := _ },
--   w := _ }

end sSet
