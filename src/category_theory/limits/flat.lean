import category_theory.limits.filtered_colimit_commutes_finite_limit2
import category_theory.elements
import category_theory.functor_category
import category_theory.limits.preserves.limits
import category_theory.limits.yoneda
import category_theory.limits.creates

namespace category_theory
open limits opposite

universes w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variables (J : Type v‚ÇÇ) [small_category J]
variables {C : Type u‚ÇÅ} [category.{v‚ÇÇ} C]
variables (F : C ‚•§ Type v‚ÇÇ) (hF : is_filtered F.elements·µí·µñ)

-- set_option pp.universes true

@[simps {rhs_md := semireducible}]
def my_functor (F : C ‚•§ Type v‚ÇÇ) : F.elements·µí·µñ ‚•§ C ‚•§ Type v‚ÇÇ :=
functor.op (category_of_elements.œÄ F) ‚ãô coyoneda

@[simps]
def alt_cocone (F : C ‚•§ Type v‚ÇÇ) :
  cocone (my_functor F) :=
{ X := F,
  Œπ :=
  { app := Œª p,
    { app := Œª Y f, F.map f p.unop.2,
      naturality' := Œª Y‚ÇÅ Y‚ÇÇ g,
      begin
        ext f,
        apply functor_to_types.map_comp_apply F f g,
      end },
    naturality' := Œª p‚ÇÅ p‚ÇÇ Œ±,
    begin
      ext X x,
      change F.map (Œ±.unop.1 ‚â´ x) _ = F.map _ _,
      rw [functor_to_types.map_comp_apply F, Œ±.unop.2],
    end } }

def alt_colimit (F : C ‚•§ Type v‚ÇÇ) :
  is_colimit (alt_cocone F) :=
{ desc := Œª s,
  { app := Œª X t, (s.Œπ.app (op ‚ü®X, t‚ü©)).app _ (ùüô _),
    naturality' :=
    begin
      intros X Y f,
      ext t,
      let X' : F.elements·µí·µñ := op ‚ü®X, t‚ü©,
      let Y' : F.elements·µí·µñ := op ‚ü®Y, F.map f t‚ü©,
      let f' : Y' ‚ü∂ X' := has_hom.hom.op ‚ü®_, rfl‚ü©,
      change (s.Œπ.app Y').app _ (ùüô Y) = s.X.map f ((s.Œπ.app X').app _ _),
      rw ‚Üê s.w f',
      change (s.Œπ.app X').app Y (f ‚â´ ùüô Y) = ((s.Œπ.app X').app X ‚â´ s.X.map f) (ùüô X),
      rw category.comp_id,
      rw ‚Üê (show _ = (s.Œπ.app X').app X ‚â´ s.X.map f, from (s.Œπ.app X').naturality f),
      change _ = (s.Œπ.app X').app Y (ùüô X ‚â´ f),
      rw category.id_comp f,
    end },
  fac' := Œª s j,
  begin
    op_induction j,
    cases j with X x,
    ext Y f,
    let X' : F.elements·µí·µñ := op ‚ü®X, x‚ü©,
    let Y' : F.elements·µí·µñ := op ‚ü®Y, F.map f x‚ü©,
    let f' : Y' ‚ü∂ X' := has_hom.hom.op ‚ü®_, rfl‚ü©,
    change (s.Œπ.app Y').app Y (ùüô Y) = (s.Œπ.app X').app Y f,
    rw ‚Üê s.w f',
    dsimp,
    simp,
  end,
  uniq' :=  Œª s m w,
  begin
    ext X x,
    change m.app X x = (s.Œπ.app (op ‚ü®X, x‚ü©)).app X (ùüô X),
    rw ‚Üê w (op ‚ü®X, x‚ü©),
    dsimp,
    simp,
  end }

noncomputable def my_thm
  (J : Type v‚ÇÇ) [small_category J] [fin_category J]
  {C : Type u‚ÇÅ} [category.{v‚ÇÇ} C]
  (F : C ‚•§ Type v‚ÇÇ) (hF : is_filtered F.elements·µí·µñ) :
  preserves_limits_of_shape J F :=
begin
  split,
  intro K,
  split,
  intros c t,
  let Œì : F.elements·µí·µñ ‚•§ J ‚•§ Type v‚ÇÇ := my_functor F ‚ãô (whiskering_left J C _).obj K,
  let cj : Œ† (j : (F.elements)·µí·µñ), cone (Œì.obj j) :=
    Œª j, ((my_functor F).obj j).map_cone c,
  let ck : Œ† (k : J), cocone (Œì.flip.obj k) :=
    Œª j, ((evaluation C (Type v‚ÇÇ)).obj (K.obj j)).map_cocone (alt_cocone F),
  have tj : Œ† j, is_limit (cj j),
  { intro j,
    apply is_limit_of_preserves (coyoneda.obj (op (unop j).fst)) t },
  have tk : Œ† k, is_colimit (ck k),
  { intro k,
    refine ‚ü®Œª s q, s.Œπ.app (op ‚ü®_, q‚ü©) (ùüô _), _, _‚ü©,
    { intros s j,
      op_induction j,
      cases j with X x,
      ext q,
      let X' : F.elements·µí·µñ := op ‚ü®X, x‚ü©,
      let Y' : F.elements·µí·µñ := (op ‚ü®K.obj k, F.map q x‚ü©),
      let Œ± : Y' ‚ü∂ X' := has_hom.hom.op ‚ü®q, rfl‚ü©,
      have := s.w Œ±,
      dsimp at this,
      change s.Œπ.app Y' _ = _,
      rw ‚Üê this,
      dsimp,
      simp },
    { intros s m w,
      ext X,
      dsimp,
      rw ‚Üê w,
      dsimp,
      simp } },
  let c‚ÇÅ : cocone (cones_to_functor tj),
  { refine ‚ü®F.obj c.X, Œª j q, F.map q j.unop.2, _‚ü©,
    { intros j‚ÇÅ j‚ÇÇ Œ±,
      ext,
      dsimp at x,
      dsimp,
      rw ‚Üê Œ±.unop.2,
      rw ‚Üê functor_to_types.map_comp_apply,
      congr' 1,
      let m : (cj j‚ÇÅ).X ‚ü∂ (cj j‚ÇÇ).X := Œª z, Œ±.unop.1 ‚â´ z,
      have : is_limit.map (cj j‚ÇÅ) (tj j‚ÇÇ) (whisker_left K ((my_functor F).map Œ±)) = m,
      { refine (tj j‚ÇÇ).hom_ext _,
        intro j,
        rw is_limit.map_œÄ,
        ext,
        change _ ‚â´ _ ‚â´ _ = (_ ‚â´ _) ‚â´ _,
        rw category.assoc,
        refl },
      rw this } },
  let c‚ÇÇ : cone (cocones_to_functor tk),
  { apply limit.cone (cocones_to_functor tk) },
  let t‚ÇÅ : is_colimit c‚ÇÅ,
  { refine ‚ü®Œª s q, _, _, _‚ü©,
    { apply s.Œπ.app (op ‚ü®_, q‚ü©) (ùüô _) },
    { intros s j,
      op_induction j,
      cases j with X x,
      ext q,
      dsimp,
      let X' : F.elements·µí·µñ := op ‚ü®X, x‚ü©,
      let Y' : F.elements·µí·µñ := (op ‚ü®_, F.map q x‚ü©),
      let Œ± : Y' ‚ü∂ X' := has_hom.hom.op ‚ü®q, rfl‚ü©,
      rw ‚Üê s.w Œ±,
      dsimp,
      congr' 1,
      have : is_limit.map (cj Y') (tj X') (whisker_left K ((my_functor F).map Œ±)) = (Œª z, q ‚â´ z),
      { apply (tj X').hom_ext,
        intro j,
        rw is_limit.map_œÄ,
        ext z,
        dsimp [my_functor],
        simp },
      rw this,
      simp },
    { intros s m w,
      ext q,
      rw ‚Üê w,
      dsimp,
      simp, } },
  let t‚ÇÇ : is_limit c‚ÇÇ := limit.is_limit _,
  let q : cocones_to_functor tk ‚âÖ K ‚ãô F,
  { refine nat_iso.of_components (Œª X, iso.refl _) _,
    intros X Y f,
    dsimp,
    rw [category.id_comp, category.comp_id],
    apply (tk X).hom_ext,
    intro j,
    rw is_colimit.Œπ_map,
    ext q,
    dsimp [alt_cocone, my_functor],
    simp, },
  let i‚ÇÇ := has_limit.iso_of_nat_iso q,
  let i‚ÇÉ : F.obj c.X ‚âÖ limit (K ‚ãô F) := filtered_colimit_finite_limit_iso Œì tj tk t‚ÇÅ t‚ÇÇ ‚â™‚â´ i‚ÇÇ,
  apply is_limit.of_point_iso (limit.is_limit (K ‚ãô F)),
  dsimp,
  have : limit.lift (K ‚ãô F) (F.map_cone c) = i‚ÇÉ.hom,
  { apply limit.hom_ext,
    intro j,
    rw limit.lift_œÄ,
    dsimp,
    change _ = (_ ‚â´ _) ‚â´ _,
    rw category.assoc,
    simp only [iso.refl_hom, category.comp_id, nat_iso.of_components.hom_app,
      has_limit.iso_of_nat_iso_hom_œÄ],
    apply t‚ÇÅ.hom_ext,
    intro k,
    change _ = _ ‚â´ _ ‚â´ c‚ÇÇ.œÄ.app j,
    rw Œπ_colimit_to_limit_œÄ,
    ext q,
    dsimp,
    simp, },
  rw this,
  apply is_iso.of_iso,
end

def is_set_flat (F : C ‚•§ Type v‚ÇÇ) := is_filtered F.elements·µí·µñ

variable (C)

@[derive category]
def flat := {F : C ‚•§ Type v‚ÇÇ // is_set_flat F}

def flat_to_functors : flat C ‚•§ (C ‚•§ Type v‚ÇÇ) := full_subcategory_inclusion _

-- example {C : Type v‚ÇÇ} [small_category C] : has_limits (C ‚•§ Type v‚ÇÇ) := infer_instance

def six_three_six {C : Type v‚ÇÇ} [small_category C] {D : Type v‚ÇÇ} [small_category D] [is_filtered D]
  (H : D ‚•§ C ‚•§ Type v‚ÇÇ)
  {c : cocone H} (t : is_colimit c)
  (hD : ‚àÄ d, is_set_flat (H.obj d)) : is_set_flat c.X :=
{ nonempty :=
  begin
    haveI : nonempty D := is_filtered.nonempty,
    inhabit D,
    obtain ‚ü®t‚ü© := (hD (default D)).nonempty,
    refine ‚ü®op ‚ü®(unop t).1, (c.Œπ.app (default D)).app _ (unop t).2‚ü©‚ü©,
  end,
  cocone_objs :=
  begin
    intros Aa Bb,
    op_induction Aa,
    op_induction Bb,
    cases Aa with A a,
    cases Bb with B b,
    let t' : is_colimit (((evaluation C _).obj A).map_cocone c) := is_colimit_of_preserves _ t,
    rcases types.jointly_surjective _ t' a with ‚ü®d, a' : (H.obj _).obj _, ha' : (c.Œπ.app d).app A a' = a‚ü©,
    let t'' : is_colimit (((evaluation C _).obj B).map_cocone c) := is_colimit_of_preserves _ t,
    rcases types.jointly_surjective _ t'' b with ‚ü®d', (b' : (H.obj _).obj _), hb' : (c.Œπ.app d').app B b' = b‚ü©,
    rcases is_filtered_or_empty.cocone_objs d d' with ‚ü®d'', f, g, ‚ü®‚ü©‚ü©,
    let a'' := (H.map f).app A a',
    have ha'' : (c.Œπ.app d'').app A a'' = a,
    { rw ‚Üêc.w f at ha',
      apply ha' },
    let b'' := (H.map g).app B b',
    have hb'' : (c.Œπ.app d'').app B b'' = b,
    { rw ‚Üêc.w g at hb',
      apply hb' },
    clear_value a'' b'',
    clear ha' hb' a' b' f g d d' t' t'',
    subst ha'',
    subst hb'',
    rename d'' d,
    rename a'' a',
    rename b'' b',
    have cof := (hD d).cocone_objs,
    rcases cof (op ‚ü®_, a'‚ü©) (op ‚ü®_, b'‚ü©) with ‚ü®Cc, u, v, ‚ü®‚ü©‚ü©,

    -- Manually do the op_induction/cases on Cc
    let C' := Cc.unop.1,
    let c' : (H.obj _).obj C' := Cc.unop.2,
    have : Cc = op ‚ü®C', c'‚ü©,
    { simp },
    clear_value C' c',
    subst this,

    have ha' : (H.obj _).map u.unop.1 c' = a' := u.unop.2,
    have hb' : (H.obj _).map v.unop.1 c' = b' := v.unop.2,
    have : c.X.obj C' := (c.Œπ.app d).app C' c',
    refine ‚ü®op ‚ü®_, (c.Œπ.app d).app C' c'‚ü©,
            has_hom.hom.op ‚ü®u.unop.1, _‚ü©,
            has_hom.hom.op ‚ü®v.unop.1, _‚ü©, ‚ü®‚ü©‚ü©,
    { change ((c.Œπ.app d).app C' ‚â´ c.X.map u.unop.1) c' = (c.Œπ.app d).app A a',
      have : _ = (c.Œπ.app d).app C' ‚â´ c.X.map u.unop.val := (c.Œπ.app d).naturality u.unop.1,
      rw ‚Üê this,
      change (c.Œπ.app d).app A ((H.obj d).map u.unop.1 c') = (c.Œπ.app d).app A a',
      apply congr_arg _ ha' },
    { change ((c.Œπ.app d).app C' ‚â´ c.X.map v.unop.1) c' = (c.Œπ.app d).app B b',
      have : _ = (c.Œπ.app d).app C' ‚â´ c.X.map v.unop.val := (c.Œπ.app d).naturality v.unop.1,
      rw ‚Üê this,
      change (c.Œπ.app d).app B ((H.obj d).map v.unop.1 c') = (c.Œπ.app d).app B b',
      apply congr_arg _ hb' },
  end,
  cocone_maps :=
  begin
    intros Bb Aa u' v',
    let A := Aa.unop.1,
    let a : c.X.obj A := Aa.unop.2,
    let B := Bb.unop.1,
    let b : c.X.obj B := Bb.unop.2,
    let u : A ‚ü∂ B := u'.unop.1,
    let v : A ‚ü∂ B := v'.unop.1,
    have hu : c.X.map u a = b := u'.unop.2,
    have hv : c.X.map v a = b := v'.unop.2,

    let t' : is_colimit (((evaluation C _).obj A).map_cocone c) := is_colimit_of_preserves _ t,
    rcases types.jointly_surjective _ t' a with ‚ü®d, a' : (H.obj _).obj _, ha' : (c.Œπ.app d).app A a' = a‚ü©,
    let t'' : is_colimit (((evaluation C _).obj B).map_cocone c) := is_colimit_of_preserves _ t,
    rcases types.jointly_surjective _ t'' b with ‚ü®d', (b' : (H.obj _).obj _), hb' : (c.Œπ.app d').app B b' = b‚ü©,
    rcases is_filtered_or_empty.cocone_objs d d' with ‚ü®d'', f, g, ‚ü®‚ü©‚ü©,
    let a'' := (H.map f).app A a',
    have ha'' : (c.Œπ.app d'').app A a'' = a,
    { rw ‚Üêc.w f at ha',
      apply ha' },
    let b'' := (H.map g).app B b',
    have hb'' : (c.Œπ.app d'').app B b'' = b,
    { rw ‚Üêc.w g at hb',
      apply hb' },
    clear_value a'' b'',
    clear' a' b' ha' hb' t' f g d d',
    rename [d'' d, a'' a', b'' b', ha'' ha', hb'' hb'],
    have q : ((H.obj d).map u ‚â´ (c.Œπ.app d).app B) a' = ((H.obj d).map v ‚â´ (c.Œπ.app d).app B) a',
    { rw [(c.Œπ.app d).naturality, (c.Œπ.app d).naturality, types_comp_apply, types_comp_apply, ha'],
      change c.X.map u a = c.X.map v a,
      rw [hu, hv] },
    rw [types_comp_apply, types_comp_apply] at q,
    -- have : (c.Œπ.app d).app _ = _,
    have : (c.Œπ.app d).app B ((H.obj d).map u a') = (c.Œπ.app d).app B ((H.obj d).map v a') ‚Üî _ :=
      types.filtered_colimit.is_colimit_eq_iff' _ t'',
    dsimp at this,
    rw this at q,
    rcases q with ‚ü®d', dh, q‚ü©,
    let b'' := (H.map dh).app B ((H.obj d).map u a'),
    have : (H.obj d').map u ((H.map dh).app _ a') = b'',
    { rw ‚Üêfunctor_to_types.naturality },
    have : (H.obj d').map v ((H.map dh).app _ a') = b'',
    { rw ‚Üêfunctor_to_types.naturality, rw ‚Üêq },
    let A' : (H.obj d').elements·µí·µñ := op ‚ü®A, _‚ü©,
    let B' : (H.obj d').elements·µí·µñ := op ‚ü®B, _‚ü©,

  end

}

end category_theory
