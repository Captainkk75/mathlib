/-
Copyright (c) 2021 Malo Jaffr√©. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Malo Jaffr√©
-/
import analysis.convex.slope
import analysis.normed_space.basic
import data.set.intervals.basic
import topology.metric_space.basic

section real

open metric real set
open_locale topological_space

variables {f : ‚Ñù ‚Üí ‚Ñù} {s: set ‚Ñù}

lemma convex_on.lipschitz_on_with (hf : convex_on ‚Ñù s f)
  {w x y z: ‚Ñù} (hw : w ‚àà s) (hz : z ‚àà s) (hwx: w < x) (hyz : y < z) :
  lipschitz_on_with
    (max (abs ((f x - f w) / (x - w))) (abs ((f z - f y) / (z - y)))).to_nnreal
    f
    (Icc x y) :=
begin
  rw lipschitz_on_with_iff_dist_le_mul,
  rintros b ‚ü®hxb, hby‚ü© a ‚ü®hxa, hay‚ü©,
  rcases eq_or_ne a b with rfl | hab,
  { simp only [le_refl, real.coe_to_nnreal', mul_zero, dist_self], },
  have : 0 < |b - a| := by rwa [abs_pos, sub_ne_zero, ne_comm],
  rw [dist_eq, dist_eq, coe_to_nnreal _ (le_max_of_le_left (abs_nonneg _)),
    ‚Üêdiv_le_iff this, ‚Üêabs_div],
  have hwzs : Icc w z ‚äÜ s := hf.1.ord_connected.out hw hz,
  have ha : a ‚àà s := hwzs ‚ü®hwx.le.trans hxa, hay.trans hyz.le‚ü©,
  have hb : b ‚àà s := hwzs ‚ü®hwx.le.trans hxb, hby.trans hyz.le‚ü©,
  cases hab.lt_or_lt with hab hba,
  {
    have h‚ÇÅ := hf.slope_mono hw hb hwx hxa hab,
    have h‚ÇÇ := hf.slope_mono ha hz hab hby hyz,
    exact abs_le_max_abs_abs h‚ÇÅ h‚ÇÇ,
  },
  {
    have h‚ÇÅ := hf.slope_mono hw ha hwx hxb hba,
    have h‚ÇÇ := hf.slope_mono hb hz hba hay hyz,
    rw [‚Üêneg_sub (f b), ‚Üêneg_sub b, neg_div_neg_eq] at h‚ÇÅ h‚ÇÇ,
    exact abs_le_max_abs_abs h‚ÇÅ h‚ÇÇ,
  },
end

lemma convex_on.uniform_continuous_on_Icc (hf : convex_on ‚Ñù s f)
  {w x y z: ‚Ñù} (hw : w ‚àà s) (hz : z ‚àà s) (hwx: w < x) (hyz : y < z) :
  uniform_continuous_on f (Icc x y) :=
(hf.lipschitz_on_with hw hz hwx hyz).uniform_continuous_on

lemma convex_on.continuous_on_Icc (hf : convex_on ‚Ñù s f)
  {w x y z: ‚Ñù} (hw : w ‚àà s) (hz : z ‚àà s) (hwx: w < x) (hyz : y < z) :
  continuous_on f (Icc x y) :=
(hf.uniform_continuous_on_Icc hw hz hwx hyz).continuous_on

lemma convex_on.continuous_at (hf : convex_on ‚Ñù s f) {a: ‚Ñù} (hsa : s ‚àà ùìù a):
  continuous_at f a :=
begin
  obtain ‚ü®Œµ, Œµpos, hŒµ‚ü© : ‚àÉ Œµ (hŒµ : 0 < Œµ), closed_ball a Œµ ‚äÜ s :=
    nhds_basis_closed_ball.mem_iff.1 hsa,
  rw closed_ball_eq_Icc at hŒµ,
  have hwz : a - Œµ ‚â§ a + Œµ := by linarith,
  have hwx : a - Œµ < a - Œµ/2 := by linarith,
  have hyz : a + Œµ/2 < a + Œµ := by linarith,
  have hw : a - Œµ ‚àà s,
  { apply hŒµ, rw [set.left_mem_Icc], linarith, },
  have hz : a + Œµ ‚àà s,
  { apply hŒµ, rw [set.right_mem_Icc], linarith, },
  have hcont_on := hf.continuous_on_Icc hw hz hwx hyz,
  have : Icc (a - Œµ/2) (a + Œµ/2) ‚àà ùìù a,
  { apply Icc_mem_nhds; linarith, },
  exact hcont_on.continuous_at this,
end

lemma convex_on.continuous_on (hf : convex_on ‚Ñù s f) (hsa : is_open s):
  continuous_on f s :=
begin
  apply continuous_at.continuous_on,
  intros a ha,
  exact hf.continuous_at (hsa.mem_nhds ha),
end

end real
