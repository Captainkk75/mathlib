/-
Copyright (c) 2021 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Eric Wieser
-/

import ring_theory.ideal.basic
import ring_theory.ideal.operations
import linear_algebra.finsupp
import ring_theory.graded_algebra.basic

/-!

# Homogeneous ideal of a graded algebra

This file defines homogeneous ideals of `graded_algebra A` where `A : Œπ ‚Üí submodule R R`and
operations on them:
* `mul`, `inf`, `Inf` of homogeneous ideals are homogeneous;
* `‚ä§`, `‚ä•`, i.e. the trivial ring and `R` are homogeneous;
* `radical` of a homogeneous ideal is homogeneous.
-/

noncomputable theory

section is_homogeneous_ideal_defs

open set_like direct_sum set
open_locale big_operators

variables {Œπ R : Type*} [comm_ring R] [decidable_eq Œπ] [add_comm_monoid Œπ]
variables (A : Œπ ‚Üí submodule R R) [graded_algebra A]
variable (I : ideal R)

/--An `I : ideal R` is called homogeneous if for every `r ‚àà I`, every homogeneous component of `r`
  is in `I`.-/
def ideal.is_homogeneous : Prop :=
‚àÄ (i : Œπ) ‚¶Ér : R‚¶Ñ, r ‚àà I ‚Üí (graded_algebra.decompose A r i : R) ‚àà I

lemma ideal.is_homogeneous_iff_forall_subset :
  ideal.is_homogeneous A I ‚Üî ‚àÄ i, (I : set R) ‚äÜ graded_algebra.proj A i ‚Åª¬π' I :=
iff.rfl

lemma ideal.is_homogeneous_iff_subset_Inter :
  ideal.is_homogeneous A I ‚Üî (I : set R) ‚äÜ ‚ãÇ i, graded_algebra.proj A i ‚Åª¬π' ‚ÜëI :=
subset_Inter_iff.symm

lemma ideal.is_homogeneous.exists_iff_eq_span :
  (‚àÉ (S : set (homogeneous_submonoid A)), I = ideal.span (coe '' S)) ‚Üî
  I = ideal.span {x | x ‚àà I ‚àß is_homogeneous A x} :=
-- get rid of the messy subtypes and set coercions
suffices (‚àÉ s : set R, s ‚äÜ set_of (is_homogeneous A) ‚àß I = ideal.span s) ‚Üî
  I = ideal.span (I ‚à© set_of (is_homogeneous A)),
from (subtype.exists_set_subtype _).trans this,
begin
  split,
  { rintros ‚ü®s, hs, rfl‚ü©,
    apply le_antisymm,
    { exact ideal.span_mono (subset_inter (ideal.subset_span) hs) },
    { exact ideal.span_le.2 (inter_subset_left _ _) } },
  { intros hI,
    exact ‚ü®(I : set R) ‚à© set_of (is_homogeneous A), inter_subset_right _ _, hI‚ü©, }
end

lemma mul_homogeneous_element_mem_of_mem
  {I : ideal R} (r x : R) (hx‚ÇÅ : is_homogeneous A x) (hx‚ÇÇ : x ‚àà I) (j : Œπ) :
  graded_algebra.proj A j (r * x) ‚àà I :=
begin
  letI : Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0) := Œª _ _, classical.dec _,
  rw [‚Üêgraded_algebra.sum_support_decompose A r, finset.sum_mul, linear_map.map_sum],
  apply ideal.sum_mem,
  intros k hk,
  obtain ‚ü®i, hi‚ü© := hx‚ÇÅ,
  have mem‚ÇÅ : (graded_algebra.decompose A r k : R) * x ‚àà A (k + i) := graded_monoid.mul_mem
    (submodule.coe_mem _) hi,
  rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem A mem‚ÇÅ,
    coe_of_submodule_apply A, submodule.coe_mk],
  split_ifs,
  { exact I.mul_mem_left _ hx‚ÇÇ },
  { exact I.zero_mem },
end

lemma ideal.is_homogeneous.iff_eq :
  ideal.is_homogeneous A I ‚Üî I = ideal.span {x | x ‚àà I ‚àß is_homogeneous A x} :=
‚ü® Œª hI, begin
  letI : Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0) := Œª _ _, classical.dec _,
  ext, split; intro hx,
  { rw ‚Üêgraded_algebra.sum_support_decompose A x,
    refine ideal.sum_mem _ _,
    intros j hj,
    rw ideal.mem_span, intros J HJ,
    refine HJ ‚ü®hI j hx, j, submodule.coe_mem _‚ü©, },
  { rw [ideal.mem_span] at hx,
    apply hx,
    exact inter_subset_left _ _, },
  end,
  Œª hI, begin
    intros i r hr,
    rw ‚Üêgraded_algebra.proj_apply,
    rw [ideal.span, finsupp.span_eq_range_total] at hI,
    rw hI at hr,
    obtain ‚ü®s, rfl‚ü© := hr,
    simp_rw [finsupp.total_apply, finsupp.sum, linear_map.map_sum, smul_eq_mul],
    refine ideal.sum_mem I _,
    rintros ‚ü®j, ‚ü®hj‚ÇÅ, hj‚ÇÇ‚ü©‚ü© hj‚ÇÉ,
    exact mul_homogeneous_element_mem_of_mem _ _ _ hj‚ÇÇ hj‚ÇÅ _,
  end ‚ü©

lemma ideal.is_homogeneous.iff_exists :
  ideal.is_homogeneous A I ‚Üî ‚àÉ (S : set (homogeneous_submonoid A)), I = ideal.span (coe '' S) :=
by rw [ideal.is_homogeneous.exists_iff_eq_span, ideal.is_homogeneous.iff_eq]

end is_homogeneous_ideal_defs

section operations

open set_like direct_sum set
open_locale big_operators pointwise

variables {Œπ R : Type*} [comm_ring R] [decidable_eq Œπ] [add_comm_monoid Œπ]
variables (A : Œπ ‚Üí submodule R R) [graded_algebra A]
variable (I : ideal R)

/--For any `comm_ring R`, we collect the homogeneous ideals of `R` into a type.-/
abbreviation homogeneous_ideal : Type* := { I : ideal R // ideal.is_homogeneous A I }

lemma ideal.is_homogeneous.bot : ideal.is_homogeneous A ‚ä• := Œª i r hr,
begin
  simp only [ideal.mem_bot] at hr,
  rw [hr, alg_equiv.map_zero, zero_apply],
  apply ideal.zero_mem
end

instance homogeneous_ideal.inhabited : inhabited (homogeneous_ideal A) :=
{ default := ‚ü®‚ä•, ideal.is_homogeneous.bot _‚ü©}

instance homogeneous_ideal.has_top :
  has_top (homogeneous_ideal A) :=
‚ü®‚ü®‚ä§, Œª _ _ _, by simp only [submodule.mem_top]‚ü©‚ü©

@[simp] lemma homogeneous_ideal.eq_top_iff
  (I : homogeneous_ideal A) : I = ‚ä§ ‚Üî I.1 = ‚ä§ :=
‚ü® Œª h, by { rw h, refl },
  Œª h, begin
    have h' : I.val = (‚ä§ : homogeneous_ideal A).val,
    rw h, refl,
    apply subtype.val_injective h',
  end ‚ü©

instance homogeneous_ideal.order : partial_order (homogeneous_ideal A) :=
partial_order.lift _ subtype.coe_injective

instance homogeneous_ideal.has_mem : has_mem R (homogeneous_ideal A) :=
{ mem := Œª r I, r ‚àà I.1 }

variables {A}

lemma ideal.is_homogeneous.inf {I J : ideal R}
  (HI : ideal.is_homogeneous A I) (HJ : ideal.is_homogeneous A J) :
  ideal.is_homogeneous A (I ‚äì J) :=
Œª i r hr, ‚ü®HI _ hr.1, HJ _ hr.2‚ü©

lemma homogeneous_ideal.Inf {‚Ñê : set (ideal R)} (h : ‚àÄ I ‚àà ‚Ñê, ideal.is_homogeneous A I) :
  ideal.is_homogeneous A (Inf ‚Ñê) :=
begin
  intros i x Hx, simp only [ideal.mem_Inf] at Hx ‚ä¢,
  intros J HJ,
  exact h _ HJ _ (Hx HJ),
end

lemma ideal.is_homogeneous.mul {I J : ideal R}
  (HI : ideal.is_homogeneous A I) (HJ : ideal.is_homogeneous A J) :
  ideal.is_homogeneous A (I * J) :=
begin
  rw ideal.is_homogeneous.iff_exists at HI HJ ‚ä¢,
  obtain ‚ü®‚ü®s‚ÇÅ, rfl‚ü©, ‚ü®s‚ÇÇ, rfl‚ü©‚ü© := ‚ü®HI, HJ‚ü©,
  rw [ideal.span_mul_span'],
  refine ‚ü®s‚ÇÅ * s‚ÇÇ, _‚ü©,
  apply congr_arg,
  ext, split; intro hx,
  { rw set.mem_mul at hx,
    obtain ‚ü®y1, y2, h1, h2, h3‚ü© := hx,
    rw set.mem_image at h1, obtain ‚ü®z1, h1‚ü© := h1,
    have hy1 : y1 ‚àà set_like.homogeneous_submonoid A,
    rw ‚Üêh1.2, exact z1.2,
    rw set.mem_image at h2, obtain ‚ü®z2, h2‚ü© := h2,
    have hy2 : y2 ‚àà set_like.homogeneous_submonoid A,
    rw ‚Üêh2.2, exact z2.2,

    use y1 * y2, apply submonoid.mul_mem,
    exact hy1, exact hy2,
    refine ‚ü®_, h3‚ü©, rw set.mem_mul, use y1, assumption,
    use y2, assumption, tidy, },
  { rw set.mem_image at hx,
    obtain ‚ü®y, hy1, hy‚ü© := hx,
    rw set.mem_mul at hy1 ‚ä¢,
    obtain ‚ü®z1, z2, hz1, hz2, hz3‚ü© := hy1,
    use z1, use z2, split, rw set.mem_image, use z1, refine ‚ü®hz1, rfl‚ü©,
    split, rw set.mem_image, use z2, refine ‚ü®hz2, rfl‚ü©, tidy, }
end

lemma ideal.is_homogeneous.sup {I J : ideal R}
  (HI : ideal.is_homogeneous A I) (HJ : ideal.is_homogeneous A J) :
  ideal.is_homogeneous A (I ‚äî J) :=
begin
  rw ideal.is_homogeneous.iff_exists at HI HJ ‚ä¢,
  obtain ‚ü®‚ü®s‚ÇÅ, rfl‚ü©, ‚ü®s‚ÇÇ, rfl‚ü©‚ü© := ‚ü®HI, HJ‚ü©,
  refine ‚ü®s‚ÇÅ ‚à™ s‚ÇÇ, _‚ü©,
  rw [set.image_union],
  exact (submodule.span_union _ _).symm,
end

lemma ideal.is_homogeneous.Sup {‚Ñê : set (ideal R)} (H‚Ñê : ‚àÄ (I ‚àà ‚Ñê), ideal.is_homogeneous A I) :
  ideal.is_homogeneous A (Sup ‚Ñê) :=
begin
  simp_rw [ideal.is_homogeneous.iff_exists] at H‚Ñê,
  set ùìà : ‚Ñê ‚Üí set (homogeneous_submonoid A) := Œª I : ‚Ñê, Exists.some (H‚Ñê I _) with ùìà_eq,
  have hùìà : ‚àÄ I : ‚Ñê, I.1 = ideal.span (coe '' ùìà I) := Œª I : ‚Ñê, Exists.some_spec (H‚Ñê I _),
  rw ideal.is_homogeneous.iff_exists,
  use sUnion (set.range ùìà),
  rw [sUnion_range, image_Union, ideal.span, submodule.span_Union],
  ext r, split,
  { suffices : Sup ‚Ñê ‚â§ _, revert r, exact this,
    rw Sup_le_iff, intros I HI,
    have ineq1 : I ‚â§ ideal.span I := ideal.subset_span, refine le_trans ineq1 _,
    rw ideal.span_le, simp only [coe_subset_coe, ideal.submodule_span_eq], intros x hx,
    rw submodule.mem_supr, intros J HJ,
    apply HJ ‚ü®I, HI‚ü©, rw ‚Üêhùìà ‚ü®I, HI‚ü©, assumption },
  { suffices : _ ‚â§  Sup ‚Ñê, revert r, exact this,
    rw supr_le_iff, intros I, rw submodule.span_le, intros x hx,
    simp only [mem_image] at hx, obtain ‚ü®x', hx1, hx2‚ü© := hx,
    simp only [mem_coe, subtype.val_eq_coe], dsimp only at hx1,
    apply ideal.mem_Sup_of_mem, use I.2,
    simp only [subtype.val_eq_coe] at hùìà ‚ä¢, rw hùìà,
    refine ideal.subset_span _, rw [mem_image], use x', refine ‚ü®hx1, hx2‚ü©, },
  intros I, exact I.2,
end

variables (A)

instance : has_inf (homogeneous_ideal A) :=
{ inf := Œª I J, ‚ü®I ‚äì J, I.prop.inf J.prop‚ü© }

instance : has_Inf (homogeneous_ideal A) :=
{ Inf := Œª ‚Ñê, ‚ü®Inf (coe '' ‚Ñê), homogeneous_ideal.Inf $ Œª _ ‚ü®I, _, hI‚ü©, hI ‚ñ∏ I.prop‚ü© }

instance : has_sup (homogeneous_ideal A) :=
{ sup := Œª I J, ‚ü®I ‚äî J, I.prop.sup J.prop‚ü© }

instance : has_Sup (homogeneous_ideal A) :=
{ Sup := Œª ‚Ñê, ‚ü®Sup (coe '' ‚Ñê), ideal.is_homogeneous.Sup $ Œª _ ‚ü®I, _, hI‚ü©, hI ‚ñ∏ I.prop‚ü© }

instance : has_mul (homogeneous_ideal A) :=
{ mul := Œª I J, ‚ü®I * J, I.prop.mul J.prop‚ü© }

instance : has_add (homogeneous_ideal A) := ‚ü®(‚äî)‚ü©

end operations

section homogenisation

open set_like direct_sum set

variables {Œπ R : Type*} [comm_ring R]
variables (A : Œπ ‚Üí submodule R R)
variable (I : ideal R)

/--For any `I : ideal R`, not necessarily homogeneous, there is a homogeneous ideal asscoiated with
`I` spaned by all homogeneous elements in `I`. This construction will be used when proving radical
of homogeneous ideal is homogeneous-/
def ideal.homogenisation : ideal R := ideal.span (set_of (is_homogeneous A) ‚à© I)

lemma ideal.homgenisation_le_ideal :
  ideal.homogenisation A I ‚â§ I :=
begin
  rw ideal.homogenisation,
  conv_rhs { rw ‚Üêideal.span_eq I },
  apply ideal.span_mono, exact (set_of (is_homogeneous A)).inter_subset_right ‚ÜëI,
end

variables [add_comm_monoid Œπ] [decidable_eq Œπ]
variables [graded_algebra A]

lemma is_homogeneous_ideal.homogeneous_ideal_of_ideal :
  ideal.is_homogeneous A (ideal.homogenisation A I) :=
begin
  rw ideal.is_homogeneous.iff_exists,
  use ({x | ‚Üëx ‚àà I}),
  rw ideal.homogenisation, congr, ext, split; intro hx;
  simp only [mem_inter_eq, mem_set_of_eq, set_like.mem_coe] at hx ‚ä¢,
  use x, exact hx.1, refine ‚ü®hx.2, rfl‚ü©,
  obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := hx, simp only [mem_set_of_eq] at hy‚ÇÅ, split, rw ‚Üêhy‚ÇÇ,
  rcases y with ‚ü®y, ‚ü®i, hy‚ÇÉ‚ü©‚ü©, use i, refine hy‚ÇÉ,
  rw ‚Üêhy‚ÇÇ, refine hy‚ÇÅ,
end

end homogenisation
