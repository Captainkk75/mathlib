import category_theory.limits.shapes.strong_epi
import category_theory.limits.shapes.equalizers
import category_theory.subobject.lattice
import category_theory.subobject.specific_subobjects

universes v u

open category_theory.limits

namespace category_theory
variables {C : Type u} [category.{v} C]

/-- We say that a morphism `f` is a cover if it does not factor through any proper subobject of
    its codomain. -/
class cover {X Y : C} (f : X ‚ü∂ Y) : Prop :=
(eq_top_of_factors : ‚àÄ P : subobject Y, P.factors f ‚Üí P = ‚ä§)

lemma eq_top_of_factors {X Y : C} (f : X ‚ü∂ Y) [cover f] (P : subobject Y) (hP : P.factors f) :
  P = ‚ä§ :=
cover.eq_top_of_factors P hP

lemma equalizer_ext {X Y : C} (f g : X ‚ü∂ Y) [has_equalizers C] [is_iso (equalizer.Œπ f g)] : f = g :=
calc f = inv (equalizer.Œπ f g) ‚â´ equalizer.Œπ f g ‚â´ f : eq.symm $ is_iso.inv_hom_id_assoc _ _
   ... = inv (equalizer.Œπ f g) ‚â´ equalizer.Œπ f g ‚â´ g : equalizer.condition f g ‚ñ∏ rfl
   ... = g                                            : is_iso.inv_hom_id_assoc _ _

lemma is_iso_of_is_iso_left {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [is_iso f] (h : is_iso g) :
  is_iso (f ‚â´ g) :=
‚ü®‚ü®inv g ‚â´ inv f, by simp‚ü©‚ü©

lemma is_iso_of_is_iso_right {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [is_iso g] (h : is_iso f) :
  is_iso (f ‚â´ g) :=
‚ü®‚ü®inv g ‚â´ inv f, by simp‚ü©‚ü©

lemma is_iso_comp {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [is_iso f] [is_iso g] : is_iso (f ‚â´ g) :=
‚ü®‚ü®inv g ‚â´ inv f, by simp‚ü©‚ü©

instance {X : C} : is_iso (‚ä§ : subobject X).arrow :=
begin
  rw [subobject.top_eq_id, ‚Üêsubobject.underlying_iso_hom_comp_eq_mk],
  apply_instance,
end

lemma is_iso_iff_mk_eq_top {X Y : C} (f : X ‚ü∂ Y) [mono f] : is_iso f ‚Üî subobject.mk f = ‚ä§ :=
‚ü®Œª _, by exactI subobject.mk_eq_mk_of_comm _ _ (as_iso f) (category.comp_id _),
 Œª h, subobject.underlying_iso_arrow f ‚ñ∏ is_iso_of_is_iso_left _ _ (h.symm ‚ñ∏ infer_instance)‚ü©

lemma equalizer_subobject_ext {X Y : C} (f g : X ‚ü∂ Y) [has_equalizers C]
  (h : equalizer_subobject f g = ‚ä§) : f = g :=
have _, from (is_iso_iff_mk_eq_top _).2 h, by exactI equalizer_ext f g

lemma eq_top_of_is_iso_arrow {X : C} (P : subobject X) [is_iso P.arrow] : P = ‚ä§ :=
begin
  rw [‚Üêsubobject.mk_arrow P, ‚Üêis_iso_iff_mk_eq_top],
  apply_instance
end

lemma eq_top_of_is_iso_arrow' {X : C} (P : subobject X) (h : is_iso P.arrow) : P = ‚ä§ :=
eq_top_of_is_iso_arrow _

lemma is_iso_of_factors_mk {X Y Z : C} (f : X ‚ü∂ Y) [cover f] (g : Z ‚ü∂ Y) [mono g]
  (h : (subobject.mk g).factors f) : is_iso g :=
by rw [is_iso_iff_mk_eq_top, eq_top_of_factors f _ h]

lemma is_iso_arrow_of_factors_mk {X Y : C} (f : X ‚ü∂ Y) [cover f] (P : subobject Y)
  (h : P.factors f) : is_iso P.arrow :=
is_iso_of_factors_mk f P.arrow $ (subobject.mk_arrow P).symm ‚ñ∏ h

lemma cover_of_is_image {X Y : C} (f : X ‚ü∂ Y) (F : mono_factorisation f) (h : is_image F) :
  cover F.e :=
‚ü®Œª P hP, eq_top_of_is_iso_arrow' _
 begin
  refine ‚ü®‚ü®h.lift ‚ü®P, P.arrow ‚â´ F.m, P.factor_thru F.e hP‚ü©, ‚ü®_, _‚ü©‚ü©‚ü©;
  simp [‚Üêcancel_mono P.arrow, ‚Üêcancel_mono F.m]
 end‚ü©

instance cover_factor_thru_image {X Y : C} (f : X ‚ü∂ Y) [has_image f] :
  cover (factor_thru_image f) :=
cover_of_is_image _ _ (image.is_image f)

@[simps]
def triv {X Y : C} (f : X ‚ü∂ Y) : mono_factorisation f :=
{ I := _,
  m := ùüô Y,
  e := f,
  fac' := category.comp_id _ }

lemma is_iso_of_factors {X Y : C} (f : X ‚ü∂ Y) [cover f] {Z : C} (g : Z ‚ü∂ Y) [mono g] (h : X ‚ü∂ Z)
  (hf : h ‚â´ g = f) : is_iso g :=
(is_iso_iff_mk_eq_top _).2 (eq_top_of_factors f _ ‚ü®h, hf‚ü©)

/-- Any cover is an image and any cover has an image. -/
@[simps] noncomputable def is_image_triv {X Y : C} (f : X ‚ü∂ Y) [cover f] : is_image (triv f) :=
‚ü®Œª F, have is_iso F.m, from is_iso_of_factors f F.m F.e F.fac', by exactI inv F.m, by tidy‚ü©

instance has_image_of_cover {X Y : C} (f : X ‚ü∂ Y) [cover f] : has_image f :=
‚ü®‚ü®‚ü®_, is_image_triv f‚ü©‚ü©‚ü©

instance is_iso_image_Œπ_of_cover {X Y : C} (f : X ‚ü∂ Y) [cover f] : is_iso (image.Œπ f) :=
begin
  convert is_iso_comp (is_image.iso_ext (image.is_image f) (is_image_triv f)).hom (ùüô _),
  exact (is_image.iso_ext_hom_m _ _).symm
end

@[simp] lemma mk_eq_top_of_is_iso {X Y : C} (f : X ‚ü∂ Y) [is_iso f] : subobject.mk f = ‚ä§ :=
(is_iso_iff_mk_eq_top f).1 infer_instance

instance epi_of_cover {X Y : C} (f : X ‚ü∂ Y) [cover f] [has_equalizers C] : epi f :=
‚ü®Œª Z g h hf,
  equalizer_subobject_ext _ _ $ eq_top_of_factors f _ $ equalizer_subobject_factors _ _ _ hf‚ü©

instance strong_epi_of_cover {X Y : C} (f : X ‚ü∂ Y) [cover f] [has_equalizers C] [has_pullbacks C] :
  strong_epi f :=
{ epi := by apply_instance,
  has_lift := Œª A B h k g g_mono comm,
  ‚ü®‚ü®have is_iso (pullback.snd : pullback g k ‚ü∂ Y),
      by exactI is_iso_of_factors f _ (pullback.lift _ _ comm) (pullback.lift_snd _ _ _),
    by exactI { lift := inv (pullback.snd : pullback g k ‚ü∂ Y) ‚â´ pullback.fst,
      fac_left' := by simp [‚Üêcancel_mono g, pullback.condition, comm],
      fac_right' := by simp [pullback.condition] }‚ü©‚ü© }

lemma cover_of_strong_epi {X Y : C} (f : X ‚ü∂ Y) [strong_epi f] : cover f :=
‚ü®Œª P hP, suffices is_iso P.arrow, by exactI eq_top_of_is_iso_arrow _,
  suffices split_epi P.arrow, by exactI is_iso_of_mono_of_split_epi _,
  { section_ := arrow.lift $ arrow.hom_mk' $ show P.factor_thru f hP ‚â´ P.arrow = f ‚â´ ùüô _, by simp }‚ü©

end category_theory
