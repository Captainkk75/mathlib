
import data.zmod.basic
import number_theory.lucas_primality

def binpow {M} [has_one M] [has_mul M] (m : M) : ℕ → M :=
nat.binary_rec 1 (λ b _ ih, let ih2 := ih * ih in cond b (m * ih2) ih2)

def fast_two_multiplicity : ℕ → ℕ :=
nat.binary_rec 0 (λ b _ ih, cond b 0 (ih+1))

def fast_odd_part (n : ℕ) := n / (2 ^ fast_two_multiplicity n)

def fast_strong_probable_prime (n : nat) (a : zmod n) : bool :=
binpow a (fast_odd_part (n-1)) = 1
∨ (∃ r : ℕ, r < fast_two_multiplicity (n-1) ∧ binpow a (2^r * fast_odd_part(n-1)) = -1)

def full_miller_rabin (n : nat) (alist : list (zmod n)) : bool :=
alist.all (fast_strong_probable_prime n)

def fermat_strong_probable_prime (n : nat) (a : zmod n) : bool :=
binpow a (n-1) = 1

def fast_lucas_primality_test (n : nat) (a : zmod n) : bool :=
fermat_strong_probable_prime n a
∧ ∀ p ∈ (n-1).factors, binpow a ((n-1)/p) ≠ 1


--TODO(Bolton): Find a way of making modular exponentiation faster
set_option profiler true

#eval full_miller_rabin 100123456789 [3, 4, 5, 6]

-- #eval fermat_strong_probable_prime 100123456789 3

-- #eval fast_lucas_primality_test 100123456789 7

-- #eval to_bool (nat.prime 100123456789)

-------#eval to_bool (fast_strong_probable_prime
--#eval to_bool (fast_strong_probable_prime 1000003 2)
--#eval binpow (1024 : zmod 8469627293895910728853889660978710817164812082142989733076166118124179362694365152458133706500165359) (fast_odd_part 8469627293895910728853889660978710817164812082142989733076166118124179362694365152458133706500165358)
--#eval to_bool (nat.prime 1000003)
--#eval to_bool (fast_strong_probable_prime 99999997 4)
--#eval (multiplicity 2 99999997)
--#eval to_bool (nat.prime 100123456789)
--#eval to_bool (fermat_strong_probable_prime 7320764159844077165009308901107483410368915454742416400175302951531353754769661186133664993273725722294839946239627799291540737402994105118773826496621684513647339896664323676244618229782599462758634004929519159268721205866783988405603965420142754460565135705623401107697493820384066033584945001327360108220659950830457005933691816021367579930822800030632473304431352927220792268527344983173031769898882197420979315482642629392296420332414299725499379820198580431721077602685960495637729487913624165756307586241501493452459407333163406518806076318226264320497224968184100691384561349696393983603114038479470167132384600385631126256100593512580854607138527077512332106874625566796801166419039845624315620777963185087024655200774884355466264428703344550594822563546988047715951394601042292641673678050014096879349008394480756938414445965259609634260277840055374060885679919753654375993457553570430913343869904478222544113850326745011088058779733755041610460552699632317523586702688779209063397341738741 23)

--example : nat.prime 6143411621 :=
--begin
  --norm_num,
--end
