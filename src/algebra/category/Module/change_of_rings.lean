/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import algebra.category.Module.basic
import algebra.category.Algebra.basic
import ring_theory.tensor_product

/-!
# Change Of Rings

## Main definitions

* `category_theory.Module.restrict_scalars`: given rings `R, S` and a ring homomorphism `R ‚ü∂ S`,
  then `restrict_scalars : Module S ‚•§ Module R` is defined by `M ‚Ü¶ M` where `M : S-module` is seen
  as `R-module` by `r ‚Ä¢ m := f r ‚Ä¢ m` and `S`-linear map `l : M ‚ü∂ M'` is `R`-linear as well.

* `category_theory.Module.extend_scalars`: given **commutative** rings `R, S` and ring homomorphism
  `f : R ‚ü∂ S`, then `extend_scalars : Module R ‚•§ Module S` is defined by `M ‚Ü¶ S ‚®Ç M` where the
  module structure is defined by `s ‚Ä¢ (s' ‚äó m) := (s * s') ‚äó m` and `R`-linear map `l : M ‚ü∂ M'`
  is sent to `S`-linear map `s ‚äó m ‚Ü¶ s ‚äó l m : S ‚®Ç M ‚ü∂ S ‚®Ç M'`.

## List of notations
Let `R, S` be rings and `f : R ‚Üí+* S`
* if `M` is an `R`-module, then notation `S ‚®Ç[R, f] M` means the tensor product `S ‚®Ç M` where `S`
  is considered as an `R`-module via restriction of scalars.
* if `M` is an `R`-module, `s : S` and `m : M`, then `s ‚äó‚Çú[R, f]` is the pure tensor
  `s ‚äó m : S ‚äó[R, f] M`
* if `M` is an `R`-module, `s : S` and  `x : S ‚äó[R, f] M` then notation `s e‚Ä¢[f] x` denotes the
  `S`-scalar multiplication where if `x` is pure tensor `s' ‚äó m` then `s e‚Ä¢[f] (s' ‚äó m)` is defined
  as `(s * s') ‚äó m`
-/


namespace category_theory.Module

universes v u‚ÇÅ u‚ÇÇ

namespace restrict_scalars

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S)
variable (M : Module.{v} S)

/-- Any `S`-module M is also an `R`-module via a ring homomorphism `f : R ‚ü∂ S` by defining
    `r ‚Ä¢ m := f r ‚Ä¢ m` (`module.comp_hom`). This is called restriction of scalars. -/
def obj' : Module R :=
{ carrier := M,
  is_module := module.comp_hom M f }

/--
Given an `S`-linear map `g : M ‚Üí M'` between `S`-modules, `g` is also `R`-linear between `M` and
`M'` by means of restriction of scalars.
-/
def map' {M M' : Module.{v} S} (g : M ‚ü∂ M') :
  obj' f M ‚ü∂ obj' f M' :=
{ map_smul' := Œª r, g.map_smul (f r), ..g }

/--
If `R, S` are commutative rings and `f : R ‚Üí+* S`, then any `S`-algebra is also an `R`-algebra
-/
def is_algebra {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S)
  (A : Type v) [comm_semiring A] [algebra S A] : algebra R A :=
{ smul := (module.comp_hom A f).to_has_smul.smul,
  to_fun := algebra_map _ _ ‚àò f,
  map_one' := by simp only [function.comp_app, map_one],
  map_mul' := Œª _ _, by simp only [function.comp_app, map_mul],
  map_zero' := by simp only [function.comp_app, map_zero],
  map_add' := Œª _ _, by simp only [function.comp_app, map_add],
  commutes' := Œª _ _, by ring,
  smul_def' := Œª r a, algebra.smul_def _ _ }

end restrict_scalars

/--
The restriction of scalars operation is functorial. For any `f : R ‚Üí+* S` a ring homomorphism,
* an `S`-module `M` can be considered as `R`-module by `r ‚Ä¢ m = f r ‚Ä¢ m`
* an `S`-linear map is also `R`-linear
-/
def restrict_scalars {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S) :
  Module.{v} S ‚•§ Module.{v} R :=
{ obj := restrict_scalars.obj' f,
  map := Œª _ _, restrict_scalars.map' f,
  map_id' := Œª _, linear_map.ext $ Œª m, rfl,
  map_comp' := Œª _ _ _ g h, linear_map.ext $ Œª m, rfl }

namespace restrict_scalars

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S)

@[simp] lemma map_apply  {M M' : Module.{v} S} (g : M ‚ü∂ M') (x) :
  (restrict_scalars f).map g x = g x := rfl

@[simp] lemma smul_def {M : Module.{v} S} (r : R) (m : (restrict_scalars f).obj M) :
  r ‚Ä¢ m = (f r ‚Ä¢ m : M) := rfl

@[simp] lemma smul_def' {M : Module.{v} S} (r : R) (m : M) :
  (r ‚Ä¢ m : (restrict_scalars f).obj M) = (f r ‚Ä¢ m : M) := rfl


end restrict_scalars

namespace extend_scalars

open_locale tensor_product
open tensor_product

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S)

section unbundled

variables (M : Type v) [add_comm_monoid M] [module R M]

localized "notation S `‚®Ç[` R `,` f `]` M := @tensor_product R _ S M _ _
  (module.comp_hom S f) _" in change_of_rings
localized "notation s `‚äó‚Çú[` R `,` f `]` m := @tensor_product.tmul R _ _ _ _ _
  (module.comp_hom _ f) _ s m" in change_of_rings

/--
Since `S` has an `R`-module structure, `S ‚äó[R] M` can be given an `S`-module structure.
The scalar multiplication is defined by `s ‚Ä¢ (s' ‚äó m) := (s * s') ‚äó m`
-/
instance is_module : module S (S ‚®Ç[R, f] M) :=
@tensor_product.left_module R _ S _ S M _ _ (module.comp_hom S f) _ _
begin
  fconstructor,
  intros r s‚ÇÅ s‚ÇÇ,
  simp only [smul_eq_mul, restrict_scalars.smul_def' f r (_ : (‚ü®S‚ü© : Module S))],
  ring,
end

localized "notation s ` e‚Ä¢[` f `]` :=
  @@has_smul.smul (category_theory.Module.extend_scalars.is_module f _).to_has_smul s" in
  change_of_rings

end unbundled

open_locale change_of_rings

variables (M : Module.{v} R)

lemma smul_tmul (s s' : S) (m : M) : s e‚Ä¢[f] (s' ‚äó‚Çú[R, f] m) = (s * s') ‚äó‚Çú[R, f] m :=
by rw [smul_tmul', smul_eq_mul]

lemma smul_tmul' (r : R) (s : S) (m : M) : r ‚Ä¢ (s ‚äó‚Çú[R, f] m) = s ‚äó‚Çú[R, f] (r ‚Ä¢ m) :=
by rw [(@tensor_product.smul_tmul R _ R _ S M _ _ (module.comp_hom S f) _
    (module.comp_hom S f).to_distrib_mul_action _ _ r s m).symm, smul_tmul']

/--
Extension of scalars turn an `R`-module into `S`-module by M ‚Ü¶ S ‚®Ç M
-/
def obj' : Module S := ‚ü®S ‚®Ç[R, f] M‚ü©

/--
Extension of scalars is a functor where an `R`-module `M` is sent to `S ‚äó M` and
`l : M1 ‚ü∂ M2` is sent to `s ‚äó m ‚Ü¶ s ‚äó l m`
-/
def map' {M1 M2 : Module.{v} R} (l : M1 ‚ü∂ M2) : (obj' f M1) ‚ü∂ (obj' f M2) :=
@linear_map.base_change R S M1 M2 _ _ (restrict_scalars.is_algebra f S) _ _ _ _ l

lemma map'_id {M : Module.{v} R} : map' f (ùüô M) = ùüô _ :=
linear_map.ext $ Œª (x : S ‚®Ç[R, f] M),
begin
  dsimp [map'],
  induction x using tensor_product.induction_on with _ _ m s ihx ihy,
  { simp only [map_zero], },
  { rw [linear_map.base_change_tmul, Module.id_apply], },
  { rw [map_add, ihx, ihy] },
end

lemma map'_comp {M‚ÇÅ M‚ÇÇ M‚ÇÉ : Module.{v} R} (l‚ÇÅ‚ÇÇ : M‚ÇÅ ‚ü∂ M‚ÇÇ) (l‚ÇÇ‚ÇÉ : M‚ÇÇ ‚ü∂ M‚ÇÉ) :
  map' f (l‚ÇÅ‚ÇÇ ‚â´ l‚ÇÇ‚ÇÉ) = map' f l‚ÇÅ‚ÇÇ ‚â´ map' f l‚ÇÇ‚ÇÉ :=
linear_map.ext $ Œª (x : S ‚®Ç[R, f] M‚ÇÅ),
begin
  dsimp [map'],
  induction x using tensor_product.induction_on with _ _ m s ihx ihy,
  { simp only [map_zero], },
  { rw [linear_map.base_change_tmul, category_theory.comp_apply, linear_map.base_change_tmul,
      linear_map.base_change_tmul], },
  { simp only [map_add, ihx, ihy], },
end

end extend_scalars

/--
Extension of scalars is a functor where an `R`-module `M` is sent to `S ‚äó M` and
`l : M1 ‚ü∂ M2` is sent to `s ‚äó m ‚Ü¶ s ‚äó l m`
-/
@[simps] def extend_scalars {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S) :
  Module R ‚•§ Module S :=
{ obj := Œª M, extend_scalars.obj' f M,
  map := Œª M1 M2 l, extend_scalars.map' f l,
  map_id' := Œª _, extend_scalars.map'_id f,
  map_comp' := Œª _ _ _, extend_scalars.map'_comp f }

end category_theory.Module
