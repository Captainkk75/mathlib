import category_theory.monoidal.braided
import category_theory.reflects_isomorphisms
import category_theory.monoidal.End

open category_theory
open category_theory.monoidal_category

universes v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ
noncomputable theory

namespace category_theory

variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] [monoidal_category C]

inductive monoidal_obj : Type u‚ÇÅ
| of : C ‚Üí monoidal_obj
| unit : monoidal_obj
| tensor : monoidal_obj ‚Üí monoidal_obj ‚Üí monoidal_obj

variables {C}

def monoidal_obj.to : monoidal_obj C ‚Üí C
| (monoidal_obj.of X) := X
| (monoidal_obj.unit) := ùüô_ C
| (monoidal_obj.tensor X Y) := X.to ‚äó Y.to

inductive monoidal_hom : monoidal_obj C ‚Üí monoidal_obj C ‚Üí Type u‚ÇÅ
| id {X} : monoidal_hom X X
| Œ±_hom {X Y Z : monoidal_obj C} : monoidal_hom ((X.tensor Y).tensor Z) (X.tensor (Y.tensor Z))
| Œ±_inv {X Y Z} : monoidal_hom (monoidal_obj.tensor X (monoidal_obj.tensor Y Z)) (monoidal_obj.tensor (monoidal_obj.tensor X Y) Z)
| l_hom {X} : monoidal_hom (monoidal_obj.tensor monoidal_obj.unit X) X
| l_inv {X} : monoidal_hom X (monoidal_obj.tensor monoidal_obj.unit X)
| œÅ_hom {X} : monoidal_hom (monoidal_obj.tensor X monoidal_obj.unit) X
| œÅ_inv {X} : monoidal_hom X (monoidal_obj.tensor X monoidal_obj.unit)
| comp {X Y Z} (f : monoidal_hom X Y) (g : monoidal_hom Y Z) : monoidal_hom X Z
| tensor {W X Y Z} (f : monoidal_hom W Y) (g : monoidal_hom X Z) : monoidal_hom (monoidal_obj.tensor W X) (monoidal_obj.tensor Y Z)

@[simp] def monoidal_to_hom : ‚àÄ {X Y : monoidal_obj C}, monoidal_hom X Y ‚Üí (X.to ‚ü∂ Y.to)
| _ _ monoidal_hom.id := ùüô _
| _ _ monoidal_hom.Œ±_hom := (Œ±_ _ _ _).hom
| _ _ monoidal_hom.Œ±_inv := (Œ±_ _ _ _).inv
| _ _ monoidal_hom.l_hom := (Œª_ _).hom
| _ _ monoidal_hom.l_inv := (Œª_ _).inv
| _ _ monoidal_hom.œÅ_hom := (œÅ_ _).hom
| _ _ monoidal_hom.œÅ_inv := (œÅ_ _).inv
| _ _ (monoidal_hom.comp f g) := monoidal_to_hom f ‚â´ monoidal_to_hom g
| _ _ (monoidal_hom.tensor f g) := monoidal_to_hom f ‚äó monoidal_to_hom g

instance monoidal_to_hom_is_iso : ‚àÄ {X Y : monoidal_obj C} (h : monoidal_hom X Y), is_iso (monoidal_to_hom h)
| _ _ monoidal_hom.id := is_iso.id _
| _ _ monoidal_hom.Œ±_hom := is_iso.of_iso (Œ±_ _ _ _)
| _ _ monoidal_hom.Œ±_inv := is_iso.of_iso_inv (Œ±_ _ _ _)
| _ _ monoidal_hom.l_hom := is_iso.of_iso (Œª_ _)
| _ _ monoidal_hom.l_inv := is_iso.of_iso_inv (Œª_ _)
| _ _ monoidal_hom.œÅ_hom := is_iso.of_iso (œÅ_ _)
| _ _ monoidal_hom.œÅ_inv := is_iso.of_iso_inv (œÅ_ _)
| _ _ (monoidal_hom.comp f g) :=
             @is_iso.comp_is_iso _ _ _ _ _ _ _ (monoidal_to_hom_is_iso f) (monoidal_to_hom_is_iso g)
| _ _ (monoidal_hom.tensor f g) :=
             @monoidal_category.tensor_is_iso _ _ _ _ _ _ _
                _ (monoidal_to_hom_is_iso _)
                _ (monoidal_to_hom_is_iso _)

section
/-local attribute [instance] endofunctor_monoidal_category
local attribute [reducible] endofunctor_monoidal_category
local attribute [ext] functor.ext

theorem endofunctor_coherence' {X Y : C ‚•§ C} (h : monoidal_hom X Y) :
  Œ£' (p : X = Y), monoidal_to_hom h = eq_to_hom p :=
begin
  induction h; dsimp [monoidal_to_hom]; tidy; simp *,
end.

theorem endofunctor_coherence {X Y : C ‚•§ C} (h h' : monoidal_hom X Y) :
  monoidal_to_hom h = monoidal_to_hom h' :=
begin
  obtain ‚ü®p, w‚ü© := endofunctor_coherence' h,
  obtain ‚ü®p', w'‚ü© := endofunctor_coherence' h',
  rw [w, w'],
end

theorem coherence_of_faithful {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] [monoidal_category D]
  (F : monoidal_functor C D)
  (coh : ‚àÄ {X Y : D} (h h' : monoidal_hom X Y), monoidal_to_hom h = monoidal_to_hom h') :
  ‚àÄ {X Y : C} (h h' : monoidal_hom X Y), monoidal_to_hom h = monoidal_to_hom h' :=
sorry-/

-- The monoidal coherence theorem!
theorem coherence {X Y : monoidal_obj C} (h h' : monoidal_hom X Y) : monoidal_to_hom h = monoidal_to_hom h' :=
sorry

end

/- We don't use `nonempty` here because `nonempty` is a class and we don't want a class here. -/
inductive monoidal_eq (X Y : monoidal_obj C) : Prop
| intro (h : monoidal_hom X Y) : monoidal_eq

infixr ` =·µê `:50 := monoidal_eq

lemma nonempty_of_monoidal_eq {X Y : monoidal_obj C} : X =·µê Y ‚Üí nonempty (monoidal_hom X Y) :=
Œª ‚ü®h‚ü©, ‚ü®h‚ü©

lemma monoidal_eq.trans {X Y Z : monoidal_obj C} : X =·µê Y ‚Üí Y =·µê Z ‚Üí X =·µê Z :=
Œª ‚ü®h‚ü© ‚ü®h'‚ü©, ‚ü®monoidal_hom.comp h h'‚ü©

lemma monoidal_eq.tensor {W X Y Z : monoidal_obj C} : W =·µê X ‚Üí Y =·µê Z ‚Üí W.tensor Y =·µê X.tensor Z :=
Œª ‚ü®h‚ü© ‚ü®h'‚ü©, ‚ü®monoidal_hom.tensor h h'‚ü©

def hom_of_monoidal_eq {X Y : monoidal_obj C} (h : X =·µê Y) : X.to ‚ü∂ Y.to :=
monoidal_to_hom (classical.choice (nonempty_of_monoidal_eq h))

lemma hom_of_monoidal_eq_eq {X Y : monoidal_obj C} {h : X =·µê Y} (h' : monoidal_hom X Y) :
  hom_of_monoidal_eq h = monoidal_to_hom h' :=
coherence _ _

/- The reason why we choose the convoluted setup above is that this is true definitionally. -/
example {X Y : monoidal_obj C} (h h' : X =·µê Y) : hom_of_monoidal_eq h = hom_of_monoidal_eq h' :=
rfl

def coherent_comp {W X Y Z : C} {X' Y' : monoidal_obj C} (h : X' =·µê Y')
  (hX : X = X'.to) (hY : Y = Y'.to) (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) : W ‚ü∂ Z :=
f ‚â´ eq_to_hom hX ‚â´ hom_of_monoidal_eq h ‚â´ eq_to_hom hY.symm ‚â´ g

meta def _root_.tactic.coherence_assumption : tactic unit :=
`[assumption <|> simp only [monoidal_obj.to]]

meta def _root_.tactic.interactive.coherence_assumption : tactic unit :=
tactic.coherence_assumption

notation f ` ‚â´·µê[`:80 h:80 `] `:0 g:80 := coherent_comp h (by coherence_assumption) (by coherence_assumption) f g
notation f ` ‚â´·µê[`:80 h:80 `, ` i:80 `, ` j:80 `]' `:0 g:80 := coherent_comp h i j f g -- I hope we never need this
--notation f ` ‚â´·µê[`:80 h:80 `]' `:0 g:80 := coherent_comp h _ _ f g
infixr ` ‚â´·µê `:80 := coherent_comp _ _ _

lemma coherent_comp_constructor {W X Y Z : C} {X' Y' : monoidal_obj C} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z)
  (h : monoidal_hom X' Y') (hX : X = X'.to) (hY : Y = Y'.to) :
  f ‚â´·µê[‚ü®h‚ü©] g = f ‚â´ eq_to_hom hX ‚â´ monoidal_to_hom h ‚â´ eq_to_hom hY.symm ‚â´ g :=
by rw [coherent_comp, hom_of_monoidal_eq_eq h]

lemma comp_eq_coherent_comp {X Y Z : C} (Y' : monoidal_obj C)
  (h : Y = Y'.to . tactic.coherence_assumption) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  f ‚â´ g = f ‚â´·µê[‚ü®monoidal_hom.id‚ü©] g :=
by simp [coherent_comp_constructor]

@[simp] lemma coherent_assoc {U V W X Y Z : C} {V' W' X' Y' : monoidal_obj C}
  (f : U ‚ü∂ V) {h : V' =·µê W'} (g : W ‚ü∂ X) {h' : X' =·µê Y'} (i : Y ‚ü∂ Z) (hV : V = V'.to)
  (hW : W = W'.to) (hX : X = X'.to) (hY : Y = Y'.to) :
  (f ‚â´·µê[h] g) ‚â´·µê[h'] i = f ‚â´·µê[h] (g ‚â´·µê[h'] i) :=
by { rcases h, rcases h', simp [coherent_comp_constructor] }

@[simp] lemma coherent_comp_id_coherent_comp {V W X Y Z : C} {W' X' Y' : monoidal_obj C} (f : V ‚ü∂ W)
  {h : W' =·µê X'} {h' : X' =·µê Y'} (g : Y ‚ü∂ Z)
  (hW : W = W'.to)
  (hX : X = X'.to)
  (hY : Y = Y'.to) :
  f ‚â´·µê[h, hW, hX]' ùüô X ‚â´·µê[h'] g = f ‚â´·µê[h.trans h', hW, hY]' g :=
begin
  cases h,
  cases h',
  rw coherent_comp_constructor _ _ (monoidal_hom.comp h h'),
  simp [coherent_comp, hom_of_monoidal_eq_eq h, hom_of_monoidal_eq_eq h']
end

@[simp] lemma coherent_comp_id_coherent_comp' {V W : C} (X : C) {Y Z : C} {W' X' Y' : monoidal_obj C} (f : V ‚ü∂ W)
  {h : W' =·µê X'} {h' : X' =·µê Y'} (g : Y ‚ü∂ Z)
  (hW : W = W'.to)
  (hX : X = X'.to)
  (hY : Y = Y'.to) :
  f ‚â´·µê[h] (ùüô X ‚â´·µê[h'] g) = f ‚â´·µê[h.trans h'] g :=
by rw [‚Üêcoherent_assoc, coherent_comp_id_coherent_comp]

/- Can these even be stated in the new setup? -/
/-lemma coherent_comp_monoidal_to_hom {W X Y Z : monoidal_obj C} (f : W.to ‚ü∂ X.to) {h : X =·µê Y}
  (t : monoidal_hom Y Z) : f ‚â´·µê[h] monoidal_to_hom t = f ‚â´·µê[h.trans ‚ü®t‚ü©] ùüô Z.to :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (monoidal_hom.comp h t),
  simp [coherent_comp_constructor],
end

lemma monoidal_to_hom_coherent_comp {W X Y Z : monoidal_obj C} (t : monoidal_hom W X) {h : X =·µê Y}
  (f : Y.to ‚ü∂ Z.to) : monoidal_to_hom t ‚â´·µê[h] f = ùüô W.to ‚â´·µê[monoidal_eq.trans ‚ü®t‚ü© h] f :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (monoidal_hom.comp t h),
  simp [coherent_comp_constructor]
end-/

@[simp] lemma coherent_comp_Œ±_hom {V W X Y Z : C} {W' X' Y' Z' : monoidal_obj C} (f : V ‚ü∂ W)
  {h : W' =·µê (X'.tensor Y').tensor Z'}
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hZ : Z = Z'.to . tactic.coherence_assumption)
  -- the next two are redundant, but the coherence_assumption tactic is too weak to know this
  -- actually, they aren't so redundant after all, they guide `rw`.
  (hXYZ : (X ‚äó Y) ‚äó Z = (X'.to ‚äó Y'.to) ‚äó Z'.to . tactic.coherence_assumption)
  (hXYZ' : X ‚äó Y ‚äó Z = X'.to ‚äó Y'.to ‚äó Z'.to . tactic.coherence_assumption) :
  f ‚â´·µê[h] (Œ±_ X Y Z).hom = f ‚â´·µê[h.trans ‚ü®monoidal_hom.Œ±_hom‚ü©] ùüô _ :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (h.comp monoidal_hom.Œ±_hom),
  cases hX, cases hY, cases hZ,
  simp [coherent_comp_constructor]
end

@[simp] lemma coherent_comp_Œ±_inv {V W X Y Z : C} {W' X' Y' Z' : monoidal_obj C} (f : V ‚ü∂ W)
  {h : W' =·µê X'.tensor (Y'.tensor Z') }
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hZ : Z = Z'.to . tactic.coherence_assumption)
  -- the next two are redundant, but the coherence_assumption tactic is too weak to know this
  -- actually, they aren't so redundant after all? The `assumption` in `tactic.coherence_assumption`
  -- instantiates metavariables, so it tells `‚â´·µê` what to do.
  (hXYZ : (X ‚äó Y) ‚äó Z = (X'.to ‚äó Y'.to) ‚äó Z'.to . tactic.coherence_assumption)
  (hXYZ' : X ‚äó Y ‚äó Z = X'.to ‚äó Y'.to ‚äó Z'.to . tactic.coherence_assumption) :
  f ‚â´·µê[h] (Œ±_ X Y Z).inv = f ‚â´·µê[h.trans ‚ü®monoidal_hom.Œ±_inv‚ü©] ùüô _ :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (h.comp monoidal_hom.Œ±_inv),
  cases hX, cases hY, cases hZ,
  simp [coherent_comp_constructor]
end

@[simp] lemma Œ±_hom_coherent_comp {V W X Y Z : C} {W' X' Y' Z' : monoidal_obj C} (f : W ‚ü∂ V)
  {h : X'.tensor (Y'.tensor Z') =·µê W' }
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hZ : Z = Z'.to . tactic.coherence_assumption)
  (hXYZ : (X ‚äó Y) ‚äó Z = (X'.to ‚äó Y'.to) ‚äó Z'.to . tactic.coherence_assumption)
  (hXYZ' : X ‚äó Y ‚äó Z = X'.to ‚äó Y'.to ‚äó Z'.to . tactic.coherence_assumption) :
  (Œ±_ X Y Z).hom ‚â´·µê[h] f = ùüô _ ‚â´·µê[monoidal_eq.trans ‚ü®monoidal_hom.Œ±_hom‚ü© h] f :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (monoidal_hom.Œ±_hom.comp h),
  cases hX, cases hY, cases hZ,
  simp [coherent_comp_constructor]
end

@[simp] lemma Œ±_inv_coherent_comp {V W X Y Z : C} {W' X' Y' Z' : monoidal_obj C} (f : W ‚ü∂ V)
  {h : (X'.tensor Y').tensor Z' =·µê W' }
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hZ : Z = Z'.to . tactic.coherence_assumption)
  (hXYZ : (X ‚äó Y) ‚äó Z = (X'.to ‚äó Y'.to) ‚äó Z'.to . tactic.coherence_assumption)
  (hXYZ' : X ‚äó Y ‚äó Z = X'.to ‚äó Y'.to ‚äó Z'.to . tactic.coherence_assumption) :
  (Œ±_ X Y Z).inv ‚â´·µê[h] f = ùüô _ ‚â´·µê[monoidal_eq.trans ‚ü®monoidal_hom.Œ±_inv‚ü© h] f :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (monoidal_hom.Œ±_inv.comp h),
  cases hX, cases hY, cases hZ,
  simp [coherent_comp_constructor],
end

@[simp] lemma coherent_comp_id_tensor_Œ±_hom {U V W X Y Z : C}
  {V' W' X' Y' Z' : monoidal_obj C}
  (hV : V = V'.to . tactic.coherence_assumption)
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hZ : Z = Z'.to . tactic.coherence_assumption)
  (hWXYZ : W ‚äó ((X ‚äó Y) ‚äó Z) = (W'.tensor ((X'.tensor Y').tensor Z')).to . tactic.coherence_assumption)
  (hWXYZ' : W ‚äó (X ‚äó Y ‚äó Z) = (W'.tensor (X'.tensor (Y'.tensor Z'))).to . tactic.coherence_assumption)
  (f : U ‚ü∂ V) {h : V' =·µê W'.tensor ((X'.tensor Y').tensor Z')} :
  f ‚â´·µê[h] ((ùüô W) ‚äó (Œ±_ X Y Z).hom) =
    f ‚â´·µê[h.trans (monoidal_eq.tensor ‚ü®monoidal_hom.id‚ü© ‚ü®monoidal_hom.Œ±_hom‚ü©)] ùüô _ :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (h.comp (monoidal_hom.id.tensor (monoidal_hom.Œ±_hom))),
  cases hV, cases hW, cases hX, cases hY, cases hZ,
  simp [coherent_comp_constructor]
end

@[simp] lemma coherent_comp_Œ±_hom_tensor_id {U V W X Y Z : C}
  {V' W' X' Y' Z' : monoidal_obj C}
  (hV : V = V'.to . tactic.coherence_assumption)
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hZ : Z = Z'.to . tactic.coherence_assumption)
  (hWXYZ : ((X ‚äó Y) ‚äó Z) ‚äó W = (((X'.tensor Y').tensor Z').tensor W').to . tactic.coherence_assumption)
  (hWXYZ' : (X ‚äó Y ‚äó Z) ‚äó W = ((X'.tensor (Y'.tensor Z')).tensor W').to . tactic.coherence_assumption)
  (f : U ‚ü∂ V)
  {h : V' =·µê ((X'.tensor Y').tensor Z').tensor W'} :
  f ‚â´·µê[h] ((Œ±_ _ _ _).hom ‚äó (ùüô W)) =
    f ‚â´·µê[h.trans (monoidal_eq.tensor ‚ü®monoidal_hom.Œ±_hom‚ü© ‚ü®monoidal_hom.id‚ü©)] ùüô _ :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (h.comp ((monoidal_hom.Œ±_hom).tensor monoidal_hom.id)),
  cases hV, cases hW, cases hX, cases hY, cases hZ,
  simp [coherent_comp_constructor]
end

@[simp] lemma id_tensor_Œ±_hom_coherent_comp {U V W X Y Z : C}
  {U' V' W' X' Y' : monoidal_obj C}
  (hU : U = U'.to . tactic.coherence_assumption)
  (hV : V = V'.to . tactic.coherence_assumption)
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hWXYZ : U ‚äó ((V ‚äó W) ‚äó X) = (U'.tensor ((V'.tensor W').tensor X')).to . tactic.coherence_assumption)
  (hWXYZ' : U ‚äó (V ‚äó W ‚äó X) = (U'.tensor (V'.tensor (W'.tensor X'))).to . tactic.coherence_assumption)
  {h : U'.tensor (V'.tensor (W'.tensor X')) =·µê Y'} (f : Y ‚ü∂ Z) :
  ((ùüô U) ‚äó (Œ±_ _ _ _).hom) ‚â´·µê[h] f =
    ùüô _ ‚â´·µê[(monoidal_eq.tensor ‚ü®monoidal_hom.id‚ü© ‚ü®monoidal_hom.Œ±_hom‚ü©).trans h] f :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (((monoidal_hom.id).tensor monoidal_hom.Œ±_hom).comp h),
  cases hU, cases hV, cases hW, cases hX, cases hY,
  simp [coherent_comp_constructor]
end

@[simp] lemma Œ±_hom_tensor_id_coherent_comp {U V W X Y Z : C}
  {U' V' W' X' Y' : monoidal_obj C}
  (hU : U = U'.to . tactic.coherence_assumption)
  (hV : V = V'.to . tactic.coherence_assumption)
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hWXYZ : ((V ‚äó W) ‚äó X) ‚äó U = (((V'.tensor W').tensor X').tensor U').to . tactic.coherence_assumption)
  (hWXYZ' : (V ‚äó W ‚äó X) ‚äó U = ((V'.tensor (W'.tensor X')).tensor U').to . tactic.coherence_assumption)
  {h : (V'.tensor (W'.tensor X')).tensor U' =·µê Y'} (f : Y ‚ü∂ Z) :
  ((Œ±_ _ _ _).hom ‚äó (ùüô U)) ‚â´·µê[h] f =
    ùüô _ ‚â´·µê[(monoidal_eq.tensor ‚ü®monoidal_hom.Œ±_hom‚ü© ‚ü®monoidal_hom.id‚ü©).trans h] f :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (((monoidal_hom.Œ±_hom).tensor monoidal_hom.id).comp h),
  cases hU, cases hV, cases hW, cases hX, cases hY,
  simp [coherent_comp_constructor]
end

@[simp] lemma coherent_comp_id_tensor_Œ±_inv {U V W X Y Z : C} (f : U ‚ü∂ V)
  {V' W' X' Y' Z' : monoidal_obj C}
  (hV : V = V'.to . tactic.coherence_assumption)
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hZ : Z = Z'.to . tactic.coherence_assumption)
  (hWXYZ : W ‚äó ((X ‚äó Y) ‚äó Z) = (W'.tensor ((X'.tensor Y').tensor Z')).to . tactic.coherence_assumption)
  (hWXYZ' : W ‚äó (X ‚äó Y ‚äó Z) = (W'.tensor (X'.tensor (Y'.tensor Z'))).to . tactic.coherence_assumption)
  {h : V' =·µê W'.tensor (X'.tensor  (Y'.tensor Z'))} :
  f ‚â´·µê[h] ((ùüô W) ‚äó (Œ±_ _ _ _).inv) =
    f ‚â´·µê[h.trans (monoidal_eq.tensor ‚ü®monoidal_hom.id‚ü© ‚ü®monoidal_hom.Œ±_inv‚ü©)] ùüô _ :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (h.comp ((monoidal_hom.id).tensor monoidal_hom.Œ±_inv)),
  cases hV, cases hW, cases hX, cases hY, cases hZ,
  simp [coherent_comp_constructor]
end

@[simp] lemma coherent_comp_Œ±_inv_tensor_id {U V W X Y Z : C}
  {V' W' X' Y' Z' : monoidal_obj C}
  (hV : V = V'.to . tactic.coherence_assumption)
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hZ : Z = Z'.to . tactic.coherence_assumption)
  (hWXYZ : ((X ‚äó Y) ‚äó Z) ‚äó W = (((X'.tensor Y').tensor Z').tensor W').to . tactic.coherence_assumption)
  (hWXYZ' : (X ‚äó Y ‚äó Z) ‚äó W = ((X'.tensor (Y'.tensor Z')).tensor W').to . tactic.coherence_assumption)
(f : U ‚ü∂ V)
  {h : V' =·µê (X'.tensor (Y'.tensor Z')).tensor W'} :
  f ‚â´·µê[h] ((Œ±_ _ _ _).inv ‚äó (ùüô W)) =
    f ‚â´·µê[h.trans (monoidal_eq.tensor ‚ü®monoidal_hom.Œ±_inv‚ü© ‚ü®monoidal_hom.id‚ü©)] ùüô _ :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (h.comp ((monoidal_hom.Œ±_inv).tensor monoidal_hom.id)),
  cases hV, cases hW, cases hX, cases hY, cases hZ,
  simp [coherent_comp_constructor]
end

@[simp] lemma id_tensor_Œ±_inv_coherent_comp {U V W X Y Z : C}
  {U' V' W' X' Y' : monoidal_obj C}
  (hU : U = U'.to . tactic.coherence_assumption)
  (hV : V = V'.to . tactic.coherence_assumption)
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hWXYZ : U ‚äó ((V ‚äó W) ‚äó X) = (U'.tensor ((V'.tensor W').tensor X')).to . tactic.coherence_assumption)
  (hWXYZ' : U ‚äó (V ‚äó W ‚äó X) = (U'.tensor (V'.tensor (W'.tensor X'))).to . tactic.coherence_assumption)
{h : U'.tensor ((V'.tensor W').tensor X') =·µê Y'} (f : Y ‚ü∂ Z) :
  ((ùüô U) ‚äó (Œ±_ _ _ _).inv) ‚â´·µê[h] f =
    ùüô _ ‚â´·µê[(monoidal_eq.tensor ‚ü®monoidal_hom.id‚ü© ‚ü®monoidal_hom.Œ±_inv‚ü©).trans h] f :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (((monoidal_hom.id).tensor monoidal_hom.Œ±_inv).comp h),
  cases hU, cases hV, cases hW, cases hX, cases hY,
  simp [coherent_comp_constructor]
end

@[simp] lemma Œ±_inv_tensor_id_coherent_comp {U V W X Y Z : C}
  {U' V' W' X' Y' : monoidal_obj C}
  (hU : U = U'.to . tactic.coherence_assumption)
  (hV : V = V'.to . tactic.coherence_assumption)
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hWXYZ : ((V ‚äó W) ‚äó X) ‚äó U = (((V'.tensor W').tensor X').tensor U').to . tactic.coherence_assumption)
  (hWXYZ' : (V ‚äó W ‚äó X) ‚äó U = ((V'.tensor (W'.tensor X')).tensor U').to . tactic.coherence_assumption)
{h : ((V'.tensor W').tensor X').tensor U' =·µê Y'} (f : Y ‚ü∂ Z) :
  ((Œ±_ _ _ _).inv ‚äó (ùüô U)) ‚â´·µê[h] f =
    ùüô _ ‚â´·µê[(monoidal_eq.tensor ‚ü®monoidal_hom.Œ±_inv‚ü© ‚ü®monoidal_hom.id‚ü©).trans h] f :=
begin
  rcases h,
  rw coherent_comp_constructor _ _ (((monoidal_hom.Œ±_inv).tensor monoidal_hom.id).comp h),
  cases hU, cases hV, cases hW, cases hX, cases hY,
  simp [coherent_comp_constructor]
end

lemma coherent_reassoc {U V W X Y : C} {W' X' : monoidal_obj C} {f : U ‚ü∂ V} {g : V ‚ü∂ W} {fg : U ‚ü∂ W}
  (q : f ‚â´ g = fg) (k : X ‚ü∂ Y) {h‚ÇÅ : W' =·µê X'} (hW : W = W'.to) (hX : X = X'.to) :
  f ‚â´ (g ‚â´·µê[h‚ÇÅ] k) = fg ‚â´·µê[h‚ÇÅ] k :=
have V = (monoidal_obj.of V).to, by refl,
by rw [comp_eq_coherent_comp, ‚Üêcoherent_assoc, ‚Üêcomp_eq_coherent_comp, q]

@[simp] lemma associate_morphisms {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ U V W X Y Z : C}
  {U' V' W' X' Y' Z' T‚ÇÅ' S‚ÇÇ' : monoidal_obj C}
  (hU : U = U'.to . tactic.coherence_assumption)
  (hV : V = V'.to . tactic.coherence_assumption)
  (hW : W = W'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hZ : Z = Z'.to . tactic.coherence_assumption)
  (hT‚ÇÅ : T‚ÇÅ = T‚ÇÅ'.to . tactic.coherence_assumption)
  (hS‚ÇÇ : S‚ÇÇ = S‚ÇÇ'.to . tactic.coherence_assumption)
  (hUWY : ((U ‚äó W) ‚äó Y) = ((U'.tensor W').tensor Y').to . tactic.coherence_assumption)
  (hUWY' : (U ‚äó W ‚äó Y) = (U'.tensor (W'.tensor Y')).to . tactic.coherence_assumption)
  (hVXZ : ((V ‚äó X) ‚äó Z) = ((V'.tensor X').tensor Z').to . tactic.coherence_assumption)
  (hVXZ' : (V ‚äó X ‚äó Z) = (V'.tensor (X'.tensor Z')).to . tactic.coherence_assumption)
  {f : U ‚ü∂ V} {g : W ‚ü∂ X} {h : Y ‚ü∂ Z}
  {k‚ÇÅ : S‚ÇÅ ‚ü∂ T‚ÇÅ} {k‚ÇÇ : S‚ÇÇ ‚ü∂ T‚ÇÇ} (h‚ÇÅ : T‚ÇÅ' =·µê (U'.tensor W').tensor Y') (h‚ÇÇ : (V'.tensor X').tensor Z' =·µê S‚ÇÇ') :
  k‚ÇÅ ‚â´·µê[h‚ÇÅ] (((f ‚äó g) ‚äó h : (U ‚äó W) ‚äó Y ‚ü∂ _) ‚â´·µê[h‚ÇÇ] k‚ÇÇ) =
    k‚ÇÅ ‚â´·µê[h‚ÇÅ.trans ‚ü®monoidal_hom.Œ±_hom‚ü©] ((f ‚äó g ‚äó h : _ ‚ü∂ _) ‚â´·µê[monoidal_eq.trans ‚ü®monoidal_hom.Œ±_inv‚ü© h‚ÇÇ] k‚ÇÇ) :=
begin
  have := associator_naturality f g h,
  rw ‚Üê(Œ±_ V X Z).eq_comp_inv at this,
  rw [this, comp_eq_coherent_comp, comp_eq_coherent_comp],
  simp, -- interesting: sequeeze_simp fails
end

@[simp] lemma tensor_id_assoc {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ U V X Y : C} {U' V' X' Y' T‚ÇÅ' S‚ÇÇ' : monoidal_obj C} {f : U ‚ü∂ V}
  {k‚ÇÅ : S‚ÇÅ ‚ü∂ T‚ÇÅ} {k‚ÇÇ : S‚ÇÇ ‚ü∂ T‚ÇÇ}
  (hU : U = U'.to . tactic.coherence_assumption)
  (hV : V = V'.to . tactic.coherence_assumption)
  (hX : X = X'.to . tactic.coherence_assumption)
  (hY : Y = Y'.to . tactic.coherence_assumption)
  (hT‚ÇÅ : T‚ÇÅ = T‚ÇÅ'.to . tactic.coherence_assumption)
  (hS‚ÇÇ : S‚ÇÇ = S‚ÇÇ'.to . tactic.coherence_assumption)
  (hXYU : (X ‚äó Y ‚äó U) = (X'.tensor (Y'.tensor U')).to . tactic.coherence_assumption)
  (hXYV : (X ‚äó Y ‚äó V) = (X'.tensor (Y'.tensor V')).to . tactic.coherence_assumption)
  (hXYU' : ((X ‚äó Y) ‚äó U) = ((X'.tensor Y').tensor U').to . tactic.coherence_assumption)
  (hXYV' : ((X ‚äó Y) ‚äó V) = ((X'.tensor Y').tensor V').to . tactic.coherence_assumption)
  (h‚ÇÅ : T‚ÇÅ' =·µê (X'.tensor (Y'.tensor U'))) (h‚ÇÇ : (X'.tensor (Y'.tensor V')) =·µê S‚ÇÇ'):
  k‚ÇÅ ‚â´·µê[h‚ÇÅ] ((ùüô X ‚äó ùüô Y ‚äó f) ‚â´·µê[h‚ÇÇ] k‚ÇÇ) =
    k‚ÇÅ ‚â´·µê[h‚ÇÅ.trans ‚ü®monoidal_hom.Œ±_inv‚ü©] ((ùüô (X ‚äó Y) ‚äó f) ‚â´·µê[monoidal_eq.trans ‚ü®monoidal_hom.Œ±_hom‚ü© h‚ÇÇ] k‚ÇÇ) :=
by rw [‚Üêassociate_morphisms, tensor_id]

end category_theory
