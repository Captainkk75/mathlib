/-
Copyright (c) 2021 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import analysis.specific_limits.basic
import combinatorics.simplicial_complex.basic

/-!
# Subdivision of simplicial complexes
-/

open geometry finset

variables {ùïú E : Type*}

namespace geometry.simplicial_complex
section ordered_ring
variables [ordered_ring ùïú] [add_comm_group E] [module ùïú E] {m : ‚Ñï} {K‚ÇÅ K‚ÇÇ : simplicial_complex ùïú E}

/-- `K‚ÇÅ` is a subdivision of `K‚ÇÇ` iff their underlying space is the same and each face of `K‚ÇÅ` is
contained in some face of `K‚ÇÇ`. -/
def subdivides (K‚ÇÅ K‚ÇÇ : simplicial_complex ùïú E) : Prop :=
K‚ÇÅ.space = K‚ÇÇ.space ‚àß
  ‚àÄ ‚¶És‚ÇÅ‚¶Ñ, s‚ÇÅ ‚àà K‚ÇÅ ‚Üí ‚àÉ s‚ÇÇ ‚àà K‚ÇÇ, convex_hull ùïú (s‚ÇÅ : set E) ‚äÜ convex_hull ùïú (s‚ÇÇ : set E)

end ordered_ring

section semi_normed_group
variables [semi_normed_group E] [t2_space E] [normed_space ‚Ñù E] {s t : finset E} {m : ‚Ñï}
  {K‚ÇÅ K‚ÇÇ : simplicial_complex ‚Ñù E}

lemma subdivision_iff_combi_interiors_subset_combi_interiors :
  K‚ÇÅ.subdivides K‚ÇÇ ‚Üî K‚ÇÇ.space ‚äÜ K‚ÇÅ.space ‚àß
  ‚àÄ s‚ÇÅ ‚àà K‚ÇÅ, ‚àÉ s‚ÇÇ ‚àà K‚ÇÇ, combi_interior ‚Ñù s‚ÇÅ ‚äÜ combi_interior ‚Ñù s‚ÇÇ :=
begin
  refine ‚ü®Œª h, ‚ü®h.1.symm.subset, Œª s hs, _‚ü©, Œª h, ‚ü®h.1.antisymm' $ Œª x hx, _, Œª s‚ÇÅ hs‚ÇÅ, _‚ü©‚ü©,
  { obtain ‚ü®t, ht, hst‚ü© := h.2 hs,
    obtain ‚ü®u, hut, hu, hsu‚ü© := simplex_combi_interiors_split_interiors_nonempty (K‚ÇÅ.nonempty hs)
      (K‚ÇÇ.indep ht) hst,
    exact ‚ü®u, K‚ÇÇ.down_closed ht hut hu, hsu‚ü© },
  { obtain ‚ü®s‚ÇÅ, hs‚ÇÅ, hx‚ü© := mem_space_iff.1 hx,
    obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅs‚ÇÇ‚ü© := h.2 _ hs‚ÇÅ,
    rw mem_space_iff,
    exact ‚ü®s‚ÇÇ, hs‚ÇÇ, convex_hull_subset_convex_hull_of_combi_interior_subset_combi_interior
      (K‚ÇÅ.indep hs‚ÇÅ) (K‚ÇÇ.indep hs‚ÇÇ) hs‚ÇÅs‚ÇÇ hx‚ü© },
  { obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅs‚ÇÇ‚ü© := h.2 _ hs‚ÇÅ,
    exact ‚ü®_, hs‚ÇÇ, convex_hull_subset_convex_hull_of_combi_interior_subset_combi_interior
      (K‚ÇÅ.indep hs‚ÇÅ) (K‚ÇÇ.indep hs‚ÇÇ) hs‚ÇÅs‚ÇÇ‚ü© }
end

lemma subdivision_iff_partition :
  K‚ÇÅ.subdivides K‚ÇÇ ‚Üî (K‚ÇÅ.faces.nonempty ‚Üí K‚ÇÇ.faces.nonempty) ‚àß K‚ÇÅ.space ‚äÜ K‚ÇÇ.space ‚àß
    ‚àÄ s‚ÇÇ ‚àà K‚ÇÇ, ‚àÉ F ‚äÜ K‚ÇÅ.faces, combi_interior ‚Ñù s‚ÇÇ = ‚ãÉ (s‚ÇÅ ‚àà F), combi_interior ‚Ñù s‚ÇÅ :=
begin
  split,
  { rintro ‚ü®hspace, hsubdiv‚ü©,
    split,
    { rintro ‚ü®s‚ÇÅ, hs‚ÇÅ‚ü©,
      obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅs‚ÇÇ‚ü© := hsubdiv hs‚ÇÅ,
      exact ‚ü®s‚ÇÇ, hs‚ÇÇ‚ü© },
    use le_of_eq hspace,
    rintro s hs,
    use [{t | t ‚àà K‚ÇÅ ‚àß combi_interior ‚Ñù t ‚äÜ combi_interior ‚Ñù s}, (Œª t ht, ht.1)],
    ext x,
    split,
    { rintro hxs,
      have hxspace := mem_space_iff.2 ‚ü®s, hs, hxs.1‚ü©,
      rw [‚Üêhspace, combi_interiors_cover, set.mem_bUnion_iff] at hxspace,
      obtain ‚ü®t, ht, hxt‚ü© := hxspace,
      apply mem_bUnion _ hxt,
      use ht,
      rintro y hyt,
      obtain ‚ü®u, hu, htu‚ü© := hsubdiv ht,
      obtain ‚ü®W, hWu, htW‚ü© := simplex_combi_interiors_split_interiors (K‚ÇÇ.indep hu) htu,
      rw disjoint_interiors hs (K‚ÇÇ.down_closed hu hWu) hxs (htW hxt),
      exact htW hyt },
    { rw mem_bUnion_iff,
      rintro ‚ü®t, ‚ü®ht, hts‚ü©, hxt‚ü©,
      exact hts hxt }},
  { rintro ‚ü®hempty, hspace, hpartition‚ü©,
    have hspace : K‚ÇÅ.space = K‚ÇÇ.space,
    { apply subset.antisymm hspace,
      rintro x hx,
      rw [combi_interiors_cover, mem_bUnion_iff] at ‚ä¢ hx,
      obtain ‚ü®s, hs, hxs‚ü© := hx,
      obtain ‚ü®F, hF, hsint‚ü© := hpartition hs,
      rw [hsint, mem_bUnion_iff] at hxs,
      obtain ‚ü®t, ht, hxt‚ü© := hxs,
      exact ‚ü®t, hF ht, hxt‚ü© },
    use hspace,
    rintro s hs,
    cases finset.eq_empty_or_nonempty s with hsempty hsnonempty,
    { obtain ‚ü®t, ht‚ü© := hempty ‚ü®s, hs‚ü©,
      use [t, ht],
      rw hsempty,
      simp },
    obtain ‚ü®x, hx‚ü© := nonempty_combi_interior_of_nonempty (K‚ÇÅ.indep hs) hsnonempty,
    have hxspace := mem_space_iff.2 ‚ü®s, hs, hx.1‚ü©,
    rw [hspace, combi_interiors_cover, mem_bUnion_iff] at hxspace,
    obtain ‚ü®t, ht, hxt‚ü© := hxspace,
    use [t, ht],
    rw ‚Üêclosure_combi_interior_eq_convex_hull (K‚ÇÅ.indep hs),
    apply closure_minimal _ is_closed_convex_hull,
    rintro x' hx',
    have hxspace := mem_space_iff.2 ‚ü®s, hs, hx'.1‚ü©,
    rw [hspace, combi_interiors_cover, mem_bUnion_iff] at hxspace,
    obtain ‚ü®t', ht', hxt'‚ü© := hxspace,
    suffices htt' : t = t',
    { rw htt',
      exact hxt'.1 },
    obtain ‚ü®F, hF, hinterior‚ü© := hpartition ht,
    obtain ‚ü®F', hF', hinterior'‚ü© := hpartition ht',
    apply disjoint_interiors ht ht' (_ : x ‚àà _) _,
    { rw [hinterior, mem_bUnion_iff] at ‚ä¢ hxt,
      obtain ‚ü®u, hu, hxu‚ü© := hxt,
      use [u, hu, hxu] },
    { rw [hinterior', mem_bUnion_iff] at ‚ä¢ hxt',
      obtain ‚ü®u, hu, hxu‚ü© := hxt',
      use [u, hu],
      rw ‚Üêdisjoint_interiors hs (hF' hu) hx' hxu,
      exact hx }}
end

instance : partial_order (simplicial_complex ùïú E) :=
{ le := Œª K‚ÇÅ K‚ÇÇ, K‚ÇÅ.subdivides K‚ÇÇ,
  le_refl := (Œª S, ‚ü®rfl, (Œª s hs, ‚ü®s, hs, subset.refl _‚ü©)‚ü©),
  le_trans := begin
    rintro K‚ÇÅ K‚ÇÇ S‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ,
    use eq.trans h‚ÇÅ‚ÇÇ.1 h‚ÇÇ‚ÇÉ.1,
    rintro s‚ÇÅ hs‚ÇÅ,
    obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅ‚ÇÇ‚ü© := h‚ÇÅ‚ÇÇ.2 hs‚ÇÅ,
    obtain ‚ü®s‚ÇÉ, hs‚ÇÉ, hs‚ÇÇ‚ÇÉ‚ü© := h‚ÇÇ‚ÇÉ.2 hs‚ÇÇ,
    exact ‚ü®s‚ÇÉ, hs‚ÇÉ, subset.trans hs‚ÇÅ‚ÇÇ hs‚ÇÇ‚ÇÉ‚ü©,
  end,
  le_antisymm := begin
    suffices aux_lemma : ‚àÄ {K‚ÇÅ K‚ÇÇ : simplicial_complex ùïú E}, K‚ÇÅ.subdivides K‚ÇÇ ‚Üí K‚ÇÇ ‚â§ K‚ÇÅ ‚Üí ‚àÄ {s},
      s ‚àà K‚ÇÅ.faces ‚Üí s ‚àà K‚ÇÇ.faces,
    { rintro K‚ÇÅ K‚ÇÇ h‚ÇÅ h‚ÇÇ,
      ext s,
      exact ‚ü®Œª hs, aux_lemma h‚ÇÅ h‚ÇÇ hs, Œª hs, aux_lemma h‚ÇÇ h‚ÇÅ hs‚ü© },
    rintro K‚ÇÅ K‚ÇÇ h‚ÇÅ h‚ÇÇ s hs,
    rw subdivision_iff_partition at h‚ÇÇ h‚ÇÅ,
    cases finset.eq_empty_or_nonempty s with hsempty hsnonempty,
    { rw hsempty,
      exact empty_mem_faces_of_nonempty (h‚ÇÅ.1 ‚ü®s, hs‚ü©) },
    obtain ‚ü®x, hxs‚ü© := nonempty_combi_interior_of_nonempty (K‚ÇÅ.indep hs) hsnonempty,
    obtain ‚ü®F, hF, hFs‚ü© := h‚ÇÇ.2.2 hs,
    have hxs' := hxs,
    rw [hFs, mem_bUnion_iff] at hxs',
    obtain ‚ü®t, ht, hxt‚ü© := hxs',
    obtain ‚ü®F', hF', hF't‚ü© := h‚ÇÅ.2.2 (hF ht),
    rw [hF't, mem_bUnion_iff] at hxt,
    obtain ‚ü®u, hu, hxu‚ü© := hxt,
    have := disjoint_interiors hs (hF' hu) hxs hxu,
    subst this,
    suffices h : s = t,
    { rw h,
      exact hF ht },
    apply combi_interior.inj (K‚ÇÅ.indep hs) (K‚ÇÇ.indep (hF ht)) (subset.antisymm _ _),
    { rw hF't,
      exact subset_bUnion_of_mem hu },
    { rw hFs,
      exact subset_bUnion_of_mem ht }
  end }

/-
/-- max diameter of  simplices -/
def simplicial_complex.mesh_size (S : simplicial_complex ùïú E) : ùïú := sorry

def barycentrisation : list (fin m ‚Üí ùïú) ‚Üí fin m ‚Üí ùïú :=
  Œª L,

def simplicial_complex.barycentric_subdivision (S : simplicial_complex ùïú E) :
  simplicial_complex ùïú E :=
{ faces := {s | ‚àÉ {L : list (fin m ‚Üí ùïú)}, list.to_finset L ‚àà S.faces ‚àß s = },
  indep := _,
  down_closed := _,
  disjoint := _ }-/
