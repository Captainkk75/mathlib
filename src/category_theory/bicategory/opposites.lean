/-
Copyright (c) 2021 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import category_theory.bicategory.pseudofunctor

namespace category_theory

universes w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open bicategory opposite

section bicategory

variables {B : Type u‚ÇÅ} [bicategory.{w‚ÇÅ v‚ÇÅ} B]

instance bicategory.opposite : bicategory.{w‚ÇÅ v‚ÇÅ} B·µí·µñ :=
{ hom := Œª a b, (unop b ‚ü∂ unop a),
  comp := Œª _ _ _ f g, g ‚â´ f,
  id   := Œª a, ùüô (a.unop),
  hom_category := Œª a b, bicategory.hom_category (unop b) (unop a),
  whisker_left :=  Œª _ _ _ f _ _ Œ∑, bicategory.whisker_right Œ∑ f,
  whisker_right := Œª _ _ _ _ _ Œ∑ h, bicategory.whisker_left h Œ∑,
  associator := Œª _ _ _ _ f g h, (Œ±_ h g f).symm,
  associator_naturality_left' := by { intros, apply associator_inv_naturality_right },
  associator_naturality_middle' := by { intros, apply associator_inv_naturality_middle },
  associator_naturality_right' := by { intros, apply associator_inv_naturality_left },
  left_unitor := Œª _ _ f, right_unitor f,
  left_unitor_naturality' := by { intros, apply right_unitor_naturality },
  right_unitor := Œª _ _ f, left_unitor f,
  right_unitor_naturality' := by { intros, apply left_unitor_naturality },
  pentagon' := by { intros, apply pentagon_inv },
  triangle' := by { intros, dsimp, apply triangle_assoc_comp_right } }

instance : category_struct.{v‚ÇÅ} B·µí·µñ := bicategory.to_category_struct

instance : quiver.{v‚ÇÅ+1} B·µí·µñ := bicategory.to_category_struct.to_quiver

end bicategory

section pseudofunctor

variables {B : Type u‚ÇÅ} [bicategory.{w‚ÇÅ v‚ÇÅ} B] {C : Type u‚ÇÇ} [bicategory.{w‚ÇÇ v‚ÇÇ} C]
(F : pseudofunctor B C)

@[simps]
protected def pseudofunctor.op : pseudofunctor B·µí·µñ C·µí·µñ :=
{ map‚ÇÄ := Œª a, op (F.map‚ÇÄ (unop a)),
  map‚ÇÅ := Œª _ _ f, F.map‚ÇÅ f,
  map‚ÇÇ := Œª _ _ _ _ Œ∑, F.map‚ÇÇ Œ∑,
  map‚ÇÅ_id := Œª a, F.map‚ÇÅ_id (unop a),
  map‚ÇÅ_comp := Œª _ _ _ f g, F.map‚ÇÅ_comp g f,
  map‚ÇÅ_comp_naturality_left' := by
  { intros, erw F.map‚ÇÅ_comp_naturality_right, refl },
  map‚ÇÅ_comp_naturality_right' := by
  { intros, erw F.map‚ÇÅ_comp_naturality_left, refl },
  map‚ÇÇ_id' := by { intros, erw F.map‚ÇÇ_id },
  map‚ÇÇ_comp' := by { intros, erw F.map‚ÇÇ_comp },
  map‚ÇÇ_associator' := by { intros, erw F.map‚ÇÇ_associator_inv, refl },
  map‚ÇÇ_left_unitor' := by { intros, erw F.map‚ÇÇ_right_unitor, refl },
  map‚ÇÇ_right_unitor' := by { intros, erw F.map‚ÇÇ_left_unitor, refl } }

end pseudofunctor

end category_theory
