/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.limits.shapes.zero

/-!
# Shift

A `shift` on a category is nothing more than an automorphism of the category. An example to
keep in mind might be the category of complexes ‚ãØ ‚Üí C_{n-1} ‚Üí C_n ‚Üí C_{n+1} ‚Üí ‚ãØ with the shift
operator re-indexing the terms, so the degree `n` term of `shift C` would be the degree `n+1`
term of `C`.

-/
namespace category_theory

universes v u

variables (C : Type u) [category.{v} C]

-- TODO: do we want to allow shifts indexed by arbitrary `add_monoid`s?

/-- A category has a shift, or translation, if it is equipped with an automorphism. -/
class has_shift :=
(shift : Œ† (i : ‚Ñ§), C ‚•§ C)
(shift_zero : shift 0 ‚âÖ ùü≠ C)
(shift_add : Œ† i j, shift (i + j) ‚âÖ shift i ‚ãô shift j)
(whisker_left_shift_zero : ‚àÄ i, whisker_left (shift i) shift_zero.hom =
  (shift_add i 0).inv ‚â´ (eq_to_hom $ by simp) ‚â´ (functor.right_unitor _).inv)
(whisker_right_shift_zero : ‚àÄ i, whisker_right shift_zero.hom (shift i) =
  (shift_add 0 i).inv ‚â´ (eq_to_hom $ by simp) ‚â´ (functor.right_unitor _).inv)
(whisker_right_shift_add : ‚àÄ i j k, whisker_right (shift_add i j).hom (shift k) =
  (shift_add (i+j) k).inv ‚â´ (eq_to_hom $ by rw add_assoc) ‚â´ (shift_add i (j+k)).hom ‚â´
    whisker_left _ (shift_add j k).hom ‚â´ (functor.associator _ _ _).inv)

variables [has_shift C]

/-- The shift autoequivalence, moving objects and morphisms 'up'. -/
def shift_functor (i : ‚Ñ§) : C ‚•§ C := has_shift.shift i

/-- Shifting by zero is the identity functor. -/
def shift_functor_zero : shift_functor C 0 ‚âÖ ùü≠ C := has_shift.shift_zero

/-- Shifting by `i + j` is the same as shifting by `i` and then shifting by `j`. -/
def shift_functor_add (i j : ‚Ñ§) :
  shift_functor C (i + j) ‚âÖ shift_functor C i ‚ãô shift_functor C j :=
has_shift.shift_add i j

/-- Shifting by `i` and then shifting by `-i` is the identity. -/
def shift_functor_comp_shift_functor_neg (i : ‚Ñ§) :
  shift_functor C i ‚ãô shift_functor C (-i) ‚âÖ ùü≠ C :=
(shift_functor_add C i (-i)).symm ‚â™‚â´ (eq_to_iso $ by simp) ‚â™‚â´ (shift_functor_zero C)

/-- Shifting by `-i` and then shifting by `i` is the identity. -/
def shift_functor_neg_comp_shift_functor (i : ‚Ñ§) :
  shift_functor C (-i) ‚ãô shift_functor C i ‚âÖ ùü≠ C :=
(shift_functor_add C (-i) i).symm ‚â™‚â´ (eq_to_iso $ by simp) ‚â™‚â´ (shift_functor_zero C)

-- Any better notational suggestions?
notation X`‚ü¶`n`‚üß`:20 := (shift_functor _ n).obj X
notation f`‚ü¶`n`‚üß'`:80 := (shift_functor _ n).map f

example {X Y : C} (f : X ‚ü∂ Y) : X‚ü¶1‚üß ‚ü∂ Y‚ü¶1‚üß := f‚ü¶1‚üß'
example {X Y : C} (f : X ‚ü∂ Y) : X‚ü¶-2‚üß ‚ü∂ Y‚ü¶-2‚üß := f‚ü¶-2‚üß'

variables {C} (X Y : C) (f : X ‚ü∂ Y)

/-- Shifting by zero is the identity functor. -/
def shift_zero : X‚ü¶0‚üß ‚âÖ X := (shift_functor_zero C).app _

/-- Shifting by `i + j` is the same as shifting by `i` and then shifting by `j`. -/
def shift_add (i j : ‚Ñ§) : X‚ü¶i + j‚üß ‚âÖ X‚ü¶i‚üß‚ü¶j‚üß := (shift_functor_add C i j).app _

/-- Shifting by `i` and then by `j` is the same as shifting by `i + j`. -/
abbreviation shift_shift (i j : ‚Ñ§) : X‚ü¶i‚üß‚ü¶j‚üß ‚âÖ X‚ü¶i + j‚üß := (shift_add X i j).symm

@[simp] lemma shift_add_symm (i j : ‚Ñ§) : (shift_add X i j).symm = shift_shift X i j := rfl

@[simp] lemma shift_shift_symm (i j : ‚Ñ§) : (shift_shift X i j).symm = shift_add X i j :=
(shift_add X i j).symm_symm_eq

/-- Shifting by `i` and then shifting by `-i` is the identity. -/
def shift_shift_neg (i : ‚Ñ§) : X‚ü¶i‚üß‚ü¶-i‚üß ‚âÖ X := (shift_functor_comp_shift_functor_neg C i).app _

/-- Shifting by `-i` and then shifting by `i` is the identity. -/
def shift_neg_shift (i : ‚Ñ§) : X‚ü¶-i‚üß‚ü¶i‚üß ‚âÖ X := (shift_functor_neg_comp_shift_functor C i).app _

lemma shift_shift_zero_hom' (i : ‚Ñ§) :
  (shift_zero X).hom‚ü¶i‚üß' = (shift_add X 0 i).inv ‚â´ (eq_to_hom $ by simp) :=
by simpa only [functor.right_unitor_inv_app, eq_to_hom_app, category.comp_id, nat_trans.comp_app]
  using congr_arg (Œª Œ±, nat_trans.app Œ± X) (has_shift.whisker_right_shift_zero i)

lemma shift_zero_shift_hom (i : ‚Ñ§) :
  (shift_zero $ X‚ü¶i‚üß).hom = (shift_add X i 0).inv ‚â´ (eq_to_hom $ by simp) :=
by simpa only [functor.right_unitor_inv_app, eq_to_hom_app, category.comp_id, nat_trans.comp_app]
  using congr_arg (Œª Œ±, nat_trans.app Œ± X) (has_shift.whisker_left_shift_zero i)

lemma shift_shift_add_hom' (i j k : ‚Ñ§) :
  (shift_add X i j).hom‚ü¶k‚üß' =
    (shift_add X (i+j) k).inv ‚â´ (eq_to_hom $ by rw add_assoc) ‚â´ (shift_add X i (j+k)).hom ‚â´
      (shift_add (X‚ü¶i‚üß) j k).hom :=
by simpa only [functor.associator_inv_app, eq_to_hom_app, category.comp_id, nat_trans.comp_app]
  using congr_arg (Œª Œ±, nat_trans.app Œ± X) (has_shift.whisker_right_shift_add i j k)

variables {X Y}

lemma shift_zero' : f‚ü¶0‚üß' = (shift_zero X).hom ‚â´ f ‚â´ (shift_zero Y).inv :=
by { symmetry, apply nat_iso.naturality_2 }

lemma shift_add' (i j : ‚Ñ§) :
  f‚ü¶i + j‚üß' = (shift_add X i j).hom ‚â´ f‚ü¶i‚üß'‚ü¶j‚üß' ‚â´ (shift_add Y i j).inv :=
by { symmetry, apply nat_iso.naturality_2 }

lemma shift_shift' (i j : ‚Ñ§) :
  f‚ü¶i‚üß'‚ü¶j‚üß' = (shift_shift X i j).hom ‚â´ f‚ü¶i + j‚üß' ‚â´ (shift_shift Y i j).inv :=
by { symmetry, apply nat_iso.naturality_1 }

lemma shift_shift_neg' (i : ‚Ñ§) :
  f‚ü¶i‚üß'‚ü¶-i‚üß' = (shift_shift_neg X i).hom ‚â´ f ‚â´ (shift_shift_neg Y i).inv :=
by { symmetry, apply nat_iso.naturality_2 }

lemma shift_neg_shift' (i : ‚Ñ§) :
  f‚ü¶-i‚üß'‚ü¶i‚üß' = (shift_neg_shift X i).hom ‚â´ f ‚â´ (shift_neg_shift Y i).inv :=
by { symmetry, apply nat_iso.naturality_2 }

def has_shift_of_equiv {C : Type*} [category C] (S : C ‚âå C) : has_shift C :=
{ shift := Œª i, (S^i).functor,
  shift_zero := iso.refl _,
  shift_add := Œª i j, eq_to_iso $ by {  },
  whisker_left_shift_zero := _,
  whisker_right_shift_zero := _,
  whisker_right_shift_add := _ }


variables (C)

/-- Shifting by `n` is an equivalence, whose inverse is shifting by `-n`. -/
@[simps] def shift_equiv (n : ‚Ñ§) : C ‚âå C :=
{ functor := shift_functor C n,
  inverse := shift_functor C (-n),
  unit_iso := (shift_functor_comp_shift_functor_neg C n).symm,
  counit_iso := shift_functor_neg_comp_shift_functor C n,
  functor_unit_iso_comp' := Œª X,
  begin
    dsimp only [shift_functor_comp_shift_functor_neg, shift_functor_neg_comp_shift_functor],
    simp only [iso.symm_hom, iso.trans_hom, functor.map_comp, nat_trans.comp_app, category.assoc],
    sorry
  end }

open category_theory.limits
variables [has_zero_morphisms C]

@[simp]
lemma shift_zero_eq_zero (X Y : C) (n : ‚Ñ§) : (0 : X ‚ü∂ Y)‚ü¶n‚üß' = (0 : X‚ü¶n‚üß ‚ü∂ Y‚ü¶n‚üß) :=
by apply equivalence_preserves_zero_morphisms _ (shift_equiv C n)

end category_theory
