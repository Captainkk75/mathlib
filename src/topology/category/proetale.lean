/-
Copyright (c) 2021 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/

import topology.category.Profinite
import category_theory.sites.pretopology

open category_theory category_theory.limits

universes v u

variables {C : Type u} [category.{v} C]

section MOVE_TO_PRESIEVE

inductive presieve_of_arrows {X : C} {Œπ : Type*} (Y : Œπ ‚Üí C) (f : Œ† i, Y i ‚ü∂ X) :
  presieve X
| mk (i : Œπ) : presieve_of_arrows (f i)

lemma presieve_of_arrows_punit {X Y : C} (f : Y ‚ü∂ X) :
  presieve_of_arrows _ (Œª _ : punit, f) = presieve.singleton f :=
begin
  ext Y g,
  split,
  { rintro ‚ü®_‚ü©,
    apply presieve.singleton.mk },
  { rintro ‚ü®_‚ü©,
    exact presieve_of_arrows.mk punit.star },
end

lemma presieve_of_arrows_pullback [has_pullbacks C] {X Y : C} {Œπ : Type*}
  (f : Y ‚ü∂ X) (Y : Œπ ‚Üí C) (g : Œ† (i : Œπ), Y i ‚ü∂ X) :
  presieve_of_arrows (Œª i, pullback (g i) f) (Œª i, pullback.snd) =
    pullback_arrows f (presieve_of_arrows Y g) :=
begin
  ext Z h,
  split,
  { rintro ‚ü®hk‚ü©,
   exact pullback_arrows.mk _ _ (presieve_of_arrows.mk hk) },
  { rintro ‚ü®W, k, hk‚ÇÅ‚ü©,
    cases hk‚ÇÅ with i hi,
    apply presieve_of_arrows.mk },
end

lemma presieve_of_arrows_bind (X : C) (Œπ : Type*)
  (Z : Œπ ‚Üí C)
  (g : Œ† (i : Œπ), Z i ‚ü∂ X)
  (j : Œ† ‚¶ÉY : C‚¶Ñ (f : Y ‚ü∂ X),
         presieve_of_arrows Z g f ‚Üí Type*)
  (W : Œ† ‚¶ÉY : C‚¶Ñ (f : Y ‚ü∂ X) (H : presieve_of_arrows Z g f),
         j f H ‚Üí C)
  (k : Œ† ‚¶ÉY : C‚¶Ñ (f : Y ‚ü∂ X) (H : presieve_of_arrows Z g f)
       (i : j f H), W f H i ‚ü∂ Y) :
  (presieve_of_arrows Z g).bind (Œª Y f H, presieve_of_arrows (W f H) (k f H)) =
    presieve_of_arrows (Œª (i : Œ£ (i : Œπ), j (g i) (presieve_of_arrows.mk _)), W (g i.1) _ i.2)
      (Œª ij, k (g ij.1) _ ij.2 ‚â´ g ij.1) :=
begin
  ext Y f,
  split,
  { rintro ‚ü®_, _, _, ‚ü®i‚ü©, ‚ü®i'‚ü©, rfl‚ü©,
    refine presieve_of_arrows.mk (sigma.mk _ _) },
  { rintro ‚ü®‚ü®i, i'‚ü©‚ü©,
    refine presieve.bind_comp _ _ _,
    { apply presieve_of_arrows.mk },
    { apply presieve_of_arrows.mk } }
end

end MOVE_TO_PRESIEVE

section MOVE_TO_PROFINITE
@[simp] lemma id_app (X : Profinite) (x : X) :
  (ùüô X : X ‚Üí X) x = x := rfl

@[simp] lemma comp_app {X Y Z : Profinite} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
  (f ‚â´ g : X ‚Üí Z) x = g (f x) := rfl

def point : Profinite.{u} := ‚ü®‚ü®punit‚ü©‚ü©
end MOVE_TO_PROFINITE

section MAYBEMOVE
def from_point {X : Profinite} :
  (point ‚ü∂ X) ‚âÉ X :=
{ to_fun := Œª f, f punit.star,
  inv_fun := Œª x, ‚ü®Œª _, x‚ü©,
  left_inv := Œª x, by { ext ‚ü®‚ü©, refl },
  right_inv := Œª x, rfl}

lemma from_point_apply {X Y : Profinite} (f : point ‚ü∂ X) (g : X ‚ü∂ Y) :
  g (from_point f) = from_point (f ‚â´ g) :=
rfl

noncomputable def mk_pullback {X Y Z : Profinite} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} {x : X} {y : Y}
  (h : f x = g y) :
  (pullback f g : Profinite) :=
from_point (pullback.lift (from_point.symm x) (from_point.symm y) (by { ext ‚ü®‚ü©, exact h }))

lemma mk_pullback_fst {X Y Z : Profinite} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} {x : X} {y : Y}
  {h : f x = g y} : (pullback.fst : pullback f g ‚ü∂ _) (mk_pullback h) = x :=
begin
  rw [mk_pullback, from_point_apply],
  simp
end

lemma mk_pullback_snd {X Y Z : Profinite} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} {x : X} {y : Y}
  {h : f x = g y} : (pullback.snd : pullback f g ‚ü∂ _) (mk_pullback h) = y :=
begin
  rw [mk_pullback, from_point_apply],
  simp
end
end MAYBEMOVE

def proetale_pretopology : pretopology Profinite :=
{ coverings := Œª X S, ‚àÉ (Œπ : Type*) [fintype Œπ] (Y : Œπ ‚Üí Profinite) (f : Œ† (i : Œπ), Y i ‚ü∂ X),
      (‚àÄ (x : X), ‚àÉ i (y : Y i), f i y = x) ‚àß S = presieve_of_arrows Y f,
  has_isos := Œª X Y f i,
  begin
    refine ‚ü®punit, infer_instance, Œª _, Y, Œª _, f, _, _‚ü©,
    { introI x,
      refine ‚ü®punit.star, inv f x, _‚ü©,
      change (inv f ‚â´ f) x = x,
      rw is_iso.inv_hom_id,
      simp },
    { rw presieve_of_arrows_punit },
  end,
  pullbacks := Œª X Y f S,
  begin
    rintro ‚ü®Œπ, hŒπ, Z, g, hg, rfl‚ü©,
    refine ‚ü®Œπ, hŒπ, Œª i, pullback (g i) f, Œª i, pullback.snd, _, _‚ü©,
    { intro y,
      rcases hg (f y) with ‚ü®i, z, hz‚ü©,
      exact ‚ü®i, mk_pullback hz, mk_pullback_snd‚ü© },
    { rw presieve_of_arrows_pullback }
  end,
  transitive := Œª X S Ti,
  begin
    rintro ‚ü®Œπ, hŒπ, Z, g, hY, rfl‚ü© hTi,
    choose j hj W k hk‚ÇÅ hk‚ÇÇ using hTi,
    resetI,
    refine ‚ü®Œ£ (i : Œπ), j (g i) (presieve_of_arrows.mk _), infer_instance, Œª i, W _ _ i.2, _, _, _‚ü©,
    { intro ij,
      exact k _ _ ij.2 ‚â´ g ij.1 },
    { intro x,
      obtain ‚ü®i, y, rfl‚ü© := hY x,
      obtain ‚ü®i', z, rfl‚ü© := hk‚ÇÅ (g i) (presieve_of_arrows.mk _) y,
      refine ‚ü®‚ü®i, i'‚ü©, z, rfl‚ü© },
    { have : Ti = Œª Y f H, presieve_of_arrows (W f H) (k f H),
      { ext Y f H : 3,
        apply hk‚ÇÇ },
      rw this,
      apply presieve_of_arrows_bind },
  end }
