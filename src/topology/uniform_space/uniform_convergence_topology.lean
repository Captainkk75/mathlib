/-
Copyright (c) 2022 Anatole Dedecker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anatole Dedecker
-/
import topology.uniform_space.uniform_convergence
import topology.bornology.order

/-!
# TODO
-/
noncomputable theory
open_locale topological_space classical uniformity filter

open set filter bornology

namespace uniform_convergence

variables (Œ± Œ≤ : Type*) {Œ≥ Œπ : Type*} [uniform_space Œ≤]
variables {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : set Œ±} {x : Œ±} {p : filter Œπ} {g : Œπ ‚Üí Œ±}

protected def gen (V : set (Œ≤ √ó Œ≤)) : set ((Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤)) :=
  {uv : (Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤) | ‚àÄ x, (uv.1 x, uv.2 x) ‚àà V}

protected lemma is_basis_gen :
  is_basis (Œª V : set (Œ≤ √ó Œ≤), V ‚àà ùì§ Œ≤) (uniform_convergence.gen Œ± Œ≤) :=
‚ü®‚ü®univ, univ_mem‚ü©, Œª U V hU hV, ‚ü®U ‚à© V, inter_mem hU hV, Œª uv huv,
  ‚ü®Œª x, (huv x).left, Œª x, (huv x).right‚ü©‚ü©‚ü©

protected def uniformity_basis : filter_basis ((Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤)) :=
(uniform_convergence.is_basis_gen Œ± Œ≤).filter_basis

protected def uniform_core : uniform_space.core (Œ± ‚Üí Œ≤) :=
uniform_space.core.mk_of_basis (uniform_convergence.uniformity_basis Œ± Œ≤)
  (Œª U ‚ü®V, hV, hVU‚ü© f, hVU ‚ñ∏ Œª x, refl_mem_uniformity hV)
  (Œª U ‚ü®V, hV, hVU‚ü©, hVU ‚ñ∏ ‚ü®uniform_convergence.gen Œ± Œ≤ (prod.swap ‚Åª¬π' V),
    ‚ü®prod.swap ‚Åª¬π' V, tendsto_swap_uniformity hV, rfl‚ü©, Œª uv huv x, huv x‚ü©)
  (Œª U ‚ü®V, hV, hVU‚ü©, hVU ‚ñ∏ let ‚ü®W, hW, hWV‚ü© := comp_mem_uniformity_sets hV in
    ‚ü®uniform_convergence.gen Œ± Œ≤ W, ‚ü®W, hW, rfl‚ü©, Œª uv ‚ü®w, huw, hwv‚ü© x, hWV
      ‚ü®w x, by exact ‚ü®huw x, hwv x‚ü©‚ü©‚ü©)

protected def uniform_space : uniform_space (Œ± ‚Üí Œ≤) :=
uniform_space.of_core (uniform_convergence.uniform_core Œ± Œ≤)

protected lemma has_basis_uniformity :
  (@uniformity (Œ± ‚Üí Œ≤) (uniform_convergence.uniform_space Œ± Œ≤)).has_basis (Œª V, V ‚àà ùì§ Œ≤)
  (uniform_convergence.gen Œ± Œ≤) :=
(uniform_convergence.is_basis_gen Œ± Œ≤).has_basis

protected def topological_space : topological_space (Œ± ‚Üí Œ≤) :=
(uniform_convergence.uniform_core Œ± Œ≤).to_topological_space

variable {Œ±}

end uniform_convergence

namespace uniform_convergence_on

variables (Œ± Œ≤ : Type*) {Œ≥ Œπ : Type*} [uniform_space Œ≤] (ùîñ : set (set Œ±))
variables {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : set Œ±} {x : Œ±} {p : filter Œπ} {g : Œπ ‚Üí Œ±}

protected def uniform_space : uniform_space (Œ± ‚Üí Œ≤) :=
‚®Ö (s : set Œ±) (hs : s ‚àà ùîñ), uniform_space.comap (Œª f, s.restrict f)
  (uniform_convergence.uniform_space s Œ≤)

protected lemma uniform_continuous_restrict {s : set Œ±} (h : s ‚àà ùîñ) :
  @uniform_continuous _ _ (uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ)
  (uniform_convergence.uniform_space s Œ≤) s.restrict :=
begin
  change _ ‚â§ _,
  rw [uniform_convergence_on.uniform_space, map_le_iff_le_comap, uniformity, infi_uniformity],
  refine infi_le_of_le s _,
  rw infi_uniformity,
  exact infi_le _ h,
end

protected lemma uniform_space_antitone : antitone (uniform_convergence_on.uniform_space Œ± Œ≤) :=
Œª ùîñ‚ÇÅ ùîñ‚ÇÇ h‚ÇÅ‚ÇÇ, infi_le_infi_of_subset h‚ÇÅ‚ÇÇ

variables {Œ±}

def convergence_sets (u : uniform_space (Œ± ‚Üí Œ≤)) : bornology Œ± :=
bornology.of_bounded'
  {S | @uniform_continuous _ _ u (uniform_convergence.uniform_space _ _) (restrict S)}
  (@uniform_continuous_of_const _ _ u (uniform_convergence.uniform_space (‚àÖ : set Œ±) _)
    ((‚àÖ : set Œ±).restrict) (Œª a b, funext $ Œª x, x.2.elim))
  begin
    intros s‚ÇÅ h‚ÇÅ s‚ÇÇ h‚ÇÇ‚ÇÅ,
    change tendsto _ _ _,
    change tendsto _ _ _ at h‚ÇÅ,
    rw (uniform_convergence.has_basis_uniformity _ Œ≤).tendsto_right_iff at ‚ä¢ h‚ÇÅ,
    intros U hU,
    filter_upwards [h‚ÇÅ U hU] using Œª uv huv ‚ü®x, hx‚ü©, huv ‚ü®x, h‚ÇÇ‚ÇÅ hx‚ü©
  end
  begin
    intros s‚ÇÅ h‚ÇÅ s‚ÇÇ h‚ÇÇ,
    change tendsto _ _ _,
    change tendsto _ _ _ at h‚ÇÅ,
    change tendsto _ _ _ at h‚ÇÇ,
    rw (uniform_convergence.has_basis_uniformity _ Œ≤).tendsto_right_iff at ‚ä¢ h‚ÇÅ h‚ÇÇ,
    intros U hU,
    filter_upwards [h‚ÇÅ U hU, h‚ÇÇ U hU],
    rintros uv huv‚ÇÅ huv‚ÇÇ ‚ü®x, (hx|hx)‚ü©,
    { exact huv‚ÇÅ ‚ü®x, hx‚ü© },
    { exact huv‚ÇÇ ‚ü®x, hx‚ü© }
  end
  (Œª x, sorry)

lemma uniform_convergence_on_convergence_sets : uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ =
  uniform_convergence_on.uniform_space Œ± Œ≤
    {s | @is_bounded _ (convergence_sets Œ≤ $ uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ) s} :=
begin
  refine le_antisymm _ _, sorry, sorry
end

lemma uniform_space_eq_uniform_space_generated :
  uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ =
  uniform_convergence_on.uniform_space Œ± Œ≤ {s | @is_bounded _ (bornology.generate ùîñ) s} :=
begin
  refine le_antisymm _ (infi_le_infi_of_subset $ Œª s, is_bounded_generate),
  rw uniform_convergence_on_convergence_sets Œ≤ ùîñ,
  refine uniform_convergence_on.uniform_space_antitone _ _ _,
  change ‚àÄ s, @is_bounded _ _ s ‚Üí @is_bounded _ _ s,
  rw [‚Üê bornology.le_iff],
  refine bornology.generate_minimal (Œª s, _),
  rw is_bounded_of_bounded_iff,
  exact uniform_convergence_on.uniform_continuous_restrict Œ± Œ≤ ùîñ
end

end uniform_convergence_on
