/-
Copyright (c) 2022 Peter Nelson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Peter Nelson
-/
import order.bounded_order

/-!
# Involution lattices

This file concerns orders that admit an order-reversing involution. In the case of a lattice,
these are sometimes referred to as 'i-lattices' or 'lattices with involution'. Such an involution
is more general than a `boolean_algebra` complement, but retains many of its properties. Other than
a boolean algebra, an example is the subspace lattice of the vector space `ùïÇ‚Åø` for `ùïÇ` of nonzero
characteristic, where for each subspace `W` we have `compl W = {a ‚àà V | ‚àÄ w ‚àà W, w·µÄx = 0}`; this is
not a complement in the stronger sense because `compl W` can intersect `W`.

## Main declarations

* `involution_lattice`: Lattice with an antitone involution.

## Notation

* `x·∂ú` is notation for `compl x`

## TODO

Provide instances other than the one from `boolean_algebra`.
-/

namespace function
variables {Œ± Œ≤ : Type*} {f : Œ± ‚Üí Œ±} {g : Œ≤ ‚Üí Œ≤}

lemma involutive.prod_map (hf : involutive f) (hg : involutive g) : involutive (prod.map f g) :=
Œª a, by rw [prod.map_map, hf.comp_self, hg.comp_self, prod.map_id, id]

end function

section
variables {Œ± Œ≤ Œ≥ Œ¥ : Type*} [preorder Œ±] [preorder Œ≤] [preorder Œ≥] [preorder Œ¥]
  {f : Œ± ‚Üí Œ≥} {g : Œ≤ ‚Üí Œ¥} {a b : Œ±}

lemma monotone.imp (hf : monotone f) (h : a ‚â§ b) : f a ‚â§ f b := hf h
lemma antitone.imp (hf : antitone f) (h : a ‚â§ b) : f b ‚â§ f a := hf h
lemma strict_mono.imp (hf : strict_mono f) (h : a < b) : f a < f b := hf h
lemma strict_anti.imp (hf : strict_anti f) (h : a < b) : f b < f a := hf h

lemma monotone.prod_map (hf : monotone f) (hg : monotone g) : monotone (prod.map f g) :=
Œª a b h, ‚ü®hf h.1, hg h.2‚ü©

lemma antitone.prod_map (hf : antitone f) (hg : antitone g) : antitone (prod.map f g) :=
Œª a b h, ‚ü®hf h.1, hg h.2‚ü©

end

section
variables {Œ± Œ≤ Œ≥ Œ¥ : Type*} [partial_order Œ±] [partial_order Œ≤] [partial_order Œ≥] [partial_order Œ¥]
  {f : Œ± ‚Üí Œ≥} {g : Œ≤ ‚Üí Œ¥}

lemma strict_mono.prod_map (hf : strict_mono f) (hg : strict_mono g) : strict_mono (prod.map f g) :=
Œª a b, by { simp_rw prod.lt_iff,
  exact or.imp (and.imp hf.imp hg.monotone.imp) (and.imp hf.monotone.imp hg.imp) }

lemma strict_anti.prod_map (hf : strict_anti f) (hg : strict_anti g) : strict_anti (prod.map f g) :=
Œª a b, by { simp_rw prod.lt_iff,
  exact or.imp (and.imp hf.imp hg.antitone.imp) (and.imp hf.antitone.imp hg.imp) }

end

open function order_dual

variables {Œπ Œ± Œ≤ : Type*}

/-! ### Notation -/

/-- Syntax typeclass for lattice complement. -/
@[notation_class] class has_compl (Œ± : Type*) := (compl : Œ± ‚Üí Œ±)

export has_compl (compl) has_sdiff (sdiff)

postfix `·∂ú`:(max+1) := compl

namespace prod

instance [has_sdiff Œ±] [has_sdiff Œ≤] : has_sdiff (Œ± √ó Œ≤) := ‚ü®Œª a b, (a.1 \ b.1, a.2 \ b.2)‚ü©
instance [has_compl Œ±] [has_compl Œ≤] : has_compl (Œ± √ó Œ≤) := ‚ü®Œª a, (a.1·∂ú, a.2·∂ú)‚ü©

@[simp] lemma fst_sdiff [has_sdiff Œ±] [has_sdiff Œ≤] (a b : Œ± √ó Œ≤) : (a \ b).1 = a.1 \ b.1 := rfl
@[simp] lemma snd_sdiff [has_sdiff Œ±] [has_sdiff Œ≤] (a b : Œ± √ó Œ≤) : (a \ b).2 = a.2 \ b.2 := rfl
@[simp] lemma fst_compl [has_compl Œ±] [has_compl Œ≤] (a : Œ± √ó Œ≤) : a·∂ú.1 = a.1·∂ú := rfl
@[simp] lemma snd_compl [has_compl Œ±] [has_compl Œ≤] (a : Œ± √ó Œ≤) : a·∂ú.2 = a.2·∂ú := rfl

end prod

namespace pi
variables {œÄ : Œπ ‚Üí Type*}

instance [Œ† i, has_compl (œÄ i)] : has_compl (Œ† i, œÄ i) := ‚ü®Œª a i, (a i)·∂ú‚ü©
instance [Œ† i, has_sdiff (œÄ i)] : has_sdiff (Œ† i, œÄ i) := ‚ü®Œª a b i, a i \ b i‚ü©

lemma sdiff_def [Œ† i, has_sdiff (œÄ i)] (a b : Œ† i, œÄ i) : a \ b = Œª i, a i \ b i := rfl
lemma compl_def [Œ† i, has_compl (œÄ i)] (a : Œ† i, œÄ i) : a·∂ú = Œª i, (a i)·∂ú := rfl

@[simp] lemma sdiff_apply [Œ† i, has_sdiff (œÄ i)] (a b : Œ† i, œÄ i) (i : Œπ) : (a \ b) i = a i \ b i :=
rfl
@[simp] lemma compl_apply [Œ† i, has_compl (œÄ i)] (a : Œ† i, œÄ i) (i : Œπ) : a·∂ú i = (a i)·∂ú := rfl

end pi

/-- An antitone involution on a preorder -/
class involution_lattice (Œ± : Type*) extends lattice Œ±, has_compl Œ± :=
(compl_antitone' : antitone compl)
(compl_involutive' : involutive compl)

variables [involution_lattice Œ±] {a b : Œ±}

lemma compl_antitone : antitone (compl : Œ± ‚Üí Œ±) := involution_lattice.compl_antitone'
lemma compl_involutive : involutive (compl : Œ± ‚Üí Œ±) := involution_lattice.compl_involutive'
lemma compl_bijective : bijective (compl : Œ± ‚Üí Œ±) := compl_involutive.bijective
lemma compl_surjective : surjective (compl : Œ± ‚Üí Œ±) := compl_involutive.surjective
lemma compl_injective : injective (compl : Œ± ‚Üí Œ±) := compl_involutive.injective
lemma compl_comp_compl : compl ‚àò compl = @id Œ± := compl_involutive.comp_self
@[simp] lemma compl_inj : a·∂ú = b·∂ú ‚Üî a = b := compl_injective.eq_iff

@[simp] lemma compl_compl (a : Œ±) : a·∂ú·∂ú = a := compl_involutive _

lemma compl_eq_comm : a·∂ú = b ‚Üî b·∂ú = a := eq_comm.trans compl_involutive.eq_iff.symm
lemma eq_compl_comm : a = b·∂ú ‚Üî b = a·∂ú := compl_involutive.eq_iff.symm.trans eq_comm

lemma compl_le_compl (h : a ‚â§ b) : b·∂ú ‚â§ a·∂ú := compl_antitone h

lemma le_of_compl_le_compl (h : a·∂ú ‚â§ b·∂ú) : b ‚â§ a :=
by { rw [‚Üêcompl_compl a, ‚Üêcompl_compl b], exact compl_le_compl h }

lemma compl_le_compl_iff : a·∂ú ‚â§ b·∂ú ‚Üî b ‚â§ a := ‚ü®le_of_compl_le_compl, compl_le_compl‚ü©
lemma le_compl_iff_le_compl : a ‚â§ b·∂ú ‚Üî b ‚â§ a·∂ú := by rw [‚Üêcompl_le_compl_iff, compl_compl]
lemma compl_le_iff_compl_le : a·∂ú ‚â§ b ‚Üî b·∂ú ‚â§ a := by rw [‚Üêcompl_le_compl_iff, compl_compl]
lemma le_compl_of_le_compl : b ‚â§ a·∂ú ‚Üí a ‚â§ b·∂ú := le_compl_iff_le_compl.1
lemma compl_le_of_compl_le : b·∂ú ‚â§ a ‚Üí a·∂ú ‚â§ b := compl_le_iff_compl_le.1

lemma compl_lt_compl_iff : a·∂ú < b·∂ú ‚Üî b < a :=
lt_iff_lt_of_le_iff_le' compl_le_compl_iff compl_le_compl_iff
lemma lt_compl_iff_lt_compl : a < b·∂ú ‚Üî b < a·∂ú := by rw [‚Üêcompl_lt_compl_iff, compl_compl]
lemma compl_lt_iff_compl_lt : a·∂ú < b ‚Üî b·∂ú < a := by rw [‚Üêcompl_lt_compl_iff, compl_compl]

/-- Taking the involution as an order isomorphism to the order dual. -/
@[simps] def order_iso.compl (Œ± : Type*) [involution_lattice Œ±] : Œ± ‚âÉo Œ±·µí·µà :=
{ to_fun := to_dual ‚àò compl,
  inv_fun := compl ‚àò of_dual,
  left_inv := compl_compl,
  right_inv := compl_compl,
  map_rel_iff' := Œª _ _, compl_le_compl_iff }

lemma compl_strict_anti : strict_anti (compl : Œ± ‚Üí Œ±) := (order_iso.compl Œ±).strict_mono

@[simp] lemma compl_sup (a b : Œ±) : (a ‚äî b)·∂ú = a·∂ú ‚äì b·∂ú := (order_iso.compl Œ±).map_sup _ _
@[simp] lemma compl_inf (a b : Œ±) : (a ‚äì b)·∂ú = a·∂ú ‚äî b·∂ú := (order_iso.compl Œ±).map_inf _ _

section bounded_order
variables [bounded_order Œ±]

@[simp] lemma compl_top : (‚ä§ : Œ±)·∂ú = ‚ä• := (order_iso.compl Œ±).map_top
@[simp] lemma compl_bot : (‚ä• : Œ±)·∂ú = ‚ä§ := (order_iso.compl Œ±).map_bot
@[simp] lemma compl_eq_top : a·∂ú = ‚ä§ ‚Üî a = ‚ä• := by rw [‚Üêcompl_bot, compl_inj]
@[simp] lemma compl_eq_bot : a·∂ú = ‚ä• ‚Üî a = ‚ä§ := by rw [‚Üêcompl_top, compl_inj]

end bounded_order

instance : involution_lattice Œ±·µí·µà :=
{ compl := Œª a, to_dual (of_dual a)·∂ú,
  compl_antitone' := compl_antitone.dual,
  compl_involutive' := compl_involutive }

@[simp] lemma of_dual_compl (a : Œ±·µí·µà) : of_dual a·∂ú = (of_dual a)·∂ú := rfl
@[simp] lemma to_dual_compl (a : Œ±) : to_dual a·∂ú = (to_dual a)·∂ú := rfl

/-- Pullback an `involution_lattice` along an injection. -/
@[reducible] -- See note [reducible non-instances]
protected def function.injective.involution_lattice [has_sup Œ±] [has_inf Œ±] [has_bot Œ±]
  [has_compl Œ±] [involution_lattice Œ≤] (f : Œ± ‚Üí Œ≤) (hf : injective f)
  (map_sup : ‚àÄ a b, f (a ‚äî b) = f a ‚äî f b) (map_inf : ‚àÄ a b, f (a ‚äì b) = f a ‚äì f b)
  (map_compl : ‚àÄ a, f a·∂ú = (f a)·∂ú) :
  involution_lattice Œ± :=
{ compl := compl,
  compl_antitone' := Œª a b h, (map_compl _).trans_le $ (compl_antitone h).trans_eq
    (map_compl _).symm,
  compl_involutive' := Œª a, hf $ by rw [map_compl, map_compl, compl_compl],
  ..hf.lattice f map_sup map_inf }

instance [involution_lattice Œ≤] : involution_lattice (Œ± √ó Œ≤) :=
{ compl := compl,
  compl_antitone' := compl_antitone.prod_map compl_antitone,
  compl_involutive' := compl_involutive.prod_map compl_involutive }

instance {Œ± : Œπ ‚Üí Type*} [Œ† i, involution_lattice (Œ± i)] : involution_lattice (Œ† i, Œ± i) :=
{ le := (‚â§),
  compl := compl,
  compl_antitone' := Œª a b h i, compl_antitone (h i),
  compl_involutive' := Œª a, funext $ Œª i, compl_compl _ }

/-! ### Stuff to move to `data.set.intervals.basic` -/

section image

variables [involution_lattice Œ±] {s : set Œ±} {a b : Œ±}

open set order_dual

lemma image_compl_eq_preimage_compl : compl '' s = compl ‚Åª¬π' s :=
ext (Œª a, ‚ü®by {rintro ‚ü®x',hx',rfl‚ü©, rwa [‚Üêcompl_compl x'] at hx'}, Œª h, ‚ü®a·∂ú, ‚ü®h, compl_compl a‚ü©‚ü©‚ü©)

@[simp] lemma compl_compl_image : compl '' compl '' s = s := by { ext, simp }

lemma is_antichain.image_compl (hs : is_antichain (‚â§) s) : is_antichain (‚â§) (compl '' s) :=
(hs.image_embedding (order_iso.compl Œ±).to_order_embedding).flip

lemma is_antichain.preimage_compl (hs : is_antichain (‚â§) s) : is_antichain (‚â§) (compl ‚Åª¬π' s) :=
image_compl_eq_preimage_invo.subst hs.image_invo

@[simp] lemma preimage_compl_Iic : compl ‚Åª¬π' Iic a = Ici a·∂ú := ext $ Œª _, compl_le_iff_compl_le
@[simp] lemma preimage_compl_Ici : compl ‚Åª¬π' Ici a = Iic a·∂ú := ext $ Œª _, le_compl_iff_le_compl
@[simp] lemma preimage_compl_Iio : compl ‚Åª¬π' Iio a = Ioi a·∂ú := ext $ Œª _, compl_lt_iff_compl_lt
@[simp] lemma preimage_compl_Ioi : compl ‚Åª¬π' Ioi a = Iio a·∂ú := ext $ Œª _, lt_compl_iff_lt_compl

@[simp] lemma preimage_compl_Icc : compl ‚Åª¬π' Icc a b = Icc b·∂ú a·∂ú :=
by simp [‚ÜêIic_inter_Ici, inter_comm]

@[simp] lemma preimage_compl_Ico : compl ‚Åª¬π' Ico a b = Ioc b·∂ú a·∂ú :=
by simp [‚ÜêIio_inter_Ici, ‚ÜêIic_inter_Ioi, inter_comm]

@[simp] lemma preimage_compl_Ioc : compl ‚Åª¬π' Ioc a b = Ico b·∂ú a·∂ú :=
by simp [‚ÜêIio_inter_Ici, ‚ÜêIic_inter_Ioi, inter_comm]

@[simp] lemma preimage_compl_Ioo : compl ‚Åª¬π' Ioo a b = Ioo b·∂ú a·∂ú :=
by simp [‚ÜêIio_inter_Ioi, inter_comm]

@[simp] lemma image_compl_Iic : compl '' Iic a = Ici a·∂ú :=
by rw [image_compl_eq_preimage_invo, preimage_compl_Iic]

@[simp] lemma image_compl_Ici : compl '' Ici a = Iic a·∂ú :=
by rw [image_compl_eq_preimage_invo, preimage_compl_Ici]

@[simp] lemma image_compl_Iio : compl '' Iio a = Ioi a·∂ú :=
by rw [image_compl_eq_preimage_invo, preimage_compl_Iio]

@[simp] lemma image_compl_Ioi : compl '' Ioi a = Iio a·∂ú :=
by rw [image_compl_eq_preimage_invo, preimage_compl_Ioi]

@[simp] lemma image_compl_Icc : compl '' Icc a b = Icc b·∂ú a·∂ú :=
by rw [image_compl_eq_preimage_invo, preimage_compl_Icc]

@[simp] lemma image_compl_Ioo : compl '' Ioo a b = Ioo b·∂ú a·∂ú :=
by rw [image_compl_eq_preimage_invo, preimage_compl_Ioo]

@[simp] lemma image_compl_Ioc : compl '' Ioc a b = Ico b·∂ú a·∂ú :=
by rw [image_compl_eq_preimage_invo, preimage_compl_Ioc]

@[simp] lemma image_compl_Ico : compl '' Ico a b = Ioc b·∂ú a·∂ú :=
by rw [image_compl_eq_preimage_invo, preimage_compl_Ico]

end image
