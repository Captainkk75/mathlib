import algebra.homology.homological_complex
import category_theory.abelian.basic
import algebra.homology.shift
import category_theory.triangulated.basic
import algebra.homology.homotopy_category
import algebra.homology.additive

noncomputable theory

universes v u

open_locale classical

open category_theory category_theory.limits

namespace homological_complex

variables {V : Type u} [category.{v} V] [abelian V]
variables (A B : cochain_complex V ‚Ñ§) (f : A ‚ü∂ B)

@[simp, reassoc]
lemma homotopy.comp_X_eq_to_iso {X Y : cochain_complex V ‚Ñ§} {f g : X ‚ü∂ Y} (h : homotopy f g)
  (i : ‚Ñ§) {j k : ‚Ñ§} (e : j = k) : h.hom i j ‚â´ (Y.X_eq_to_iso e).hom = h.hom i k :=
by { subst e, simp }

@[simp, reassoc]
lemma homotopy.X_eq_to_iso_comp {X Y : cochain_complex V ‚Ñ§} {f g : X ‚ü∂ Y} (h : homotopy f g)
  {i j : ‚Ñ§} (e : i = j) (k : ‚Ñ§) : (X.X_eq_to_iso e).hom ‚â´ h.hom j k = h.hom i k :=
by { subst e, simp }


def cone.X : ‚Ñ§ ‚Üí V := Œª i, A.X (i + 1) ‚äû B.X i

variables {A B}

def cone.d : Œ† (i j : ‚Ñ§), cone.X A B i ‚ü∂ cone.X A B j :=
Œª i j, if hij : i + 1 = j then biprod.lift
  (biprod.desc (-A.d _ _)                         0        )
  (biprod.desc (f.f _ ‚â´ (B.X_eq_to_iso hij).hom) (B.d _ _))
else 0

/-- The mapping cone of a morphism `f : A ‚Üí B` of homological complexes. -/
def cone : cochain_complex V ‚Ñ§ :=
{ X := cone.X A B,
  d := cone.d f,
  shape' := Œª i j hij, dif_neg hij,
  d_comp_d' := Œª i j k (hij : _ = _) (hjk : _ = _),
  begin
    substs hij hjk,
    ext; simp [cone.d],
  end }
.

@[simp]
lemma cone_X (i : ‚Ñ§) : (cone f).X i = (A.X (i + 1) ‚äû B.X i) := rfl

@[simp]
lemma cone_d : (cone f).d = cone.d f := rfl

def cone.in : B ‚ü∂ cone f :=
{ f := Œª i, biprod.inr,
  comm' := Œª i j hij,
  begin
    dsimp [cone_d, cone.d], dsimp at hij, rw [dif_pos hij],
    ext;
    simp only [comp_zero, category.assoc, category.comp_id,
      biprod.inr_desc, biprod.inr_fst, biprod.lift_fst, biprod.inr_snd, biprod.lift_snd],
  end }
.
local attribute [instance] endofunctor_monoidal_category discrete.add_monoidal

def cone.out : cone f ‚ü∂ A‚ü¶(1 : ‚Ñ§)‚üß :=
{ f := Œª i, biprod.fst,
  comm' := Œª i j (hij : _ = _),
  begin
    subst hij,
    dsimp [cone_d, cone.d],
    ext; simp,
  end }

@[simps]
def cone.triangle : triangulated.triangle (cochain_complex V ‚Ñ§) :=
{ obj‚ÇÅ := A,
  obj‚ÇÇ := B,
  obj‚ÇÉ := cone f,
  mor‚ÇÅ := f,
  mor‚ÇÇ := cone.in f,
  mor‚ÇÉ := cone.out f }

@[simps]
def cone.triangle‚Çï : triangulated.triangle (homotopy_category V (complex_shape.up ‚Ñ§)) :=
{ obj‚ÇÅ := ‚ü®A‚ü©,
  obj‚ÇÇ := ‚ü®B‚ü©,
  obj‚ÇÉ := ‚ü®cone f‚ü©,
  mor‚ÇÅ := (homotopy_category.quotient _ _).map f,
  mor‚ÇÇ := (homotopy_category.quotient _ _).map $ cone.in f,
  mor‚ÇÉ := (homotopy_category.quotient _ _).map $ cone.out f }

variables {f} {A' B' : cochain_complex V ‚Ñ§} {f' : A' ‚ü∂ B'} {i‚ÇÅ : A ‚ü∂ A'} {i‚ÇÇ : B ‚ü∂ B'}
variables (comm : homotopy (f ‚â´ i‚ÇÇ) (i‚ÇÅ ‚â´ f'))

include comm

def cone.map : cone f ‚ü∂ cone f' :=
{ f := Œª i, biprod.lift
  (biprod.desc (i‚ÇÅ.f _) 0)
  (biprod.desc (comm.hom _ _) (i‚ÇÇ.f _)),
  comm' := Œª i j r,
  begin
    change i+1 = j at r,
    dsimp [cone_d, cone.d],
    simp_rw dif_pos r,
    ext,
    { simp },
    { simp only [biprod.lift_desc, X_eq_to_iso_f, biprod.lift_snd, preadditive.comp_add,
        biprod.inl_desc_assoc, category.assoc, preadditive.neg_comp],
      have := comm.comm (i+1),
      dsimp at this,
      rw [reassoc_of this],
      subst r,
      simp only [category.comp_id, ‚Üê add_assoc, category.assoc,
        X_eq_to_iso_refl, preadditive.add_comp],
      simpa [d_next, prev_d] using add_comm _ _ },
    { simp },
    { simp }
  end }

@[simp, reassoc]
lemma cone.in_map : cone.in f ‚â´ cone.map comm = i‚ÇÇ ‚â´ cone.in f' :=
by ext; { dsimp [cone.map, cone.in], simp }
.
@[simp, reassoc]
lemma cone.map_out : cone.map comm ‚â´ cone.out f' = cone.out f ‚â´ i‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß' :=
by ext; { dsimp [cone.map, cone.out], simp }
.

omit comm

lemma biprod.sub_lift {C : Type*} [category C] [abelian C] {X Y Z : C}
  (f f' : X ‚ü∂ Y) (g g' : X ‚ü∂ Z) :
    biprod.lift f g - biprod.lift f' g' = biprod.lift (f - f') (g - g') := by ext; simp

lemma biprod.sub_desc {C : Type*} [category C] [abelian C] {X Y Z : C}
  (f f' : X ‚ü∂ Z) (g g' : Y ‚ü∂ Z) :
    biprod.desc f g - biprod.desc f' g' = biprod.desc (f - f') (g - g') := by ext; simp

-- This times out if they are combined in one proof
namespace cone.map_homotopy_of_homotopy
variables {i‚ÇÅ' : A ‚ü∂ A'} {i‚ÇÇ' : B ‚ü∂ B'} (h‚ÇÅ : homotopy i‚ÇÅ i‚ÇÅ') (h‚ÇÇ : homotopy i‚ÇÇ i‚ÇÇ') (i : ‚Ñ§)

lemma aux1 : biprod.inl ‚â´ (cone.map ((h‚ÇÇ.comp_left f).symm.trans
  (comm.trans (h‚ÇÅ.comp_right f')))).f i ‚â´ biprod.fst =
  biprod.inl ‚â´ (cone.d f i (i + 1) ‚â´ biprod.map (h‚ÇÅ.hom (i + 1 + 1) (i + 1)) (-h‚ÇÇ.hom (i + 1) i) +
    biprod.map (h‚ÇÅ.hom (i + 1) (i - 1 + 1)) (-h‚ÇÇ.hom i (i - 1)) ‚â´ cone.d f' (i - 1) i +
    (cone.map comm).f i) ‚â´ biprod.fst :=
begin
  suffices : h‚ÇÅ.hom (i + 1) i ‚â´ A'.d i (i + 1) =
    h‚ÇÅ.hom (i + 1) (i - 1 + 1) ‚â´ A'.d (i - 1 + 1) (i + 1),
  { simpa [cone.d, cone_d, cone.map, h‚ÇÅ.comm, d_next, prev_d,
      ‚Üê add_assoc, ‚Üê sub_eq_neg_add, sub_eq_zero] },
  congr; ring
end
.
lemma aux2 : biprod.inl ‚â´ (cone.map ((h‚ÇÇ.comp_left f).symm.trans
  (comm.trans (h‚ÇÅ.comp_right f')))).f i ‚â´ biprod.snd =
  biprod.inl ‚â´ (cone.d f i (i + 1) ‚â´ biprod.map (h‚ÇÅ.hom (i + 1 + 1) (i + 1)) (-h‚ÇÇ.hom (i + 1) i) +
    biprod.map (h‚ÇÅ.hom (i + 1) (i - 1 + 1)) (-h‚ÇÇ.hom i (i - 1)) ‚â´ cone.d f' (i - 1) i +
    (cone.map comm).f i) ‚â´ biprod.snd :=
begin
  suffices : comm.hom (i + 1) i + h‚ÇÅ.hom (i + 1) i ‚â´ f'.f i = h‚ÇÅ.hom (i + 1) (i - 1 + 1) ‚â´
    f'.f (i - 1 + 1) ‚â´ (X_eq_to_iso B' (sub_add_cancel _ _)).hom + comm.hom (i + 1) i,
  { simpa [cone.d, cone_d, cone.map, d_next, prev_d, add_assoc] },
  rw [‚Üê X_eq_to_iso_f, homotopy.comp_X_eq_to_iso_assoc],
  exact add_comm _ _
end
.
lemma aux3 : biprod.inr ‚â´ (cone.map ((h‚ÇÇ.comp_left f).symm.trans
  (comm.trans (h‚ÇÅ.comp_right f')))).f i ‚â´ biprod.fst =
  biprod.inr ‚â´ (cone.d f i (i + 1) ‚â´ biprod.map (h‚ÇÅ.hom (i + 1 + 1) (i + 1)) (-h‚ÇÇ.hom (i + 1) i) +
    biprod.map (h‚ÇÅ.hom (i + 1) (i - 1 + 1)) (-h‚ÇÇ.hom i (i - 1)) ‚â´ cone.d f' (i - 1) i +
    (cone.map comm).f i) ‚â´ biprod.fst :=
by { simp [cone.d, cone_d, cone.map, d_next, prev_d] }
.
lemma aux4 : biprod.inr ‚â´ (cone.map ((h‚ÇÇ.comp_left f).symm.trans
  (comm.trans (h‚ÇÅ.comp_right f')))).f i ‚â´ biprod.snd =
  biprod.inr ‚â´ (cone.d f i (i + 1) ‚â´ biprod.map (h‚ÇÅ.hom (i + 1 + 1) (i + 1)) (-h‚ÇÇ.hom (i + 1) i) +
    biprod.map (h‚ÇÅ.hom (i + 1) (i - 1 + 1)) (-h‚ÇÇ.hom i (i - 1)) ‚â´ cone.d f' (i - 1) i +
    (cone.map comm).f i) ‚â´ biprod.snd :=
by { simp [cone.d, cone_d, cone.map, d_next, prev_d, h‚ÇÇ.comm, ‚Üê add_assoc] }
.
lemma aux : (cone.map ((h‚ÇÇ.comp_left f).symm.trans (comm.trans (h‚ÇÅ.comp_right f')))).f i =
  cone.d f i (i + 1) ‚â´ biprod.map (h‚ÇÅ.hom (i + 1 + 1) (i + 1)) (-h‚ÇÇ.hom (i + 1) i) +
  biprod.map (h‚ÇÅ.hom (i + 1) (i - 1 + 1)) (-h‚ÇÇ.hom i (i - 1)) ‚â´ cone.d f' (i - 1) i +
    (cone.map comm).f i :=
by { ext; simp_rw category.assoc, apply aux1, apply aux2, apply aux3, apply aux4 }

end cone.map_homotopy_of_homotopy

def cone.map_homotopy_of_homotopy {i‚ÇÅ' i‚ÇÇ'} (h‚ÇÅ : homotopy i‚ÇÅ i‚ÇÅ') (h‚ÇÇ : homotopy i‚ÇÇ i‚ÇÇ') :
  homotopy (cone.map ((h‚ÇÇ.comp_left f).symm.trans $ comm.trans (h‚ÇÅ.comp_right f')))
    (cone.map comm) :=
{ hom := Œª i j, biprod.map (h‚ÇÅ.hom _ _) (-h‚ÇÇ.hom _ _),
  comm := Œª i, by { simpa [d_next, prev_d] using cone.map_homotopy_of_homotopy.aux comm h‚ÇÅ h‚ÇÇ i },
  zero' := by { introv r, have r' : ¬¨j + 1 + 1 = i + 1, { simpa using r },
    ext; simp [h‚ÇÅ.zero _ _ r', h‚ÇÇ.zero _ _ r] } }

-- I suppose this is not true?
def cone.map_homotopy_of_homotopy' (comm' : homotopy (f ‚â´ i‚ÇÇ) (i‚ÇÅ ‚â´ f')) :
  homotopy (cone.map comm) (cone.map comm') := sorry

@[simps]
def cone.triangle‚Çï_map : cone.triangle‚Çï f ‚ü∂ cone.triangle‚Çï f' :=
{ hom‚ÇÅ := (homotopy_category.quotient _ _).map i‚ÇÅ,
  hom‚ÇÇ := (homotopy_category.quotient _ _).map i‚ÇÇ,
  hom‚ÇÉ := (homotopy_category.quotient _ _).map $ cone.map comm,
  comm‚ÇÅ' := by { dsimp [cone.triangle‚Çï], simp_rw ‚Üê functor.map_comp,
    exact homotopy_category.eq_of_homotopy _ _ comm },
  comm‚ÇÇ' := by { dsimp [cone.triangle‚Çï], simp_rw ‚Üê functor.map_comp, simp },
  comm‚ÇÉ' := by { dsimp [cone.triangle‚Çï], simp_rw ‚Üê functor.map_comp, simp } }
.

@[simps]
def cone.triangle_map (h : f ‚â´ i‚ÇÇ = i‚ÇÅ ‚â´ f') : cone.triangle f ‚ü∂ cone.triangle f' :=
{ hom‚ÇÅ := i‚ÇÅ,
  hom‚ÇÇ := i‚ÇÇ,
  hom‚ÇÉ := cone.map (homotopy.of_eq h),
  comm‚ÇÅ' := by simpa [cone.triangle],
  comm‚ÇÇ' := by { dsimp [cone.triangle], simp },
  comm‚ÇÉ' := by { dsimp [cone.triangle], simp } }
.
@[simp]
lemma cone.map_id (f : A ‚ü∂ B) :
  cone.map (homotopy.of_eq $ (category.comp_id f).trans (category.id_comp f).symm) = ùüô _ :=
by { ext; dsimp [cone.map, cone, cone.X]; simp }
.
@[simp]
lemma cone.triangle_map_id (f : A ‚ü∂ B) :
  cone.triangle_map ((category.comp_id f).trans (category.id_comp f).symm) = ùüô _ :=
by { ext; dsimp [cone.map, cone, cone.X]; simp }
.

def cone.triangle_functorial :
  arrow (cochain_complex V ‚Ñ§) ‚•§ triangulated.triangle (cochain_complex V ‚Ñ§) :=
{ obj := Œª f, cone.triangle f.hom,
  map := Œª f g c, cone.triangle_map c.w.symm,
  map_id' := Œª X, cone.triangle_map_id _,
  map_comp' := Œª X Y Z f g, by { ext; dsimp [cone.map, cone, cone.X]; simp } }
.

-- I suppose this is also not true?
def cone.triangle‚Çï_functorial :
  arrow (homotopy_category V (complex_shape.up ‚Ñ§)) ‚•§
    triangulated.triangle (homotopy_category V (complex_shape.up ‚Ñ§)) :=
{ obj := Œª f, cone.triangle‚Çï f.hom.out,
  map := Œª f g c, @cone.triangle‚Çï_map _ _ _ _ _ _ _ _ _ c.left.out c.right.out
  begin
    refine homotopy_category.homotopy_of_eq _ _ _,
    simpa [-arrow.w] using c.w.symm
  end,
  map_id' := sorry,
  map_comp' := sorry }
.
variables {C : cochain_complex V ‚Ñ§} (g : B ‚ü∂ C)

instance : preadditive (cochain_complex V ‚Ñ§) := {}

def cone.desc_of_null_homotopic (h : homotopy (f ‚â´ g) 0) : cone f ‚ü∂ C :=
{ f := Œª i, by { have := h.trans (homotopy.of_eq (show (0 : A ‚ü∂ C) = (0 : A ‚ü∂ 0) ‚â´ 0, by { })), }

}


end homological_complex
