/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import topology.instances.real
import data.set.intervals.monotone

/-!
-/

open set filter topological_space
open_locale topological_space filter
noncomputable theory

@[derive [conditionally_complete_linear_order, linear_ordered_field, archimedean]]
def sorgenfrey_line : Type := ‚Ñù

notation `‚Ñù‚Çó` := sorgenfrey_line

namespace sorgenfrey_line

def to_real : ‚Ñù‚Çó ‚âÉ+* ‚Ñù := ring_equiv.refl ‚Ñù

instance : topological_space ‚Ñù‚Çó :=
topological_space.generate_from {s : set ‚Ñù‚Çó | ‚àÉ a b : ‚Ñù‚Çó, Ico a b = s}

lemma is_open_Ico (a b : ‚Ñù‚Çó) : is_open (Ico a b) :=
topological_space.generate_open.basic _ ‚ü®a, b, rfl‚ü©

lemma is_open_Ici (a : ‚Ñù‚Çó) : is_open (Ici a) :=
begin
  have : (‚ãÉ b, Ico a b) = Ici a,
  { simp only [‚Üê Ici_inter_Iio, ‚Üê inter_Union, inter_eq_left_iff_subset],
    exact Œª b hb, mem_Union.2 (exists_gt b) },
  rw ‚Üê this,
  exact is_open_Union (is_open_Ico a)
end

lemma nhds_basis_Ico (a : ‚Ñù‚Çó) : (ùìù a).has_basis ((<) a) (Ico a) :=
begin
  rw topological_space.nhds_generate_from,
  haveI : nonempty {x // x ‚â§ a} := set.nonempty_Iic_subtype,
  have : (‚®Ö (x : {i // i ‚â§ a}), ùìü (Ici ‚Üëx)) = ùìü (Ici a),
  { refine (is_least.is_glb _).infi_eq,
    exact ‚ü®‚ü®‚ü®a, le_rfl‚ü©, rfl‚ü©, forall_range_iff.2 $
      Œª b, principal_mono.2 $ Ici_subset_Ici.2 b.2‚ü©, },
  simp only [mem_set_of_eq, infi_and, infi_exists, @infi_comm _ (_ ‚àà _),
    @infi_comm _ (set ‚Ñù‚Çó), infi_infi_eq_right],
  simp_rw [@infi_comm _ ‚Ñù‚Çó (_ ‚â§ _), infi_subtype', ‚Üê Ici_inter_Iio, ‚Üê inf_principal, ‚Üê inf_infi,
    ‚Üê infi_inf, this, infi_subtype],
  suffices : (‚®Ö x ‚àà Ioi a, ùìü (Iio x)).has_basis ((<) a) Iio, from this.principal_inf _,
  refine has_basis_binfi_principal _ nonempty_Ioi,
  exact directed_on_iff_directed.2 (directed_of_inf $ Œª x y hxy, Iio_subset_Iio hxy),
end

lemma nhds_basis_Ico_rat (a : ‚Ñù‚Çó) :
  (ùìù a).has_countable_basis (Œª r : ‚Ñö, a < r) (Œª r, Ico a r) :=
begin
  refine ‚ü®(nhds_basis_Ico a).to_has_basis (Œª b hb, _) (Œª r hr, ‚ü®_, hr, subset.rfl‚ü©),
    countable_encodable _‚ü©,
  rcases exists_rat_btwn hb with ‚ü®r, har, hrb‚ü©,
  exact ‚ü®r, har, Ico_subset_Ico_right hrb.le‚ü©
end

@[simp] lemma map_to_real_nhds (a : ‚Ñù‚Çó) : map to_real (ùìù a) = ùìù[‚â•] (to_real a) :=
begin
  refine ((nhds_basis_Ico a).map _).eq_of_same_basis _,
  simpa only [to_real.image_eq_preimage] using nhds_within_Ici_basis_Ico (to_real a)
end

@[continuity] lemma continuous_to_real : continuous to_real :=
continuous_iff_continuous_at.2 $ Œª x,
  by { rw [continuous_at, tendsto, map_to_real_nhds], exact inf_le_left }

instance : order_closed_topology ‚Ñù‚Çó :=
‚ü®is_closed_le_prod.preimage (continuous_to_real.prod_map continuous_to_real)‚ü©

lemma is_clopen_Ici (a : ‚Ñù‚Çó) : is_clopen (Ici a) := ‚ü®is_open_Ici a, is_closed_Ici‚ü©

lemma is_clopen_Iio (a : ‚Ñù‚Çó) : is_clopen (Iio a) :=
by simpa only [compl_Ici] using (is_clopen_Ici a).compl

lemma is_clopen_Ico (a b : ‚Ñù‚Çó) : is_clopen (Ico a b) :=
(is_clopen_Ici a).inter (is_clopen_Iio b)

lemma exists_Ico_disjoint_closed {a : ‚Ñù‚Çó} {s : set ‚Ñù‚Çó} (hs : is_closed s) (ha : a ‚àâ s) :
  ‚àÉ b > a, disjoint (Ico a b) s :=
by simpa only [disjoint_left]
  using (nhds_basis_Ico a).mem_iff.1 (hs.is_open_compl.mem_nhds ha)

instance : totally_disconnected_space ‚Ñù‚Çó :=
begin
  refine ‚ü®Œª s hs' hs x hx y hy, _‚ü©, clear hs',
  by_contra' hne : x ‚â† y, wlog hlt : x < y := hne.lt_or_lt using [x y, y x],
  exact hlt.not_le (hs.subset_clopen (is_clopen_Ici y) ‚ü®y, hy, le_rfl‚ü© hx)
end

instance : first_countable_topology ‚Ñù‚Çó := ‚ü®Œª x, (nhds_basis_Ico_rat x).is_countably_generated‚ü©

instance : normal_space ‚Ñù‚Çó :=
begin
  refine ‚ü®Œª s t hs ht hd, _‚ü©,
  choose! X hX hXd using Œª x (hx : x ‚àà s), exists_Ico_disjoint_closed ht (disjoint_left.1 hd hx),
  choose! Y hY hYd using Œª y (hy : y ‚àà t), exists_Ico_disjoint_closed hs (disjoint_right.1 hd hy),
  refine ‚ü®‚ãÉ x ‚àà s, Ico x (X x), ‚ãÉ y ‚àà t, Ico y (Y y), is_open_bUnion $ Œª _ _, is_open_Ico _ _,
    is_open_bUnion $ Œª _ _, is_open_Ico _ _, _, _, _‚ü©,
  { exact Œª x hx, mem_Union‚ÇÇ.2 ‚ü®x, hx, left_mem_Ico.2 $ hX x hx‚ü© },
  { exact Œª y hy, mem_Union‚ÇÇ.2 ‚ü®y, hy, left_mem_Ico.2 $ hY y hy‚ü© },
  { simp only [disjoint_Union_left, disjoint_Union_right, Ico_disjoint_Ico],
    intros y hy x hx,
    clear hs ht hX hY,
    wlog : x ‚â§ y := le_total x y using [x y s t X Y, y x t s Y X] tactic.skip,
    {  }
 }
end

end sorgenfrey_line
