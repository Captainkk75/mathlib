import measure_theory.group.measure measure_theory.measure.lebesgue topology.basic
import analysis.normed_space.pointwise measure_theory.measure.haar
import measure_theory.measure.haar_lebesgue



open add_monoid_hom measure_theory measure_theory.measure metric nnreal set
open_locale pointwise topological_space

/-!
# Cauchy's Functional Equation
-/

theorem cauchy_rational_add (f : ‚Ñù ‚Üí+ ‚Ñù) :
  is_linear_map ‚Ñö f := by exact ‚ü®map_add f, Œª c x, add_monoid_hom.map_rat_cast_smul f ‚Ñù ‚Ñù c x‚ü©

-- should this one get generalised?
lemma exists_real_preimage_ball_pos_volume (f : ‚Ñù ‚Üí ‚Ñù) :
  ‚àÉ (r z : ‚Ñù), 0 < volume (f‚Åª¬π' (ball z r)) :=
begin
  have : measure_space.volume (f‚Åª¬π' set.univ) = ‚ä§,
  { simp only [set.preimage_univ, real.volume_univ] },
  by_contra hf,
  push_neg at hf,
  simp only [nonpos_iff_eq_zero] at hf,
  have hrat : (‚ãÉ (q : ‚Ñö), ball (0 : ‚Ñù) q) = set.univ,
  { ext,
    split,
    { simp only [set.mem_univ, implies_true_iff]},
    { intro hx,
      simp only [set.mem_Union, mem_ball_zero_iff],
      exact exists_rat_gt _}},
  simp only [‚Üêhrat, preimage_Union] at this,
  have htop : ‚ä§ ‚â§ ‚àë' (i : ‚Ñö), measure_space.volume ((Œª (q : ‚Ñö), f ‚Åª¬π' ball 0 ‚Üëq) i),
  { rw ‚Üê this,
    apply measure_Union_le (Œª q : ‚Ñö, f‚Åª¬π' (ball (0 : ‚Ñù) q)) },
  simp only [hf, tsum_zero, nonpos_iff_eq_zero, ennreal.top_ne_zero] at htop,
  exact htop
end

lemma exists_zero_nbhd_bounded (f : ‚Ñù ‚Üí+ ‚Ñù)
  (h : @measurable ‚Ñù ‚Ñù (real.measurable_space) (borel ‚Ñù) f) :
  ‚àÉ (U : set ‚Ñù), U ‚àà nhds (0 : ‚Ñù) ‚àß metric.bounded (f '' U) :=
begin
  rcases (exists_real_preimage_ball_pos_volume f) with ‚ü®r, z, hr‚ü©,
  have hrm : measurable_set (f‚Åª¬π' (ball z r)),
  { apply h,
    exact measurable_set_ball },
  rcases (steinhaus_theorem_add volume (f‚Åª¬π' (ball z r)) hrm hr) with ‚ü®U, hU0, hUr‚ü©,
  refine ‚ü®U, hU0, _‚ü©,
  { rw (metric.bounded_iff_subset_ball (0 : ‚Ñù)),
    use 2 * r,
    simp only [image_subset_iff],
    convert subset.trans hUr _,
    intros x hx,
    rw mem_sub at hx,
    rcases hx with ‚ü®a, b, ha, hb, habx‚ü©,
    rw [mem_preimage, mem_ball_iff_norm] at ha,
    rw [mem_preimage, mem_ball_iff_norm'] at hb,
    simp only [mem_preimage, mem_closed_ball_zero_iff, ‚Üê habx],
    calc ‚à•f (a - b)‚à• ‚â§ ‚à• f a - f b ‚à• : by simp only [map_sub]
    ... = ‚à• (f a - z) + (z - f b) ‚à• : by abel
    ... ‚â§ ‚à• f a - z ‚à• + ‚à• z - f b ‚à•  : norm_add_le (f a - z) (z - f b)
    ... ‚â§ 2 * r : by linarith }
end

lemma additive_continuous_at_zero_of_bounded_nbhd_zero (f : ‚Ñù ‚Üí+ ‚Ñù) {U : set ‚Ñù}
  (hU : U ‚àà nhds (0 : ‚Ñù)) (hbounded : metric.bounded (f '' U)) : continuous_at f 0 :=
begin
  rcases (metric.mem_nhds_iff.mp hU) with ‚ü®Œ¥, hŒ¥, hUŒµ‚ü©,
  rcases ((metric.bounded_iff_subset_ball (0 : ‚Ñù)).mp
    (metric.bounded.mono (image_subset f hUŒµ) hbounded)) with ‚ü®C, hC‚ü©,
  rw continuous_at_iff,
  intros Œµ hŒµ,
  simp only [gt_iff_lt, dist_zero_right, _root_.map_zero, exists_prop],
  cases (exists_nat_gt (C / Œµ)) with n hn,
  obtain hC0 | rfl | hC0 := lt_trichotomy C 0,
  { simp only [closed_ball_eq_empty.mpr hC0, image_subset_iff, preimage_empty] at hC,
    rw [subset_empty_iff, ball_eq_empty] at hC,
    linarith },
  { simp only [closed_ball_zero] at hC,
    refine ‚ü®Œ¥, hŒ¥, Œª x hxŒ¥, _‚ü©,
    replace hxŒ¥ : f x ‚àà f '' (ball 0 Œ¥),
    { simp only [mem_image, mem_ball_zero_iff],
        refine ‚ü®x, hxŒ¥, rfl‚ü©},
    replace hxŒ¥ := mem_of_subset_of_mem hC hxŒ¥,
    suffices : f x = 0,
    { simp only [this, norm_zero],
      exact hŒµ },
    { simp only [‚Üê mem_singleton_iff, hxŒ¥] }},
  { use Œ¥/n,
    split,
    { apply div_pos hŒ¥ (lt_trans (div_pos hC0 hŒµ) hn) },
    { intros x hxŒ¥,
      have h2 : f (n ‚Ä¢ x) = n ‚Ä¢ f x, { exact map_nsmul f x n },
      have hnpos : 0 < (n : ‚Ñù) := (lt_trans (div_pos hC0 hŒµ) hn),
      simp only [nsmul_eq_mul] at h2,
      simp only [mul_comm, ‚Üê div_eq_iff (ne.symm (ne_of_lt hnpos))] at h2,
      rw ‚Üê h2,
      replace hxŒ¥ : ‚à• x * n ‚à• < Œ¥,
      { simp only [norm_mul, real.norm_coe_nat, ‚Üê lt_div_iff hnpos, hxŒ¥], },
      norm_num,
      replace hxŒ¥ : f (x * n) ‚àà f '' (ball 0 Œ¥),
      { simp only [mem_image, mem_ball_zero_iff],
        refine ‚ü®x * n, hxŒ¥, rfl‚ü© },
      rw [div_lt_iff hnpos, ‚Üê mem_ball_zero_iff],
      apply mem_of_subset_of_mem (subset.trans hC _) hxŒ¥,
      apply closed_ball_subset_ball,
      rw (div_lt_iff hŒµ) at hn,
      simpa [mul_comm] using hn }}
end

lemma additive_continuous_at_zero (f : ‚Ñù ‚Üí+ ‚Ñù)
  (h : @measurable ‚Ñù ‚Ñù (real.measurable_space) (borel ‚Ñù) f) : continuous_at f 0 :=
begin
  rcases (exists_zero_nbhd_bounded f h) with ‚ü®U, hU, hbounded‚ü©,
  exact additive_continuous_at_zero_of_bounded_nbhd_zero f hU hbounded
end

lemma continuous_of_measurable (Œº : measure ‚Ñù) [is_add_haar_measure Œº] (f : ‚Ñù ‚Üí+ ‚Ñù)
  (h : @measurable ‚Ñù ‚Ñù (borel ‚Ñù) (borel ‚Ñù) f) : continuous f :=
  by exact uniform_continuous.continuous
    (uniform_continuous_of_continuous_at_zero f (additive_continuous_at_zero f h))


lemma real_eq_forall_pos_lt {a b : ‚Ñù} : (‚àÄ (Œµ : ‚Ñù), 0 < Œµ ‚Üí ‚à• a - b ‚à• < Œµ) ‚Üí a = b :=
begin
  intro h,
  contrapose h,
  push_neg,
  use ‚à• a - b ‚à• / 2,
  split,
  { rw lt_div_iff (show 0 < (2 : ‚Ñù), by norm_num),
    norm_num [sub_eq_zero, h] },
  { rw div_le_iff (show 0 < (2 : ‚Ñù), by norm_num),
    simp only [mul_two, le_add_iff_nonneg_left, norm_nonneg] }
end

lemma is_linear_rat (f : ‚Ñù ‚Üí+ ‚Ñù) : ‚àÄ (q : ‚Ñö), f q = f 1 * q :=
begin
  intro q,
  suffices h1 : f ((q : ‚Ñù) ‚Ä¢ 1) = (q : ‚Ñù) ‚Ä¢ f 1,
  { convert h1 using 1,
    { simp only [algebra.id.smul_eq_mul, mul_one], },
    { simp only [mul_comm, algebra.id.smul_eq_mul] }},
  { rw map_rat_cast_smul f ‚Ñù ‚Ñù q 1 }
end

lemma additive_is_bounded_of_bounded_on_interval (f : ‚Ñù ‚Üí+ ‚Ñù) {a : ‚Ñù} {U : set ‚Ñù} (hU : U ‚àà ùìù a)
  (h : metric.bounded (f '' U)) : ‚àÉ (V : set ‚Ñù), V ‚àà ùìù (0 : ‚Ñù) ‚àß metric.bounded (f '' V) :=
begin
  rcases (metric.mem_nhds_iff.mp hU) with ‚ü®Œ¥, hŒ¥, hŒ¥a‚ü©,
  refine ‚ü®ball 0 Œ¥, ball_mem_nhds 0 hŒ¥, _‚ü©,
  rw bounded_iff_exists_norm_le,
  simp only [mem_image, mem_ball_zero_iff, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ],
  rcases (bounded_iff_exists_norm_le.mp h) with ‚ü®M, hM‚ü©,
  simp only [mem_image, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ] at hM,
  refine ‚ü®2 * M, Œª x hxŒ¥, _‚ü©,
  suffices : ‚à• f (x + a) ‚à• + ‚à• f a ‚à• ‚â§ 2 * M,
  { apply le_trans _ this,
    simp only [_root_.map_add, norm_le_add_norm_add] },
  { rw two_mul,
    apply add_le_add,
    { apply hM,
      apply hŒ¥a,
      simp only [mem_ball],
      convert hxŒ¥,
      rw [‚Üê dist_zero_right, ‚Üê dist_add_right x 0 a, zero_add] },
    { apply hM,
      apply hŒ¥a,
      simpa [mem_ball, dist_self] }}
end

lemma is_linear_real_of_continuous (f : ‚Ñù ‚Üí+ ‚Ñù) (h : continuous f) : ‚àÄ (x : ‚Ñù), f x  = f 1 * x :=
begin
  have h1 := is_linear_rat f,
  intro x,
  apply real_eq_forall_pos_lt,
  by_contra hf,
  push_neg at hf,
  rcases hf with ‚ü®Œµ, hŒµ, hf‚ü©,
  rw continuous_iff at h,
  specialize h x (Œµ/2) (by linarith [hŒµ]),
  rcases h with ‚ü®Œ¥, hŒ¥, h‚ü©,
  by_cases hf1 : f 1 = 0,
  { simp only [hf1, zero_mul] at h1,
    simp only [hf1, zero_mul, sub_zero] at hf,
    cases (exists_rat_near x hŒ¥) with q hq,
    specialize h q _,
    { simp only [dist_eq_norm', real.norm_eq_abs, hq] },
    simp only [h1, dist_zero_left] at h,
    linarith },
  { have hq : ‚àÉ (q : ‚Ñö), | x - ‚Üëq | < min Œ¥ (Œµ / 2 / ‚à•f 1‚à•),
    apply exists_rat_near,
    { apply lt_min hŒ¥,
      apply mul_pos,
      { linarith },
      { simp only [_root_.inv_pos, norm_pos_iff, ne.def, hf1, not_false_iff] }},
    cases hq with q hq,
    specialize h ‚Üëq _,
    { simp only [dist_eq_norm', real.norm_eq_abs],
      apply lt_of_lt_of_le hq (min_le_left Œ¥ _) },
    rw [dist_eq_norm', h1] at h,
    suffices h2 : ‚à• f x - f 1 * x ‚à• < Œµ, by linarith [hf, h2],
    have h3 : ‚à• f x - f 1 * q ‚à• + ‚à• f 1 * q - f 1 * x ‚à• < Œµ,
    { have h4 : ‚à• f 1 * q - f 1 * x ‚à• < Œµ / 2,
      { replace hf1 : 0 < ‚à• f 1 ‚à• := by simpa [norm_pos_iff, ne.def],
        simp only [‚Üêmul_sub, norm_mul, mul_comm (‚à•f 1‚à•) _, ‚Üê lt_div_iff hf1],
        rw [‚Üê dist_eq_norm, dist_eq_norm', real.norm_eq_abs],
        apply lt_of_lt_of_le hq (min_le_right Œ¥ _) },
      linarith },
    apply lt_of_le_of_lt _ h3,
    apply le_trans _ (norm_add_le _ _),
    apply le_of_eq,
    congr,
    abel }
end

lemma additive_continuous_at_iff_continuos_at_zero (f : ‚Ñù ‚Üí+ ‚Ñù) {x : ‚Ñù} :
  continuous_at f x ‚Üî continuous_at f 0 :=
begin
  split,
  { intro hx,
    rw [‚Üê sub_self x, continuous_at_iff],
    intros Œµ hŒµ,
    rcases ((continuous_at_iff.mp hx) Œµ hŒµ) with ‚ü®Œ¥, hŒ¥, hŒ¥f‚ü©,
    refine ‚ü®Œ¥, hŒ¥, Œª y hyŒ¥, _‚ü©,
    replace hyŒ¥ : dist (y + x) x < Œ¥,
    { convert hyŒ¥ using 1,
      simp only [dist_eq_norm],
      abel },
    convert hŒ¥f hyŒ¥ using 1,
    simp only [dist_eq_norm, map_sub, _root_.map_add],
    abel },
  { intro h0,
    apply continuous.continuous_at (uniform_continuous.continuous
      ((uniform_continuous_of_continuous_at_zero f) h0)) }
end

lemma is_linear_real_of_continuous_at (f : ‚Ñù ‚Üí+ ‚Ñù) {y : ‚Ñù} (h : continuous_at f y) :
  ‚àÄ (x : ‚Ñù), f x  = f 1 * x := by exact is_linear_real_of_continuous f
    (uniform_continuous.continuous (uniform_continuous_of_continuous_at_zero f
    ((additive_continuous_at_iff_continuos_at_zero f).mp h)))


lemma is_linear_map_real_of_continuous (f : ‚Ñù ‚Üí+ ‚Ñù) (h : continuous f) : is_linear_map ‚Ñù f :=
begin
  refine ‚ü®map_add f,Œª c x, _‚ü©,
  rw [smul_eq_mul, smul_eq_mul, is_linear_real_of_continuous f h (c * x),
    is_linear_real_of_continuous f h x],
  ring_exp_eq
end

lemma is_linear_of_bounded_nbhd (f : ‚Ñù ‚Üí+ ‚Ñù) {a : ‚Ñù} {U : set ‚Ñù} (hU : U ‚àà ùìù a)
  (hf : metric.bounded (f '' U)) : ‚àÄ (x : ‚Ñù), f x = f 1 * x :=
begin
  rcases (additive_is_bounded_of_bounded_on_interval f hU hf) with ‚ü®V, hV0, hVb‚ü©,
  exact is_linear_real_of_continuous_at f
    (additive_continuous_at_zero_of_bounded_nbhd_zero f hV0 hVb)
end


--todo add the monotone assumption case
