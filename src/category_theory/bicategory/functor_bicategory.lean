/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import category_theory.bicategory.natural_transformation

/-!
# The bicategory of oplax functors between two bicategories

Given bicategories `B` and `C`, we give a bicategory structure on `oplax_functor B C` whose
* objects are oplax functors,
* 1-morphisms are oplax natural transformations, and
* 2-morphisms are modifications.
-/

namespace category_theory

open category bicategory
open_locale bicategory

universes w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variables {B : Type u‚ÇÅ} [bicategory.{w‚ÇÅ v‚ÇÅ} B] {C : Type u‚ÇÇ} [bicategory.{w‚ÇÇ v‚ÇÇ} C]
variables {F G H I : oplax_functor B C}

namespace oplax_nat_trans

/-- Left whiskering of an oplax natural transformation and a modification. -/
@[simps]
def whisker_left (Œ∑ : F ‚ü∂ G) {Œ∏ Œπ : G ‚ü∂ H} (Œì : Œ∏ ‚ü∂ Œπ) : Œ∑ ‚â´ Œ∏ ‚ü∂ Œ∑ ‚â´ Œπ :=
{ app := Œª a, Œ∑.app a ‚óÅ Œì.app a,
  naturality' := Œª a b f, by
  { dsimp, rw whisker_left_whisker_left_associator_inv_whisker_right_assoc, simp } }

/-- Right whiskering of an oplax natural transformation and a modification. -/
@[simps]
def whisker_right {Œ∑ Œ∏ : F ‚ü∂ G} (Œì : Œ∑ ‚ü∂ Œ∏) (Œπ : G ‚ü∂ H) : Œ∑ ‚â´ Œπ ‚ü∂ Œ∏ ‚â´ Œπ :=
{ app := Œª a, Œì.app a ‚ñ∑ Œπ.app a,
  naturality' := Œª a b f, by
  { dsimp,
    simp only [modification.whisker_right_naturality_assoc, iso.inv_hom_id_assoc,
      whisker_assoc_left, assoc, iso.cancel_iso_inv_left],
    rw whisker_exchange_assoc } }

/-- Associator for the vertical composition of oplax natural transformations. -/
@[simps]
def associator (Œ∑ : F ‚ü∂ G) (Œ∏ : G ‚ü∂ H) (Œπ : H ‚ü∂ I) : (Œ∑ ‚â´ Œ∏) ‚â´ Œπ ‚âÖ Œ∑ ‚â´ (Œ∏ ‚â´ Œπ) :=
modification_iso.of_components (Œª a, Œ±_ (Œ∑.app a) (Œ∏.app a) (Œπ.app a))
begin
  intros a b f,
  dsimp,
  simp only [bicategory.whisker_left_comp, assoc, bicategory.comp_whisker_right,
    whisker_assoc_left, whisker_assoc_middle,
    pentagon_inv_hom_hom_hom_inv_assoc, whisker_assoc_right, iso.inv_hom_id_assoc,
    pentagon_inv_inv_hom_hom_inv_assoc, pentagon_inv_inv_hom_inv_inv]
end

/-- Left unitor for the vertical composition of oplax natural transformations. -/
@[simps]
def left_unitor (Œ∑ : F ‚ü∂ G) : ùüô F ‚â´ Œ∑ ‚âÖ Œ∑ :=
modification_iso.of_components (Œª a, Œª_ (Œ∑.app a)) (by tidy)

/-- Right unitor for the vertical composition of oplax natural transformations. -/
@[simps]
def right_unitor (Œ∑ : F ‚ü∂ G) : Œ∑ ‚â´ ùüô G ‚âÖ Œ∑ :=
modification_iso.of_components (Œª a, œÅ_ (Œ∑.app a)) (by tidy)

end oplax_nat_trans

variables (B C)

/-- A bicategory structure on the oplax functors between bicategories. -/
@[simps]
instance oplax_functor.bicategory : bicategory (oplax_functor B C) :=
{ whisker_left  := Œª F G H Œ∑ _ _ Œì, oplax_nat_trans.whisker_left Œ∑ Œì,
  whisker_right := Œª F G H _ _ Œì Œ∑, oplax_nat_trans.whisker_right Œì Œ∑,
  associator    := Œª F G H I, oplax_nat_trans.associator,
  left_unitor   := Œª F G, oplax_nat_trans.left_unitor,
  right_unitor  := Œª F G, oplax_nat_trans.right_unitor,
  whisker_exchange' := by { intros, ext, apply whisker_exchange },
  associator_naturality_left'   := by { intros, ext, apply associator_naturality_left },
  associator_naturality_middle' := by { intros, ext, apply associator_naturality_middle },
  associator_naturality_right'  := by { intros, ext, apply associator_naturality_right },
  left_unitor_naturality'   := by { intros, ext, apply left_unitor_naturality },
  right_unitor_naturality'  := by { intros, ext, apply right_unitor_naturality } }

end category_theory
