/-
Copyright (c) 2021 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import .hierarchy
import data.sym.sym2

/-!
# Edge coloring of multigraphs
-/

section
variables {F : Type*} (Œ± W : Type*) [weight_multigraph_class F Œ± W] (G : F) (a b : Œ±)
include W

--this one is easy, I just haven't done the def
def hom_equiv : (a ‚ü∂[G] b) ‚âÉ (b ‚ü∂[G] a) := sorry

def hom_edges (Œ± W : Type*) [weight_multigraph_class F Œ± W] (G : F) : sym2 Œ± ‚Üí Sort* := sorry

def hom_edges_equiv_left : hom_edges Œ± W G ‚ü¶(a, b)‚üß ‚âÉ (a ‚ü∂[G] b) := sorry

def hom_edges_equiv_right : hom_edges Œ± W G ‚ü¶(a, b)‚üß ‚âÉ (b ‚ü∂[G] a) := sorry

lemma hom_edges_left_right :
  (hom_edges_equiv_left Œ± W G a b).symm.trans (hom_edges_equiv_right Œ± W G a b)
    = hom_equiv Œ± W G a b := sorry

end
#exit
variables {Œ± F W ùí∏ : Type*}

namespace graph
section quiver

-- `hom_bicoloring Œ± Prop G` is the type of subgraphs of `G`
@[ext] structure hom_bicoloring (Œ± ùí∏ : Sort*) [quiver_class F Œ±] (G : F) :=
(hom_color ‚¶Éa b : Œ±‚¶Ñ : (a ‚ü∂[G] b) ‚Üí ùí∏)

variables [quiver_class F Œ±] {G : F} {a b : Œ±} (c : hom_bicoloring Œ± ùí∏ G) (e : a ‚ü∂[G] b)

end quiver

section multigraph
variables [multigraph_class F Œ±] {G : F}

@[ext] structure hom_coloring (Œ± ùí∏ : Type*) [multigraph_class F Œ±] (G : F)
  extends hom_bicoloring Œ± ùí∏ G :=
(hom_color_comm ‚¶Éa b : Œ±‚¶Ñ (e : a ‚ü∂[G] b) : hom_color e.symm = hom_color e)

end multigraph

section weight_quiver
variables [weight_quiver_class F Œ± W] {G : F} {a b : Œ±} (c : hom_bicoloring Œ± ùí∏ G) (e : a ‚ü∂[G] b)

/-- The edge weight of a graph as an edge bicoloring. -/
def hom_weight_bicoloring (Œ± W : Type*) [weight_quiver_class F Œ± W] (G : F) :
  hom_bicoloring Œ± W G :=
‚ü®Œª a b e, e.weight‚ü©

@[simp] lemma hom_weight_bicoloring_color :
  (hom_weight_bicoloring Œ± W G).hom_color e = e.weight := rfl

end weight_quiver

section weight_multigraph
variables [weight_multigraph_class F Œ± W] {G : F} {a b : Œ±} (c : hom_bicoloring Œ± ùí∏ G)
  (e : a ‚ü∂[G] b)

/-- The edge weight of a graph as an edge coloring. -/
def hom_weight_coloring (Œ± W : Type*) [weight_multigraph_class F Œ± W] (G : F) :
  hom_coloring Œ± W G :=
{ hom_color := Œª a b e, hom.weight e,
  hom_color_comm := Œª a b e, weight_multigraph_class.hom_weight_comm _ _ _ _ }

@[simp] lemma hom_weight_coloring_color : (hom_weight_coloring Œ± W G).hom_color e = e.weight := rfl

@[simp] lemma hom_weight_coloring_to_bicoloring :
  (hom_weight_coloring Œ± W G).to_hom_bicoloring = hom_weight_bicoloring Œ± W G :=
by { ext, refl }



example {Œ± Œ≤ W : Type*} (e : Œ± ‚âÉ Œ≤) (f : Œ± ‚Üí Œ≤ ‚Üí W) (g : Œ≤ ‚Üí Œ± ‚Üí W)
  (h : ‚àÄ a b, g (e a) (e.symm b) = f a b) : ‚àÉ (Œ≥ : Type*) (lift : Œ≥ ‚Üí W), true

end weight_multigraph
end graph
