import category_theory.sites.sheaf

namespace category_theory.presheaf

open category_theory category_theory.limits opposite

universes v u w
variables {C : Type u} [category.{v} C] (J : grothendieck_topology C)
variables {D : Type w} [category.{max v u} D]

noncomputable theory

def first_obj_index {B : C} (R : presieve B) : Type (max v u) :=
Œ£ (V : C), { f : V ‚ü∂ B // R f }

namespace first_obj_index

def map {B : C} {R S : presieve B} (h : R ‚â§ S) :
  first_obj_index R ‚Üí first_obj_index S :=
Œª F, ‚ü®F.1, F.2.1, h _ F.2.2‚ü©

def pullback {X Y : C} {R : sieve Y} (f : X ‚ü∂ Y) :
  first_obj_index (R.pullback f) ‚Üí first_obj_index R :=
Œª F, ‚ü®F.1, F.2.1 ‚â´ f, F.2.2‚ü©

end first_obj_index

structure second_obj_index {B : C} (R : presieve B) : Type (max v u) :=
(Y‚ÇÅ Y‚ÇÇ Z : C)
(g‚ÇÅ : Z ‚ü∂ Y‚ÇÅ)
(g‚ÇÇ : Z ‚ü∂ Y‚ÇÇ)
(f‚ÇÅ : Y‚ÇÅ ‚ü∂ B)
(f‚ÇÇ : Y‚ÇÇ ‚ü∂ B)
(h‚ÇÅ : R f‚ÇÅ)
(h‚ÇÇ : R f‚ÇÇ)
(w : g‚ÇÅ ‚â´ f‚ÇÅ = g‚ÇÇ ‚â´ f‚ÇÇ)

namespace second_obj_index

def map {B : C} {R S : presieve B} (h : R ‚â§ S) :
  second_obj_index R ‚Üí second_obj_index S :=
Œª F, ‚ü®F.Y‚ÇÅ, F.Y‚ÇÇ, F.Z, F.g‚ÇÅ, F.g‚ÇÇ, F.f‚ÇÅ, F.f‚ÇÇ, h _ F.h‚ÇÅ, h _ F.h‚ÇÇ, F.w‚ü©

def pullback {X Y : C} {R : sieve Y} (f : X ‚ü∂ Y) :
  second_obj_index (R.pullback f) ‚Üí second_obj_index R :=
Œª F, ‚ü®F.Y‚ÇÅ, F.Y‚ÇÇ, F.Z, F.g‚ÇÅ, F.g‚ÇÇ, F.f‚ÇÅ ‚â´ f, F.f‚ÇÇ ‚â´ f, F.h‚ÇÅ, F.h‚ÇÇ, by simp [reassoc_of F.w]‚ü©

end second_obj_index

def second_obj' [has_products D] {B : C} (R : presieve B) (P : C·µí·µñ ‚•§ D) : D :=
‚àè (Œª I : second_obj_index R, P.obj (op I.Z))

def first_map' [has_products D] {B : C} (R : presieve B) (P : C·µí·µñ ‚•§ D) :
  first_obj R P ‚ü∂ second_obj' R P :=
pi.lift (Œª I, pi.œÄ _ ‚ü®_,_,I.h‚ÇÅ‚ü© ‚â´ P.map I.g‚ÇÅ.op)

def second_map' [has_products D] {B : C} (R : presieve B) (P : C·µí·µñ ‚•§ D) :
  first_obj R P ‚ü∂ second_obj' R P :=
pi.lift (Œª I, pi.œÄ _ ‚ü®_,_,I.h‚ÇÇ‚ü© ‚â´ P.map I.g‚ÇÇ.op )

def matching [has_limits D] {B : C} (R : presieve B) (P : C·µí·µñ ‚•§ D) : D :=
  equalizer (first_map'.{v u} R P) (second_map'.{v u} R P)

def matching.map [has_limits D] {B : C} {R S : presieve B} (h : R ‚â§ S) (P : C·µí·µñ ‚•§ D) :
  matching S P ‚ü∂ matching R P :=
equalizer.lift (equalizer.Œπ _ _ ‚â´
  pi.lift (Œª (F : first_obj_index R), pi.œÄ _ (first_obj_index.map h F)))
begin
  ext (I : second_obj_index R),
  change _ ‚â´ pi.œÄ _ _ = _ ‚â´ pi.œÄ _ _,
  have := equalizer.condition (first_map' S P) (second_map' S P),
  apply_fun (Œª e, e ‚â´ pi.œÄ _ (second_obj_index.map h I)) at this,
  convert this using 1,
  { dsimp [first_map'],
    simp only [limit.lift_œÄ, limit.lift_œÄ_assoc, fan.mk_œÄ_app, category.assoc],
    congr },
  { dsimp [second_map'],
    simp only [limit.lift_œÄ, limit.lift_œÄ_assoc, fan.mk_œÄ_app, category.assoc],
    congr }
end .

@[simp]
lemma matching.map_id [has_limits D] {B : C} {R : presieve B} (P : C·µí·µñ ‚•§ D) :
  matching.map (le_refl R) P = ùüô _ :=
begin
  ext ‚ü®X,f,hf‚ü©,
  dsimp [matching.map],
  simpa,
end

@[simp]
lemma matching.map_comp [has_limits D] {B : C} {R S T : presieve B} (P : C·µí·µñ ‚•§ D)
  (h‚ÇÅ : R ‚â§ S) (h‚ÇÇ : S ‚â§ T) : matching.map (le_trans h‚ÇÅ h‚ÇÇ) P =
  matching.map h‚ÇÇ P ‚â´ matching.map h‚ÇÅ P :=
begin
  ext ‚ü®X,f,hf‚ü©,
  dsimp [matching.map],
  simpa,
end

def matching.pullback [has_limits D] {X Y : C} (R : sieve Y) (f : X ‚ü∂ Y) (P : C·µí·µñ ‚•§ D) :
  matching R P ‚ü∂ matching (R.pullback f) P :=
equalizer.lift (pi.lift $ Œª (F : first_obj_index (R.pullback f)),
  equalizer.Œπ _ _ ‚â´ pi.œÄ _ (first_obj_index.pullback f F))
begin
  ext (I : second_obj_index _),
  change _ ‚â´ pi.œÄ _ _ = _ ‚â´ pi.œÄ _ _,
  have := equalizer.condition (first_map' R P) (second_map' R P),
  apply_fun (Œª e, e ‚â´ pi.œÄ _ (second_obj_index.pullback f I)) at this,
  convert this using 1,
  { dsimp [first_map'],
    simp only [limit.lift_œÄ, limit.lift_œÄ_assoc, fan.mk_œÄ_app, category.assoc],
    congr },
  { dsimp [second_map'],
    simp only [limit.lift_œÄ, limit.lift_œÄ_assoc, fan.mk_œÄ_app, category.assoc],
    congr },
end

@[simp, reassoc]
lemma matching.map_pullback [has_limits D] {X Y : C} {R S : sieve Y} (h : R ‚â§ S) (f : X ‚ü∂ Y)
  (P : C·µí·µñ ‚•§ D) :
  matching.map h P ‚â´ matching.pullback R f P = matching.pullback S f P ‚â´
    matching.map (sieve.pullback_monotone _ h) P :=
begin
  dsimp [matching.map, matching.pullback],
  ext,
  simp only [fan.mk_œÄ_app, limit.lift_œÄ, category.assoc,
    equalizer.lift_Œπ_assoc, equalizer.lift_Œπ],
  erw [equalizer.lift_Œπ_assoc, category.assoc, limits.limit.lift_œÄ],
  simpa,
end

@[derive preorder]
def matching_diagram_index (B : C) : Type (max v u) :=
{ R : sieve B // R ‚àà J B }

def matching_diagram_index.pullback {X Y : C} (f : X ‚ü∂ Y) :
  matching_diagram_index J Y ‚•§ matching_diagram_index J X :=
{ obj := Œª I, ‚ü®I.val.pullback f, J.pullback_stable _ I.prop‚ü©,
  map := Œª I‚ÇÅ I‚ÇÇ e, hom_of_le $ sieve.pullback_monotone _ (le_of_hom e) }

def matching_diagram_index.pullback_id (X : C) :
  matching_diagram_index.pullback J (ùüô X) ‚âÖ ùü≠ _ :=
nat_iso.of_components
(Œª I, eq_to_iso begin
  cases I with I hI,
  dsimp,
  ext Y g,
  dsimp [matching_diagram_index.pullback],
  rw category.comp_id,
end) $ by tidy

def matching_diagram_index.pullback_comp {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  matching_diagram_index.pullback J (f ‚â´ g) ‚âÖ
  matching_diagram_index.pullback J g ‚ãô matching_diagram_index.pullback J f :=
nat_iso.of_components
(Œª I, eq_to_iso begin
  cases I with I hI,
  dsimp,
  ext Y g,
  dsimp [matching_diagram_index.pullback],
  rw category.assoc,
end) $ by tidy

def matching_diagram [has_limits D] (B : C) (P : C·µí·µñ ‚•§ D) : (matching_diagram_index J B)·µí·µñ ‚•§ D :=
{ obj := Œª R, matching R.unop.val P,
  map := Œª R S h, matching.map (le_of_hom h.unop) P,
  map_comp' := Œª X Y Z f g, matching.map_comp _ _ _ }

def matching_diagram.pullback [has_limits D] {X Y : C} (f : X ‚ü∂ Y) (P : C·µí·µñ ‚•§ D) :
  matching_diagram J Y P ‚ü∂ (matching_diagram_index.pullback J f).op ‚ãô matching_diagram J X P :=
{ app := Œª I, matching.pullback _ f _,
  naturality' := Œª I J e, matching.map_pullback _ _ _ }

@[simp]
lemma matching_diagram.pullback_comp_app [has_limits D] {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  (P : C·µí·µñ ‚•§ D) (I : (matching_diagram_index J Z)·µí·µñ) :
  (matching_diagram.pullback J (f ‚â´ g) P).app I ‚â´ (matching_diagram J _ P).map
    ((nat_iso.op (matching_diagram_index.pullback_comp J f g)).app I).inv =
  (matching_diagram.pullback J g P).app I ‚â´
    (matching_diagram.pullback J f P).app ((matching_diagram_index.pullback J g).op.obj I) :=
begin
  ext ‚ü®j,ff,hff‚ü©,
  dsimp [matching_diagram.pullback, matching_diagram, matching.pullback,
    matching.map],
  simp,
  erw [equalizer.lift_Œπ_assoc, limit.lift_œÄ],
  erw [equalizer.lift_Œπ_assoc, limit.lift_œÄ],
  dsimp,
  erw [equalizer.lift_Œπ_assoc, limit.lift_œÄ],
  dsimp [first_obj_index.pullback, first_obj_index.map],
  congr' 4,
  rw category.assoc,
end

def plus_obj [has_limits D] [has_colimits D] (B : C) (P : C·µí·µñ ‚•§ D) : D :=
colimit (matching_diagram J B P)

def plus_map [has_limits D] [has_colimits D] {X Y : C} (f : X ‚ü∂ Y) (P : C·µí·µñ ‚•§ D) :
  plus_obj J Y P ‚ü∂ plus_obj J X P :=
colim_map (matching_diagram.pullback J f P) ‚â´ colimit.pre _ _

def plus [has_limits D] [has_colimits D] (P : C·µí·µñ ‚•§ D) : C·µí·µñ ‚•§ D :=
{ obj := Œª X, plus_obj J X.unop P,
  map := Œª X Y f, plus_map _ f.unop _,
  map_id' := begin
    intros X,
    dsimp [plus_map],
    ext I,
    erw category.comp_id,
    simp only [matching_diagram.pullback, colimit.Œπ_pre, Œπ_colim_map_assoc],
    let e : I ‚âÖ (matching_diagram_index.pullback J (ùüô (unop X))).op.obj I :=
      (nat_iso.op (matching_diagram_index.pullback_id J X.unop)).app I,
    rw [‚Üê colimit.w (matching_diagram J (unop X) P) e.inv, ‚Üê category.assoc],
    conv_rhs { rw ‚Üê category.id_comp (colimit.Œπ (matching_diagram J (unop X) P) I) },
    congr' 1,
    ext ‚ü®A,ff,hff‚ü©,
    dsimp [matching.pullback, matching_diagram, matching.map],
    simp only [fan.mk_œÄ_app, category.id_comp, limit.lift_œÄ,
      category.assoc, equalizer.lift_Œπ],
    erw [equalizer.lift_Œπ_assoc, limit.lift_œÄ],
    dsimp [first_obj_index.pullback],
    congr,
    rw category.comp_id,
    refl,
  end,
  map_comp' := begin
    intros X Y Z f g,
    dsimp [plus_map],
    ext I,
    simp,
    let e : (matching_diagram_index.pullback J g.unop).op.obj
      ((matching_diagram_index.pullback J f.unop).op.obj I) ‚âÖ
        (matching_diagram_index.pullback J (g.unop ‚â´ f.unop)).op.obj I :=
      (nat_iso.op (matching_diagram_index.pullback_comp J g.unop f.unop)).app I,
    rw [‚Üê colimit.w _ e.inv],
    simp_rw ‚Üê category.assoc,
    rw matching_diagram.pullback_comp_app,
  end }

end category_theory.presheaf
