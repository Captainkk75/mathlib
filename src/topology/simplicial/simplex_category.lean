/-
Copyleft 2020 Johan Commelin. No rights reserved.
Authors: Johan Commelin
-/

import order.category.NonemptyFinLinOrd
import data.finset.sort
import tactic.apply_fun
import tactic.linarith

/-! # The simplex category

We construct a skeletal model of the simplex category, with objects `‚Ñï` and the
morphism `n ‚ü∂ m` being the monotone maps from `fin (n+1)` to `fin (m+1)`.

We show that this category is equivalent to `NonemptyFinLinOrd`.
-/

universe variables u

open category_theory

/-- The simplex category:
* objects are natural numbers `n : ‚Ñï`
* morphisms are monotone functions `fin (m+1) ‚Üí fin (n+1)`
-/
def simplex_category := ‚Ñï

namespace simplex_category

instance : small_category simplex_category :=
{ hom := Œª m n, preorder_hom (fin (m+1)) (fin (n+1)),
  id := Œª m, preorder_hom.id,
  comp := Œª _ _ _ f g, preorder_hom.comp g f, }

@[simp] lemma id_apply {n : simplex_category} (i : fin (n+1)) :
  (ùüô n : fin _ ‚Üí fin _) i = i := rfl
@[simp] lemma comp_apply {l m n : simplex_category} (f : l ‚ü∂ m) (g : m ‚ü∂ n) (i : fin (l+1)) :
  (f ‚â´ g) i = g (f i) := rfl

section generators
/-!
## Generating maps for the simplex category

TODO: prove the remaining simplicial identities
TODO: prove that these generate the category
-/

/-- The `i`-th face map from `[n]` to `[n+1]` -/
def Œ¥ {n} (i : fin (n+2)) :
  @has_hom.hom simplex_category _ n (n+1 : ‚Ñï) :=
(fin.succ_above i).to_preorder_hom

/-- The `i`-th degeneracy map from `[n+1]` to `[n]` -/
def œÉ {n} (i : fin (n+1)) :
  @has_hom.hom simplex_category _ (n+1 : ‚Ñï) n :=
{ to_fun := fin.pred_above i,
  monotone' := Œª a b H,
  begin
    dsimp [fin.pred_above],
    split_ifs with ha hb hb,
    all_goals { simp only [fin.le_iff_coe_le_coe], simp, },
    { exact nat.pred_le_pred H, },
    { calc _ ‚â§ _ : nat.pred_le _
         ... ‚â§ _ : H, },
    { simp at ha, exact nat.le_pred_of_lt (lt_of_le_of_lt ha hb), },
    { exact H, },
  end }

/-- The first simplicial identity -/
lemma Œ¥_comp_Œ¥ {n} {i j : fin (n+2)} (H : i ‚â§ j) :
  Œ¥ i ‚â´ Œ¥ j.succ = Œ¥ j ‚â´ Œ¥ i.cast_succ :=
begin
  ext k,
  dsimp [Œ¥, fin.succ_above],
  rcases i with ‚ü®i, _‚ü©,
  rcases j with ‚ü®j, _‚ü©,
  rcases k with ‚ü®k, _‚ü©,
  split_ifs; { simp at *, try { linarith } },
end

@[simp]
lemma fin.pred_mk {n : ‚Ñï} (i : ‚Ñï) (h : i < n + 1) (w) :
  fin.pred ‚ü®i, h‚ü© w =
  ‚ü®i - 1, by rwa nat.sub_lt_right_iff_lt_add (nat.pos_of_ne_zero (fin.vne_of_ne w))‚ü© :=
rfl

/-- The second simplicial identity -/
lemma Œ¥_comp_œÉ {n} {i : fin (n+2)} {j : fin (n+1)} (H : i ‚â§ j.cast_succ) :
  Œ¥ i.cast_succ ‚â´ œÉ j.succ = œÉ j ‚â´ Œ¥ i :=
begin
  ext k,
  dsimp [Œ¥, œÉ, fin.succ_above, fin.pred_above],
  rcases i with ‚ü®i, _‚ü©,
  rcases j with ‚ü®j, _‚ü©,
  rcases k with ‚ü®k, _‚ü©,
  simp only [subtype.mk_le_mk, fin.cast_succ_mk] at H,
  simp with push_cast, -- `simp?` doesn't work here
  split_ifs,
  -- Hope for the best from `linarith`:
  all_goals { simp at *, try { linarith }, },
  -- Two of the goals need special handling:
  { replace h_3 := nat.le_of_pred_lt h_3, change k ‚â§ i at h_3, linarith, },
  { exact (nat.succ_pred_eq_of_pos (lt_of_le_of_lt (zero_le _) h_1)).symm, },
end

/-- The fifth simplicial identity -/
lemma œÉ_comp_œÉ {n} {i j : fin (n+1)} (H : i ‚â§ j) :
  œÉ i.cast_succ ‚â´ œÉ j = œÉ j.succ ‚â´ œÉ i :=
begin
  change i.val ‚â§ j.val at H,
  ext k,
  sorry
end

end generators

section skeleton

/-- The functor that exhibits `simplex_category` as skeleton
of `NonemptyFinLinOrd` -/
def skeletal_functor :
  simplex_category ‚•§ NonemptyFinLinOrd.{u} :=
{ obj := Œª n, NonemptyFinLinOrd.of $ ulift (fin (n+1)),
  map := Œª m n f, ‚ü®Œª i, ‚ü®f i.down‚ü©, Œª ‚ü®i‚ü© ‚ü®j‚ü© h, show f i ‚â§ f j, from f.monotone h‚ü©, }

namespace skeletal_functor

instance full : full.{0 u 0 (u+1)} skeletal_functor.{u} :=
{ preimage := Œª m n f, ‚ü®Œª i, (f ‚ü®i‚ü©).down, Œª i j h, f.monotone h‚ü©,
  witness' := by { intros m n f, dsimp at *, ext1 ‚ü®i‚ü©, ext1, refl } }

instance : faithful skeletal_functor.{u} :=
{ map_injective' := Œª m n f g h,
  begin
    ext1 i, apply equiv.ulift.symm.injective,
    show skeletal_functor.map f ‚ü®i‚ü© = skeletal_functor.map g ‚ü®i‚ü©,
    rw h,
  end }

instance : ess_surj skeletal_functor.{u} :=
{ mem_ess_image := Œª X, ‚ü®(fintype.card X - 1 : ‚Ñï), ‚ü®begin
    have aux : fintype.card X = fintype.card X - 1 + 1,
    { exact (nat.succ_pred_eq_of_pos $ fintype.card_pos_iff.mpr ‚ü®‚ä•‚ü©).symm, },
    let f := mono_equiv_of_fin X aux,
    have hf := (finset.univ.order_emb_of_fin aux).strict_mono,
    refine
    { hom := ‚ü®Œª i, f i.down, _‚ü©,
      inv := ‚ü®Œª i, ‚ü®f.symm i‚ü©, _‚ü©,
      hom_inv_id' := _,
      inv_hom_id' := _ },
    { rintro ‚ü®i‚ü© ‚ü®j‚ü© h, show f i ‚â§ f j, exact hf.monotone h, },
    { intros i j h, show f.symm i ‚â§ f.symm j, rw ‚Üê hf.le_iff_le,
      show f (f.symm i) ‚â§ f (f.symm j), simpa only [order_iso.apply_symm_apply], },
    { ext1 ‚ü®i‚ü©, ext1, exact f.symm_apply_apply i },
    { ext1 i, exact f.apply_symm_apply i },
  end‚ü©‚ü©,}

noncomputable instance is_equivalence : is_equivalence skeletal_functor.{u} :=
equivalence.equivalence_of_fully_faithfully_ess_surj skeletal_functor

end skeletal_functor

/-- The equivalence that exhibits `simplex_category` as skeleton
of `NonemptyFinLinOrd` -/
noncomputable def skeletal_equivalence :
  simplex_category ‚âå NonemptyFinLinOrd.{u} :=
functor.as_equivalence skeletal_functor.{u}

end skeleton

end simplex_category
