import field_theory.is_alg_closed.basic
import field_theory.perfect_closure
import ring_theory.witt_vector.domain

noncomputable theory

variables (p : ‚Ñï) [hp : fact p.prime]
variables (k : Type*) [field k] [char_p k p] [is_alg_closed k]
include hp

/-- A field is perfect if Frobenius is surjective -/
def perfect_ring.of_surjective (k : Type*) [field k] [char_p k p]
  (h : function.surjective $ frobenius k p) :
  perfect_ring k p :=
{ pth_root' := function.surj_inv h,
  frobenius_pth_root' := function.surj_inv_eq h,
  pth_root_frobenius' := Œª x, (frobenius k p).injective $ function.surj_inv_eq h _ }

-- an algebraically closed field is perfect, many google hits, maybe somewhere in mathlib?
instance is_alg_closed.perfect_ring : perfect_ring k p :=
perfect_ring.of_surjective p k $ Œª x, is_alg_closed.exists_pow_nat_eq _ $ fact.out _

local notation `ùïé` := witt_vector p
local notation `K` := fraction_ring (ùïé k)

lemma witt_vector.frobenius_bijective (R : Type*) [comm_ring R] [char_p R p] [perfect_ring R p] :
  function.bijective (@witt_vector.frobenius p R _ _) :=
begin
  rw witt_vector.frobenius_eq_map_frobenius,
  exact ‚ü®witt_vector.map_injective _ (frobenius_equiv R p).injective,
    witt_vector.map_surjective _ (frobenius_equiv R p).surjective‚ü©,
end

local notation `œÜ` := is_fraction_ring.field_equiv_of_ring_equiv
  (ring_equiv.of_bijective _ (witt_vector.frobenius_bijective p k))

/-- Johan: this is basically the same as `ùïé k` being a DVR. -/
lemma split (a : ùïé k) (ha : a ‚â† 0) :
  ‚àÉ (m : ‚Ñï) (b : ùïé k), b.coeff 0 ‚â† 0 ‚àß a = p ^ m * b :=
begin
  obtain ‚ü®m, c, hc, hcm‚ü© := witt_vector.verschiebung_nonzero ha,
  obtain ‚ü®b, rfl‚ü© := (witt_vector.frobenius_bijective p k).surjective.iterate m c,
  rw witt_vector.iterate_frobenius_coeff at hc,
  have := congr_fun (witt_vector.verschiebung_frobenius_comm.comp_iterate m) b,
  simp at this,
  rw ‚Üê this at hcm,
  refine ‚ü®m, b, _, _‚ü©,
  { contrapose! hc,
    have : 0 < p ^ m := pow_pos (nat.prime.pos (fact.out _)) _,
    simp [hc, this] },
  { rw ‚Üê mul_left_iterate (p : ùïé k) m,
    convert hcm,
    ext1 x,
    rw [mul_comm, ‚Üê witt_vector.verschiebung_frobenius x] },
end

-- lemma witt_vector.is_Hausdorff : is_Hausdorff (ùïé k)

#check mv_polynomial.bind‚ÇÅ
#check mv_polynomial.eval
#check Œª f, mv_polynomial.eval f (witt_vector.witt_mul p 0)
open polynomial

variable {k}

section base_case

def pow_p_poly (a‚ÇÅ : ùïé k) : polynomial k :=
witt_vector.peval (witt_vector.witt_mul p 0) ![Œª n, if n = 0 then X^p else 0, Œª n, C (a‚ÇÅ.coeff n)]

lemma pow_p_poly_degree {a‚ÇÅ : ùïé k} (ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) : (pow_p_poly p a‚ÇÅ).degree = p :=
by simp only [matrix.head_cons, nat.cast_with_bot, add_zero, mv_polynomial.aeval_X, if_true,
    witt_vector.peval, polynomial.degree_mul, function.uncurry_apply_pair, eq_self_iff_true,
    witt_vector.witt_mul_zero, pow_p_poly, matrix.cons_val_one, _root_.map_mul, degree_C ha‚ÇÅ,
    polynomial.degree_pow, polynomial.degree_X, matrix.cons_val_zero, nat.smul_one_eq_coe]

def pow_one_poly (a‚ÇÇ : ùïé k) : polynomial k :=
witt_vector.peval (witt_vector.witt_mul p 0) ![Œª n, if n = 0 then X else 0, Œª n, C (a‚ÇÇ.coeff n)]

lemma pow_one_poly_degree {a‚ÇÇ : ùïé k} (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0) : (pow_one_poly p a‚ÇÇ).degree = 1 :=
by simp only [matrix.head_cons, add_zero, mv_polynomial.aeval_X, if_true, witt_vector.peval,
    polynomial.degree_mul, function.uncurry_apply_pair, eq_self_iff_true, witt_vector.witt_mul_zero,
    pow_one_poly, matrix.cons_val_one, _root_.map_mul, polynomial.degree_X, matrix.cons_val_zero,
    degree_C ha‚ÇÇ]

lemma pow_one_poly_degree_lt {a‚ÇÅ a‚ÇÇ : ùïé k} (ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0) :
  (pow_one_poly p a‚ÇÇ).degree < (pow_p_poly p a‚ÇÅ).degree :=
begin
  rw [pow_p_poly_degree p ha‚ÇÅ, pow_one_poly_degree p ha‚ÇÇ],
  exact_mod_cast hp.out.one_lt
end

def base_poly (a‚ÇÅ a‚ÇÇ : ùïé k) : polynomial k :=
pow_p_poly p a‚ÇÅ - pow_one_poly p a‚ÇÇ

lemma base_poly_degree {a‚ÇÅ a‚ÇÇ : ùïé k} (ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0) :
  (base_poly p a‚ÇÅ a‚ÇÇ).degree ‚â† 0 :=
begin
  rw [base_poly, degree_sub_eq_left_of_degree_lt, pow_p_poly_degree p ha‚ÇÅ],
  { exact_mod_cast hp.out.ne_zero },
  { exact pow_one_poly_degree_lt p ha‚ÇÅ ha‚ÇÇ }
end

lemma solution_exists {a‚ÇÅ a‚ÇÇ : ùïé k} (ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0) :
  ‚àÉ (x : k), (pow_p_poly p a‚ÇÅ - pow_one_poly p a‚ÇÇ).is_root x :=
is_alg_closed.exists_root (pow_p_poly p a‚ÇÅ - pow_one_poly p a‚ÇÇ) (base_poly_degree p ha‚ÇÅ ha‚ÇÇ)

def solution {a‚ÇÅ a‚ÇÇ : ùïé k} (ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0) : k :=
classical.some (solution_exists p ha‚ÇÅ ha‚ÇÇ)

lemma solution_spec {a‚ÇÅ a‚ÇÇ : ùïé k} (ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0) :
  (pow_p_poly p a‚ÇÅ - pow_one_poly p a‚ÇÇ).is_root (solution p ha‚ÇÅ ha‚ÇÇ) :=
classical.some_spec (solution_exists p ha‚ÇÅ ha‚ÇÇ)

lemma solution_spec' {a‚ÇÅ a‚ÇÇ : ùïé k} (ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0) :
  (solution p ha‚ÇÅ ha‚ÇÇ)^p * a‚ÇÅ.coeff 0 = (solution p ha‚ÇÅ ha‚ÇÇ) * a‚ÇÇ.coeff 0 :=
begin
  rw ‚Üê sub_eq_zero,
  simpa only [matrix.head_cons, polynomial.eval_X, polynomial.eval_C, mv_polynomial.aeval_X,
    if_true, witt_vector.peval, polynomial.eval_pow, function.uncurry_apply_pair, eq_self_iff_true,
    polynomial.eval_mul, witt_vector.witt_mul_zero, pow_p_poly, pow_one_poly, polynomial.eval_sub,
    matrix.cons_val_one, _root_.map_mul, matrix.cons_val_zero, polynomial.is_root.def]
    using solution_spec p ha‚ÇÅ ha‚ÇÇ,
end

end base_case

section inductive_case

variables (n : ‚Ñï) (prev_coeffs : fin n ‚Üí k) (a‚ÇÅ a‚ÇÇ : ùïé k)
--(ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0)

def lhs_poly : polynomial k :=
witt_vector.peval (witt_vector.witt_mul p (n+1))
  ![Œª k, if h : k < n then C (prev_coeffs ‚ü®k, h‚ü©)^p else if k = n then X^p else 0,
    Œª n, C (a‚ÇÅ.coeff n)]

lemma degree_lhs_poly : (lhs_poly p n prev_coeffs a‚ÇÅ).degree = p :=
sorry

def rhs_poly : polynomial k :=
witt_vector.peval (witt_vector.witt_mul p (n+1))
  ![Œª k, if h : k < n then C (prev_coeffs ‚ü®k, h‚ü©) else if k = n then X else 0,
    Œª n, C (a‚ÇÇ.coeff n)]

def ind_poly : polynomial k :=
lhs_poly p n prev_coeffs a‚ÇÅ - rhs_poly p n prev_coeffs a‚ÇÇ

lemma ind_poly_degree : (ind_poly p n prev_coeffs a‚ÇÅ a‚ÇÇ).degree ‚â† 0 :=
begin
  rw [ind_poly, degree_sub_eq_left_of_degree_lt]; sorry
end

end inductive_case

def find_important {a‚ÇÅ a‚ÇÇ : ùïé k} (ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0) : ‚Ñï ‚Üí k
| 0       := solution p ha‚ÇÅ ha‚ÇÇ -- solve for `x` in
                   --  `(witt_vector.witt_mul 0).eval (![x ^ p, 0, ...], a‚ÇÅ)`
                   --        `= (witt_vector.witt_mul 0).eval (![x, 0, ...], a‚ÇÇ)`
| (n + 1) := sorry -- solve for `x` in
                   --  `(witt_vector.witt_mul (n + 1)).eval (![(b 0) ^ p, ..., (b n) ^ p, x ^ p, 0, ...], a‚ÇÅ)`
                   --        `= (witt_vector.witt_mul (n + 1)) (![b 0, ... b n, x, 0, ...], a‚ÇÇ)`

variable (k)

lemma important_aux {a‚ÇÅ a‚ÇÇ : ùïé k} (ha‚ÇÅ : a‚ÇÅ.coeff 0 ‚â† 0) (ha‚ÇÇ : a‚ÇÇ.coeff 0 ‚â† 0) :
  ‚àÉ (b : ùïé k) (hb : b ‚â† 0), witt_vector.frobenius b * a‚ÇÅ = b * a‚ÇÇ :=
sorry

lemma important {a : fraction_ring (ùïé k)} (ha : a ‚â† 0) :
  ‚àÉ (b : fraction_ring (ùïé k)) (hb : b ‚â† 0) (m : ‚Ñ§), œÜ b * a = p ^ m * b :=
begin
  refine localization.induction_on a _,
  rintros ‚ü®r, q, hq‚ü©,
  rw mem_non_zero_divisors_iff_ne_zero at hq,
  have : r ‚â† 0 := sorry,
  obtain ‚ü®m, r', hr', rfl‚ü© := split p k r this,
  obtain ‚ü®n, q', hq', rfl‚ü© := split p k q hq,
  obtain ‚ü®b, hb, hb‚ü© := important_aux p k hr' hq',
  refine ‚ü®algebra_map (ùïé k) _ b, _, m - n, _‚ü©,
  { sorry },
  simp [is_fraction_ring.field_equiv_of_ring_equiv],
  suffices :
  witt_vector.frobenius b * p ^ m * r' * p ^ n = p ^ m * b * (p ^ n * q') ,
  { -- apply `algebra_map` to both sides and divide
    sorry },
  have H := congr_arg (Œª x : ùïé k, x * p ^ m * p ^ n) hb,
  dsimp at H,
  refine (eq.trans _ H).trans _; ring
end
