import category_theory.structured_arrow
import category_theory.filtered
import category_theory.limits.presheaf
import category_theory.limits.kan_extension
import category_theory.limits.filtered_colimit_commutes_finite_limit

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open category_theory
open category_theory.limits
open opposite


-- set_option pp.universes true
-- set_option trace.class_instances true

-- #check @types.sort.category_theory.limits.has_limits

-- instance inst : has_limits (C·µí·µñ ‚•§ Type u‚ÇÅ) := infer_instance
namespace category_theory

section defs
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

class representably_flat (u : C ‚•§ D) : Prop :=
(cofiltered : ‚àÄ (X : D), is_cofiltered (costructured_arrow u X))

def functor.flat_cofiltered (u : C ‚•§ D) [representably_flat u] (X : D) :
 is_cofiltered (costructured_arrow u X) := representably_flat.cofiltered X

variables (u : C ‚•§ D) [representably_flat u] {X : D} (Y‚ÇÅ Y‚ÇÇ : costructured_arrow u X)

instance cofiltered_of_flat := u.flat_cofiltered X

end defs
section sec1
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÅ} [category.{v‚ÇÇ} D]
variables {E : Type u‚ÇÉ} [category.{u‚ÇÅ} E] [has_limits E]

noncomputable
instance whiskering_left_preserves_small_limits (J : Type u‚ÇÅ) [H : small_category J]  (F) :
  preserves_limits_of_shape J ((whiskering_left C D E).obj F) := ‚ü®Œª K, ‚ü®Œª c hc,
begin
  apply evaluation_jointly_reflects_limits,
  intro Y,
  change is_limit (((evaluation D E).obj (F.obj Y)).map_cone c),
  exact preserves_limit.preserves hc,
end ‚ü©‚ü©
end sec1
section lems
variables {C D E: Type u‚ÇÅ} [category.{u‚ÇÅ} C] [category.{u‚ÇÅ} D] [category.{u‚ÇÅ} E]

-- include Y‚ÇÅ Y‚ÇÇ

-- noncomputable theory

-- def functor.flat_min : costructured_arrow u X :=
-- (category_theory.is_cofiltered_or_empty.cocone_objs Y‚ÇÅ Y‚ÇÇ).some

-- def functor.flat_min_left : u.flat_min Y‚ÇÅ Y‚ÇÇ ‚ü∂ Y‚ÇÅ :=
-- (category_theory.is_cofiltered_or_empty.cocone_objs Y‚ÇÅ Y‚ÇÇ).some_spec.some

-- def functor.flat_min_right : u.flat_min Y‚ÇÅ Y‚ÇÇ ‚ü∂ Y‚ÇÇ :=
-- (category_theory.is_cofiltered_or_empty.cocone_objs Y‚ÇÅ Y‚ÇÇ).some_spec.some_spec.some

-- def functor.flat_min_comm :=
-- (category_theory.is_cofiltered_or_empty.cocone_maps Y‚ÇÅ Y‚ÇÇ)
-- lemma lem0 (F : C ‚•§ D) (X : D·µí·µñ) :
--   (((whiskering_left _ _ _).obj (costructured_arrow.proj F.op X)) ‚ãô colim : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ _) =
--     Lan F.op ‚ãô (evaluation D·µí·µñ (Type u‚ÇÅ)).obj X :=
-- begin
--   apply functor.hext,
--   { intro Y, simp },
--   intros Y‚ÇÅ Y‚ÇÇ f,
--   simp only [functor.comp_map, evaluation_obj_map, whiskering_left_obj_map, Lan_map_app, heq_iff_eq],
--   apply (colimit.is_colimit (Lan.diagram F.op Y‚ÇÅ X)).uniq { X := colimit _, Œπ := _ }
--     (colim.map (whisker_left (costructured_arrow.proj F.op X) f)),
--   intro Z,
--   simp only [colimit.Œπ_map, colimit.cocone_Œπ, whisker_left_app, category.comp_id, category.assoc],
--   transitivity f.app Z.left ‚â´ (colimit.Œπ (costructured_arrow.map Z.hom ‚ãô Lan.diagram F.op Y‚ÇÇ X :
--     costructured_arrow F.op _ ‚•§ _) (costructured_arrow.mk (ùüô (F.op.obj Z.left))) : _)
--     ‚â´ (colimit.pre (Lan.diagram F.op Y‚ÇÇ X) (costructured_arrow.map Z.hom)),
--   { rw colimit.Œπ_pre,
--     congr,
--     simp only [category.id_comp, costructured_arrow.map_mk],
--     apply costructured_arrow.eq_mk },
--   { congr }
-- end

-- @[simps] noncomputable
-- def swap_cone (J : Type u‚ÇÅ) [small_category J] (F: C ‚•§ D ‚•§ E) (K : J ‚•§ C) [has_limit K] (X : D) :
--   cone ((curry.obj (prod.swap D J ‚ãô uncurry.obj (K ‚ãô F))).obj X) := {
--   X := (F.obj (limit K)).obj X,
--   œÄ := eq_to_hom (by {
--       apply functor.hext,
--       intro Y, simp,
--       intros Y‚ÇÅ Y‚ÇÇ f, simp, congr,
--   }) ‚â´ whisker_right (limit.cone K).œÄ ((curry.obj (prod.swap _ _ ‚ãô uncurry.obj F)).obj X)
-- }

-- -- lemma lemm (J : Type u‚ÇÅ) [small_category J] [fin_category J] {F: C ‚•§ D ‚•§ E} {K : J ‚•§ C}
-- -- [has_limits_of_shape J E] [has_colimits_of_shape D E] [has_limit K] :
-- -- ((F ‚ãô colim).map_cone (limit.cone K)).X =
-- --   colimit (curry.obj (prod.swap D J ‚ãô uncurry.obj (K ‚ãô F)) ‚ãô lim)
-- -- := by {

-- -- }

-- noncomputable theory

-- -- lemma is_limit_swap_cone (J : Type u‚ÇÅ) [small_category J] (F: C ‚•§ D ‚•§ E) (K : J ‚•§ C) [has_limit K]
-- --   (X : D) : is_limit (swap_cone J F K X) := {
-- --     lift := Œª s, by {
-- --       unfold swap_cone,
-- --       simp,
-- --     }
--   -- }

-- local attribute[reducible] prod.swap
-- variables (J : Type u‚ÇÅ) [small_category J] (K : J ‚•§ C) (F : C ‚•§ D ‚•§ E)
--   [has_limit K] [has_limits_of_shape J E]


-- def hom1 : F.obj (limit K) ‚ü∂ curry.obj (prod.swap D J ‚ãô uncurry.obj (K ‚ãô F)) ‚ãô lim := {
-- app := Œª Y, limit.post K ((curry.obj (prod.swap D C ‚ãô uncurry.obj F)).obj Y),
-- naturality' := Œª Y‚ÇÅ Y‚ÇÇ f, by {
--   let F' := curry.obj (prod.swap D C ‚ãô uncurry.obj F),
--   suffices : ((F'.map f).app (limit K)) ‚â´ limit.post K (F'.obj Y‚ÇÇ) =
--     limit.post K (F'.obj Y‚ÇÅ) ‚â´ lim_map (whisker_left K (F'.map f)),
--   { convert this using 2,
--     { simp, erw category.id_comp },
--     { simp only [functor.comp_map, lim_map_eq_lim_map], dsimp only [prod.swap],
--       congr, ext, simp, congr } },
--   ext,
--   simp only [nat_trans.naturality, limit.post_œÄ, lim_map_œÄ,
--     whisker_left_app, limit.post_œÄ_assoc, category.assoc],
-- }
-- }

-- def hom3 : F.obj (limit K) ‚ü∂ curry.obj (prod.swap D J ‚ãô uncurry.obj (K ‚ãô F)) ‚ãô lim := by {
--   let Y : D, admit,
--   let G := ((curry.obj (prod.swap D C ‚ãô uncurry.obj F)).obj Y),
--   have := (limit.is_limit (K ‚ãô G)).lift_cone_morphism (G.map_cone (limit.cone K)),
-- -- app := Œª Y, limit.post K ((curry.obj (prod.swap D C ‚ãô uncurry.obj F)).obj Y),
-- -- naturality' := Œª Y‚ÇÅ Y‚ÇÇ f, by {
-- --   let F' := curry.obj (prod.swap D C ‚ãô uncurry.obj F),
-- --   suffices : ((F'.map f).app (limit K)) ‚â´ limit.post K (F'.obj Y‚ÇÇ) =
-- --     limit.post K (F'.obj Y‚ÇÅ) ‚â´ lim_map (whisker_left K (F'.map f)),
-- --   { convert this using 2,
-- --     { simp, erw category.id_comp },
-- --     { simp only [functor.comp_map, lim_map_eq_lim_map], dsimp only [prod.swap],
-- --       congr, ext, simp, congr } },
-- --   ext,
-- --   simp only [nat_trans.naturality, limit.post_œÄ, lim_map_œÄ,
-- --     whisker_left_app, limit.post_œÄ_assoc, category.assoc],
-- -- }
-- }

-- variables [has_colimits_of_shape D E] [has_limit (K ‚ãô F ‚ãô colim)]

-- -- def hom2 : (F ‚ãô colim).map_cone (limit.cone K) ‚ü∂ limit.cone (K ‚ãô F ‚ãô colim) := {
-- --   hom := colim_map (hom1 _ _ _) ‚â´
-- --           (colimit_limit_to_limit_colimit (uncurry.obj (K ‚ãô F) : _)) ‚â´
-- --           lim_map (whisker_right (currying.unit_iso.inv.app (K ‚ãô F)) colim),
-- --   w' := Œª Y, by {
-- --       ext, unfold colimit_limit_to_limit_colimit hom1, simp,
-- --       erw category.id_comp,
-- --       erw limits.limit.post_œÄ_assoc,
-- --       congr,
-- --       simp,
-- --   }
-- -- }

-- -- set_option pp.universes true

-- def lem4 [fin_category J] [is_cofiltered D] [has_limits_of_shape J E]
--   {F : C ‚•§ D ‚•§ E} [has_limit (K ‚ãô F ‚ãô colim)] : is_limit ((F ‚ãô colim).map_cone (limit.cone K)) :=
-- begin
--   have : ((F ‚ãô colim).map_cone (limit.cone K)).X ‚âÖ limit (K ‚ãô F ‚ãô colim),
--   simp,
--   apply is_limit.of_iso_limit (limit.is_limit _),
--   symmetry
--   -- haveI : is_iso this.hom,
--   -- {

--   -- }
-- end

-- def lemlem (J : Type u‚ÇÅ) [category J] (F : C ‚•§ D ‚•§ E) (K : J ‚•§ C)
-- (H : ‚àÄ (X : D), preserves_limit K (F ‚ãô (evaluation _ _).obj X)) : preserves_limit K F := {
--   preserves := Œª c hc, by {
--     apply evaluation_jointly_reflects_limits,
--     intro X,
--     have := @preserves_limit.preserves _ _ _ _ _ _ _ _ (H X) _ hc,
--     -- have := (H X).preserves (((evaluation _ _).obj X).map_cone c),
--   }
-- }



-- lemma
set_option pp.universes true

#check preserves_limits_of_shape_if_evaluation

def lem1 (F : C ‚•§ D) [representably_flat F] (J : Type u‚ÇÅ) [H : small_category J] [fin_category J] :
  preserves_limits_of_shape J (Lan F.op : _ ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) :=
begin
  have : category.{u‚ÇÅ} (D·µí·µñ ‚•§ Type u‚ÇÅ) := infer_instance,
  have := @preserves_limits_of_shape_if_evaluation (D·µí·µñ ‚•§ Type u‚ÇÅ) _ C·µí·µñ,
  -- (Lan F.op : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) J,
  exact
{ preserves_limit := Œª K, {
  preserves := Œª c hc, by {
    apply evaluation_jointly_reflects_limits,
    intro X,
    change is_limit ((Lan F.op ‚ãô (evaluation D·µí·µñ (Type u‚ÇÅ)).obj X).map_cone c),
    rw ‚Üê lem0,
    apply is_limit.of_iso_limit _ (functor.map_iso _ ((limit.is_limit _).unique_up_to_iso hc)),
    haveI : preserves_limit K ((whiskering_left _ _ (Type u‚ÇÅ)).obj
      (costructured_arrow.proj F.op X)) := {
        preserves := Œª c hc, by {
          apply evaluation_jointly_reflects_limits,
          intro Y,
          change is_limit (((evaluation _ (Type u‚ÇÅ)).obj
            ((costructured_arrow.proj F.op X).obj Y)).map_cone c),
          exact preserves_limit.preserves hc,
        }
      },
    generalize : (whiskering_left _ _ (Type u‚ÇÅ)).obj
      (costructured_arrow.proj F.op X) = G,
    haveI : preserves_limits G,
    apply_instance,
    -- let G :=
    --   K ‚ãô
    --     ((whiskering_left _ _ _).obj (costructured_arrow.proj F.op X)),
    let := (colimit_limit_to_limit_colimit (uncurry.obj (K ‚ãô G) : _)),
    simp at this,
--     have : G ‚ãô colim = K ‚ãô (Lan F.op ‚ãô (evaluation D·µí·µñ (Type u‚ÇÅ)).obj X),
--     {
--       change K ‚ãô (_ ‚ãô colim) = K ‚ãô _,
--       congr' 1,
--       unfold Lan, simp,
--       apply functor.hext,
--       intro Y, simp,
--       intros Y‚ÇÅ Y‚ÇÇ f,
--       simp only [category_theory.adjunction.left_adjoint_of_equiv_map,
--  category_theory.whiskering_left_obj_map,
--  category_theory.functor.comp_map,
--  heq_iff_eq,
--  category_theory.evaluation_obj_map],
--       ext,
--       simp?,
--       congr,
--     }
    -- dsimp[G] at this,
    -- simp at this,
    -- delta evaluation functor.map_cone cones.functoriality,
    -- have := ,
    -- have := (structured_arrow.proj _ F).op ‚ãô F,
    -- have := colimit_limit_to_limit_colimit_is_iso,
    -- delta Lan,
    -- dsimp,
    -- apply is_limit.of_iso_limit _ (as_iso (colimit_limit_to_limit_colimit _)),
  }
} }
end

theorem thm (F : C ‚•§ D) : representably_flat F ‚Üî
  ‚àÄ (J : Type u‚ÇÅ) [H : small_category J] [@fin_category J H],
    ‚àÉ (H : @preserves_limits_of_shape _ _ _ _ J H (Lan F.op : _ ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ))), true := sorry

end category_theory
