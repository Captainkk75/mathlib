import category_theory.functor
import category_theory.eq_to_hom
import category_theory.over

namespace category_theory

universes v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

variables {E : Type u‚ÇÅ} [category.{v‚ÇÅ} E] {B : Type u‚ÇÇ} [category.{v‚ÇÇ} B] (p : E ‚•§ B)

namespace functor

def fiber (b : B) := { e : E // p.obj e = b }

instance (b : B) : category (p.fiber b) :=
{ hom := Œª e‚ÇÅ e‚ÇÇ, { œà : e‚ÇÅ.1 ‚ü∂ e‚ÇÇ.1 // p.map œà = eq_to_hom (by rw [e‚ÇÅ.2, e‚ÇÇ.2]) },
  id := Œª e, ‚ü®ùüô _, by simp‚ü©,
  comp := Œª _ _ _ œà‚ÇÅ œà‚ÇÇ, ‚ü®œà‚ÇÅ.1 ‚â´ œà‚ÇÇ.1, by { rw [map_comp, œà‚ÇÅ.2, œà‚ÇÇ.2], simp }‚ü© }

-- wrong: def fiber_equivalence (b : B) : { f : structured_arrow b p // is_iso f.hom } ‚âå p.fiber b :=
def fiber_equivalence (e : E) :
  { f : structured_arrow (p.obj e) p // is_iso f.hom } ‚âå p.fiber (p.obj e) :=
{ functor :=
  { obj := Œª f, ‚ü®e, rfl‚ü©,
    map := , },
  inverse := _,
  unit_iso := _,
  counit_iso := _
}

def fiber_inclusion (b : B) : p.fiber b ‚•§ E :=
{ obj := Œª e, e.1,
  map := Œª _ _ œà, œà.1 }

end
