/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.punit
import category_theory.comma
import category_theory.limits.functor_category
import category_theory.limits.shapes.terminal
import tactic

namespace category_theory
noncomputable theory

open category limits

universes v u‚ÇÅ u‚ÇÇ u‚ÇÉ
variables {C : Type v} {C' : Type u‚ÇÇ} {D : Type u‚ÇÉ}
variables [category.{v} C] [category.{v} C'] [category.{v} D]

section Ran

abbreviation Ran_index (p : C ‚•§ C') (c' : C') := comma (functor.from_punit c') p

abbreviation Ran_index_map (p : C ‚•§ C') {c' c'' : C'} (f : c'' ‚ü∂ c') :
  Ran_index p c' ‚•§ Ran_index p c'' := comma.map_left _ ((functor.const _).map f)

def Ran_index.mk {p : C ‚•§ C'} {c' : C'} {X : C} (f : c' ‚ü∂ p.obj X) : Ran_index p c' := ‚ü®‚ü®‚ü©, X, f‚ü©

lemma Ran_index.mk_hom_eq {p : C ‚•§ C'} {c' : C'} {X : C} {f : c' ‚ü∂ p.obj X} : (Ran_index.mk f).hom = f := rfl

def Ran_index.mk_hom {p : C ‚•§ C'} {c' : C'} {X Y : C} (f : c' ‚ü∂ p.obj X) (g : X ‚ü∂ Y) :
  Ran_index.mk f ‚ü∂ Ran_index.mk (f ‚â´ p.map g) :=
{ left := ùüô _,
  right := g,
  w' := by simpa }

@[simp]
lemma Ran_index_map_mk (p : C ‚•§ C') {c' c'' : C'} {X : C} (f : c' ‚ü∂ p.obj X) (g : c'' ‚ü∂ c') :
  (Ran_index_map p g).obj (Ran_index.mk f) = Ran_index.mk (g ‚â´ f) := rfl

@[simp]
lemma Ran_index_map_id (p : C ‚•§ C') {c' : C'} (j : Ran_index p c') :
  (Ran_index_map p (ùüô c')).obj j = j :=
begin
  cases j,
  delta Ran_index_map comma.map_left,
  tidy,
end

@[simp]
lemma Ran_index_map_comp_apply (p : C ‚•§ C') {c' c'' c''' : C'} (f : c''' ‚ü∂ c'') (g : c'' ‚ü∂ c')
  (j : Ran_index p c') :
  (Ran_index_map p (f ‚â´ g)).obj j = (Ran_index_map p f).obj ((Ran_index_map p g).obj j) :=
begin
  cases j,
  delta Ran_index_map comma.map_left,
  tidy,
end

abbreviation Ran_diagram (p : C ‚•§ C') (F : C ‚•§ D) (c' : C') : Ran_index p c' ‚•§ D :=
  comma.snd (functor.from_punit c') p ‚ãô F

def Ran_cone (p : C ‚•§ C') (F : C ‚•§ D) (G : C' ‚•§ D) (X : C') (f : p ‚ãô G ‚ü∂ F) :
  cone (Ran_diagram p F X) :=
{ X := G.obj X,
  œÄ :=
  { app := Œª i, G.map i.hom ‚â´ f.app i.right,
    naturality' := begin
      rintro ‚ü®xl,xr,x‚ü© ‚ü®yl,yr,y‚ü© ‚ü®fl,fr,ff‚ü©,
      dsimp at *,
      simp only [assoc, id_comp] at *,
      rw ff,
      have := f.naturality,
      tidy,
    end
    } }

@[simps]
def right_kan_obj (p : C ‚•§ C') (F : C ‚•§ D)
  [‚àÄ X, has_limits_of_shape (Ran_index p X) D] :
  C' ‚•§ D :=
{ obj := Œª c', limit (Ran_diagram p F c'),
  map := Œª X Y f, limit.pre (Ran_diagram _ _ _) (Ran_index_map _ f),
  map_id' := begin
    intro X,
    ext j,
    simp only [limit.pre_œÄ, id_comp],
    congr' 1,
    simp,
  end,
  map_comp' := begin
    intros X Y Z f g,
    ext j,
    erw [limit.pre_pre, limit.pre_œÄ, limit.pre_œÄ],
    congr' 1,
    simp,
  end }

@[simps]
def right_kan_equiv (p : C ‚•§ C') [‚àÄ X, has_limits_of_shape (Ran_index p X) D]
  (F : C ‚•§ D) (G : C' ‚•§ D) :
  (G ‚ü∂ right_kan_obj p F) ‚âÉ (((whiskering_left _ _ _).obj p).obj G ‚ü∂ F) :=
{ to_fun := Œª f,
  { app := Œª X, f.app _ ‚â´ limit.œÄ (Ran_diagram p F (p.obj X)) (Ran_index.mk (ùüô _)),
    naturality' := begin
      intros X Y ff,
      dsimp at *,
      simp only [assoc, nat_trans.naturality_assoc, right_kan_obj_map] at *,
      congr' 1,
      erw [limit.pre_œÄ, limit.w (Ran_diagram p F _) (Ran_index.mk_hom (ùüô _) ff)],
      congr,
      simp,
    end },
  inv_fun := Œª f,
  { app := Œª X, limit.lift (Ran_diagram p F X) (Ran_cone _ _ _ _ f),
    naturality' := begin
      intros X Y ff,
      ext k,
      erw [limit.lift_pre, limit.lift_œÄ, assoc, limit.lift_œÄ (Ran_cone p F G Y f) k],
      delta Ran_cone,
      dsimp,
      simp,
    end },
  left_inv := begin
    intros x,
    ext k j,
    dsimp,
    erw limit.lift_œÄ,
    delta Ran_cone Ran_diagram,
    dsimp,
    have := x.naturality,
    dsimp at *,
    simp at *,
    congr' 1,
    erw limit.pre_œÄ,
    cases j,
    delta Ran_diagram,
    dsimp,
    congr,
    tidy,
  end,
  right_inv := begin
    intros x,
    dsimp,
    ext,
    dsimp,
    erw limit.lift_œÄ,
    delta Ran_cone,
    dsimp,
    simp [Ran_index.mk_hom_eq],
    congr,
  end }.

def Ran (p : C ‚•§ C') [‚àÄ X, has_limits_of_shape (Ran_index p X) D] : (C ‚•§ D) ‚•§ C' ‚•§ D :=
begin
  refine adjunction.right_adjoint_of_equiv (Œª F G, (right_kan_equiv p G F).symm) _,
  intros X Y Z f g,
  ext _ ‚ü®jl,jr,j‚ü©,
  dsimp [right_kan_equiv],
  delta Ran_cone,
  tidy,
end

variable (D)
def Ran_adjunction (p : C ‚•§ C')
  [‚àÄ X, has_limits_of_shape (Ran_index p X) D] :
  (whiskering_left _ _ D).obj p ‚ä£ Ran p :=
adjunction.adjunction_of_equiv_right _ _

end Ran

@[simps]
def left_kan_obj (p : C ‚•§ C') (F : C ‚•§ D)
  [‚àÄ X, has_colimits_of_shape (comma p (functor.from_punit X)) D] :
  C' ‚•§ D :=
{ obj := Œª c', colimit (comma.fst p (functor.from_punit c') ‚ãô F),
  map := Œª X Y f,
    colimit.pre
      (comma.fst p (functor.from_punit Y) ‚ãô F)
      (comma.map_right _ ((functor.const _).map f)),
  map_id' := Œª X,
  begin
    rw functor.map_id,
    symmetry,
    refine (colimit.is_colimit (comma.map_right p _ ‚ãô comma.fst p _ ‚ãô F)).uniq
                (cocone.whisker _ _) _ _,
    rintro ‚ü®Y, ‚ü®‚ü©, g‚ü©,
    dsimp [comma.map_right],
    convert comp_id _ using 2,
    simp,
  end,
  map_comp' := Œª X Y Z f g,
  begin
    ext j,
    rw colimit.Œπ_pre,
    change _ = colimit.Œπ (comma.map_right p ((functor.const (discrete punit)).map f) ‚ãô
                            comma.fst p (functor.from_punit Y) ‚ãô F) j ‚â´ _ ‚â´ _,
    rw colimit.Œπ_pre_assoc,
    change _ = colimit.Œπ (comma.map_right p ((functor.const (discrete punit)).map g) ‚ãô
                            comma.fst p (functor.from_punit Z) ‚ãô F)
                         ((comma.map_right p ((functor.const (discrete punit)).map f)).obj j) ‚â´ _,
    rw [colimit.Œπ_pre, functor.map_comp],
    dsimp only [comma.map_right, functor.const.map_app, nat_trans.comp_app],
    rw assoc,
  end }

def left_kan_equiv (p : C ‚•§ C') [‚àÄ X, has_colimits_of_shape (comma p (functor.from_punit X)) D]
  (F : C ‚•§ D) (G : C' ‚•§ D) :
  (left_kan_obj p F ‚ü∂ G) ‚âÉ (F ‚ü∂ ((whiskering_left _ _ _).obj p).obj G) :=
{ to_fun := Œª f,
  { app := Œª X, begin
        refine _ ‚â´ f.app _,
        refine colimit.Œπ (comma.fst p (functor.from_punit (p.obj X)) ‚ãô F) ‚ü®X, ‚ü®‚ü©, ùüô _‚ü©,
      end,
    naturality' := Œª X Y g,
    begin
      dsimp only [whiskering_left_obj_obj, functor.comp_map],
      rw [assoc, ‚Üê f.naturality (p.map g), left_kan_obj_map],
      have := colimit.Œπ_pre
                (comma.fst p (functor.from_punit (p.obj Y)) ‚ãô F)
                (comma.map_right p ((functor.const (discrete punit)).map (p.map g)))
                ‚ü®X, punit.star, ùüô _‚ü©,
      erw reassoc_of this,
      clear this,
      rw ‚Üê assoc,
      congr' 1,
      apply colimit.w (comma.fst p (functor.from_punit (p.obj Y)) ‚ãô F)
              (‚ü®g, _, _‚ü© : comma_morphism ‚ü®_, _, _‚ü© ‚ü®_, _, _‚ü©),
      { apply ùüô _ },
      apply_auto_param,
    end },
  inv_fun := Œª f,
  { app := Œª j,
    begin
      apply colimit.desc _ ‚ü®_, _‚ü©,
      apply whisker_left _ f ‚â´ _,
      refine ‚ü®Œª X, G.map X.hom, _‚ü©,
      intros X Y g,
      dsimp only [whiskering_left_obj_obj, functor.comp_map, functor.const.obj_map, comma.fst_map],
      rw [‚Üê G.map_comp, g.w],
      dsimp,
      simp,
    end,
    naturality' := Œª j‚ÇÅ j‚ÇÇ Œ±,
    begin
      dsimp only [left_kan_obj_map],
      rw colimit.pre_desc,
      ext k,
      rw colimit.Œπ_desc,
      erw colimit.Œπ_desc_assoc,
      dsimp,
      simp,
    end },
  left_inv := Œª f,
  begin
    ext,
    dsimp only,
    rw colimit.Œπ_desc,
    dsimp only [nat_trans.comp_app, whisker_left_app, comma.fst_obj, comma.fst_map],
    rw [assoc],
    rw ‚Üê f.naturality j.hom,
    rw ‚Üê assoc,
    congr' 1,
    dsimp only [left_kan_obj_map, functor.const.obj_obj],
    change colimit.Œπ (comma.map_right p ((functor.const (discrete punit)).map j.hom) ‚ãô
                      comma.fst p (functor.from_punit x) ‚ãô F) _ ‚â´ _ = _,
    rw colimit.Œπ_pre,
    congr' 1,
    cases j,
    dsimp [comma.map_right],
    simp,
  end,
  right_inv := Œª f,
  begin
    ext,
    dsimp only [],
    rw colimit.Œπ_desc,
    dsimp,
    simp,
  end }

def left_kan (p : C ‚•§ C') [‚àÄ X, has_colimits_of_shape (comma p (functor.from_punit X)) D] :
  (C ‚•§ D) ‚•§ (C' ‚•§ D) :=
begin
  refine adjunction.left_adjoint_of_equiv (left_kan_equiv p) _,
  intros F G G' f g,
  ext,
  dsimp [left_kan_equiv],
  rw [assoc],
end

variable (D)
def left_kan_adjunction (p : C ‚•§ C')
  [‚àÄ X, has_colimits_of_shape (comma p (functor.from_punit X)) D] :
  left_kan p ‚ä£ (whiskering_left _ _ D).obj p :=
adjunction.adjunction_of_equiv_left _ _

@[simps]
def comma.terminal (p : C ‚•§ C') (X : C) : comma p (functor.from_punit (p.obj X)) :=
‚ü®_, punit.star, ùüô _‚ü©

/--
Show that `elements.initial A` is initial in the category of elements for the `yoneda` functor.
-/
def is_terminal (p : C ‚•§ C') (X : C) [full p] [faithful p] : is_terminal (comma.terminal p X) :=
{ lift := Œª s,
  begin
    refine ‚ü®p.preimage s.X.hom, eq_to_hom (by simp), _‚ü©,
    dsimp,
    simp,
  end,
  uniq' := Œª s m w,
  begin
    have := m.w,
    ext,
    dsimp,
    apply p.map_injective,
    dsimp [comma.terminal] at this,
    simp,
    rw comp_id at this,
    rw this,
    simp,
  end }

lemma thingy2 {J : Type v} [small_category J] {C : Type u‚ÇÅ} [category.{v} C]
  {F : J ‚•§ C} [has_colimit F] {c‚ÇÅ c‚ÇÇ : cocone F} (t‚ÇÅ : is_colimit c‚ÇÅ) (t‚ÇÇ : is_colimit c‚ÇÇ) :
  is_iso (t‚ÇÅ.desc c‚ÇÇ) :=
begin
  letI : is_iso (t‚ÇÅ.desc_cocone_morphism c‚ÇÇ) := is_colimit.hom_is_iso t‚ÇÅ t‚ÇÇ _,
  apply category_theory.functor.map_is_iso (cocones.forget F) (t‚ÇÅ.desc_cocone_morphism c‚ÇÇ),
end

lemma coreflective (p : C ‚•§ C') [‚àÄ (X : C'), has_colimits_of_shape (comma p (functor.from_punit X)) D]
  [full p] [faithful p] : is_iso (left_kan_adjunction D p).unit :=
begin
  apply nat_iso.is_iso_of_is_iso_app _,
  intro F,
  apply nat_iso.is_iso_of_is_iso_app _,
  intro Y,
  dsimp [left_kan_adjunction, left_kan_equiv],
  rw comp_id,
  exact thingy2 (colimit_of_diagram_terminal (is_terminal p Y) _) (colimit.is_colimit _),
end

end category_theory
