/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import algebra.homology.homology
import category_theory.preadditive.additive_functor

/-!
# Homology is an additive functor

When `V` is preadditive, `homological_complex V c` is also preadditive,
and `homology_functor` is additive.

TODO: similarly for `R`-linear.
-/

universes v u

open_locale classical
noncomputable theory

open category_theory category_theory.limits homological_complex

variables {Œπ : Type*}
variables {V : Type u} [category.{v} V] [preadditive V]

variables {c : complex_shape Œπ} {C D E : homological_complex V c}
variables (f g : C ‚ü∂ D) (h k : D ‚ü∂ E) (i : Œπ)

namespace homological_complex

instance : has_zero (C ‚ü∂ D) := ‚ü®{ f := Œª i, 0 }‚ü©
instance : has_add (C ‚ü∂ D) := ‚ü®Œª f g, { f := Œª i, f.f i + g.f i, }‚ü©
instance : has_neg (C ‚ü∂ D) := ‚ü®Œª f, { f := Œª i, -(f.f i), }‚ü©
instance : has_sub (C ‚ü∂ D) := ‚ü®Œª f g, { f := Œª i, f.f i - g.f i, }‚ü©

@[simp] lemma zero_f_apply (i : Œπ) : (0 : C ‚ü∂ D).f i = 0 := rfl
@[simp] lemma add_f_apply (f g : C ‚ü∂ D) (i : Œπ) : (f + g).f i = f.f i + g.f i := rfl
@[simp] lemma neg_f_apply (f : C ‚ü∂ D) (i : Œπ) : (-f).f i = -(f.f i) := rfl
@[simp] lemma sub_f_apply (f g : C ‚ü∂ D) (i : Œπ) : (f - g).f i = f.f i - g.f i := rfl

instance : add_comm_group (C ‚ü∂ D) :=
function.injective.add_comm_group hom.f
  homological_complex.hom_f_injective (by tidy) (by tidy) (by tidy) (by tidy)

instance : preadditive (homological_complex V c) := {}

end homological_complex

namespace homological_complex

variables [has_zero_object V]

instance cycles_additive [has_equalizers V] : (cycles_functor V c i).additive :=
{ map_zero' := Œª C D, by { dsimp [cycles_functor], ext, simp, },
  map_add' := Œª C D f g, by { dsimp [cycles_functor], ext, simp, }, }

variables [has_images V] [has_image_maps V]

instance boundaries_additive : (boundaries_functor V c i).additive :=
{ map_zero' := Œª C D, by { dsimp [boundaries_functor], ext, simp, },
  map_add' := Œª C D f g, by { dsimp [boundaries_functor], ext, simp, }, }

variables [has_equalizers V] [has_cokernels V]

instance homology_additive : (homology_functor V c i).additive :=
{ map_zero' := Œª C D, begin
    dsimp [homology_functor],
    ext,
    simp only [limits.cokernel.œÄ_desc, limits.comp_zero],
    convert zero_comp,
    ext,
    simp,
  end,
  map_add' := Œª C D f g, begin
    dsimp [homology_functor],
    ext,
    simp only [limits.cokernel.œÄ_desc, preadditive.comp_add,
      limits.coequalizer_as_cokernel, ‚Üêpreadditive.add_comp],
    congr,
    ext,
    simp,
  end }

end homological_complex

namespace category_theory

variables {W : Type*} [category W] [preadditive W]

/--
An additive functor induces a functor between homological complexes.
This is sometimes called the "prolongation".
-/
@[simps]
def functor.map_homological_complex (F : V ‚•§ W) [F.additive] (c : complex_shape Œπ) :
  homological_complex V c ‚•§ homological_complex W c :=
{ obj := Œª C,
  { X := Œª i, F.obj (C.X i),
    d := Œª i j, F.map (C.d i j),
    shape' := Œª i j w, by rw [C.shape _ _ w, F.map_zero],
    d_comp_d' := Œª i j k, by rw [‚ÜêF.map_comp, C.d_comp_d, F.map_zero], },
  map := Œª C D f,
  { f := Œª i, F.map (f.f i),
    comm' := Œª i j, by { dsimp,  rw [‚ÜêF.map_comp, ‚ÜêF.map_comp, f.comm], }, }, }.

instance functor.map_homogical_complex_additive
  (F : V ‚•§ W) [F.additive] (c : complex_shape Œπ) : (F.map_homological_complex c).additive := {}

@[simps]
def nat_trans.map_homological_complex {F G : V ‚•§ W} [F.additive] [G.additive]
  (Œ± : F ‚ü∂ G) (c : complex_shape Œπ) : F.map_homological_complex c ‚ü∂ G.map_homological_complex c :=
{ app := Œª C, { f := Œª i, Œ±.app _, }, }

@[simp] lemma nat_trans.map_homological_complex_id (c : complex_shape Œπ) (F : V ‚•§ W) [F.additive] :
  nat_trans.map_homological_complex (ùüô F) c = ùüô (F.map_homological_complex c) :=
by tidy

@[simp] lemma nat_trans.map_homological_complex_comp (c : complex_shape Œπ)
  {F G H : V ‚•§ W} [F.additive] [G.additive] [H.additive]
  (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H):
  nat_trans.map_homological_complex (Œ± ‚â´ Œ≤) c =
    nat_trans.map_homological_complex Œ± c ‚â´ nat_trans.map_homological_complex Œ≤ c :=
by tidy

@[simp, reassoc] lemma nat_trans.map_homological_complex_naturality {c : complex_shape Œπ}
  {F G : V ‚•§ W} [F.additive] [G.additive] (Œ± : F ‚ü∂ G) {C D : homological_complex V c} (f : C ‚ü∂ D) :
  (F.map_homological_complex c).map f ‚â´ (nat_trans.map_homological_complex Œ± c).app D =
    (nat_trans.map_homological_complex Œ± c).app C ‚â´ (G.map_homological_complex c).map f :=
by tidy

end category_theory
