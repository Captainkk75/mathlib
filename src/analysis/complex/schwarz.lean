/-
Copyright (c) 2022 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import analysis.complex.abs_max
import analysis.complex.removable_singularity

/-!
# Schwarz lemma

In this file we prove several versions of the Schwarz lemma.

* `complex.norm_deriv_le_div_of_maps_to_ball`, `complex.abs_deriv_le_div_of_maps_to_ball`: if
  `f : ‚ÑÇ ‚Üí E` sends an open disk with center `c` and a positive radius `R‚ÇÅ` to an open ball with
  center `f c` and radius `R‚ÇÇ`, then the absolute value of the derivative of `f` at `c` is at most
  the ratio `R‚ÇÇ / R‚ÇÅ`;

* `complex.dist_le_div_mul_dist_of_maps_to_ball`: if `f : ‚ÑÇ ‚Üí E` sends an open disk with center `c`
  and radius `R‚ÇÅ` to an open disk with center `f c` and radius `R‚ÇÇ`, then for any `z` in the former
  disk we have `dist (f z) (f c) ‚â§ (R‚ÇÇ / R‚ÇÅ) * dist z c`;

* `complex.abs_deriv_le_one_of_maps_to_ball`: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk of positive radius
  to itself and the center of this disk to itself, then the absolute value of the derivative of `f`
  at the center of this disk is at most `1`;

* `complex.dist_le_dist_of_maps_to_ball`: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk to itself and the center
  `c` of this disk to itself, then for any point `z` of this disk we have `dist (f z) c ‚â§ dist z c`;

* `complex.abs_le_abs_of_maps_to_ball`: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk with center `0` to itself,
  then for any point `z` of this disk we have `abs (f z) ‚â§ abs z`.

## Implementation notes

We prove some versions of the Schwarz lemma for a map `f : ‚ÑÇ ‚Üí E` taking values in any normed space
over complex numbers.

## TODO

* Prove that these inequalities are strict unless `f` is an affine map.

* Prove that any diffeomorphism of the unit disk to itself is a M√∂bius map.

## Tags

Schwarz lemma
-/

open asymptotics metric set function filter topological_space
open_locale topological_space

local postfix `ÃÇ`:100 := uniform_space.completion

namespace complex

variables {E F : Type*} [normed_group E] [normed_space ‚ÑÇ E] [normed_group F] [normed_space ‚ÑÇ F]
  {r R R‚ÇÅ R‚ÇÇ : ‚Ñù} {n : ‚Ñï}

lemma exists_differentiable_on_eq_zpow_succ_smul_add_of_is_o [complete_space E] {f : ‚ÑÇ ‚Üí E} {c : ‚ÑÇ}
  {n : ‚Ñ§} (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ))
  (ho : (Œª x, f x - f c) =o[ùìù[‚â†] c] (Œª x, (x - c) ^ n)) :
  ‚àÉ (g : ‚ÑÇ ‚Üí E) y, differentiable_on ‚ÑÇ g (ball c R‚ÇÅ) ‚àß f = Œª x, (x - c) ^ (n + 1) ‚Ä¢ g x + y :=
begin
  rcases eq_or_ne n (-1) with rfl|hn,
  { refine ‚ü®f, 0, hd, funext $ Œª x, _‚ü©,
    rw [neg_add_self, zpow_zero, one_smul, add_zero] },
  have hn‚ÇÄ : (0 : ‚ÑÇ) ^ (n + 1) = 0,
    from zero_zpow _ (mt eq_neg_iff_add_eq_zero.2 hn),
  suffices : ‚àÉ (g : ‚ÑÇ ‚Üí E), differentiable_on ‚ÑÇ g (ball c R‚ÇÅ) ‚àß
    ‚àÄ x ‚â† c, (x - c) ^ (n + 1) ‚Ä¢ g x = f x - f c,
  { rcases this with ‚ü®g, hgd, hfg‚ü©,
    refine ‚ü®g, f c, hgd, funext $ Œª x, _‚ü©,
    rcases eq_or_ne x c with rfl|hx,
    { rw [sub_self, hn‚ÇÄ, zero_smul, zero_add] },
    { rw [‚Üê sub_eq_iff_eq_add, ‚Üê hfg x hx] } },
  cases le_or_lt R‚ÇÅ 0 with hR‚ÇÅ hR‚ÇÅ,
  { rw [ball_eq_empty.2 hR‚ÇÅ],
    refine ‚ü®Œª x, ((x - c) ^ (n + 1))‚Åª¬π ‚Ä¢ (f x - f c), differentiable_on_empty, Œª x hx, _‚ü©,
    exact smul_inv_smul‚ÇÄ (zpow_ne_zero _ (sub_ne_zero.2 hx)) _ },
  set g : ‚ÑÇ ‚Üí E := Œª x, ((x - c) ^ (n + 1))‚Åª¬π ‚Ä¢ (f x - f c) with hg,
  have hgc : g c = 0,
  { simp only [g], rw [sub_self, hn‚ÇÄ, inv_zero, zero_smul] },
  refine ‚ü®update g c (lim (ùìù[‚â†] c) g), _, Œª x hx, _‚ü©,
  { refine differentiable_on_update_lim_of_is_o (ball_mem_nhds _ hR‚ÇÅ) _ _,
    { simp only [g, ‚Üê zpow_neg],
      refine ((differentiable_on_id.sub_const c).zpow $ or.inl _).smul _,
      exacts [Œª x hx, sub_ne_zero.2 hx.2, (hd.sub_const _).mono $ diff_subset _ _] },
    { calc (Œª x, g x - g c) =·∂†[ùìù[‚â†] c] g : by simp only [hgc, sub_zero]
      ... =o[ùìù[‚â†] c] Œª x, ((x - c) ^ (n + 1))‚Åª¬π ‚Ä¢ (x - c) ^ n : _
      ... =·∂†[ùìù[‚â†] c] Œª x, (x - c)‚Åª¬π : _,
      { exact (is_O_refl (Œª x, ((x - c) ^ (n + 1))‚Åª¬π) (ùìù[‚â†] c)).smul_is_o ho },
      { refine eventually_mem_nhds_within.mono (Œª x (hx : x ‚â† c), _),
        simp only [smul_eq_mul, zpow_add_one‚ÇÄ (sub_ne_zero.2 hx), mul_inv_rev],
        exact inv_mul_cancel_right‚ÇÄ (zpow_ne_zero _ (sub_ne_zero.2 hx)) _ } } },
  { rw [update_noteq hx, smul_inv_smul‚ÇÄ],
    exact zpow_ne_zero _ (sub_ne_zero.2 hx) }
end

lemma exists_differentiable_on_eq_pow_succ_smul_add_of_is_o [complete_space E] {f : ‚ÑÇ ‚Üí E} {c : ‚ÑÇ}
  {n : ‚Ñï} (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ))
  (ho : (Œª x, f x - f c) =o[ùìù[‚â†] c] (Œª x, (x - c) ^ n)) :
  ‚àÉ (g : ‚ÑÇ ‚Üí E) y, differentiable_on ‚ÑÇ g (ball c R‚ÇÅ) ‚àß f = Œª x, (x - c) ^ (n + 1) ‚Ä¢ g x + y :=
begin
  simp only [‚Üê zpow_coe_nat, nat.cast_succ] at *,
  exact exists_differentiable_on_eq_zpow_succ_smul_add_of_is_o hd ho
end

/-- An auxiliary lemma for `complex.norm_dslope_le_div_of_maps_to_ball`. -/
lemma schwarz_aux {f : ‚ÑÇ ‚Üí E} {c z : ‚ÑÇ} (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ))
  (h_maps : maps_to f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (hz : z ‚àà ball c R‚ÇÅ) (hne : z ‚â† c)
  (ho : (Œª x, f x - f c) =o[ùìù[‚â†] c] (Œª x, (x - c) ^ n)) :
  dist (f z) (f c) ‚â§ (dist z c / R‚ÇÅ) ^ (n + 1) * R‚ÇÇ ‚àß
    dist (f z) (f c) = (dist z c / R‚ÇÅ) ^ (n + 1) * R‚ÇÇ ‚Üí
      (‚àÄ w ‚àà ball c R‚ÇÅ, dist (f w) (f c) = (dist w c / R‚ÇÅ) ^ (n + 1) * R‚ÇÇ) ‚àß
      (strict_convex_space ‚Ñù E ‚Üí ‚àÄ w ‚àà ball c R‚ÇÅ, 
    :=
begin
  rcases eq_or_ne z c with rfl|hne, { simp },
  have hR‚ÇÅ : 0 < R‚ÇÅ, from nonempty_ball.1 ‚ü®z, hz‚ü©,
  suffices : ‚àÄ·∂† r in ùìù[<] R‚ÇÅ, dist (f z) (f c) ‚â§ (dist z c / r) ^ (n + 1) * R‚ÇÇ,
  { refine ge_of_tendsto _ this,
    exact (((tendsto_const_nhds.div tendsto_id hR‚ÇÅ.ne').pow _).mul_const _).mono_left
      nhds_within_le_nhds },
  rcases exists_differentiable_on_eq_pow_succ_smul_add_of_is_o hd ho with ‚ü®g, y, hgd, rfl‚ü©,
  clear hd ho,
  rw mem_ball at hz,
  filter_upwards [Ioo_mem_nhds_within_Iio ‚ü®hz, le_rfl‚ü©] with r hr,
  simp only [sub_self, zero_pow n.succ_pos, zero_smul, zero_add, dist_eq_norm, add_sub_cancel,
    norm_smul, norm_pow, div_pow, div_mul_comm _ _ R‚ÇÇ] at h_maps ‚ä¢, rw mul_comm,
  refine mul_le_mul_of_nonneg_right _ (pow_nonneg (norm_nonneg _) _),
  
  -- have hr‚ÇÄ : 0 < r, from dist_nonneg.trans_lt hr.1,
  -- have hr‚ÇÄ' : r ‚â† 0, from hr‚ÇÄ.ne',
  -- have hbr : closed_ball c r ‚äÜ ball c R‚ÇÅ, from closed_ball_subset_ball hr.2,
  -- set g : ‚ÑÇ ‚Üí E := Œª x, ((x - c) ^ (n + 1))‚Åª¬π ‚Ä¢ (f x - f c) with hg,
  -- set G : ‚ÑÇ ‚Üí E := update g c (lim (ùìù[‚â†] c) g) with hG,
  -- have hGn : ‚àÄ {x C}, x ‚â† c ‚Üí (‚à•G x‚à• ‚â§ C ‚Üî dist (f x) (f c) ‚â§ C * (dist x c) ^ (n + 1)),
  -- { intros x C hx,
  --   rw [hG, update_noteq hx, hg, norm_smul, norm_inv, norm_pow, ‚Üê div_eq_inv_mul, ‚Üê dist_eq_norm,
  --     ‚Üê dist_eq_norm, div_le_iff (pow_pos (dist_pos.2 hx) _)] },
  -- suffices : ‚à•G z‚à• ‚â§ R‚ÇÇ / r ^ (n + 1),
  -- { rwa [hGn hne, div_mul_comm, ‚Üê div_pow] at this },
  -- have hgc : g c = 0, by simp_rw [hg, sub_self (f c), smul_zero],
  -- have hgd : differentiable_on ‚ÑÇ g (closed_ball c r \ {c}),
  -- { refine differentiable_on.smul _ ((hd.mono $ (diff_subset _ _).trans hbr).sub_const _),
  --   refine ((differentiable_on_id.sub_const _).pow _).inv (Œª x hx, pow_ne_zero _ _),
  --   exact sub_ne_zero.2 hx.2 },
  -- have hgo : (Œª z, g z - g c) =o[ùìù[‚â†] c] Œª z, (z - c)‚Åª¬π,
  -- { calc (Œª x, g x - g c) =·∂†[ùìù[‚â†] c] g : by simp only [hgc, sub_zero]
  --   ... =o[ùìù[‚â†] c] Œª x, ((x - c) ^ (n + 1))‚Åª¬π ‚Ä¢ (x - c) ^ n : (is_O_refl _ _).smul_is_o ho
  --   ... =·∂†[ùìù[‚â†] c] Œª x, (x - c)‚Åª¬π : eventually_mem_nhds_within.mono $ Œª x (hx : x ‚â† c),
  --     by simp only [smul_eq_mul, pow_succ, mul_inv,
  --       inv_mul_cancel_right‚ÇÄ (pow_ne_zero _ (sub_ne_zero.2 hx))] },
  -- have hGd : diff_cont_on_cl ‚ÑÇ G (ball c r),
  -- { apply differentiable_on.diff_cont_on_cl,
  --   rw [closure_ball c hr‚ÇÄ'],
  --   exact differentiable_on_update_lim_of_is_o (closed_ball_mem_nhds _ hr‚ÇÄ) hgd hgo },
  -- refine norm_le_of_forall_mem_frontier_norm_le bounded_ball hGd _ (subset_closure hr.1),
  -- rw frontier_ball c hr‚ÇÄ',
  -- intros z hz,
  -- rw [hGn (ne_of_mem_sphere hz hr‚ÇÄ'), mem_sphere.1 hz, div_mul_cancel _ (pow_ne_zero _ hr‚ÇÄ')],
  -- exact le_of_lt (h_maps $ hbr $ le_of_eq hz)
end

lemma dist_le_div_pow_succ_mul_of_maps_to_ball_of_is_o {f : E ‚Üí F} {c z : E}
  (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ))
  (h_maps : maps_to f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (hz : z ‚àà ball c R‚ÇÅ)
  (ho : (Œª x, f x - f c) =o[ùìù c] (Œª x, ‚à•x - c‚à• ^ n)) :
  dist (f z) (f c) ‚â§ (dist z c / R‚ÇÅ) ^ (n + 1) * R‚ÇÇ :=
begin
end

/-- The **Schwarz Lemma**: if `f : E ‚Üí F` sends an open disk with center `c` and radius `R‚ÇÅ` to an
open ball with center `f c` and radius `R‚ÇÇ`, then for any `z` in the former disk we have
`dist (f z) (f c) ‚â§ (R‚ÇÇ / R‚ÇÅ) * dist z c`. -/
lemma dist_le_div_mul_dist_of_maps_to_ball {f : E ‚Üí F} {c z : E}
  (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ)) (h_maps : maps_to f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ))
  (hz : z ‚àà ball c R‚ÇÅ) :
  dist (f z) (f c) ‚â§ (R‚ÇÇ / R‚ÇÅ) * dist z c :=
begin
  
end

#exit

/-- Two cases of the **Schwarz Lemma** (derivative and distance), merged together. -/
lemma norm_dslope_le_div_of_maps_to_ball (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ))
  (h_maps : maps_to f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (hz : z ‚àà ball c R‚ÇÅ) :
  ‚à•dslope f c z‚à• ‚â§ R‚ÇÇ / R‚ÇÅ :=
begin
  have hR‚ÇÅ : 0 < R‚ÇÅ, from nonempty_ball.1 ‚ü®z, hz‚ü©,
  have hR‚ÇÇ : 0 < R‚ÇÇ, from nonempty_ball.1 ‚ü®f z, h_maps hz‚ü©,
  cases eq_or_ne (dslope f c z) 0 with hc hc,
  { rw [hc, norm_zero], exact div_nonneg hR‚ÇÇ.le hR‚ÇÅ.le },
  rcases exists_dual_vector ‚ÑÇ _ hc with ‚ü®g, hg, hgf‚ü©,
  have hg' : ‚à•g‚à•‚Çä = 1, from nnreal.eq hg,
  have hg‚ÇÄ : ‚à•g‚à•‚Çä ‚â† 0, by simpa only [hg'] using one_ne_zero,
  calc ‚à•dslope f c z‚à• = ‚à•dslope (g ‚àò f) c z‚à• :
    begin
      rw [g.dslope_comp, hgf, is_R_or_C.norm_of_real, norm_norm],
      exact Œª _, hd.differentiable_at (ball_mem_nhds _ hR‚ÇÅ)
    end
  ... ‚â§ R‚ÇÇ / R‚ÇÅ :
    begin
      refine schwarz_aux (g.differentiable.comp_differentiable_on hd)
        (maps_to.comp _ h_maps) hz,
      simpa only [hg', nnreal.coe_one, one_mul] using g.lipschitz.maps_to_ball hg‚ÇÄ (f c) R‚ÇÇ
    end
end

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí E` sends an open disk with center `c` and a positive radius
`R‚ÇÅ` to an open ball with center `f c` and radius `R‚ÇÇ`, then the norm of the derivative of `f` at
`c` is at most the ratio `R‚ÇÇ / R‚ÇÅ`. -/
lemma norm_deriv_le_div_of_maps_to_ball (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ))
  (h_maps : maps_to f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (h‚ÇÄ : 0 < R‚ÇÅ) :
  ‚à•deriv f c‚à• ‚â§ R‚ÇÇ / R‚ÇÅ :=
by simpa only [dslope_same] using norm_dslope_le_div_of_maps_to_ball hd h_maps (mem_ball_self h‚ÇÄ)

end space

section space_space

variables {E F : Type*} [normed_group E] [normed_space ‚ÑÇ E] [normed_group F] [normed_space ‚ÑÇ F]
  {R R‚ÇÅ R‚ÇÇ : ‚Ñù} {f : E ‚Üí F} {c z : E}

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí E` sends an open disk with center `c` and radius `R‚ÇÅ` to an
open ball with center `f c` and radius `R‚ÇÇ`, then for any `z` in the former disk we have
`dist (f z) (f c) ‚â§ (R‚ÇÇ / R‚ÇÅ) * dist z c`. -/
lemma dist_le_div_mul_dist_of_maps_to_ball (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ))
  (h_maps : maps_to f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (hz : z ‚àà ball c R‚ÇÅ) :
  dist (f z) (f c) ‚â§ (R‚ÇÇ / R‚ÇÅ) * dist z c :=
begin
  rcases eq_or_ne z c with rfl|hne, { simp only [dist_self, mul_zero] },
  have h‚ÇÄ : ‚à•z - c‚à• ‚â† 0, by simpa [sub_eq_zero],
  obtain ‚ü®x, y, hx‚ÇÄ, hx, hy, rfl‚ü© : ‚àÉ (x : ‚Ñù) (y : E), 0 ‚â§ x ‚àß x < R‚ÇÅ ‚àß ‚à•y‚à• = 1 ‚àß c + x ‚Ä¢ y = z,
  { refine ‚ü®‚à•z - c‚à•, (‚à•z - c‚à•)‚Åª¬π ‚Ä¢ (z - c), norm_nonneg _, mem_ball_iff_norm.1 hz, _, _‚ü©,
    { rw [norm_smul, norm_inv, norm_norm, inv_mul_cancel h‚ÇÄ] },
    { rw [smul_inv_smul‚ÇÄ h‚ÇÄ, add_sub_cancel'_right] } },
  set g : ‚ÑÇ ‚Üí F := Œª a, f (c + a ‚Ä¢ y),
  
-- simpa only [dslope_of_ne _ hne, slope_def_module, norm_smul, norm_inv,
  --   ‚Üê div_eq_inv_mul, ‚Üê dist_eq_norm, div_le_iff (dist_pos.2 hne)]
  --   using norm_dslope_le_div_of_maps_to_ball hd h_maps hz
end

/-- The **Schwarz Lemma**: if `f : E ‚Üí F` sends an open disk with center `c` and a positive radius
`R‚ÇÅ` to an open ball with center `f c` and radius `R‚ÇÇ`, then the norm of the Fr√©chet derivative of
`f` at `c` is at most the ratio `R‚ÇÇ / R‚ÇÅ`. -/
lemma norm_fderiv_le_div_of_maps_to_ball (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ))
  (h_maps : maps_to f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (h‚ÇÄ : 0 < R‚ÇÅ) :
  ‚à•fderiv ‚Ñù f c‚à• ‚â§ R‚ÇÇ / R‚ÇÅ :=
have hR‚ÇÇ : 0 < R‚ÇÇ, from nonempty_ball.1 ‚ü®f c, h_maps $ mem_ball_self h‚ÇÄ‚ü©,
continuous_linear_map.op_norm_le_of_unit_norm (div_pos hR‚ÇÇ h‚ÇÄ).le $ Œª z hz,
calc ‚à•fderiv ‚Ñù f c z‚à• = ‚à•deriv (Œª x : ‚ÑÇ, f (c + x ‚Ä¢ z)) 0‚à• : _
... ‚â§ R‚ÇÇ / R‚ÇÅ : norm_deriv_le_div_of_maps_to_ball

end space_space

variables {f : ‚ÑÇ ‚Üí ‚ÑÇ} {c z : ‚ÑÇ} {R R‚ÇÅ R‚ÇÇ : ‚Ñù}

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk with center `c` and a positive radius
`R‚ÇÅ` to an open disk with center `f c` and radius `R‚ÇÇ`, then the absolute value of the derivative of
`f` at `c` is at most the ratio `R‚ÇÇ / R‚ÇÅ`. -/
lemma abs_deriv_le_div_of_maps_to_ball (hd : differentiable_on ‚ÑÇ f (ball c R‚ÇÅ))
  (h_maps : maps_to f (ball c R‚ÇÅ) (ball (f c) R‚ÇÇ)) (h‚ÇÄ : 0 < R‚ÇÅ) :
  abs (deriv f c) ‚â§ R‚ÇÇ / R‚ÇÅ :=
norm_deriv_le_div_of_maps_to_ball hd h_maps h‚ÇÄ

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk of positive radius to itself and the
center of this disk to itself, then the absolute value of the derivative of `f` at the center of
this disk is at most `1`. -/
lemma abs_deriv_le_one_of_maps_to_ball (hd : differentiable_on ‚ÑÇ f (ball c R))
  (h_maps : maps_to f (ball c R) (ball c R)) (hc : f c = c) (h‚ÇÄ : 0 < R) :
  abs (deriv f c) ‚â§ 1 :=
(norm_deriv_le_div_of_maps_to_ball hd (by rwa hc) h‚ÇÄ).trans_eq (div_self h‚ÇÄ.ne')

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk to itself and the center `c` of this
disk to itself, then for any point `z` of this disk we have `dist (f z) c ‚â§ dist z c`. -/
lemma dist_le_dist_of_maps_to_ball_self (hd : differentiable_on ‚ÑÇ f (ball c R))
  (h_maps : maps_to f (ball c R) (ball c R)) (hc : f c = c) (hz : z ‚àà ball c R) :
  dist (f z) c ‚â§ dist z c :=
have hR : 0 < R, from nonempty_ball.1 ‚ü®z, hz‚ü©,
by simpa only [hc, div_self hR.ne', one_mul]
  using dist_le_div_mul_dist_of_maps_to_ball hd (by rwa hc) hz

/-- The **Schwarz Lemma**: if `f : ‚ÑÇ ‚Üí ‚ÑÇ` sends an open disk with center `0` to itself, the for any
point `z` of this disk we have `abs (f z) ‚â§ abs z`. -/
lemma abs_le_abs_of_maps_to_ball_self (hd : differentiable_on ‚ÑÇ f (ball 0 R))
  (h_maps : maps_to f (ball 0 R) (ball 0 R)) (h‚ÇÄ : f 0 = 0) (hz : abs z < R) :
  abs (f z) ‚â§ abs z :=
begin
  replace hz : z ‚àà ball (0 : ‚ÑÇ) R, from mem_ball_zero_iff.2 hz,
  simpa only [dist_zero_right] using dist_le_dist_of_maps_to_ball_self hd h_maps h‚ÇÄ hz
end

end complex
