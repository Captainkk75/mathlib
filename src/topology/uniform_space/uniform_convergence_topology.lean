/-
Copyright (c) 2022 Anatole Dedecker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anatole Dedecker
-/
import topology.uniform_space.uniform_convergence
import topology.uniform_space.pi

/-!
# Topology and uniform structure of uniform convergence

This files endows `Œ± ‚Üí Œ≤` with the topologies / uniform structures of
- uniform convergence on `Œ±` (in the `uniform_convergence` namespace)
- uniform convergence on a specified family `ùîñ` of sets of `Œ±`
  (in the `uniform_convergence_on` namespace), also called `ùîñ`-convergence

Usual examples of the second construction include :
- the topology of compact convergence, when `ùîñ` is the set of compacts of `Œ±`
- the strong topology on the dual of a TVS `E`, when `ùîñ` is the set of Von Neuman bounded subsets
  of `E`
- the weak-* topology on the dual of a TVS `E`, when `ùîñ` is the set of singletons of `E`.

## Main definitions

* `uniform_convergence.gen` : basis sets for the uniformity of uniform convergence
* `uniform_convergence.uniform_space` : uniform structure of uniform convergence
* `uniform_convergence_on.uniform_space` : uniform structure of ùîñ-convergence

## Main statements

* `uniform_convergence.uniform_continuous_eval` : evaluation is uniformly continuous
* `uniform_convergence.t2_space` : the topology of uniform convergence on `Œ± ‚Üí Œ≤` is T2 if
  `Œ≤` is T2.
* `uniform_convergence.tendsto_iff_tendsto_uniformly` : `uniform_convergence.uniform_space` is
  indeed the uniform structure of uniform convergence

* `uniform_convergence_on.uniform_continuous_eval_of_mem` : evaluation at a point contained in a
  set of `ùîñ` is uniformly continuous
* `uniform_convergence.t2_space` : the topology of `ùîñ`-convergence on `Œ± ‚Üí Œ≤` is T2 if
  `Œ≤` is T2 and `ùîñ` covers `Œ±`
* `uniform_convergence_on.tendsto_iff_tendsto_uniformly_on` :
  `uniform_convergence_on.uniform_space` is indeed the uniform structure of `ùîñ`-convergence

## Implementation details

We do not declare these structures as instances, since they would conflict with `Pi.uniform_space`.

## TODO

* Show that the uniform structure of `ùîñ`-convergence is exactly the structure of `ùîñ'`-convergence,
  where `ùîñ'` is the bornology generated by `ùîñ`.
* Add a type synonym for `Œ± ‚Üí Œ≤` endowed with the structures of uniform convergence

## References

* [N. Bourbaki, *General Topology*][bourbaki1966]

## Tags

uniform convergence
-/


noncomputable theory
open_locale topological_space classical uniformity filter

local attribute [-instance] Pi.uniform_space

open set filter function

namespace uniform_convergence

variables (Œ± Œ≤ : Type*) {Œ≥ Œπ : Type*}
variables {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : set Œ±} {x : Œ±} {p : filter Œπ} {g : Œπ ‚Üí Œ±}

/-- Basis sets for the uniformity of uniform convergence -/
protected def gen (V : set (Œ≤ √ó Œ≤)) : set ((Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤)) :=
  {uv : (Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤) | ‚àÄ x, (uv.1 x, uv.2 x) ‚àà V}

variables {Œ± Œ≤}

protected lemma gen_Inter {Œπ : Sort*} {V : Œπ ‚Üí set (Œ≤ √ó Œ≤)} :
  uniform_convergence.gen Œ± Œ≤ (‚ãÇ i, V i) = ‚ãÇ i, uniform_convergence.gen Œ± Œ≤ (V i) :=
begin
  ext uv,
  exact ‚ü®Œª huv, mem_Inter.mpr $ Œª i x, mem_Inter.mp (huv x) i,
         Œª huv x, mem_Inter.mpr $ Œª i, (mem_Inter.mp huv i) x‚ü©
end

variables (Œ± Œ≤)

variables [uniform_space Œ≤]

protected lemma is_basis_gen :
  is_basis (Œª V : set (Œ≤ √ó Œ≤), V ‚àà ùì§ Œ≤) (uniform_convergence.gen Œ± Œ≤) :=
‚ü®‚ü®univ, univ_mem‚ü©, Œª U V hU hV, ‚ü®U ‚à© V, inter_mem hU hV, Œª uv huv,
  ‚ü®Œª x, (huv x).left, Œª x, (huv x).right‚ü©‚ü©‚ü©

/-- Filter basis for the uniformity of uniform convergence -/
protected def uniformity_basis : filter_basis ((Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤)) :=
(uniform_convergence.is_basis_gen Œ± Œ≤).filter_basis

/-- Core of the uniform structure of uniform convergence -/
protected def uniform_core : uniform_space.core (Œ± ‚Üí Œ≤) :=
uniform_space.core.mk_of_basis (uniform_convergence.uniformity_basis Œ± Œ≤)
  (Œª U ‚ü®V, hV, hVU‚ü© f, hVU ‚ñ∏ Œª x, refl_mem_uniformity hV)
  (Œª U ‚ü®V, hV, hVU‚ü©, hVU ‚ñ∏ ‚ü®uniform_convergence.gen Œ± Œ≤ (prod.swap ‚Åª¬π' V),
    ‚ü®prod.swap ‚Åª¬π' V, tendsto_swap_uniformity hV, rfl‚ü©, Œª uv huv x, huv x‚ü©)
  (Œª U ‚ü®V, hV, hVU‚ü©, hVU ‚ñ∏ let ‚ü®W, hW, hWV‚ü© := comp_mem_uniformity_sets hV in
    ‚ü®uniform_convergence.gen Œ± Œ≤ W, ‚ü®W, hW, rfl‚ü©, Œª uv ‚ü®w, huw, hwv‚ü© x, hWV
      ‚ü®w x, by exact ‚ü®huw x, hwv x‚ü©‚ü©‚ü©)

/-- Uniform structure of uniform convergence -/
protected def uniform_space : uniform_space (Œ± ‚Üí Œ≤) :=
uniform_space.of_core (uniform_convergence.uniform_core Œ± Œ≤)

protected lemma has_basis_uniformity :
  (@uniformity (Œ± ‚Üí Œ≤) (uniform_convergence.uniform_space Œ± Œ≤)).has_basis (Œª V, V ‚àà ùì§ Œ≤)
  (uniform_convergence.gen Œ± Œ≤) :=
(uniform_convergence.is_basis_gen Œ± Œ≤).has_basis

/-- Topology of uniform convergence -/
protected def topological_space : topological_space (Œ± ‚Üí Œ≤) :=
(uniform_convergence.uniform_space Œ± Œ≤).to_topological_space

protected lemma has_basis_nhds :
  (@nhds (Œ± ‚Üí Œ≤) (uniform_convergence.topological_space Œ± Œ≤) f).has_basis (Œª V, V ‚àà ùì§ Œ≤)
  (Œª V, {g | (g, f) ‚àà uniform_convergence.gen Œ± Œ≤ V}) :=
begin
  letI : uniform_space (Œ± ‚Üí Œ≤) := uniform_convergence.uniform_space Œ± Œ≤,
  exact nhds_basis_uniformity (uniform_convergence.has_basis_uniformity Œ± Œ≤)
end

variables {Œ±}

lemma uniform_continuous_eval (x : Œ±) : @uniform_continuous _ _
  (uniform_convergence.uniform_space Œ± Œ≤) _ (eval x) :=
begin
  change _ ‚â§ _,
  rw [map_le_iff_le_comap,
      (uniform_convergence.has_basis_uniformity Œ± Œ≤).le_basis_iff ((ùì§ _).basis_sets.comap _)],
  exact Œª U hU, ‚ü®U, hU, Œª uv huv, huv x‚ü©
end

variables {Œ≤}

protected lemma comap_const [nonempty Œ±] :
  (uniform_convergence.uniform_space Œ± Œ≤).comap (const Œ±) = ‚Äπuniform_space Œ≤‚Ä∫ :=
begin
  have : ‚àÄ V, prod.map (const Œ±) (const Œ±) ‚Åª¬π' uniform_convergence.gen Œ± Œ≤ V = V,
    from Œª V, subset_antisymm (Œª ‚ü®x, y‚ü© hxy, hxy $ classical.arbitrary _)
      (Œª ‚ü®x, y‚ü© hxy t, hxy),
  ext : 1,
  refine ((uniform_convergence.has_basis_uniformity Œ± Œ≤).comap _).eq_of_same_basis ‚ü®Œª U, ‚ü®_, _‚ü©‚ü©,
  { exact Œª hU, ‚ü®U, hU, (this U).subset‚ü© },
  { rintros ‚ü®V, hV, hVU‚ü©,
    refine mem_of_superset _ hVU,
    exact ((this V).symm ‚ñ∏ hV) }
end

protected lemma mono : monotone (@uniform_convergence.uniform_space Œ± Œ≥) :=
begin
  intros u‚ÇÅ u‚ÇÇ hu,
  change (ùì§ _) ‚â§ (ùì§ _),
  rw [(@uniform_convergence.has_basis_uniformity Œ± Œ≥ u‚ÇÅ).eq_binfi,
      (@uniform_convergence.has_basis_uniformity Œ± Œ≥ u‚ÇÇ).eq_binfi],
  exact binfi_mono hu
end

protected lemma inj [nonempty Œ±] : injective (@uniform_convergence.uniform_space Œ± Œ≥) :=
right_inverse.injective (Œª u, @uniform_convergence.comap_const Œ± Œ≥ u _)

protected lemma infi_eq {u : Œπ ‚Üí uniform_space Œ≥} :
  (@uniform_convergence.uniform_space Œ± Œ≥ (‚®Ö i, u i)) =
  ‚®Ö i, (@uniform_convergence.uniform_space Œ± Œ≥ (u i)) :=
begin
  ext U,
  change U ‚àà (ùì§ _) ‚Üî U ‚àà (ùì§ _),
  rw [(@uniform_convergence.has_basis_uniformity Œ± Œ≥ (‚®Ö i, u i)).mem_iff, infi_uniformity',
      infi_uniformity'],
  split,
  { rintros ‚ü®V, hV, hUV‚ü©,
    rw mem_infi at hV,
    rcases hV with ‚ü®I, hI, ùì•, hùì•, rfl‚ü©,
    rw uniform_convergence.gen_Inter at hUV,
    refine mem_infi_of_Inter hI (Œª i, _) hUV,
    exact (@uniform_convergence.has_basis_uniformity Œ± Œ≥ (u i)).mem_of_mem (hùì• i) },
  { rw mem_infi,
    rintros ‚ü®I, hI, ùì•, hùì•, rfl‚ü©,

    sorry }
end

protected lemma comap_eq {f : Œ≥ ‚Üí Œ≤} :
  (@uniform_convergence.uniform_space Œ± Œ≥ (‚Äπuniform_space Œ≤‚Ä∫.comap f)) =
  (uniform_convergence.uniform_space Œ± Œ≤).comap ((‚àò) f) :=
begin
  letI : uniform_space Œ≥ := ‚Äπuniform_space Œ≤‚Ä∫.comap f,
  ext : 1,
  change (ùì§ _) = (ùì§ _),
  sorry
  --rw (uniform_convergence.has_basis_uniformity Œ± Œ≥).ext ,
end

lemma t2_space [t2_space Œ≤] : @t2_space _ (uniform_convergence.topological_space Œ± Œ≤) :=
{ t2 :=
  begin
    letI : uniform_space (Œ± ‚Üí Œ≤) := uniform_convergence.uniform_space Œ± Œ≤,
    letI : topological_space (Œ± ‚Üí Œ≤) := uniform_convergence.topological_space Œ± Œ≤,
    intros f g h,
    obtain ‚ü®x, hx‚ü© := not_forall.mp (mt funext h),
    exact separated_by_continuous (uniform_continuous_eval Œ≤ x).continuous hx
  end }

protected lemma le_Pi : uniform_convergence.uniform_space Œ± Œ≤ ‚â§ Pi.uniform_space (Œª _, Œ≤) :=
begin
  rw [le_iff_uniform_continuous_id, uniform_continuous_pi],
  intros x,
  exact uniform_continuous_eval Œ≤ x
end

protected lemma tendsto_iff_tendsto_uniformly :
  tendsto F p (@nhds _ (uniform_convergence.topological_space Œ± Œ≤) f) ‚Üî
  tendsto_uniformly F f p :=
begin
  letI : uniform_space (Œ± ‚Üí Œ≤) := uniform_convergence.uniform_space Œ± Œ≤,
  rw [(uniform_convergence.has_basis_nhds Œ± Œ≤).tendsto_right_iff, tendsto_uniformly],
  split;
  { intros h U hU,
    filter_upwards [h (prod.swap ‚Åª¬π' U) (tendsto_swap_uniformity hU)],
    exact Œª n, id }
end

variable {Œ±}

protected lemma uniform_continuous_comp_left [uniform_space Œ≥] (f : Œ≤ ‚Üí Œ≥)
  (hf : uniform_continuous f) : @uniform_continuous _ _
  (uniform_convergence.uniform_space Œ± Œ≤) (uniform_convergence.uniform_space Œ± Œ≥) ((‚àò) f) :=
begin
  rw [uniform_continuous, (uniform_convergence.has_basis_uniformity Œ± Œ≤).tendsto_iff
      (uniform_convergence.has_basis_uniformity Œ± Œ≥)],
  exact Œª U hU, ‚ü®_, hf hU, Œª uv, id‚ü©
end

protected lemma bar‚ÇÅ [uniform_space Œ≥] :
  @uniform_continuous (Œ± ‚Üí Œ≤ √ó Œ≥) ((Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≥))
    (@uniform_convergence.uniform_space _ _ prod.uniform_space)
    (@prod.uniform_space _ _
      (uniform_convergence.uniform_space _ _) (uniform_convergence.uniform_space _ _))
    (equiv.arrow_prod_equiv_prod_arrow Œ≤ Œ≥ Œ±) :=
begin
  sorry
end

lemma uniform_space.comap_infi {Œπ : Sort*} {u : Œπ ‚Üí uniform_space Œ≥} {f : Œ± ‚Üí Œ≥} :
  (‚®Ö i, u i).comap f = ‚®Ö i, (u i).comap f :=
begin
  ext : 1,
  change (ùì§ _) = (ùì§ _),
  simp [uniformity_comap rfl, infi_uniformity']
end

protected lemma foo‚ÇÅ {Œ≤ : Œπ ‚Üí Type*} [Œ† i, uniform_space (Œ≤ i)] :
  @uniform_continuous (Œ± ‚Üí Œ† i, Œ≤ i) (Œ† i, Œ± ‚Üí Œ≤ i)
    (@uniform_convergence.uniform_space _ _ (Pi.uniform_space _))
    (@Pi.uniform_space _ (Œª i, Œ± ‚Üí Œ≤ i) (Œª i, uniform_convergence.uniform_space Œ± (Œ≤ i)))
    swap :=
begin
  letI : uniform_space (Œ† i, Œ≤ i) := Pi.uniform_space _,
  rw [uniform_continuous_pi],
  exact Œª i, uniform_convergence.uniform_continuous_comp_left (eval i)
    (Pi.uniform_continuous_proj _ i),
end

#check comap_eq_of_inverse

protected lemma foo‚ÇÇ {Œ≤ : Œπ ‚Üí Type*} [Œ† i, uniform_space (Œ≤ i)] :
  @uniform_continuous (Œ† i, Œ± ‚Üí Œ≤ i) (Œ± ‚Üí Œ† i, Œ≤ i)
    (@Pi.uniform_space _ (Œª i, Œ± ‚Üí Œ≤ i) (Œª i, uniform_convergence.uniform_space Œ± (Œ≤ i)))
    (@uniform_convergence.uniform_space _ _ (Pi.uniform_space _))
    swap :=
begin
  rw [uniform_continuous_iff, Pi.uniform_space, uniform_space.of_core_eq_to_core,
      Pi.uniform_space, uniform_space.of_core_eq_to_core, uniform_convergence.infi_eq,
      uniform_space.comap_infi],
  refine infi_mono (Œª i, _),
  rw [uniform_convergence.comap_eq, ‚Üê uniform_space.comap_comap],
  exact le_rfl
end

end uniform_convergence

namespace uniform_convergence_on

variables (Œ± Œ≤ : Type*) {Œ≥ Œπ : Type*} [uniform_space Œ≤] (ùîñ : set (set Œ±))
variables {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : set Œ±} {x : Œ±} {p : filter Œπ} {g : Œπ ‚Üí Œ±}

/-- Uniform structure of uniform convergence on the sets of `ùîñ`. -/
protected def uniform_space : uniform_space (Œ± ‚Üí Œ≤) :=
‚®Ö (s : set Œ±) (hs : s ‚àà ùîñ), uniform_space.comap (Œª f, s.restrict f)
  (uniform_convergence.uniform_space s Œ≤)

/-- Topology of uniform convergence on the sets of `ùîñ`. -/
protected def topological_space : topological_space (Œ± ‚Üí Œ≤) :=
(uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ).to_topological_space

protected lemma topological_space_eq :
  uniform_convergence_on.topological_space Œ± Œ≤ ùîñ = ‚®Ö (s : set Œ±) (hs : s ‚àà ùîñ),
  topological_space.induced (Œª f, s.restrict f) (uniform_convergence.topological_space s Œ≤) :=
begin
  simp only [uniform_convergence_on.topological_space, to_topological_space_infi,
    to_topological_space_infi, to_topological_space_comap],
  refl
end

protected lemma uniform_continuous_restrict (h : s ‚àà ùîñ) :
  @uniform_continuous _ _ (uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ)
  (uniform_convergence.uniform_space s Œ≤) s.restrict :=
begin
  change _ ‚â§ _,
  rw [uniform_convergence_on.uniform_space, map_le_iff_le_comap, uniformity, infi_uniformity],
  refine infi_le_of_le s _,
  rw infi_uniformity,
  exact infi_le _ h,
end

protected lemma uniform_space_antitone : antitone (uniform_convergence_on.uniform_space Œ± Œ≤) :=
Œª ùîñ‚ÇÅ ùîñ‚ÇÇ h‚ÇÅ‚ÇÇ, infi_le_infi_of_subset h‚ÇÅ‚ÇÇ

variables {Œ±}

lemma uniform_continuous_eval_of_mem {x : Œ±} (hxs : x ‚àà s) (hs : s ‚àà ùîñ) :
  @uniform_continuous _ _ (uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ) _ (eval x) :=
begin
  change _ ‚â§ _,
  rw [map_le_iff_le_comap, ((ùì§ _).basis_sets.comap _).ge_iff,
      uniform_convergence_on.uniform_space, infi_uniformity'],
  intros U hU,
  refine mem_infi_of_mem s _,
  rw infi_uniformity',
  exact mem_infi_of_mem hs (mem_comap.mpr
    ‚ü® uniform_convergence.gen s Œ≤ U,
      (uniform_convergence.has_basis_uniformity s Œ≤).mem_of_mem hU,
      Œª uv huv, huv ‚ü®x, hxs‚ü© ‚ü©)
end

variables {Œ≤}

lemma t2_space_of_covering [t2_space Œ≤] (h : ‚ãÉ‚ÇÄ ùîñ = univ) :
  @t2_space _ (uniform_convergence_on.topological_space Œ± Œ≤ ùîñ) :=
{ t2 :=
  begin
    letI : uniform_space (Œ± ‚Üí Œ≤) := uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ,
    letI : topological_space (Œ± ‚Üí Œ≤) := uniform_convergence_on.topological_space Œ± Œ≤ ùîñ,
    intros f g hfg,
    obtain ‚ü®x, hx‚ü© := not_forall.mp (mt funext hfg),
    obtain ‚ü®s, hs, hxs‚ü© : ‚àÉ s ‚àà ùîñ, x ‚àà s := mem_sUnion.mp (h.symm ‚ñ∏ true.intro),
    exact separated_by_continuous (uniform_continuous_eval_of_mem Œ≤ ùîñ hxs hs).continuous hx
  end }

protected lemma le_Pi_of_covering (h : ‚ãÉ‚ÇÄ ùîñ = univ) :
  uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ ‚â§ Pi.uniform_space (Œª _, Œ≤) :=
begin
  rw [le_iff_uniform_continuous_id, uniform_continuous_pi],
  intros x,
  obtain ‚ü®s, hs, hxs‚ü© : ‚àÉ s ‚àà ùîñ, x ‚àà s := mem_sUnion.mp (h.symm ‚ñ∏ true.intro),
  exact uniform_continuous_eval_of_mem Œ≤ ùîñ hxs hs
end

protected lemma tendsto_iff_tendsto_uniformly_on :
  tendsto F p (@nhds _ (uniform_convergence_on.topological_space Œ± Œ≤ ùîñ) f) ‚Üî
  ‚àÄ s ‚àà ùîñ, tendsto_uniformly_on F f p s :=
begin
  letI : uniform_space (Œ± ‚Üí Œ≤) := uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ,
  rw [uniform_convergence_on.topological_space_eq, nhds_infi, tendsto_infi],
  refine forall_congr (Œª s, _),
  rw [nhds_infi, tendsto_infi],
  refine forall_congr (Œª hs, _),
  rw [nhds_induced, tendsto_comap_iff, tendsto_uniformly_on_iff_tendsto_uniformly_comp_coe,
      uniform_convergence.tendsto_iff_tendsto_uniformly],
  refl
end

end uniform_convergence_on
