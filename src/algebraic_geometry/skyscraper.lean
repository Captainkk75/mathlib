import algebraic_geometry.sheafed_space
import topology.sheaves.sheaf_condition.unique_gluing
import topology.sheaves.stalks

section

open topological_space
open category_theory category_theory.limits
open Top
open opposite

universes u v w

variables {X : Top.{u}} (p‚ÇÄ : X) {C : Type v} [category.{w} C] (S : C)
variables {star : C} (ts : is_terminal star)
variable [Œ† (U : opens X), decidable (p‚ÇÄ ‚àà U)]

@[simps]
def skyscraper_presheaf : presheaf C X :=
{ obj := Œª U, ite (p‚ÇÄ ‚àà unop U) S star,
  map := Œª U V i, dite (p‚ÇÄ ‚àà unop V)
    (Œª h, eq_to_hom (if_pos (le_of_hom i.unop h)) ‚â´ ùüô S ‚â´ eq_to_hom (if_pos h).symm)
    (Œª h, ts.from _ ‚â´ eq_to_hom (if_neg h).symm),
  map_id' := Œª U,
  begin
    split_ifs,
    { simp, },
    { rw eq_comp_eq_to_hom,
      exact ts.hom_ext _ _, },
  end,
  map_comp' := Œª U V W iVU iWV,
  begin
    by_cases hW : p‚ÇÄ ‚àà unop W,
    { have hV : p‚ÇÄ ‚àà unop V := le_of_hom iWV.unop hW,
      have hU : p‚ÇÄ ‚àà unop U := le_of_hom iVU.unop hV,
      split_ifs,
      simp },
    { split_ifs;
      rw eq_comp_eq_to_hom;
      exact ts.hom_ext _ _, }
  end }

section

variables {p‚ÇÄ}

lemma skyscraper_presheaf_obj_of_mem {U : opens X} (h : p‚ÇÄ ‚àà U) :
  (skyscraper_presheaf p‚ÇÄ S ts).obj (op U) = S :=
if_pos h

lemma skyscraper_presheaf_obj_of_not_mem {U : opens X} (h : p‚ÇÄ ‚àâ U) :
  (skyscraper_presheaf p‚ÇÄ S ts).obj (op U) = star :=
if_neg h

end

def skyscraper_sheaf : sheaf C X :=
‚ü®skyscraper_presheaf p‚ÇÄ S ts, Œª c U s hs x hx,
  ‚ü®dite (p‚ÇÄ ‚àà U)
    (Œª h, x (hs p‚ÇÄ h).some_spec.some (hs p‚ÇÄ h).some_spec.some_spec.1 ‚â´
        eq_to_hom ((skyscraper_presheaf_obj_of_mem S ts (hs p‚ÇÄ h).some_spec.some_spec.2).trans
          (skyscraper_presheaf_obj_of_mem S ts h).symm))
    (Œª h, ts.from c ‚â´ (eq_to_hom (skyscraper_presheaf_obj_of_not_mem S ts h).symm)),
    Œª V inc h,
    begin
      by_cases hV : p‚ÇÄ ‚àà V,
      { have hU : p‚ÇÄ ‚àà U := le_of_hom inc hV,
        split_ifs,
        generalize_proofs h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ,
        dsimp,
        split_ifs,
        rw [category.id_comp, eq_to_hom_trans, category.assoc, eq_to_hom_trans],
        generalize_proofs h‚ÇÖ,
        have := hx _ _ h‚ÇÇ.some_spec.1 h rfl,
        work_on_goal 2 { exact h‚ÇÅ.some ‚äì V },
        work_on_goal 2 { exact hom_of_le inf_le_left },
        work_on_goal 2 { exact hom_of_le inf_le_right },
        dsimp at this,
        have hV' : p‚ÇÄ ‚àà h‚ÇÅ.some ‚äì V := ‚ü®h‚ÇÇ.some_spec.2, hV‚ü©,
        split_ifs at this,
        rw [category.id_comp, eq_to_hom_trans, eq_to_hom_trans, eq_comp_eq_to_hom,
          category.assoc, eq_to_hom_trans] at this,
        generalize_proofs h‚ÇÜ at this,
        rw [this, eq_comp_eq_to_hom], },
      { dsimp,
        split_ifs,
        rw [‚Üêcategory.assoc, eq_comp_eq_to_hom],
        exact ts.hom_ext _ _, }
    end,
    Œª y (hy : x.is_amalgamation y),
    begin
      split_ifs,
      { generalize_proofs h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ,
        have := hy h‚ÇÇ.some h‚ÇÇ.some_spec.1,
        dsimp at this,
        split_ifs at this with H,
        { rw [category.id_comp, eq_to_hom_trans, eq_comp_eq_to_hom] at this,
          rw [this, eq_comp_eq_to_hom, category.assoc, eq_to_hom_trans, eq_to_hom_refl,
            category.comp_id], },
        { exfalso,
          exact H h‚ÇÇ.some_spec.2, }, },
      { rw [‚Üêeq_comp_eq_to_hom],
        exact (ts.hom_ext _ _), }
    end‚ü©‚ü©

example : true := trivial

end

section

open topological_space
open category_theory category_theory.limits
open Top
open opposite

universes u v

variables {X : Top.{u}} (p‚ÇÄ : X) {C : Type v} [category.{u} C] (S : C)
variables {star : C} (ts : is_terminal star)
variable [Œ† (U : opens X), decidable (p‚ÇÄ ‚àà U)]
variable [has_colimits C]

lemma mem_nhds_of_closure_singleton {y : X} (U : open_nhds y) (h : y ‚àà (closure ({p‚ÇÄ} : set X))) :
  p‚ÇÄ ‚àà U.1 :=
begin
  have := U.2,
  contrapose this,
  change p‚ÇÄ ‚àà U.1.1·∂ú at this,
  change y ‚àà U.1.1·∂ú,
  have h1 : {p‚ÇÄ} ‚äÜ U.1.1·∂ú := set.singleton_subset_iff.mpr this,
  rw ‚Üêis_closed.closure_subset_iff at h1,
  { exact h1 h },
  rw is_closed_compl_iff,
  exact U.1.2
end

lemma mem_nhds_of_not_mem_closure_singleton {y : X} (h : y ‚àâ (closure ({p‚ÇÄ} : set X))) :
  ‚àÉ (U : open_nhds y), p‚ÇÄ ‚àâ U.1 :=
begin
  have : ‚àÉ (s : set X), is_closed s ‚àß p‚ÇÄ ‚àà s ‚àß y ‚àâ s,
  { contrapose h,
    push_neg at h ‚ä¢,
    rw mem_closure_iff,
    intros t ht hy,
    specialize h t·∂ú (is_closed_compl_iff.mpr ht),
    refine ‚ü®p‚ÇÄ, _‚ü©,
    contrapose! h,
    rw [set.mem_inter_iff, not_and_distrib, set.mem_singleton_iff, eq_self_iff_true,
      not_true, or_false] at h,
    exact ‚ü®h, Œª r, r hy‚ü© },
  rcases this with ‚ü®s, hs, hp‚ÇÄ, hy‚ü©,
  resetI,
  exact ‚ü®‚ü®‚ü®s·∂ú, is_closed.is_open_compl‚ü©, hy‚ü©, Œª r, r hp‚ÇÄ‚ü©,
end

@[simps] def skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ {y : X} (h : y ‚àà (closure ({p‚ÇÄ} : set X))) :
  cocone ((open_nhds.inclusion y).op ‚ãô skyscraper_presheaf p‚ÇÄ S ts) :=
{ X := S,
  Œπ :=
  { app := Œª U, eq_to_hom
      begin
        dsimp,
        rw if_pos,
        exact mem_nhds_of_closure_singleton _ _ h,
      end ‚â´ ùüô S,
    naturality' := Œª U V inc,
    begin
      simp only [functor.op_obj, unop_op, functor.comp_map, functor.op_map, skyscraper_presheaf_map,
        category.id_comp, eq_to_hom_trans, functor.const_obj_map, category.assoc],
      by_cases hV : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj V.unop,
      { have hU : p‚ÇÄ ‚àà unop ((open_nhds.inclusion y).op.obj U) := le_of_hom inc.unop hV,
        split_ifs,
        erw [category.comp_id, category.comp_id, category.comp_id, eq_to_hom_trans],
        refl },
      { split_ifs with hU;
        erw [category.comp_id, category.comp_id, category.comp_id, eq_comp_eq_to_hom,
          eq_comp_eq_to_hom];
        exact ts.hom_ext _ _, },
    end } }

noncomputable def skyscraper_presheaf_of_mem_closure‚ÇÄ_from
  {y : X} (h : y ‚àà (closure ({p‚ÇÄ} : set X))) :
  S ‚ü∂ (skyscraper_presheaf p‚ÇÄ S ts).stalk y :=
eq_to_hom (skyscraper_presheaf_obj_of_mem S ts (by tauto : p‚ÇÄ ‚àà ‚ä§)).symm ‚â´
  (skyscraper_presheaf p‚ÇÄ S ts).germ (‚ü®y, trivial‚ü© : (‚ä§ : opens X))

noncomputable lemma skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ_is_colimit
  {y : X} (h : y ‚àà (closure ({p‚ÇÄ} : set X))) :
  is_colimit (skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ p‚ÇÄ S ts h) :=
{ desc := Œª c, (skyscraper_presheaf_of_mem_closure‚ÇÄ_from p‚ÇÄ S ts h ‚â´ colimit.desc _ _ : S ‚ü∂ c.X),
  fac' := Œª c U,
  begin
    dsimp,
    simp only [skyscraper_presheaf_of_mem_closure‚ÇÄ_from, presheaf.germ, category.comp_id,
      category.assoc, colimit.Œπ_desc, eq_to_hom_trans_assoc],
    have := c.Œπ.naturality (hom_of_le $ (le_top : unop U ‚â§ _)).op,
    dsimp at this,
    have h' : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj (unop U) := mem_nhds_of_closure_singleton _ _ h,
    have h'' : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj ‚ä§ := trivial,
    split_ifs at this,
    rw [category.comp_id, category.id_comp, eq_to_hom_trans, eq_eq_to_hom_comp] at this,
    rw [this, eq_eq_to_hom_comp, ‚Üêcategory.assoc, eq_to_hom_trans, eq_to_hom_refl,
      category.id_comp],
    congr,
  end,
  uniq' := Œª c f h,
  begin
    simp only [skyscraper_presheaf_of_mem_closure‚ÇÄ_from, presheaf.germ, category.assoc],
    erw [colimit.Œπ_desc],
    specialize h (op ‚ü®‚ä§, trivial‚ü©),
    erw [‚Üêh],
    simp only [skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ_Œπ_app, category.assoc,
      eq_to_hom_trans_assoc, eq_to_hom_refl, category.id_comp],
    exact (category.id_comp _).symm,
  end }

noncomputable def skyscraper_stalk_of_mem_closure‚ÇÄ {y : X} (h : y ‚àà (closure ({p‚ÇÄ} : set X))) :
  (skyscraper_presheaf p‚ÇÄ S ts).stalk y ‚âÖ S :=
colimit.iso_colimit_cocone ‚ü®_, (skyscraper_presheaf_cocone_of_mem_closure‚ÇÄ_is_colimit p‚ÇÄ S ts h)‚ü©

@[simps] def skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ
  {y : X} (h : y ‚àâ (closure ({p‚ÇÄ} : set X))) :
  cocone ((open_nhds.inclusion y).op ‚ãô skyscraper_presheaf p‚ÇÄ S ts) :=
{ X := star,
  Œπ :=
  { app := Œª U, ts.from _,
    naturality' := Œª U V inc, ts.hom_ext _ _ } }

noncomputable def skyscraper_presheaf_of_not_mem_closure‚ÇÄ_from
  {y : X} (h : y ‚àâ (closure ({p‚ÇÄ} : set X))) :
  star ‚ü∂ (skyscraper_presheaf p‚ÇÄ S ts).stalk y :=
eq_to_hom (skyscraper_presheaf_obj_of_not_mem S ts $
  (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec).symm ‚â´
  (skyscraper_presheaf p‚ÇÄ S ts).germ (‚ü®y, (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.2‚ü© :
    (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.1)

noncomputable lemma skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ_is_colimit
  {y : X} (h : y ‚àâ (closure ({p‚ÇÄ} : set X))) :
  is_colimit (skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ p‚ÇÄ S ts h) :=
{ desc := Œª c, ((eq_to_hom ((skyscraper_presheaf_obj_of_not_mem _ _
      (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec).symm)) ‚â´
    presheaf.germ (skyscraper_presheaf p‚ÇÄ S ts)
      ‚ü®y, (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.2‚ü© ‚â´ colimit.desc _ _ : star ‚ü∂ _),
  fac' := Œª c U,
  begin
    simp only [presheaf.germ, skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ_Œπ_app],
    erw [colimit.Œπ_desc],
    dsimp,
    by_cases h' : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj (unop U),
    { have eq1 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj (unop U)) S star) =
          eq_to_hom (if_pos h') ‚â´ ts.from _ := ts.hom_ext _ _,
      rw [eq1, category.assoc, eq_eq_to_hom_comp],
      have := c.Œπ.naturality (hom_of_le (le_top : U.unop ‚â§ ‚ä§)).op,
      dsimp at this,
      have h'' : p‚ÇÄ ‚àà (open_nhds.inclusion y).obj ‚ä§ := trivial,
      split_ifs at this,
      rw [category.comp_id, category.id_comp, eq_to_hom_trans, eq_eq_to_hom_comp] at this,
      rw this,
      clear this,
      have := c.Œπ.naturality
        (hom_of_le (le_top : (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some ‚â§ ‚ä§)).op,
      dsimp at this,
      have h''' : p‚ÇÄ ‚àâ (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.1 :=
        (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec,
      split_ifs at this,
      have eq2 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj ‚ä§) S star) =
        eq_to_hom (if_pos h'') ‚â´ ts.from _ := ts.hom_ext _ _,
      rw [category.comp_id, eq2] at this,
      simp only [‚Üêthis, ‚Üêcategory.assoc],
      convert eq_whisker _ _,
      { ext, refl, },
      { rw [eq_comp_eq_to_hom],
        exact ts.hom_ext _ _ } },
    { have eq1 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj (unop U)) S star) =
        eq_to_hom (if_neg h') ‚â´ ùüô star := ts.hom_ext _ _,
      have eq2 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj ‚ä§) S star) =
        eq_to_hom (if_pos trivial) ‚â´ ts.from _ := ts.hom_ext _ _,
      have eq3 : ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj
          (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some) S star) =
        eq_to_hom (if_neg (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec) ‚â´ ùüô star :=
      ts.hom_ext _ _,
      rw [eq1, category.comp_id, ‚Üêcategory.assoc, eq_to_hom_trans],
      have := c.Œπ.naturality (hom_of_le (inf_le_left :
          (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some ‚äì unop U ‚â§
          (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some)).op,
      dsimp at this,
      rw [dite_comp, category.comp_id] at this,
      simp_rw [category.id_comp, eq_to_hom_trans, eq3, category.comp_id, eq_to_hom_trans] at this,


      generalize_proofs h‚ÇÅ h‚ÇÇ h‚ÇÉ,
      have eq_coe : c.Œπ.app (op ‚ü®‚Üë(h‚ÇÅ.some), h‚ÇÉ‚ü©) =
        eq_to_hom (by { congr, ext, refl }) ‚â´ c.Œπ.app (op h‚ÇÅ.some) ‚â´
          eq_to_hom (by { congr, ext, refl }),
      { symmetry,
        rw [eq_eq_to_hom_comp],
        have e := c.Œπ.naturality (eq_to_hom (by {ext, refl}) :
          (‚ü®‚Üëh‚ÇÅ.some, h‚ÇÉ‚ü© : open_nhds y) ‚ü∂ h‚ÇÅ.some).op,
        dsimp at e,
        split_ifs at e with temp,
        { exfalso, exact (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec temp },
        rw [show ts.from (ite (p‚ÇÄ ‚àà (open_nhds.inclusion y).obj h‚ÇÅ.some) S star) =
          eq_to_hom (if_neg temp) ‚â´ ùüô star, from ts.hom_ext _ _, category.comp_id,
          category.comp_id, eq_to_hom_trans] at e,
        rw [‚Üêe, category.assoc, eq_eq_to_hom_comp, ‚Üêcategory.assoc, eq_to_hom_trans, eq_to_hom_refl,
          eq_to_hom_refl, category.comp_id, category.id_comp], },
      rw [eq_coe, ‚Üêthis, ‚Üêcategory.assoc, eq_to_hom_trans, eq_eq_to_hom_comp, dite_comp],
      have h‚ÇÖ : p‚ÇÄ ‚àâ (open_nhds.inclusion y).obj h‚ÇÅ.some := h‚ÇÅ.some_spec,
      have h‚ÇÜ : p‚ÇÄ ‚àâ (open_nhds.inclusion y).obj (h‚ÇÅ.some ‚äì unop U) := Œª ‚ü®r, _‚ü©, h‚ÇÖ r,
      clear this,
      split_ifs,
      { exfalso, exact h‚ÇÖ (by assumption) },
      { exfalso, exact h‚ÇÜ (by assumption) },
      { exfalso, exact h‚ÇÖ (by assumption) },
      rw [eq_comp_eq_to_hom, eq_eq_to_hom_comp, ‚Üêcategory.assoc, ‚Üêcategory.assoc, eq_to_hom_trans,
        eq_to_hom_refl, category.comp_id],
      have := c.Œπ.naturality (hom_of_le (inf_le_right :
          (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some ‚äì unop U ‚â§ unop U)).op,
      dsimp at this,
      rw [dite_comp, category.comp_id] at this,
      rw [‚Üêthis, comp_dite],
      clear this,
      split_ifs,
      rw [eq1, category.comp_id, eq_to_hom_trans, ‚Üêcategory.assoc, eq_to_hom_trans, eq_to_hom_refl,
        category.id_comp] }
  end,
  uniq' := Œª c f H,
  begin
    erw [colimit.Œπ_desc, ‚ÜêH],
    simp only [skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ_Œπ_app],
    dsimp,
    have : ts.from (ite (p‚ÇÄ ‚àà (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some.1) S star) =
      eq_to_hom (if_neg (mem_nhds_of_not_mem_closure_singleton p‚ÇÄ h).some_spec) ‚â´ ùüô star :=
    ts.hom_ext _ _,
    erw [this, category.comp_id, ‚Üêcategory.assoc, eq_to_hom_trans, eq_to_hom_refl, category.id_comp],
  end }

noncomputable def skyscraper_presheaf_stalk_of_not_mem_closure‚ÇÄ
  {y : X} (h : y ‚àâ (closure ({p‚ÇÄ} : set X))) :
  (skyscraper_presheaf p‚ÇÄ S ts).stalk y ‚âÖ star :=
colimit.iso_colimit_cocone ‚ü®_, (skyscraper_presheaf_cocone_of_not_mem_closure‚ÇÄ_is_colimit _ S _ h)‚ü©

end
