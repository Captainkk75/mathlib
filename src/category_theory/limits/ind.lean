import category_theory.Fintype
import category_theory.limits.flat
import category_theory.limits.opposites
import data.finset.lattice

universe u

namespace category_theory
open limits

-- Every type is a filtered colimit of finite sets: namely the (directed) union of its finite
-- subsets, which is a directed union

instance {X : Type u} [decidable_eq X] : is_filtered (finset X) := {}.

open_locale classical

@[simps obj map]
def finite_subsets_diagram (X : Type u) : finset X ‚•§ Fintype.{u} :=
{ obj := Œª x, Fintype.of ((x : set X) : Type u),
  map := Œª x y f t, ‚ü®_, le_of_hom f t.2‚ü© }

noncomputable def forward : ind.{u} Fintype.skeleton ‚•§ Type u :=
@ind_extend _ _ _ _ Fintype.incl (Œª J ùí•‚ÇÅ ùí•‚ÇÇ, _)

-- { obj := Œª X, colimit (finite_subsets_diagram X ‚ãô ind_embed Fintype),
--   map := Œª X Y f,
--   begin
--     apply colimit.desc _ ‚ü®_, _‚ü©,
--     have := cocone.whisker,
--     -- apply colimit.desc _ ‚ü®_, Œª (Z : finset _), _ ‚â´ colimit.Œπ _ (Z.image f), _‚ü©,
--     -- apply (ind_embed Fintype).map _,
--     -- intro x,
--     -- dsimp at x,
--     -- refine ‚ü®f x.1, _‚ü©,
--     -- rw finset.coe_image,
--     -- apply set.mem_image_of_mem _ x.2,

--   end

-- }

#exit

@[simps obj map]
def finite_subsets_diagram (X : Type u) : finset X ‚•§ Type u :=
{ obj := Œª x, ((x : set X) : Type u),
  map := Œª x y f t, ‚ü®_, le_of_hom f t.2‚ü© }

@[simps]
def finite_subsets_cocone (X : Type u) : cocone (finite_subsets_diagram X) :=
{ X := X, Œπ := { app := Œª Y y, y.1 } }

def finite_subsets_colimit (X : Type u) : is_colimit (finite_subsets_cocone X) :=
{ desc := Œª s x, s.Œπ.app {x} ‚ü®x, by simp‚ü©,
  fac' := Œª s j,
  begin
    ext ‚ü®x, hx‚ü©,
    dsimp,
    have x_le_j : {x} ‚â§ j,
    { simpa using hx },
    rw ‚Üê s.w (hom_of_le x_le_j),
    refl,
  end,
  uniq' := Œª s m w,
  begin
    ext x,
    rw ‚Üê w,
    refl
  end }

@[simps obj map]
def finite_subsets_diagram' (X : Type u) : finset X ‚•§ Fintype.{u} :=
{ obj := Œª x, Fintype.of ((x : set X) : Type u),
  map := Œª x y f t, ‚ü®_, le_of_hom f t.2‚ü© }

-- def representable (X : Type u) (Q) :
--   (finite_subsets_diagram' X ‚ãô Fintype.incl).obj Q ‚âÖ sorry :=
-- begin
--   change Q ‚âÖ _,
-- end

open_locale classical

@[simps]
def finite_subsets_cocone' (X : Type u) :
  cocone (finite_subsets_diagram' X ‚ãô yoneda) :=
{ X := Fintype.incl.op ‚ãô yoneda.obj X,
  Œπ := { app := Œª S, { app := Œª x t u, (t u).1 } } }

-- instance : has_finite_colimits Fintype := by apply_instance

universes v‚ÇÇ u‚ÇÇ

instance {J : Type u‚ÇÇ} [category.{v‚ÇÇ} J] :
  reflects_colimits_of_shape J Fintype.incl :=
fully_faithful_reflects_colimits_of_shape _

-- instance : has_finite_colimits Fintype :=
-- Œª J ùí•‚ÇÅ ùí•‚ÇÇ,
-- { has_colimit := Œª F, by exactI
--   has_colimit.mk
--   { cocone :=
--     {

--     }

--   }
-- }

universes w v

-- def quot.rel {J : Type u} [category.{v} J] (F : J ‚•§ Type w) :
--   (Œ£ j, F.obj j) ‚Üí (Œ£ j, F.obj j) ‚Üí Prop :=
-- Œª p p', ‚àÉ f : p.1 ‚ü∂ p'.1, p'.2 = F.map f p.2

-- def quot {J : Type u} [category.{v} J] (F : J ‚•§ Type w) : Type (max u w) :=
-- @quot (Œ£ j, F.obj j) (quot.rel F)

noncomputable instance quot.fintype {Œ± : Type*} [fintype Œ±] (r : Œ± ‚Üí Œ± ‚Üí Prop) : fintype (quot r) :=
fintype.of_surjective (quot.mk r) quot.exists_rep

noncomputable instance {J : Type u‚ÇÇ} [category.{v‚ÇÇ} J] [fintype J] {K : J ‚•§ Fintype.{u‚ÇÇ}} :
  fintype (types.quot (K ‚ãô Fintype.incl)) :=
begin
  rw types.quot,
  apply quot.fintype _,
  apply sigma.fintype _,
  apply_instance,
  intro j,
  dsimp,
  apply_instance,
end

noncomputable instance {J : Type u‚ÇÇ} [category.{v‚ÇÇ} J] [fintype J] :
  creates_colimits_of_shape J Fintype.incl.{u‚ÇÇ} :=
{ creates_colimit := Œª K,
    creates_colimit_of_fully_faithful_of_iso
      _
      (types.colimit_cocone_is_colimit _)
      ‚ü®limits.types.quot (K ‚ãô Fintype.incl), by apply_instance‚ü©
      (iso.refl _) }

universes v‚ÇÅ v‚ÇÉ u‚ÇÅ u‚ÇÉ

def reflects_op' {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
  {J : Type u‚ÇÉ} [category.{v‚ÇÉ} J]
  (F : C ‚•§ D) (K : J ‚•§ C) [reflects_limit K F] :
  reflects_colimit K.op F.op :=
{ reflects := Œª c t,
  begin
    have : is_limit c.unop := is_limit_of_reflects F _,
    apply is_colimit.of_iso_colimit this.op _,
    refine cocones.ext (iso.refl _) _,
    { intro j,
      apply category.comp_id },
    have := F.map_cone_op c.unop,
    -- have := is_limit.op (is_limit_of_reflects F _),
    suffices : is_limit (F.map_cone c.unop).op.unop,
    { refine this.of_iso_limit (cones.ext (iso.refl _) (by tidy)) },
    apply is_colimit.unop,
    apply t.of_iso_colimit _,
    apply _ ‚â™‚â´ this.symm,
    apply (cocones.functoriality _ F.op).map_iso _,
    refine cocones.ext (iso.refl _) (by tidy)
  end
}

-- def creates_op' {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
--   {J : Type u‚ÇÉ} [category.{v‚ÇÉ} J]
--   (F : C ‚•§ D) (K : J ‚•§ C) [creates_limit K F] :
--   creates_colimit K.op F.op :=
-- {

-- }

-- def creates_op {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
--   {J : Type u‚ÇÉ} [category.{v‚ÇÉ} J]
--   (F : C ‚•§ D)
--   [creates_limits_of_shape J F] : creates_colimits_of_shape J·µí·µñ F.op :=
-- { creates_colimit := Œª K,
--   begin
--     have := functor.unop K,
--     letI : creates_limit K.unop F := infer_instance,

--   end

-- }

instance : has_finite_colimits Fintype.{u‚ÇÇ} :=
Œª J ùí•‚ÇÅ ùí•‚ÇÇ,
  by exactI has_colimits_of_shape_of_has_colimits_of_shape_creates_colimits_of_shape Fintype.incl

-- (decidable_eq_obj : decidable_eq J . tactic.apply_instance)
-- (fintype_obj : fintype J . tactic.apply_instance)
-- (decidable_eq_hom : Œ† (j j' : J), decidable_eq (j ‚ü∂ j') . tactic.apply_instance)
-- (fintype_hom : Œ† (j j' : J), fintype (j ‚ü∂ j') . tactic.apply_instance)

instance {J : Type u‚ÇÇ} [category.{v‚ÇÇ} J] [fcj : fin_category J] : fin_category J·µí·µñ :=
{ decidable_eq_obj := Œª x y, decidable_of_decidable_of_iff infer_instance opposite.unop_injective.eq_iff,
  fintype_obj :=
    { elems := finset.map ‚ü®opposite.op, opposite.op_injective‚ü© _,
      complete := Œª x, finset.mem_map_of_mem _ (fintype.complete x.unop) },
  decidable_eq_hom := Œª x y f g, decidable_of_decidable_of_iff infer_instance has_hom.hom.unop_inj.eq_iff,
  fintype_hom := Œª X Y,
  { elems := (@fin_category.fintype_hom J _ fcj Y.unop X.unop).elems.map ‚ü®has_hom.hom.op, has_hom.hom.op_inj‚ü©,
    complete := Œª f, finset.mem_map_of_mem _ (fintype.complete f.unop) } }

-- lemma thing (X : Type u) : is_set_flat (Fintype.incl.{u}.op ‚ãô yoneda.obj X) :=
-- begin
--   apply set_flat_of_preserves_finite_limits _,
--   { introsI J ùí•‚ÇÅ ùí•‚ÇÇ,
--     exact has_limits_of_shape_op_of_has_colimits_of_shape },
--   introsI J ùí•‚ÇÅ ùí•‚ÇÇ,
--   letI : creates_limits_of_shape J Fintype.incl.{u}.op,
--   {

--   },
--   letI : has_limits_of_shape J (Type u)·µí·µñ := has_limits_of_shape_op_of_has_colimits_of_shape,
--   apply limits.comp_preserves_limits_of_shape,
-- end

open opposite

@[simp] lemma Fintype.types_comp_apply {X Y Z : Fintype} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X.Œ±) :
  (f ‚â´ g) x = g (f x) := rfl

-- #exit
noncomputable def finite_subsets_colimit' (X : Type u) :
  is_colimit (finite_subsets_cocone' X) :=
{ desc := Œª s,
  { app := Œª S (f : S.unop.Œ± ‚Üí X), (s.Œπ.app (finset.univ.image f)).app S (Œª t, ‚ü®f t, by simp‚ü©),
    naturality' := Œª S‚ÇÅ S‚ÇÇ g,
    begin
      ext (f : S‚ÇÅ.unop.Œ± ‚Üí X),
      dsimp,
      have leq : (finset.univ : finset S‚ÇÇ.unop.Œ±).image (Fintype.incl.map g.unop ‚â´ f : S‚ÇÇ.unop.Œ± ‚Üí X) ‚â§ (finset.univ : finset S‚ÇÅ.unop.Œ±).image f,
      { intros x hx,
        simp only [finset.mem_univ, function.comp_app, exists_prop_of_true, finset.mem_image] at hx,
        rcases hx with ‚ü®x, rfl‚ü©,
        simp },
      have := s.w (hom_of_le leq),
      rw ‚Üêcongr_app this S‚ÇÇ,
      have q := (s.Œπ.app (finset.univ.image f)).naturality g,
      replace q := congr_fun q,
      dsimp at q,
      rw ‚Üê q,
      refl,
    end },
  fac' := Œª s j,
  begin
    ext q f,
    dsimp [finite_subsets_cocone'],
    dsimp at f,
    have : (finset.image (Œª (u : (unop q).Œ±), (f u).1) finset.univ : finset X) ‚â§ j,
    { intros x hx,
      simp only [finset.mem_univ, exists_prop_of_true, finset.mem_image, subtype.val_eq_coe] at hx,
      rcases hx with ‚ü®x, rfl‚ü©,
      apply (f x).2 },
    have z := s.w (hom_of_le this),
    dsimp at z,
    rw ‚Üê z,
    dsimp,
    congr' 1,
    ext1,
    dsimp [types_comp_apply, finite_subsets_diagram'],
  end,
  uniq' := sorry
}

#exit

instance {X : Type u} [decidable_eq X] : is_filtered (finset X) := {}.

def type_to_ind_fintype : Type u ‚•§ ind.{u} Fintype.{u} :=
{ obj := Œª X, ‚ü®_,
    is_set_flat'_of_filtered_colimit_of_representables
      (finset X)
      (finite_subsets_diagram' X) _ _‚ü©,

}

-- def ind_fintype_to_type : ind.{u} Fintype.{u} ‚•§ Type u :=
-- ind_extension _

def ind_fintype_equiv_type : ind Fintype.{u} ‚âå Type u :=
begin

end

end category_theory
