import algebraic_geometry.sheafed_space
import category_theory.sites.grothendieck
import algebraic_geometry.presheafed_space.open_immersion

universes v u

open category_theory algebraic_geometry category_theory.limits
namespace algebraic_geometry.SheafedSpace

variables {C : Type u} [category.{v} C] [has_limits C]

structure covers {X : SheafedSpace C} (R : sieve X) (x : X) :=
(obj : SheafedSpace C) (map : obj ‚ü∂ X)
(covers : x ‚àà set.range (map : obj ‚ü∂ X).base) (mem : R map)

noncomputable
def restrict_covers {X Y: SheafedSpace C} (f : Y ‚ü∂ X) {R : sieve X} (x : Y)
  (c : covers R (f.base x)) [has_pullback f c.map]
  [preserves_limit (cospan f c.map) (SheafedSpace.forget C)] :
  covers (R.pullback f) x :=
{ obj := pullback f c.map,
  map := pullback.fst,
  covers :=
  begin
    have eq‚ÇÅ : _ = (pullback.fst : pullback f c.map ‚ü∂ Y).base :=
      preserves_limits_iso_hom_œÄ (SheafedSpace.forget C)
        (cospan f c.map) walking_cospan.left,
    have eq‚ÇÇ := lim_map_œÄ (diagram_iso_cospan (cospan f c.map ‚ãô SheafedSpace.forget C)).hom
      walking_cospan.left,
    erw category.comp_id at eq‚ÇÇ,
    change x ‚àà set.range ‚áë((pullback.fst : pullback f c.map ‚ü∂ Y).base),
    rw [‚Üê eq‚ÇÅ, ‚Üê eq‚ÇÇ, ‚Üê category.assoc, coe_comp, set.range_comp],
    rw set.range_iff_surjective.mpr ((Top.epi_iff_surjective _).mp _),
    rw set.image_univ,
    change x ‚àà set.range (pullback.fst : _ ‚ü∂ (SheafedSpace.forget C).obj Y),
    rw Top.pullback_fst_range,
    tactic.unfreeze_local_instances,
    obtain ‚ü®a, eq‚ü© := c.covers,
    exact ‚ü®a, eq.symm‚ü©,
    change epi (_ ‚â´ (limits.lim.map_iso _).hom),
    apply_instance
  end,
  mem := by { change R _, erw pullback.condition, exact R.downward_closed c.mem _ }
}

/--
The zariski to

-/
def zariski_topology : grothendieck_topology (SheafedSpace C) :=
{ sieves := Œª X R, ‚àÄ (x : X), ‚àÉ (c : covers R x), PresheafedSpace.is_open_immersion c.map,
  top_mem' := Œª X x, ‚ü®‚ü®X, ùüô X, by simp, trivial‚ü©, infer_instance‚ü©,
  pullback_stable' := Œª X Y R f hf x,
  begin
    obtain ‚ü®c, _‚ü© := hf (f.base x),
    resetI,
    use restrict_covers f x c,
    { exact PresheafedSpace.is_open_immersion.SheafedSpace_pullback_fst_of_right _ _ },
  end,
  transitive' := Œª X R hR S fS x,
  begin
    obtain ‚ü®‚ü®Z, g, hg‚ÇÅ, hg‚ÇÇ‚ü©, _‚ü© := hR x,
    obtain ‚ü®y, eq‚ü© := hg‚ÇÅ,
    obtain ‚ü®‚ü®Z', g', hg‚ÇÅ', hg‚ÇÇ'‚ü©, _‚ü© :=  fS hg‚ÇÇ y,
    obtain ‚ü®y', eq'‚ü© := hg‚ÇÅ',
    use Z',
    { exact g' ‚â´ g },
    { use y', rw [‚Üê eq, ‚Üê eq'], refl },
    { exact hg‚ÇÇ' },
    { exactI PresheafedSpace.is_open_immersion.comp _ _ },
  end }






end algebraic_geometry.SheafedSpace
