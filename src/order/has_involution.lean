/-
Copyright (c) 2022 Peter Nelson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Peter Nelson
-/
import order.antichain

/-!
# Orders with involution

This file concerns orders that admit an order-reversing involution. In the case of a lattice,
these are sometimes referred to as 'i-lattices' or 'lattices with involution'. Such an involution
is more general than a `boolean_algebra` complement, but retains many of its properties. Other than
a boolean algebra, an example is the subspace lattice of the vector space `ùïÇ‚Åø` for `ùïÇ` of nonzero
characteristic, where for each subspace `W` we have `invo W = {x ‚àà V | ‚àÄ w ‚àà W, w·µÄx = 0}`; this is
not a complement in the stronger sense because `invo W` can intersect `W`.

## Main declarations

* `has_involution`: typeclass applying to types with a `preorder` that admit an antitone involution.

* `‚Å±` : postfix notation for the function `invo : Œ± ‚Üí Œ±` given a type `Œ±` with `[has_involution Œ±]`

## TODO

Provide instances other than the one from `boolean_algebra`.
-/

universe u

class has_involution (Œ± : Type u) [preorder Œ±]  :=
(invo : Œ± ‚Üí Œ±)
(invo_antitone' : ‚àÄ (x y : Œ±), x ‚â§ y ‚Üí invo y ‚â§ invo x)
(invo_involutive' : function.involutive invo)

open has_involution

variables {Œ± : Type u}

postfix `‚Å±`:(max+1) := invo

section preorder

variables [preorder Œ±] [has_involution Œ±] {x y : Œ±}

@[simp] lemma invo_invo (x : Œ±) : x‚Å±‚Å± = x :=  invo_involutive' x

lemma invo_eq_iff_invo_eq : x‚Å± = y ‚Üî y‚Å± = x :=
by {rw [eq_comm], exact invo_involutive'.eq_iff.symm}

lemma eq_invo_iff_eq_invo : x = y‚Å± ‚Üî y = x‚Å± :=
by rw [‚Üê invo_invo x, invo_eq_iff_invo_eq, invo_invo, invo_invo]

lemma invo_le_invo (h : x ‚â§ y) : y‚Å± ‚â§ x‚Å± := invo_antitone' _ _ h

lemma le_of_invo_le (h : x‚Å± ‚â§ y‚Å±) : y ‚â§ x :=
by {rw [‚Üêinvo_invo x, ‚Üêinvo_invo y], exact invo_le_invo h,}

lemma invo_le_invo_iff_le : x‚Å± ‚â§ y‚Å± ‚Üî y ‚â§ x := ‚ü®le_of_invo_le, invo_le_invo‚ü©

lemma le_invo_iff_le_invo : x ‚â§ y‚Å± ‚Üî y ‚â§ x‚Å± := by rw [‚Üêinvo_le_invo_iff_le, invo_invo]

lemma invo_le_iff_invo_le : x‚Å± ‚â§ y ‚Üî y‚Å± ‚â§ x := by rw [‚Üêinvo_le_invo_iff_le, invo_invo]

lemma invo_inj (h : x‚Å± = y‚Å±) : x = y := invo_involutive'.injective h

lemma invo_lt_invo_iff_lt : x‚Å± < y‚Å± ‚Üî y < x := by simp [lt_iff_le_not_le, invo_le_invo_iff_le]

lemma lt_invo_iff_lt_invo : x < y‚Å± ‚Üî y < x‚Å± := by rw [‚Üêinvo_lt_invo_iff_lt, invo_invo]

lemma invo_lt_iff_invo_lt : x‚Å± < y ‚Üî y‚Å± < x := by rw [‚Üêinvo_lt_invo_iff_lt, invo_invo]

lemma le_invo_of_le_invo (h : y ‚â§ x‚Å±) : x ‚â§ y‚Å± := le_invo_iff_le_invo.mp h

lemma invo_le_of_invo_le (h : y‚Å± ‚â§ x) : x‚Å± ‚â§ y := invo_le_iff_invo_le.mp h

lemma invo_involutive : function.involutive (invo : Œ± ‚Üí Œ±) := invo_invo

lemma invo_bijective : function.bijective (invo : Œ± ‚Üí Œ±) := invo_involutive.bijective

lemma invo_surjective : function.surjective (invo : Œ± ‚Üí Œ±) := invo_involutive.surjective

lemma invo_injective : function.injective (invo : Œ± ‚Üí Œ±) := invo_involutive.injective

lemma invo_antitone : antitone (invo: Œ± ‚Üí Œ±) := Œª _ _, invo_le_invo

@[simp] lemma invo_inj_iff : x‚Å± = y‚Å± ‚Üî x = y := invo_injective.eq_iff

lemma invo_comp_invo : invo ‚àò invo = @id Œ± := funext invo_invo

/-- Taking the involution as an order isomorphism to the order dual. -/
@[simps]
def order_iso.invo (Œ±) [preorder Œ±] [has_involution Œ±] : Œ± ‚âÉo Œ±·µí·µà :=
{ to_fun := Œª x, order_dual.to_dual (x‚Å±),
  inv_fun := invo ‚àò order_dual.of_dual,
  left_inv := invo_invo,
  right_inv := invo_invo,
  map_rel_iff' := Œª _ _, invo_le_invo_iff_le }

@[priority 100]
instance order_dual.has_involution : has_involution Œ±·µí·µà :=
{ invo := Œª x, order_dual.to_dual (order_dual.of_dual x)‚Å±,
  invo_antitone' := Œª a b h, @invo_antitone' Œ± _ _ b a h,
  invo_involutive' := invo_involutive' }

lemma invo_strict_anti : strict_anti (invo : Œ± ‚Üí Œ±) := (order_iso.invo Œ±).strict_mono

end preorder

section boolean_algebra

@[priority 100]
instance boolean_algebra.to_has_involution [boolean_algebra Œ±] : has_involution Œ± :=
{ invo := compl,
  invo_antitone' := Œª _ _, compl_le_compl,
  invo_involutive' := compl_involutive }

end boolean_algebra

section lattice

variables [lattice Œ±] [has_involution Œ±] {x y : Œ±}

lemma invo_sup : (x ‚äî y)‚Å± = x‚Å± ‚äì y‚Å± := @order_iso.map_sup Œ± Œ±·µí·µà _ _ (order_iso.invo Œ±) x y

lemma invo_inf : (x ‚äì y)‚Å± = x‚Å± ‚äî y‚Å± := @order_iso.map_inf Œ± Œ±·µí·µà _ _ (order_iso.invo Œ±) x y

end lattice

section image

variables [preorder Œ±] [has_involution Œ±] {s : set Œ±} {x y : Œ±}

open set order_dual

lemma image_invo_eq_preimage_invo : invo '' s = invo ‚Åª¬π' s :=
ext (Œª x, ‚ü®by {rintro ‚ü®x',hx',rfl‚ü©, rwa [‚Üêinvo_invo x'] at hx'}, Œª h, ‚ü®x‚Å±, ‚ü®h, invo_invo x‚ü©‚ü©‚ü©)

@[simp] lemma invo_invo_image : invo '' (invo '' s) = s := by {ext, simp}

lemma mem_image_invo {x : Œ±} {s : set Œ±} : x ‚àà invo '' s ‚Üî x‚Å± ‚àà s :=
by {rw image_invo_eq_preimage_invo, refl}

lemma mem_image_invo' {x : Œ±} {P : Œ± ‚Üí Prop} : (invo '' P) x ‚Üî P x‚Å± := mem_image_invo

lemma mem_preimage_invo' {x : Œ±} {P : Œ± ‚Üí Prop} : (invo ‚Åª¬π' P) x ‚Üî P x‚Å± :=
by rw [‚Üêimage_invo_eq_preimage_invo, mem_image_invo']

lemma is_antichain.image_invo (hs : is_antichain (‚â§) s) : is_antichain (‚â§) (invo '' s) :=
(hs.image_embedding (order_iso.invo Œ±).to_order_embedding).flip

lemma is_antichain.preimage_invo (hs : is_antichain (‚â§) s) : is_antichain (‚â§) (invo ‚Åª¬π' s) :=
image_invo_eq_preimage_invo.subst hs.image_invo

@[simp] lemma preimage_invo_Iic : invo ‚Åª¬π' (Iic x) = Ici x‚Å± := ext (Œª _, invo_le_iff_invo_le)

@[simp] lemma preimage_invo_Ici : invo ‚Åª¬π' (Ici x) = Iic x‚Å± := ext (Œª _, le_invo_iff_le_invo)

@[simp] lemma preimage_invo_Iio : invo ‚Åª¬π' (Iio x) = Ioi x‚Å± := ext (Œª _, invo_lt_iff_invo_lt)

@[simp] lemma preimage_invo_Ioi : invo ‚Åª¬π' (Ioi x) = Iio x‚Å± := ext (Œª _, lt_invo_iff_lt_invo)

@[simp] lemma preimage_invo_Icc : invo ‚Åª¬π' (Icc x y) = Icc y‚Å± x‚Å± :=
by simp [‚ÜêIic_inter_Ici, inter_comm]

@[simp] lemma preimage_invo_Ioo : invo ‚Åª¬π' (Ioo x y) = Ioo y‚Å± x‚Å± :=
by simp [‚ÜêIio_inter_Ioi, inter_comm]

@[simp] lemma preimage_invo_Ico : invo ‚Åª¬π' (Ico x y) = Ioc y‚Å± x‚Å± :=
by simp [‚ÜêIio_inter_Ici, ‚ÜêIic_inter_Ioi, inter_comm]

@[simp] lemma preimage_invo_Ioc : invo ‚Åª¬π' (Ioc x y) = Ico y‚Å± x‚Å± :=
by simp [‚ÜêIio_inter_Ici, ‚ÜêIic_inter_Ioi, inter_comm]

@[simp] lemma image_invo_Iic : invo '' (Iic x) = Ici x‚Å± :=
by rw [image_invo_eq_preimage_invo, preimage_invo_Iic]

@[simp] lemma image_invo_Ici : invo '' (Ici x) = Iic x‚Å± :=
by rw [image_invo_eq_preimage_invo, preimage_invo_Ici]

@[simp] lemma image_invo_Iio : invo '' (Iio x) = Ioi x‚Å± :=
by rw [image_invo_eq_preimage_invo, preimage_invo_Iio]

@[simp] lemma image_invo_Ioi : invo '' (Ioi x) = Iio x‚Å± :=
by rw [image_invo_eq_preimage_invo, preimage_invo_Ioi]

@[simp] lemma image_invo_Icc : invo '' (Icc x y) = Icc y‚Å± x‚Å± :=
by rw [image_invo_eq_preimage_invo, preimage_invo_Icc]

@[simp] lemma image_invo_Ioo : invo '' (Ioo x y) = Ioo y‚Å± x‚Å± :=
by rw [image_invo_eq_preimage_invo, preimage_invo_Ioo]

@[simp] lemma image_invo_Ioc : invo '' (Ioc x y) = Ico y‚Å± x‚Å± :=
by rw [image_invo_eq_preimage_invo, preimage_invo_Ioc]

@[simp] lemma image_invo_Ico : invo '' (Ico x y) = Ioc y‚Å± x‚Å± :=
by rw [image_invo_eq_preimage_invo, preimage_invo_Ico]

end image
