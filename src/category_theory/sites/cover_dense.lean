import category_theory.sites.sheaf
import category_theory.flat_functors
import category_theory.sites.cover_preserving

universes v u

namespace category_theory
section cover_dense
variables {C : Type*} [category C] {D : Type*} [category D] {E : Type*} [category E]
variables (J : grothendieck_topology C) (K : grothendieck_topology D)
variables {L : grothendieck_topology E}

structure factors_through_image_obj (G : C ‚•§ D) {V U : D} (f : V ‚ü∂ U) :=
(obj : C) (lift : V ‚ü∂ G.obj obj) (map : G.obj obj ‚ü∂ U) (fac : f = lift ‚â´ map)

def all_factors_through_image_obj (G : C ‚•§ D) {U : D} (R : presieve U) :=
‚àÄ ‚¶ÉV‚¶Ñ {f : V ‚ü∂ U} (hf : R f), factors_through_image_obj G f

structure factors_through_image_obj_and_map (G : C ‚•§ D) {V : D} {U : D} (f : V ‚ü∂ U)
  (O : finset (structured_arrow U G)) extends factors_through_image_obj G f :=
(premap : ‚àÄ (f : O), obj ‚ü∂ f.val.right)
(map_fac : ‚àÄ (f : O), G.map (premap f) = map ‚â´ f.val.hom)

def all_factors_through_image_obj_and_map (G : C ‚•§ D) {U : D} (R : presieve U) (O) :=
‚àÄ ‚¶ÉV‚¶Ñ {f : V ‚ü∂ U} (hf : R f), factors_through_image_obj_and_map G f O

def all_through_both_to_through_obj {G : C ‚•§ D} {U} {R : presieve U} {O}
  (H : all_factors_through_image_obj_and_map G R O) : all_factors_through_image_obj G R :=
Œª V f hf, (H hf).to_factors_through_image_obj

lemma factors_through_image_obj_and_map.map_fac' {G : C ‚•§ D} {V : D} {U : D} {f : V ‚ü∂ U}
  {O : finset (structured_arrow U G)} (H : factors_through_image_obj_and_map G f O) (f' : O) :
  H.lift ‚â´ G.map (H.premap f') = f ‚â´ f'.val.hom :=
begin
  rw [H.map_fac f', ‚Üê category.assoc],
  congr,
  exact H.fac.symm
end

noncomputable
def through_obj_to_through_both {G : C ‚•§ D} {U V} {f : V ‚ü∂ U}
  {O : finset (structured_arrow U G)} (H : factors_through_image_obj G f)
  (H' : ‚àÄ (f : O), ‚àÉ (g : H.obj ‚ü∂ f.val.right), G.map g = H.map ‚â´ f.val.hom) :
  factors_through_image_obj_and_map G f O :=
{ premap := Œª f, (H' f).some, map_fac := Œª f, (H' f).some_spec, ..H}

structure cover_dense (J : grothendieck_topology C) (K : grothendieck_topology D) (G : C ‚•§ D) :=
(obj          : ‚àÄ (U : D), K U)
(obj_fac      : ‚àÄ (U : D), all_factors_through_image_obj G (obj U))
(map          : ‚àÄ {U V : C} (f : G.obj U ‚ü∂ G.obj V), J U)
(map_fac_map  : ‚àÄ {U V W} (f : G.obj U ‚ü∂ G.obj V) {g : W ‚ü∂ U} (hg : map f g), W ‚ü∂ V)
(map_fac      : ‚àÄ {U V W} (f : G.obj U ‚ü∂ G.obj V) {g : W ‚ü∂ U} (hg : map f g),
  G.map (map_fac_map f hg) = G.map g ‚â´ f)

def cover_dense_mk_of_full (J : grothendieck_topology C) (K : grothendieck_topology D) (G : C ‚•§ D)
  [full G] (create : ‚àÄ (U : D), Œ£ (S : K U), all_factors_through_image_obj G S) :
  cover_dense J K G :=
{ obj          := Œª U, (create U).1,
  obj_fac      := Œª U, (create U).2,
  map          := Œª U V f, ‚ü®_, J.top_mem U‚ü©,
  map_fac_map  := Œª U V W f g hg, g ‚â´ G.preimage f,
  map_fac      := Œª U V W f g hg, by simp }

section factor_cover_sieve
variables {J} {K} {G : C ‚•§ D} (H : cover_dense J K G) (H' : cover_preserving J K G)
variables {X : D} {Y : C} (f : X ‚ü∂ G.obj Y) (S : K X) (HS : all_factors_through_image_obj G S)

def cover_dense.obj' (H : cover_dense J K G) (U : D) : K U :=
‚ü®‚ü®Œª Y f, nonempty (factors_through_image_obj G f), Œª Y Z f ‚ü®hf‚ü© g,
  ‚ü®{ obj := hf.obj, lift := g ‚â´ hf.lift, map := hf.map, fac := by rw [category.assoc, ‚Üêhf.fac] }‚ü©‚ü©,
    K.superset_covering (Œª V f hf, ‚ü®H.obj_fac U hf‚ü©) (H.obj U).property‚ü©

noncomputable
def cover_dense.obj_fac' (H : cover_dense J K G) (U : D) :
  all_factors_through_image_obj G (H.obj' U) := Œª V f hf, hf.some

lemma cover_dense.obj'_in (H : cover_dense J K G) {U : D} {V : C} (f : G.obj V ‚ü∂ U) :
  H.obj' U f := ‚ü®{ obj := V, lift := ùüô _, map := f, fac := by simp }‚ü©

include H H' f S HS

@[simps]
def factor_cover_sieve_one : K X :=
begin
  split, apply K.bind_covering S.property,
  intros Z g hg,
  exact (K.pullback_stable (HS hg).lift
    (H'.cover_preserve (H.map ((HS hg).map ‚â´ f)).property) : _)
end

omit f S HS

/-
Thus given any finite family of morphisms `{ f·µ¢ : X ‚ü∂ G(Y·µ¢) }`, we may obtain a covering sieve of
`X` that factors through the image of `G`, and factors through an image map of `G` after composing
with each `f·µ¢` by repeatedly applying of `factor_cover_sieve_one`.
-/
lemma factor_cover_sieve_exists (O : finset (structured_arrow X G)) :
  ‚àÉ (S : K X) (H‚ÇÅ : all_factors_through_image_obj_and_map G S O), true :=
begin
  classical,
  apply finset.induction_on O,
  { use H.obj X, split, swap, trivial,
    intros Y g hg,
    apply through_obj_to_through_both (H.obj_fac X hg),
    intro X, exfalso, exact X.2 },
  rintros f O' - ‚ü®S, hS, -‚ü©,
  use factor_cover_sieve_one H H' f.hom S (all_through_both_to_through_obj hS),
  split, swap, trivial,
  intros Y g hg,
  choose Y' g' f' H‚ÇÅ H‚ÇÇ H‚ÇÉ using hg,
  rcases presieve.get_functor_pushforward_structure H‚ÇÇ with ‚ü®Y'', g'', f'', H‚ÇÑ, H‚ÇÖ‚ü©,
  let : factors_through_image_obj G g :=
  { obj := Y'', lift := f'', map := G.map g'' ‚â´ (hS H‚ÇÅ).map, fac := by
    { rw [‚Üê H‚ÇÉ, ‚Üê category.assoc, ‚Üê H‚ÇÖ, category.assoc], congr, exact (hS H‚ÇÅ).fac } },
  apply through_obj_to_through_both this,
  rintros ‚ü®f‚ÇÄ, hf‚ÇÄ‚ü©,
  cases finset.mem_insert.mp hf‚ÇÄ with hf‚ÇÄ' hf‚ÇÄ',
  { cases hf‚ÇÄ',
    use H.map_fac_map ((hS H‚ÇÅ).map ‚â´ f.hom) H‚ÇÑ,
    rw category.assoc,
    exact H.map_fac _ H‚ÇÑ },
  { use g'' ‚â´ (hS H‚ÇÅ).premap ‚ü®f‚ÇÄ, hf‚ÇÄ'‚ü©,
    rw [G.map_comp, (hS H‚ÇÅ).map_fac ‚ü®_, hf‚ÇÄ'‚ü©, category.assoc] }
end

noncomputable
def factor_cover_sieve {G : C ‚•§ D} (H : cover_dense J K G) (H' : cover_preserving J K G)
  {X : D} (O : finset (structured_arrow X G)) : K X :=
(factor_cover_sieve_exists H H' O).some

noncomputable
def factor_cover_sieve_factor {G : C ‚•§ D} (H : cover_dense J K G) (H' : cover_preserving J K G)
  {X : D} (O : finset (structured_arrow X G)) :
  all_factors_through_image_obj_and_map G (factor_cover_sieve H H' O) O :=
(factor_cover_sieve_exists H H' O).some_spec.some

end factor_cover_sieve
end cover_dense
namespace presieve.family_of_elements
open presieve
open opposite
open structured_arrow
universes v‚ÇÅ u‚ÇÅ u‚ÇÇ
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÅ} D]
variables {J : grothendieck_topology C} {K : grothendieck_topology D}
variables (u : C ‚•§ D) (hu‚ÇÅ : cover_dense J K u) (hu‚ÇÇ : cover_preserving J K u)
variables {P : D·µí·µñ ‚•§ Type v‚ÇÅ} {Z : C} {T : presieve Z}
variables (hT : is_sheaf K P)
variables {x : family_of_elements (u.op ‚ãô P) T} (h : x.compatible)
include hu‚ÇÅ hu‚ÇÇ hT

/-
We ought to show that for each `f‚ÇÅ ‚â´ u.map g‚ÇÅ = f‚ÇÇ ‚â´ u.map g‚ÇÇ`, the restriction of
`x` along the two paths are the same given `x` is compatible in the image of `u`.
  -/
lemma functor_pushforward_compatible_of_dense_subsite {Y‚ÇÅ Y‚ÇÇ : C} {X Z: D}
  (f‚ÇÅ : X ‚ü∂ u.obj Y‚ÇÅ) (f‚ÇÇ : X ‚ü∂ u.obj Y‚ÇÇ) (g‚ÇÅ : u.obj Y‚ÇÅ ‚ü∂ Z) (g‚ÇÇ : u.obj Y‚ÇÇ ‚ü∂ Z)
  (eq : f‚ÇÅ ‚â´ g‚ÇÅ = f‚ÇÇ ‚â´ g‚ÇÇ)
  (x‚ÇÅ : P.obj (op (u.obj Y‚ÇÅ))) (x‚ÇÇ : P.obj (op (u.obj Y‚ÇÇ)))
  (hx : ‚àÄ {X' : C} (f‚ÇÅ' : X' ‚ü∂ Y‚ÇÅ) (f‚ÇÇ' : X' ‚ü∂ Y‚ÇÇ) (h : u.map f‚ÇÅ' ‚â´ g‚ÇÅ = u.map f‚ÇÇ' ‚â´ g‚ÇÇ),
    P.map (u.map f‚ÇÅ').op x‚ÇÅ = P.map (u.map f‚ÇÇ').op x‚ÇÇ) :
  P.map f‚ÇÅ.op x‚ÇÅ = P.map f‚ÇÇ.op x‚ÇÇ :=
begin
  classical,
  let O := [mk f‚ÇÅ, mk f‚ÇÇ].to_finset,
  let f‚ÇÅ' : O := ‚ü®mk f‚ÇÅ, by simp‚ü©,
  let f‚ÇÇ' : O := ‚ü®mk f‚ÇÇ, by simp‚ü©,
  apply (hT _ (factor_cover_sieve hu‚ÇÅ hu‚ÇÇ O).property).is_separated_for.ext,
  intros Y f hf,
  let H := factor_cover_sieve_factor hu‚ÇÅ hu‚ÇÇ O hf,
  simp only [‚Üê types_comp_apply (P.map _) (P.map _), ‚Üê P.map_comp, ‚Üê op_comp],
  have e‚ÇÅ : _ = f ‚â´ f‚ÇÅ := H.map_fac' f‚ÇÅ',
  have e‚ÇÇ : _ = f ‚â´ f‚ÇÇ := H.map_fac' f‚ÇÇ',
  simp only [‚Üêe‚ÇÅ, ‚Üêe‚ÇÇ, op_comp, P.map_comp, types_comp_apply],
  congr,
  apply hx (H.premap f‚ÇÅ') (H.premap f‚ÇÇ'),
  simp [H.map_fac f‚ÇÅ', H.map_fac f‚ÇÇ', eq],
end

include h
variable [faithful u]

lemma functor_pushforward_compatible_of_dense_subsite_of_compatible {Y‚ÇÅ Y‚ÇÇ : C} {X : D}
  (f‚ÇÅ : X ‚ü∂ u.obj Y‚ÇÅ) (f‚ÇÇ : X ‚ü∂ u.obj Y‚ÇÇ) {g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z} {g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z}
  (hg‚ÇÅ : T g‚ÇÅ) (hg‚ÇÇ : T g‚ÇÇ) (eq : f‚ÇÅ ‚â´ u.map g‚ÇÅ = f‚ÇÇ ‚â´ u.map g‚ÇÇ) :
  P.map f‚ÇÅ.op (x g‚ÇÅ hg‚ÇÅ) = P.map f‚ÇÇ.op (x g‚ÇÇ hg‚ÇÇ) :=
begin
  apply functor_pushforward_compatible_of_dense_subsite u hu‚ÇÅ hu‚ÇÇ hT f‚ÇÅ f‚ÇÇ _ _ eq,
  intros X' f‚ÇÅ' f‚ÇÇ' eq',
  apply h,
  apply u.map_injective,
  simpa using eq'
end

lemma compatible.functor_pushforward_of_dense_subsite : (x.functor_pushforward u).compatible :=
begin
  rintros Z‚ÇÅ Z‚ÇÇ W g‚ÇÅ g‚ÇÇ f‚ÇÅ' f‚ÇÇ' H‚ÇÅ H‚ÇÇ eq,
  unfold family_of_elements.functor_pushforward,
  rcases get_functor_pushforward_structure H‚ÇÅ with ‚ü®X‚ÇÅ, f‚ÇÅ, h‚ÇÅ, hf‚ÇÅ, rfl‚ü©,
  rcases get_functor_pushforward_structure H‚ÇÇ with ‚ü®X‚ÇÇ, f‚ÇÇ, h‚ÇÇ, hf‚ÇÇ, rfl‚ü©,
  suffices : P.map (g‚ÇÅ ‚â´ h‚ÇÅ).op (x f‚ÇÅ hf‚ÇÅ) = P.map (g‚ÇÇ ‚â´ h‚ÇÇ).op (x f‚ÇÇ hf‚ÇÇ), simpa using this,
  apply functor_pushforward_compatible_of_dense_subsite_of_compatible u hu‚ÇÅ hu‚ÇÇ hT h _ _ hf‚ÇÅ hf‚ÇÇ,
  simpa using eq
end

lemma functor_pushforward_apply_map_of_dense_subsite {Y : C} {f: Y ‚ü∂ Z} (hf) :
  x.functor_pushforward u (u.map f) (image_mem_functor_pushforward u T hf) = x f hf :=
begin
  unfold family_of_elements.functor_pushforward,
  rcases e‚ÇÅ : get_functor_pushforward_structure (image_mem_functor_pushforward u T hf) with
    ‚ü®X, g, f', hg, eq‚ü©,
  simpa using functor_pushforward_compatible_of_dense_subsite_of_compatible u hu‚ÇÅ hu‚ÇÇ hT h f' (ùüô _)
    hg hf (by simp[eq])
end

end presieve.family_of_elements

section
open limits
open opposite
open presieve
variables {C D : Type u} [category.{u} C] [category.{u} D] {G : C ‚•§ D}
variables {J : grothendieck_topology C} {K : grothendieck_topology D}
variables {A : Type v} [category.{u} A]
variables (H : cover_dense J K G) (H' : cover_preserving J K G)



namespace subsite_comparison
variables {‚Ñ± ‚Ñ±' : SheafOfTypes K} (Œ± : G.op ‚ãô ‚Ñ±.val ‚ü∂ G.op ‚ãô ‚Ñ±'.val)

@[simps]
def sheaf_over (‚Ñ± : Sheaf K A) (X : A) : SheafOfTypes K :=
‚ü®‚Ñ±.val ‚ãô coyoneda.obj (op X), ‚Ñ±.property X‚ü©

@[simps]
def iso_over {‚Ñ± ‚Ñ±' : Sheaf K A} (Œ± : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X : A) :
  G.op ‚ãô (sheaf_over ‚Ñ± X).val ‚âÖ G.op ‚ãô (sheaf_over ‚Ñ±' X).val :=
iso_whisker_right Œ± (coyoneda.obj (op X))

include H H' ‚Ñ± ‚Ñ±'
open structured_arrow
namespace types
@[simp] noncomputable
def pushforward_family {X}
  (x : ‚Ñ±.val.obj (op X)) : family_of_elements ‚Ñ±'.val (H.obj' X) := Œª Y f hf,
  ‚Ñ±'.val.map (H.obj_fac' _ hf).lift.op $ Œ±.app (op (H.obj_fac' X hf).obj) $
    ‚Ñ±.val.map (H.obj_fac' _ hf).map.op x

variable [faithful G]

lemma pushforward_family_compatible {X} (x : ‚Ñ±.val.obj (op X)) :
  (pushforward_family H H' Œ± x).compatible :=
begin
  intros Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ e,
  change (‚Ñ±'.val.map (H.obj_fac' X h‚ÇÅ).lift.op ‚â´ ‚Ñ±'.val.map g‚ÇÅ.op) _ =
  (‚Ñ±'.val.map (H.obj_fac' X h‚ÇÇ).lift.op ‚â´ ‚Ñ±'.val.map g‚ÇÇ.op) _,
  simp only [‚Üêfunctor.map_comp, ‚Üê op_comp],
  apply presieve.family_of_elements.functor_pushforward_compatible_of_dense_subsite G H H'
    ‚Ñ±'.property (g‚ÇÅ ‚â´ (H.obj_fac' X h‚ÇÅ).lift) (g‚ÇÇ ‚â´ (H.obj_fac' X h‚ÇÇ).lift)
    (H.obj_fac' X h‚ÇÅ).map (H.obj_fac' X h‚ÇÇ).map,
  { simp only [category.assoc],
    convert e,
    exact (H.obj_fac' _ h‚ÇÅ).fac.symm,
    exact (H.obj_fac' _ h‚ÇÇ).fac.symm },
  {
    intros X' f‚ÇÅ' f‚ÇÇ' eq',
    convert congr_fun _ x,
    change ‚Ñ±.val.map _ ‚â´ Œ±.app (op _) ‚â´ ‚Ñ±'.val.map _ =
      ‚Ñ±.val.map _ ‚â´ Œ±.app (op _) ‚â´ ‚Ñ±'.val.map _,
    erw [‚Üê Œ±.naturality f‚ÇÅ'.op, ‚Üê Œ±.naturality f‚ÇÇ'.op],
    simp only [quiver.hom.unop_op, functor.comp_map, G.op_map,
    ‚Üê category.assoc, ‚Üê ‚Ñ±.val.map_comp, ‚Üêop_comp, eq'] }
end

noncomputable
def app_hom (X : D) : ‚Ñ±.val.obj (op X) ‚ü∂ ‚Ñ±'.val.obj (op X) := Œª x,
  (‚Ñ±'.property _ (H.obj' X).property).amalgamate
    (pushforward_family H H' Œ± x)
    (pushforward_family_compatible H H' Œ± x)

@[simp]
lemma pushforward_family_apply {X} (x : ‚Ñ±.val.obj (op X)) {Y : C} {f : G.obj Y ‚ü∂ X} :
  pushforward_family H H' Œ± x f (H.obj'_in f) = Œ±.app (op Y) (‚Ñ±.val.map f.op x) :=
begin
  unfold pushforward_family, conv_rhs { rw (H.obj_fac' X (H.obj'_in f)).fac },
  refine eq.trans _ (functor_to_types.map_id_apply ‚Ñ±'.val _),
  rw ‚Üê op_id,
  apply presieve.family_of_elements.functor_pushforward_compatible_of_dense_subsite G H H'
    ‚Ñ±'.property _ _ (H.obj_fac' X (H.obj'_in f)).map f,
  { rw ‚Üê(H.obj_fac' X (H.obj'_in f)).fac, simp },
  intros X' f‚ÇÅ' f‚ÇÇ' eq',
  simp,
  change (‚Ñ±.val.map _ ‚â´ Œ±.app (op (H.obj_fac' X (H.obj'_in f)).obj) ‚â´ ‚Ñ±'.val.map _) _
    = (‚Ñ±.val.map _ ‚â´ ‚Ñ±.val.map _ ‚â´ Œ±.app (op Y) ‚â´ ‚Ñ±'.val.map _) _,
  erw [‚Üê Œ±.naturality f‚ÇÅ'.op, ‚Üê Œ±.naturality f‚ÇÇ'.op],
  simp only [quiver.hom.unop_op, functor.comp_map, G.op_map,
    ‚Üê category.assoc, ‚Üê ‚Ñ±.val.map_comp, ‚Üêop_comp, eq'],
  conv_lhs { rw (H.obj_fac' X (H.obj'_in f)).fac },
  simp
end

section end
@[simp] lemma app_hom_restrict {X : D} {Y : C} (f : op X ‚ü∂ op (G.obj Y)) (x) :
  ‚Ñ±'.val.map f (app_hom H H' Œ± X x) = Œ±.app (op Y) (‚Ñ±.val.map f x) :=
begin
  refine ((‚Ñ±'.property _ (H.obj' X).property).valid_glue
    (pushforward_family_compatible H H' Œ± x) f.unop (H.obj'_in f.unop)).trans _,
  apply pushforward_family_apply,
end

@[simp]
lemma app_hom_valid_glue {X : D} {Y : C} (f : op X ‚ü∂ op (G.obj Y)) :
  (app_hom H H' Œ± X) ‚â´ ‚Ñ±'.val.map f = ‚Ñ±.val.map f ‚â´ Œ±.app (op Y) :=
by { ext, apply app_hom_restrict }

@[simps] noncomputable
def app_iso (eq : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X : D) :
  ‚Ñ±.val.obj (op X) ‚âÖ ‚Ñ±'.val.obj (op X) :=
{ hom := app_hom H H' eq.hom X,
  inv := app_hom H H' eq.inv X,
  hom_inv_id' :=
  begin
    ext x,
    apply (‚Ñ±.property _ (H.obj' X).property).is_separated_for.ext,
    intros Y f hf,
    rw (H.obj_fac' _ hf).fac,
    simp
  end,
  inv_hom_id' :=
  begin
    ext x,
    apply (‚Ñ±'.property _ (H.obj' X).property).is_separated_for.ext,
    intros Y f hf,
    rw (H.obj_fac' _ hf).fac,
    simp
  end }

@[simps] noncomputable
def sheaf_iso (eq : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) : ‚Ñ±.val ‚âÖ ‚Ñ±'.val :=
begin
  classical,
  fapply nat_iso.of_components,
  { intro X,
    exact app_iso H H' eq (unop X) },
  { intros X Y f,
    ext x,
    apply (‚Ñ±'.property _ (H.obj' (unop Y)).property).is_separated_for.ext,
    intros Y' f' hf',
    rw (H.obj_fac' _ hf').fac,
    simp only [app_hom_restrict, types_comp_apply, op_comp,
      functor_to_types.map_comp_apply, app_iso],
    change _ = ‚Ñ±'.val.map _ ((‚Ñ±'.val.map _ ‚â´ ‚Ñ±'.val.map _) _),
    rw [‚Üê ‚Ñ±'.val.map_comp, ‚Üê f.op_unop, ‚Üê op_comp, app_hom_restrict],
    simp }
end
end types
open types

variable [faithful G]

@[simp, reassoc]
lemma app_hom_is_valid_glue (‚Ñ± ‚Ñ±' : Sheaf K A) (eq : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X) {Y U}
{f : Y ‚ü∂ U} (hf : (H.obj' U).val f) (x) :
 app_hom H H' (iso_over eq (unop X)).hom U x ‚â´ ‚Ñ±'.val.map (H.obj_fac' U hf).map.op =
  x ‚â´ ‚Ñ±.val.map (H.obj_fac' U hf).map.op ‚â´ eq.hom.app (op (H.obj_fac' U hf).obj) :=
(congr_fun (app_hom_valid_glue H H' (iso_over eq (unop X)).hom (H.obj_fac' U hf).map.op) x).trans
  (by { rw ‚Üêcategory.assoc, refl  })

@[simp]
lemma app_hom_apply_comp (‚Ñ± ‚Ñ±' : Sheaf K A) (eq : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X Y) (U) (x y) :
  app_hom H H' (iso_over eq (unop X)).hom U (y ‚â´ x) =
    y ‚â´ app_hom H H' (iso_over eq (unop Y)).hom U x :=
begin
  apply ((sheaf_over ‚Ñ±' (unop X)).property _ (H.obj' U).property).is_separated_for,
  apply is_sheaf_for.is_amalgamation,
  intros Y f h,
  conv_lhs { rw (H.obj_fac' _ h).fac },
  delta sheaf_over,
  simp only [pushforward_family, op_comp, functor_to_types.map_comp_apply, iso_over_hom_app,
    functor.comp_map, coyoneda_obj_map, category.assoc],
  congr' 1,
  simp
end

@[simp]
lemma app_hom_apply_comp_id (‚Ñ± ‚Ñ±' : Sheaf K A) (eq : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) (X) (U)
  (x : X ‚ü∂ ‚Ñ±.val.obj U) :
  x ‚â´ app_hom H H' (iso_over eq (‚Ñ±.val.obj U)).hom (unop U) (ùüô _) =
    app_hom H H' (iso_over eq X).hom (unop U) x :=
begin
  convert (app_hom_apply_comp H H' ‚Ñ± ‚Ñ±' eq (op X) (op (‚Ñ±.val.obj U)) (unop U) (ùüô _) x).symm,
  exact (category.comp_id x).symm,
end


@[simps] noncomputable
def sheaf_coyoneda_iso (‚Ñ± ‚Ñ±' : Sheaf K A)
  (eq : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
  coyoneda ‚ãô (whiskering_left D·µí·µñ A (Type u)).obj ‚Ñ±.val ‚âÖ
  coyoneda ‚ãô (whiskering_left D·µí·µñ A (Type u)).obj ‚Ñ±'.val :=
begin
  fapply nat_iso.of_components,
  intro X, dsimp,
  exact sheaf_iso H H' (iso_over eq (unop X)),
  intros X Y f, ext U x,
  change app_hom H H' (iso_over eq (unop Y)).hom (unop U) (f.unop ‚â´ x) =
    f.unop ‚â´ app_hom H H' (iso_over eq (unop X)).hom (unop U) x,
  apply ((sheaf_over ‚Ñ±' (unop Y)).property _ (H.obj' (unop U)).property).is_separated_for,
  apply is_sheaf_for.is_amalgamation,
  intros Y' f' h',
  dsimp[pushforward_family],
  conv_lhs { rw (H.obj_fac' _ h').fac },
  simp only [category.assoc, op_comp, functor.map_comp],
  congr' 1,
  simp only [‚Üêcategory.assoc],
  congr' 1,
  have := app_hom_restrict H H' (iso_over eq (unop X)).hom (H.obj_fac' (unop U) h').map.op x,
  refine this.trans _,
  dsimp, simp
end

@[simps] noncomputable
def sheaf_yoneda_iso (‚Ñ± ‚Ñ±' : Sheaf K A) (eq : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
  ‚Ñ±.val ‚ãô yoneda ‚âÖ ‚Ñ±'.val ‚ãô yoneda :=
begin
  let Œ± := sheaf_coyoneda_iso H H' ‚Ñ± ‚Ñ±' eq,
  fapply nat_iso.of_components,
    intro U,
    fapply nat_iso.of_components,
      intro X,
      exact (Œ±.app X).app U,
      intros X Y f,
      simpa using congr_app (Œ±.hom.naturality f) U,
    intros U V i,
    ext X x,
    exact congr_fun ((Œ±.app X).hom.naturality i) x,
end

@[simps] noncomputable
def sheaf_iso (‚Ñ± ‚Ñ±' : Sheaf K A) (eq : G.op ‚ãô ‚Ñ±.val ‚âÖ G.op ‚ãô ‚Ñ±'.val) :
  ‚Ñ±.val ‚âÖ ‚Ñ±'.val :=
fully_faithful_cancel_right yoneda (sheaf_yoneda_iso H H' ‚Ñ± ‚Ñ±' eq)

section end
lemma app_eq_sheaf_yoneda_iso_app {‚Ñ± ‚Ñ±' : Sheaf K A} (Œ± : ‚Ñ±.val ‚ü∂ ‚Ñ±'.val)
  (HŒ± : is_iso (whisker_left G.op Œ±)) (X) : Œ±.app X =
    (((sheaf_yoneda_iso H H' ‚Ñ± ‚Ñ±' (as_iso (whisker_left G.op Œ±))).app X).app
      (op (‚Ñ±.val.obj X))).hom (ùüô _) :=
begin
  apply ((sheaf_over ‚Ñ±' (‚Ñ±.val.obj X)).property _ (H.obj' (unop X)).property).is_separated_for,
  swap,
  apply is_sheaf_for.is_amalgamation,
  intros Y f hf,
  nth_rewrite_lhs 0 (H.obj_fac' (unop X) hf).fac,
  dsimp,
  simp
end


lemma iso_of_restrict_iso {‚Ñ± ‚Ñ±' : Sheaf K A} (Œ± : ‚Ñ±.val ‚ü∂ ‚Ñ±'.val)
  (eq : is_iso (whisker_left G.op Œ±)) : is_iso Œ± :=
begin
  convert is_iso.of_iso (sheaf_iso H H' ‚Ñ± ‚Ñ±' (as_iso (whisker_left G.op Œ±))),
  ext X,
  rw app_eq_sheaf_yoneda_iso_app H H' Œ± eq,
  apply yoneda.map_injective,
  ext U x,
  erw functor.image_preimage,
  dsimp,
  apply app_hom_apply_comp_id,
  apply_instance
end

end subsite_comparison
end
end category_theory
