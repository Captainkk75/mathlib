import category_theory.bicategory.functor

universes w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open category_theory.bicategory opposite

namespace category_theory

section

variables (B : Type u‚ÇÅ) [quiver.{v‚ÇÅ+1} B] [‚àÄ a b : B, quiver.{w‚ÇÅ+1} (a ‚ü∂ b)]

variables {B}
def quiver_hom_opposite (a b : B·µí·µñ) : quiver.{w‚ÇÅ+1} (a ‚ü∂ b) :=
{ hom := Œª f g : a ‚ü∂ b, f.unop ‚ü∂ g.unop }

end

section
variables
{B : Type u‚ÇÅ} [quiver.{v‚ÇÅ+1} B] [‚àÄ a b : B, quiver.{w‚ÇÅ+1} (a ‚ü∂ b)]
{C : Type u‚ÇÇ} [quiver.{v‚ÇÇ+1} C] [‚àÄ a b : C, quiver.{w‚ÇÇ+1} (a ‚ü∂ b)]
(F : prepseudofunctor B C)

@[simps]
protected def prepseudofunctor.op :
@prepseudofunctor B·µí·µñ _ (category_theory.quiver_hom_opposite) C·µí·µñ _ (category_theory.quiver_hom_opposite) :=
{ obj := Œª a, op (F.obj (unop a)),
  map := Œª a b f, (F.map f.unop).op,
  map‚ÇÇ := Œª a b f g Œ∑, F.map‚ÇÇ Œ∑ }

end

section bicategory

variables {B : Type u‚ÇÅ} [bicategory.{w‚ÇÅ v‚ÇÅ} B]

@[simps]
instance bicategory.opposite : bicategory.{w‚ÇÅ v‚ÇÅ} B·µí·µñ :=
{ hom := Œª a b, unop b ‚ü∂ unop a,
  comp := Œª a b c f g, g ‚â´ f,
  id   := Œª a, ùüô (a.unop),
  hom_category := Œª a b, bicategory.hom_category (unop b) (unop a),
  whisker_left :=  Œª a b c f g h Œ∑, bicategory.whisker_right Œ∑ f,
  whisker_right := Œª _ _ _ _ _ Œ∑ h, bicategory.whisker_left h Œ∑,
  associator := Œª _ _ _ _ f g h, (bicategory.associator h g f).symm,
  associator_naturality_left' := by { intros, apply associator_inv_naturality_right },
  associator_naturality_middle' := by { intros, apply associator_inv_naturality_middle },
  associator_naturality_right' := by { intros, apply associator_inv_naturality_left },
  left_unitor := Œª _ _ f, right_unitor f,
  left_unitor_naturality' := by { intros, apply right_unitor_naturality },
  right_unitor := Œª _ _ f, left_unitor f,
  right_unitor_naturality' := by { intros, apply left_unitor_naturality },
  pentagon' := by { intros, apply pentagon_inv },
  triangle' := by { intros, dsimp, apply triangle_assoc_comp_right } }

instance : quiver.{v‚ÇÅ+1} B·µí·µñ := ‚ü®bicategory.to_category_struct.to_quiver.hom‚ü©

end bicategory

section oplax_functor
variables {B : Type u‚ÇÅ} [bicategory.{w‚ÇÅ v‚ÇÅ} B] {C : Type u‚ÇÇ} [bicategory.{w‚ÇÇ v‚ÇÇ} C]
(F : oplax_functor B C)

@[simps]
protected def oplax_functor.op : oplax_functor B·µí·µñ C·µí·µñ :=
{ obj := Œª a, op (F.obj (unop a)),
  map := Œª a b f, F.map f,
  map‚ÇÇ := Œª a b f g Œ∑, F.map‚ÇÇ Œ∑,
  map_id := Œª a,  F.map_id (unop a),
  map_comp := Œª a b c f g, F.map_comp g f,
  map_comp_naturality_left' := by
  { intros, erw F.map_comp_naturality_right, refl },
  map_comp_naturality_right' := by
  { intros, erw F.map_comp_naturality_left, refl },
  map‚ÇÇ_id' := by { intros, apply F.map‚ÇÇ_id },
  map‚ÇÇ_comp' := by { intros, apply F.map‚ÇÇ_comp },
  map‚ÇÇ_associator' := by { intros, dsimp, apply F.map‚ÇÇ_associator_inv },
  map‚ÇÇ_left_unitor' := by { intros, apply F.map‚ÇÇ_right_unitor },
  map‚ÇÇ_right_unitor' := by { intros, apply F.map‚ÇÇ_left_unitor } }

end oplax_functor

section pseudofunctor

variables {B : Type u‚ÇÅ} [bicategory.{w‚ÇÅ v‚ÇÅ} B] {C : Type u‚ÇÇ} [bicategory.{w‚ÇÇ v‚ÇÇ} C]
(F : pseudofunctor B C)

@[simps]
protected def pseudofunctor.op : pseudofunctor B·µí·µñ C·µí·µñ :=
{ map_id_iso := Œª a, F.map_id_iso (unop a),
  map_comp_iso := Œª a b c f g, F.map_comp_iso g f,
  .. oplax_functor.op (F.to_oplax_functor) }

end pseudofunctor

end category_theory
