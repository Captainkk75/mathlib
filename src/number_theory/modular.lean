/-
Copyright (c) 2021 Alex Kontorovich and Heather Macbeth and Marc Masdeu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth, Marc Masdeu
-/
import analysis.complex.upper_half_plane analysis.special_functions.pow
import analysis.convex.basic

/-!
# The action of the modular group SL(2, ‚Ñ§) on the upper half-plane

  We define the action of `SL(2,‚Ñ§)` on `‚Ñç` (via restriction of the `SL(2,‚Ñù)` action in
  `analysis.complex.upper_half_plane`). We then define the standard fundamental domain
  (`modular_group.fundamental_domain`, `ùíü`) for this action and show
  (`modular_group.exists_smul_mem_fundamental_domain`) that any point in `‚Ñç` can be
  moved inside `ùíü`.

  Standard proofs make use of the identity

  `g‚Ä¢z = a/c - 1/(c(cz+d))`

  for `g=[[a,b],[c,d]]` in `SL(2)`, but this requires separate handling of whether `c = 0`.
  Instead, our proof makes use of the following perhaps novel identity (see
  `modular_group.smul_eq_acbd_add`):

  `g ‚Ä¢ z = (a c + b d) / (c^2 + d^2) + (d z - c) / ((c^2 + d^2) (c z + d))`

  where there is no issue of division by zero.

  Another feature is that we delay until the very end the consideration of special matrices
  `T=[[1,1],[0,1]]` (see `modular_group.T`) and `S=[[0,-1],[1,0]]` (see `modular_group.S`), by
  instead using abstract theory on the properness of certain maps (phrased in terms of the filters
  `filter.cocompact`, `filter.cofinite`, etc) to deduce existence theorems, first to prove the
  existence of `g` maximizing `(g‚Ä¢z).im` (see `modular_group.exists_g_with_max_im`), and then among
  those, to minimize `|(g‚Ä¢z).re|` (see `modular_group.exists_g_with_given_cd_and_min_re`).
-/

open complex matrix matrix.special_linear_group upper_half_plane
noncomputable theory

local notation `|` x `|` := _root_.abs x
local notation `SL(` n `, ` R `)`:= special_linear_group (fin n) R

open_locale upper_half_plane

local attribute [instance] fintype.card_fin_even

namespace modular_group

section upper_half_plane_action

/-- The action of `SL(2, ‚Ñ§)` on the upper half-plane, as a restriction of the `SL(2, ‚Ñù)`-action. -/
instance : mul_action SL(2, ‚Ñ§) ‚Ñç :=
mul_action.comp_hom ‚Ñç (map (int.cast_ring_hom ‚Ñù))

@[simp] lemma coe_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : ‚Üë(g ‚Ä¢ z) = top g z / bottom g z := rfl
@[simp] lemma re_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : (g ‚Ä¢ z).re = (top g z / bottom g z).re := rfl
@[simp] lemma smul_coe (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : (g : SL(2,‚Ñù)) ‚Ä¢ z = g ‚Ä¢ z := rfl

@[simp] lemma neg_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : -g ‚Ä¢ z = g ‚Ä¢ z :=
show ‚Üë(-g) ‚Ä¢ _ = _, by simp [neg_smul g z]

lemma im_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : (g ‚Ä¢ z).im = (top g z / bottom g z).im := rfl

lemma im_smul_eq_div_norm_sq (g : SL(2, ‚Ñ§)) (z : ‚Ñç) :
  (g ‚Ä¢ z).im = z.im / (complex.norm_sq (bottom g z)) :=
im_smul_eq_div_norm_sq g z

end upper_half_plane_action

section bottom_row

/-- The `bottom_row` of `g=[[*,*],[c,d]]` in `SL(2,‚Ñ§)` is the `coprime_pair` `(c,d)`. -/
def bottom_row (g : SL(2, ‚Ñ§)) : coprime_pair :=
coprime_pair.mk
  (@coe _ (matrix (fin 2) (fin 2) ‚Ñ§) _ g 1 0, @coe _ (matrix (fin 2) (fin 2) ‚Ñ§) _ g 1 1)
  begin
    use [- g 0 1, g 0 0],
    have := det_fin_two g,
    have := g.det_coe,
    simp only [coe_fn_eq_coe] at *,
    linarith
  end

lemma bottom_row_surj : function.surjective bottom_row :=
begin
  intros cd,
  obtain ‚ü®b‚ÇÄ, a, gcd_eqn‚ü© := cd.is_coprime,
  let A := ![![a, -b‚ÇÄ], ![cd.c, cd.d]],
  have det_A_1 : det A = 1,
  { convert gcd_eqn,
    simp [A, det_fin_two, (by ring : a * cd.d + b‚ÇÄ * cd.c = b‚ÇÄ * cd.c + a * cd.d)] },
  use ‚ü®A, det_A_1‚ü©,
  ext; simp [A, bottom_row]
end

lemma bottom_eq_mul_bottom_row_add_bottom_row (g : SL(2, ‚Ñ§)) (z : ‚Ñç) :
  bottom g z = (bottom_row g).c * z + (bottom_row g).d :=
by simp [bottom_row]

lemma bottom_eq_of_bottom_row_eq {g h : SL(2,‚Ñ§)} (z : ‚Ñç) (bot_eq : bottom_row g = bottom_row h) :
  bottom g z = bottom h z :=
by simp [bottom_eq_mul_bottom_row_add_bottom_row, bot_eq]

end bottom_row

section tendsto_lemmas

open filter continuous_linear_map

/-- The function `(c,d) ‚Üí |cz+d|^2` is proper, that is, preimages of bounded-above sets are finite.
  The proof would work for `‚Ñ§√ó‚Ñ§` but is pharsed for `coprime_pair` since this is needed later in
  the main argument.
 -/
lemma tendsto_norm_sq_coprime_pair (z : ‚Ñç) :
  filter.tendsto (Œª p : coprime_pair, ((p.c : ‚ÑÇ) * z + p.d).norm_sq)
  cofinite at_top :=
begin
  let f : ‚Ñù √ó ‚Ñù ‚Üí‚Çó[‚Ñù] ‚ÑÇ := (linear_map.fst ‚Ñù ‚Ñù ‚Ñù).smul_right (z:‚ÑÇ)
    + (linear_map.snd ‚Ñù ‚Ñù ‚Ñù).smul_right 1,
  have hf : f.ker = ‚ä•,
  { let g : ‚ÑÇ ‚Üí‚Çó[‚Ñù] ‚Ñù √ó ‚Ñù := im_lm.prod (im_lm.comp (((z:‚ÑÇ) ‚Ä¢ conj_ae ))),
    suffices : ((z:‚ÑÇ).im‚Åª¬π ‚Ä¢ g).comp f = linear_map.id,
    { exact linear_map.ker_eq_bot_of_inverse this },
    apply linear_map.ext,
    rintros ‚ü®c‚ÇÅ, c‚ÇÇ‚ü©,
    have hz : 0 < (z:‚ÑÇ).im := z.2,
    have : (z:‚ÑÇ).im ‚â† 0 := hz.ne.symm,
    field_simp,
    ring },
  have h‚ÇÅ := (linear_equiv.closed_embedding_of_injective hf).tendsto_cocompact,
  have h‚ÇÇ : tendsto (Œª p : ‚Ñ§ √ó ‚Ñ§, ((p.1 : ‚Ñù), (p.2 : ‚Ñù))) cofinite (cocompact _),
  { convert int.tendsto_coe_cofinite.prod_map_coprod int.tendsto_coe_cofinite;
    simp [coprod_cocompact, coprod_cofinite] },
  convert tendsto_norm_sq_cocompact_at_top.comp
    (h‚ÇÅ.comp (h‚ÇÇ.comp coprime_pair.coe_injective.tendsto_cofinite)),
  ext,
  simp [f],
end


/-- Given `coprime_pair` `p=(c,d)`, the matrix `[[a,b],[*,*]]` is sent to `a*c+b*d`.
  This is the linear map version of this operation.
-/
def acbd (p : coprime_pair) : (matrix (fin 2) (fin 2) ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù :=
(p.c ‚Ä¢ linear_map.proj 0 + p.d ‚Ä¢ linear_map.proj 1 : (fin 2 ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù).comp (linear_map.proj 0)

@[simp] lemma acbd_apply (p : coprime_pair) (g : matrix (fin 2) (fin 2) ‚Ñù) :
  acbd p g = p.c * g 0 0 + p.d * g 0 1 :=
by simp [acbd]


/-- Linear map sending the matrix [a b; c d] to `(ac‚ÇÄ+bd‚ÇÄ , ad‚ÇÄ - bc‚ÇÄ, c, d)`, for some fixed
  `(c‚ÇÄ, d‚ÇÄ)`.
-/
def acbd_extend (cd : coprime_pair) : (matrix (fin 2) (fin 2) ‚Ñù) ‚Üí‚Çó[‚Ñù] ((fin 2 ‚Üí ‚Ñù) √ó (fin 2 ‚Üí ‚Ñù))
:= ((matrix.mul_vec_lin ![![(cd.c:‚Ñù), cd.d], ![cd.d,-cd.c]]).comp
  (linear_map.proj 0 : (matrix (fin 2) (fin 2) ‚Ñù) ‚Üí‚Çó[‚Ñù] _)).prod
  (linear_map.proj 1)

lemma acbd_extend_ker_eq_bot (cd : coprime_pair) : (acbd_extend cd).ker = ‚ä• :=
begin
  rw linear_map.ker_eq_bot,
  have nonZ : ((cd.c)^2+(cd.d)^2:‚Ñù) ‚â† 0,
  { norm_cast,
    exact cd.sq_add_sq_ne_zero },
  let F : matrix (fin 2) (fin 2) ‚Ñù := ((cd.c)^2+(cd.d)^2:‚Ñù)‚Åª¬π ‚Ä¢ ![![cd.c, cd.d], ![cd.d, -cd.c]],
  let f‚ÇÅ : (fin 2 ‚Üí ‚Ñù) ‚Üí (fin 2 ‚Üí ‚Ñù) := F.mul_vec_lin,
  let f : (fin 2 ‚Üí ‚Ñù) √ó (fin 2 ‚Üí ‚Ñù) ‚Üí matrix (fin 2) (fin 2) ‚Ñù := Œª ‚ü®x , cd‚ü©, ![f‚ÇÅ x, cd],
  have : function.left_inverse f (acbd_extend cd),
  { intros g,
    simp [acbd_extend, f, f‚ÇÅ, F, vec_head, vec_tail], -- squeeze_simp times out!
    ext i j,
    fin_cases i,
    { fin_cases j,
      { change (‚Üë(cd.c) ^ 2 + ‚Üë(cd.d) ^ 2)‚Åª¬π * ‚Üë(cd.c) * (‚Üë(cd.c) * g 0 0 + ‚Üë(cd.d) * g 0 1) +
          (‚Üë(cd.c) ^ 2 + ‚Üë(cd.d) ^ 2)‚Åª¬π * ‚Üë(cd.d) * (‚Üë(cd.d) * g 0 0 + -(‚Üë(cd.c) * g 0 1)) = _,
        field_simp,
        ring },
      { change (‚Üë(cd.c) ^ 2 + ‚Üë(cd.d) ^ 2)‚Åª¬π * ‚Üë(cd.d) * (‚Üë(cd.c) * g 0 0 + ‚Üë(cd.d) * g 0 1) +
          -((‚Üë(cd.c) ^ 2 + ‚Üë(cd.d) ^ 2)‚Åª¬π * ‚Üë(cd.c) * (‚Üë(cd.d) * g 0 0 + -(‚Üë(cd.c) * g 0 1))) = _,
        field_simp,
        ring } },
    { fin_cases j; refl } },
  exact this.injective,
end

/-- The map `acbd` is proper, that is, preimages of cocompact sets are finite in `[[*,*],[c,d]]`.-/
theorem tendsto_acbd (cd : coprime_pair) :
  tendsto (Œª g : bottom_row ‚Åª¬π' {cd}, acbd cd ‚Üë(‚Üëg : SL(2, ‚Ñù))) cofinite (cocompact ‚Ñù) :=
begin
  let mB : ‚Ñù ‚Üí ((fin 2 ‚Üí ‚Ñù) √ó (fin 2 ‚Üí ‚Ñù)) := Œª t, (![t, 1], ![(cd.c:‚Ñù), cd.d]),
  have hmB : continuous mB,
  { refine continuous.prod_mk (continuous_pi _) continuous_const,
    intros i,
    fin_cases i,
    { exact continuous_id },
    { simpa using continuous_const } },
  convert filter.tendsto.of_tendsto_comp _ (comap_cocompact hmB),
  let f‚ÇÅ : SL(2, ‚Ñ§) ‚Üí matrix (fin 2) (fin 2) ‚Ñù :=
    Œª g, matrix.map (‚Üëg : matrix _ _ ‚Ñ§) (coe : ‚Ñ§ ‚Üí ‚Ñù),
  have cocompact_‚Ñù_to_cofinite_‚Ñ§_matrix :
    tendsto (Œª m : matrix (fin 2) (fin 2) ‚Ñ§, matrix.map m (coe : ‚Ñ§ ‚Üí ‚Ñù)) cofinite (cocompact _),
  { convert tendsto.pi_map_Coprod (Œª i, tendsto.pi_map_Coprod (Œª j, int.tendsto_coe_cofinite)),
    { simp [Coprod_cofinite] },
    { simp only [Coprod_cocompact],
      refl } },
  have hf‚ÇÅ : tendsto f‚ÇÅ cofinite (cocompact _) :=
    cocompact_‚Ñù_to_cofinite_‚Ñ§_matrix.comp subtype.coe_injective.tendsto_cofinite,
  have hf‚ÇÇ := (linear_equiv.closed_embedding_of_injective
    (acbd_extend_ker_eq_bot cd)).tendsto_cocompact,
  convert hf‚ÇÇ.comp (hf‚ÇÅ.comp subtype.coe_injective.tendsto_cofinite) using 1,
  funext g,
  obtain ‚ü®g, hg‚ü© := g,
  simp [mB, f‚ÇÅ, acbd_extend], -- squeeze_simp fails here for some reason
  simp only [bottom_row, set.mem_preimage, set.mem_singleton_iff] at hg,
  split,
  { ext i,
    fin_cases i,
    { simp [vec_head, vec_tail] },
    { have : (1:‚Ñù) = ‚Üë(g 1 1) * ‚Üë(g 0 0) + -(‚Üë(g 1 0) * ‚Üë(g 0 1)),
      { norm_cast,
        simp only [‚Üê g.det_coe, det_fin_two, coe_fn_eq_coe],
        ring },
      simpa [‚Üê hg, vec_head, vec_tail] using this } },
  { rw ‚Üê hg,
    ext i,
    fin_cases i; refl }
end

/-- This replaces `(g‚Ä¢z).re = a/c + *` in the standard theory with the following novel identity:

  `g ‚Ä¢ z = (a c + b d) / (c^2 + d^2) + (d z - c) / ((c^2 + d^2) (c z + d))`

  which does not
  need to be decomposed depending on whether `c = 0`. -/
lemma smul_eq_acbd_add (p : coprime_pair) (z : ‚Ñç) {g : SL(2,‚Ñ§)} (hg : bottom_row g = p) :
  ‚Üë(g ‚Ä¢ z) = ((acbd p ‚Üë(g : SL(2, ‚Ñù))) : ‚ÑÇ ) / (p.c ^ 2 + p.d ^ 2)
    + ((p.d : ‚ÑÇ) * z - p.c) / ((p.c ^ 2 + p.d ^ 2) * (p.c * z + p.d)) :=
begin
  have nonZ1 : (p.c : ‚ÑÇ) ^ 2 + (p.d) ^ 2 ‚â† 0 := by exact_mod_cast p.sq_add_sq_ne_zero,
  have : (coe : ‚Ñ§ ‚Üí ‚Ñù) ‚àò ![p.c, p.d] ‚â† 0 :=
    Œª h, (p.ne_zero ‚àò (@int.cast_injective ‚Ñù _ _ _).comp_left) h,
  have nonZ2 : (p.c : ‚ÑÇ) * z + p.d ‚â† 0 := by simpa using linear_ne_zero _ z this,
  field_simp [nonZ1, nonZ2, bottom_ne_zero, -upper_half_plane.bottom],
  rw (by simp : (p.d : ‚ÑÇ) * z - p.c = ((p.d) * z - p.c) * ‚Üë(det (‚Üëg : matrix (fin 2) (fin 2) ‚Ñ§))),
  rw [‚Üêhg, det_fin_two],
  simp only [bottom_row, int.coe_cast_ring_hom, coprime_pair.d_mk, coe_matrix_coe, coe_fn_eq_coe,
    int.cast_mul, of_real_int_cast, coprime_pair.c_mk, map_apply, bottom, int.cast_sub],
  ring,
end

lemma tendsto_abs_re_smul (z:‚Ñç) (p : coprime_pair) :
  tendsto (Œª g : bottom_row ‚Åª¬π' {p}, _root_.abs (((g : SL(2, ‚Ñ§)) ‚Ä¢ z).re)) cofinite at_top :=
begin
  suffices : tendsto (Œª g : bottom_row ‚Åª¬π' {p}, (((g : SL(2, ‚Ñ§)) ‚Ä¢ z).re)) cofinite (cocompact ‚Ñù),
  { exact tendsto_norm_cocompact_at_top.comp this },
  have : ((p.c : ‚Ñù) ^ 2 + p.d ^ 2)‚Åª¬π ‚â† 0,
  { apply inv_ne_zero,
    exact_mod_cast p.sq_add_sq_ne_zero },
  let f := homeomorph.mul_right' _ this,
  let ff := homeomorph.add_right (((p.d:‚ÑÇ)* z - p.c) / ((p.c ^ 2 + p.d ^ 2) * (p.c * z + p.d))).re,
  convert ((f.trans ff).closed_embedding.tendsto_cocompact).comp (tendsto_acbd p),
  ext g,
  change ((g : SL(2, ‚Ñ§)) ‚Ä¢ z).re = (acbd p ‚Üë(‚Üëg : SL(2, ‚Ñù))) / (p.c ^ 2 + p.d ^ 2)
  + (((p.d:‚ÑÇ )* z - p.c) / ((p.c ^ 2 + p.d ^ 2) * (p.c * z + p.d))).re,
  exact_mod_cast (congr_arg complex.re (smul_eq_acbd_add p z g.2))
end

end tendsto_lemmas

section fundamental_domain

/-- For `z : ‚Ñç`, there is a `g : SL(2,‚Ñ§)` maximizing `(g‚Ä¢z).im` -/
lemma exists_g_with_max_im (z : ‚Ñç) :
  ‚àÉ g : SL(2,‚Ñ§), ‚àÄ g' : SL(2,‚Ñ§), (g' ‚Ä¢ z).im ‚â§ (g ‚Ä¢ z).im :=
begin
  obtain ‚ü®p, hp‚ü© := (tendsto_norm_sq_coprime_pair z).exists_forall_le,
  obtain ‚ü®g, hg‚ü© := bottom_row_surj p,
  use g,
  intros g',
  rw [im_smul_eq_div_norm_sq, im_smul_eq_div_norm_sq, div_le_div_left],
  { simpa [‚Üê hg] using hp (bottom_row g') },
  { exact z.im_pos },
  { exact normsq_bottom_pos g' z },
  { exact normsq_bottom_pos g z },
end

/-- Given `z : ‚Ñç` and a bottom row `(c,d)`, among the `g : SL(2,‚Ñ§)` with this bottom row, minimize
  `|(g‚Ä¢z).re|`.  -/
lemma exists_g_with_given_cd_and_min_re (z:‚Ñç) (cd : coprime_pair) :
  ‚àÉ g : SL(2,‚Ñ§), bottom_row g = cd ‚àß (‚àÄ g' : SL(2,‚Ñ§), bottom_row g = bottom_row g' ‚Üí
  _root_.abs ((g ‚Ä¢ z).re) ‚â§ _root_.abs ((g' ‚Ä¢ z).re)) :=
begin
  haveI : nonempty (bottom_row ‚Åª¬π' {cd}) := let ‚ü®x, hx‚ü© := bottom_row_surj cd in ‚ü®‚ü®x, hx‚ü©‚ü©,
  obtain ‚ü®g, hg‚ü©  := filter.tendsto.exists_forall_le (tendsto_abs_re_smul z cd),
  refine ‚ü®g, g.2, _‚ü©,
  { intros g1 hg1,
    have : g1 ‚àà (bottom_row ‚Åª¬π' {cd}),
    { rw [set.mem_preimage, set.mem_singleton_iff],
      exact eq.trans hg1.symm (set.mem_singleton_iff.mp (set.mem_preimage.mp g.2)) },
    exact hg ‚ü®g1, this‚ü© },
end

/-- The matrix `T = [[1,1],[0,1]]` as an element of `SL(2,‚Ñ§)` -/
def T : SL(2,‚Ñ§) := ‚ü®![![1, 1], ![0, 1]], by simp [matrix.det_fin_two]‚ü©

/-- The matrix `T' (= T‚Åª¬π) = [[1,-1],[0,1]]` as an element of `SL(2,‚Ñ§)` -/
def T' : SL(2,‚Ñ§) := ‚ü®![![1, -1], ![0, 1]], by simp [matrix.det_fin_two]‚ü©

/-- The matrix `S = [[0,-1],[1,0]]` as an element of `SL(2,‚Ñ§)` -/
def S : SL(2,‚Ñ§) := ‚ü®![![0, -1], ![1, 0]], by simp [matrix.det_fin_two]‚ü©

/-- The standard (closed) fundamental domain of the action of `SL(2,‚Ñ§)` on `‚Ñç` -/
def fundamental_domain : set ‚Ñç :=
{z | 1 ‚â§ (complex.norm_sq z) ‚àß |z.re| ‚â§ (1 : ‚Ñù) / 2}

notation `ùíü` := fundamental_domain

lemma S_apply (z : ‚Ñç) : ((S ‚Ä¢ z:‚Ñç):‚ÑÇ) = (-1 : ‚ÑÇ)/z := by simp [S]

/-- If `|z|<1`, then applying `S` strictly decreases `im` -/
lemma im_lt_im_S {z : ‚Ñç} (h: norm_sq z < 1) : z.im < (S ‚Ä¢ z).im :=
begin
  rw [im_smul_eq_div_norm_sq, bottom],
  simp only [S, int.coe_cast_ring_hom, coe_matrix_coe, add_zero, int.cast_zero, one_mul, cons_val_one, coe_fn_eq_coe, of_real_zero,
  coe_mk, int.cast_one, map_apply, of_real_one, cons_val_zero, head_cons],
  apply (lt_div_iff z.norm_sq_pos).mpr,
  have : 0 < z.im := im_pos z,
  nlinarith,
end

/-- If `1 < |z|`, then `|S‚Ä¢z| < 1` -/
lemma normsq_S_lt_of_normsq {z : ‚Ñç} (h: 1 < norm_sq z) : norm_sq ((S ‚Ä¢ z):‚Ñç) < 1 :=
begin
  rw [S_apply, (by simp : norm_sq ((-1:‚ÑÇ) / z) = norm_sq ((1:‚ÑÇ) / z)),
    (by simp: norm_sq ((1:‚ÑÇ) / z) = 1 / norm_sq z)],
  convert one_div_lt_one_div_of_lt _ h; simp,
end

/-- Any `z : ‚Ñç` can be moved to `ùíü` by an element of `SL(2,‚Ñ§)`  -/
lemma exists_smul_mem_fundamental_domain (z : ‚Ñç) : ‚àÉ g : SL(2,‚Ñ§), g ‚Ä¢ z ‚àà ùíü :=
begin
  -- obtain a g‚ÇÄ which maximizes im (g ‚Ä¢ z),
  obtain ‚ü®g‚ÇÄ, hg‚ÇÄ‚ü© := exists_g_with_max_im z,
  -- then among those, minimize re
  obtain ‚ü®g, hg, hg'‚ü© := exists_g_with_given_cd_and_min_re z (bottom_row g‚ÇÄ),
  use g,
  -- `g` has same max im property as `g‚ÇÄ`
  have hg‚ÇÄ' : ‚àÄ (g' : SL(2,‚Ñ§)), (g' ‚Ä¢ z).im ‚â§ (g ‚Ä¢ z).im,
  { have hg'' : (g ‚Ä¢ z).im = (g‚ÇÄ ‚Ä¢ z).im,
    { rw [im_smul_eq_div_norm_sq, im_smul_eq_div_norm_sq,
        bottom_eq_of_bottom_row_eq _ hg] },
    simpa only [hg''] using hg‚ÇÄ },
  split,
  { -- Claim: `|g‚Ä¢z| > 1`. If not, then `S‚Ä¢g‚Ä¢z` has larger imaginary part
    contrapose! hg‚ÇÄ',
    use S * g,
    rw mul_action.mul_smul,
    exact im_lt_im_S hg‚ÇÄ' },
  { -- Claim: `|Re(g‚Ä¢z)| < 1/2`; if not, then either `T` or `T'` decrease |Re|.
    rw abs_le,
    split,
    { contrapose! hg',
      refine ‚ü®T * g, _, _‚ü©,
      { -- goal: `bottom_row (T * g) = bottom_row g`.
        simp [bottom_row, T, vec_head, vec_tail], },
      rw mul_action.mul_smul,
      change (g ‚Ä¢ z).re < _ at hg',
      have : |(g ‚Ä¢ z).re + 1| < |(g ‚Ä¢ z).re| :=
        by cases abs_cases ((g ‚Ä¢ z).re + 1); cases abs_cases (g ‚Ä¢ z).re; linarith,
      convert this,
      -- goal: `(T ‚Ä¢ g ‚Ä¢ z).re = (g ‚Ä¢ z).re + 1`.
      simp [T] },
    { contrapose! hg',
      refine ‚ü®T' * g, _, _‚ü©,
      { -- goal: `bottom_row (T' * g) = bottom_row g`.
        simp [bottom_row, T', vec_head, vec_tail] },
      rw mul_action.mul_smul,
      change _ < (g ‚Ä¢ z).re at hg',
      have : |(g ‚Ä¢ z).re - 1| < |(g ‚Ä¢ z).re| :=
        by cases abs_cases ((g ‚Ä¢ z).re - 1); cases abs_cases (g ‚Ä¢ z).re; linarith,
      convert this,
      -- goal: `(T' ‚Ä¢ g ‚Ä¢ z).re = (g ‚Ä¢ z).re - 1`.
      simp [T', sub_eq_add_neg] } }
end


/-- The standard open fundamental domain of the action of `SL(2,‚Ñ§)` on `‚Ñç` -/
def fundamental_domain_open : set ‚Ñç :=
{z | 1 < ((z:‚ÑÇ).norm_sq) ‚àß |z.re| < (1 : ‚Ñù) / 2}

notation `ùíü·µí` := fundamental_domain_open

/-- MOVE TO INT SOMEWHERE -/
lemma int.eq_one_or_neg_one_of_mul_eq_one {z w : ‚Ñ§} (h : z * w = 1) : z = 1 ‚à® z = -1 :=
int.is_unit_iff.mp (is_unit_of_mul_eq_one z w h)

lemma int.eq_one_or_neg_one_of_mul_eq_one' {z w : ‚Ñ§} (h : z * w = 1) : (z = 1 ‚àß w = 1) ‚à®
(z = -1 ‚àß w = -1) :=
begin
  cases int.eq_one_or_neg_one_of_mul_eq_one h,
  { left,
    split,
    assumption,
    rw [h_1, one_mul] at h,
    exact h },
  { right,
    split,
    assumption,
    rw [h_1, neg_mul_eq_neg_mul_symm, one_mul] at h,
    exact eq_neg_of_eq_neg (eq.symm h), },
end

lemma int.ne_zero_ge_one {z : ‚Ñ§} (h‚ÇÄ: ¬¨ z = 0) : 1 ‚â§ |z| :=
begin
  by_contra,
  push_neg at h,
  exact h‚ÇÄ (int.eq_zero_iff_abs_lt_one.mp h),
end

lemma move_by_large {x y : ‚Ñù} (h : |x| < 1/2) (h‚ÇÅ : |x+y|<1/2) (h‚ÇÇ : 1‚â§ |y|) : false :=
  by cases abs_cases x; cases abs_cases y; cases abs_cases (x+y); linarith

/-- Crucial lemma showing that if `c‚â†0`, then `3/4 < 4/(3c^4)` -/
lemma ineq_1 (z : ‚Ñç) (g: SL(2,‚Ñ§)) (hz : z ‚àà ùíü·µí) (hg: g ‚Ä¢ z ‚àà ùíü·µí) (c_ne_z : g 1 0 ‚â† 0) :
  (3 : ‚Ñù)/4 < 4/ (3* (g 1 0)^4) :=
begin
  have z_im := z.im_ne_zero,
  have c_4_pos : (0 : ‚Ñù) < (g 1 0)^4,
    exact_mod_cast pow_even_pos c_ne_z (by simp: even 4),
  /- Any point `w‚ààùíü·µí` has imaginary part at least `sqrt (3/4)` -/
  have ImGeInD : ‚àÄ (w : ‚Ñç), w ‚àà ùíü·µí ‚Üí 3/4 < (w.im)^2,
  { intros w hw,
    have : 1 < w.re * w.re + w.im * w.im := by simpa [complex.norm_sq_apply] using hw.1,
    have := hw.2,
    cases abs_cases w.re; nlinarith, },
  /- The next argument is simply that `c^2 y^2 ‚â§ |c z + d|^2`. -/
  have czPdGecy : (g 1 0 : ‚Ñù)^2 * (z.im)^2 ‚â§ norm_sq (bottom g z) :=
    calc
    (g 1 0 : ‚Ñù)^2 * (z.im)^2 ‚â§ (g 1 0 : ‚Ñù)^2 * (z.im)^2 + (g 1 0 * z.re + g 1 1)^2 : by nlinarith
    ... = norm_sq (bottom g z) : by simp [norm_sq, bottom]; ring,
  have zIm : (3 : ‚Ñù) / 4 < (z.im)^2 := ImGeInD _ hz,
  /- This is the main calculation:
  `sqrt 3 / 2 < Im(g‚Ä¢z) = Im(z)/|cz+d|^2 ‚â§ y/(c^2 y^2) < 2/(c^2 sqrt 3)`
  -/
  calc
  (3 : ‚Ñù) / 4 < ((g ‚Ä¢ z).im) ^ 2 : ImGeInD _ hg
  ... = (z.im) ^ 2 / (norm_sq (bottom g z)) ^ 2 : _
  ... ‚â§ (1 : ‚Ñù) / ((g 1 0) ^ 4 * (z.im) ^ 2) : _
  ... < (4 : ‚Ñù) / (3 * (g 1 0) ^ 4) : _,
  { convert congr_arg (Œª (x:‚Ñù), x ^ 2) (im_smul_eq_div_norm_sq g z) using 1,
    exact (div_pow _ _ 2).symm, },
  { rw div_le_div_iff,
    convert pow_le_pow_of_le_left _ czPdGecy 2 using 1;
    ring,
    { nlinarith, },
    { exact pow_two_pos_of_ne_zero _ (normsq_bottom_ne_zero g z), },
    { nlinarith, }, },
  { rw div_lt_div_iff,
    repeat {nlinarith}, },
end

lemma nat.is_zero_or_one_of_le_one {n : ‚Ñï} (h: n ‚â§ 1) : n = 0 ‚à® n = 1 :=
begin
  cases n,
  { left, refl, },
  right,
  rw [nat.succ_le_succ_iff, le_zero_iff] at h,
  rw h,
end

lemma int.is_zero_or__pm_one_of_le_one {n : ‚Ñ§} (h: |n| ‚â§ 1) : n = -1 ‚à® n = 0 ‚à® n = 1 :=
begin
  cases abs_cases n,
  { right,
    rw h_1.1 at h,
    lift n to ‚Ñï using h_1.2,
    norm_cast at h,
    norm_cast,
    exact nat.is_zero_or_one_of_le_one h, },
  { left,
    rw h_1.1 at h,
    linarith, },
end

lemma int.is_le_one_or_ge_two (x : ‚Ñ§) : |x| ‚â§ 1 ‚à® 2 ‚â§ |x| :=
begin
  cases le_or_gt (|x|) 1,
  left, assumption, right,
  exact h,
end

lemma int.fourth_le_fourth {a b : ‚Ñ§} (hab : |a| ‚â§ |b|) : a ^ 4 ‚â§ b ^ 4 :=
begin
  have := sq_le_sq hab,
  rw [(by simp only [pow_bit0_abs, abs_pow] : a ^ 2 = |a ^ 2|),
   (by simp only [pow_bit0_abs, abs_pow] : b ^ 2 = |b ^ 2|)] at this,
  convert sq_le_sq this using 1; ring,
end

/-- Knowing that `3/4<4/(3c^4)` from `ineq_1`, and `c‚â†0`, we conclude that `c=1` or `c=-1`. -/
lemma ineq_2 (c : ‚Ñ§) (hc‚ÇÅ : (3 : ‚Ñù)/4 < 4/ (3* c^4)) (hc‚ÇÇ : c ‚â† 0) : c = 1 ‚à® c = -1 :=
begin
  cases (int.is_le_one_or_ge_two c),
  { -- case |c| ‚â§ 1
     cases int.is_zero_or__pm_one_of_le_one h, -- either c = 1 or c = 0 or c = -1
    { right, assumption, },
    { cases h_1,
      { exfalso,
        exact hc‚ÇÇ h_1, },
      left, assumption, }, },
  { -- case 2 ‚â§ |c|
    exfalso,
    have : 2^4 ‚â§ c^4,
    { refine int.fourth_le_fourth _,
      convert h using 1, },
    have : (2:‚Ñù)^4 ‚â§ c^4,
    { norm_cast,
      convert this using 1, },
    have := (div_lt_div_iff _ _).mp hc‚ÇÅ,
    repeat {linarith}, },
end


/-- Definition: `T_pow` is the matrix `T` raised to the power `n:‚Ñ§`. -/
def T_pow (n : ‚Ñ§) : SL(2,‚Ñ§) := ‚ü® ![![1, n],![0,1]],
begin
  rw matrix.det_fin_two,
  simp,
end ‚ü©


/- If c=1, then `g=[[1,a],[0,1]] * S * [[1,d],[0,1]]` -/
lemma g_is_of_c_is_one (g : SL(2,‚Ñ§)) (hc : g 1 0 = 1) : g = (T_pow (g 0 0)) * S * (T_pow (g 1 1))
:=
begin
  rw [T_pow, T_pow],
  ext i,
  fin_cases i; fin_cases j,
  { simp [vec_head, vec_tail, S], },
  { simp only [vec_head, vec_tail, S, matrix.special_linear_group.coe_fn_eq_coe,
      modular_group.S.equations._eqn_1, matrix.special_linear_group.coe_mul,
      matrix.special_linear_group.coe_mk, matrix.cons_mul, matrix.vec_mul_cons,
      matrix.vec_head.equations._eqn_1, matrix.cons_val_zero, matrix.smul_cons, mul_zero,
      mul_neg_eq_neg_mul_symm, mul_one, matrix.smul_empty, matrix.vec_tail.equations._eqn_1,
      function.comp_app, fin.succ_zero_eq_one, matrix.cons_val_one, matrix.cons_val_fin_one,
      matrix.empty_vec_mul, matrix.cons_add, pi.zero_apply, add_zero, pi.zero_comp,
      matrix.zero_empty, matrix.empty_add_empty, matrix.add_cons],
    have g_det : g.val.det = (g 0 0)*(g 1 1)-(g 1 0)*(g 0 1),
    { convert det_fin_two g using 1,
      ring, },
    rw [hc, g.2] at g_det,
    rw g_det,
    simp, },
  { simp only [vec_head, vec_tail, S, hc, matrix.special_linear_group.coe_fn_eq_coe,
      modular_group.S.equations._eqn_1, matrix.special_linear_group.coe_mul,
      matrix.special_linear_group.coe_mk, matrix.cons_mul, matrix.vec_mul_cons,
      matrix.vec_head.equations._eqn_1, matrix.cons_val_zero, matrix.smul_cons, mul_zero,
      mul_neg_eq_neg_mul_symm, mul_one, matrix.smul_empty, matrix.vec_tail.equations._eqn_1,
      function.comp_app, fin.succ_zero_eq_one, matrix.cons_val_one, matrix.cons_val_fin_one,
      matrix.empty_vec_mul, matrix.cons_add, pi.zero_apply, add_zero, pi.zero_comp,
      matrix.zero_empty, matrix.empty_add_empty, matrix.add_cons],
    exact_mod_cast hc, },
  { simp [vec_head, vec_tail, S], },
end

/-- Nontrivial lemma: if `|x|<1/2` and `n:‚Ñ§`, then `2nx+n^2‚â•0`. (False for `n:‚Ñù`!) -/
lemma int.non_neg_of_lt_half (n : ‚Ñ§) (x : ‚Ñù) (hx : |x| < 1/2) : (0:‚Ñù) ‚â§ 2 * n * x + n * n :=
begin
  rw abs_lt at hx,
  have : (0:‚Ñù) ‚â§ n*n := by nlinarith,
  cases n,
  { -- n ‚â• 0
    have : (n:‚Ñù) = (int.of_nat n) := by simp,
    have : (0:‚Ñù) ‚â§ n := by simp,
    cases lt_or_ge x 0,
    {  -- x < 0
      cases n,
      { simp, },
      { -- n ‚â• 1
        have eq1 : (1:‚Ñù) ‚â§ int.of_nat n.succ := by simp,
        have eq2 : (1:‚Ñù) ‚â§ (int.of_nat n.succ) * (int.of_nat n.succ) := by nlinarith,
        have eq3 : (-1:‚Ñù) ‚â§ 2 * x := by nlinarith,
        have eq4 : (0:‚Ñù) ‚â§ 2 * x + int.of_nat n.succ := by linarith,
        have eq5 : (0:‚Ñù) ‚â§ (2 * x + int.of_nat n.succ)*(int.of_nat n.succ) := by nlinarith,
        convert eq5 using 1,
        ring, }, },
    { -- x ‚â• 0
      have : (0:‚Ñù) ‚â§ 2*n*x := by nlinarith,
      nlinarith, }, },
  { -- n ‚â§ -1
    have := int.neg_succ_of_nat_coe n,
    set k := int.neg_succ_of_nat n,
    have eq1 : k ‚â§ -1,
    { have : 1 ‚â§ 1 + n := by simp,
      have :  -((1:‚Ñ§) + n) ‚â§ -1,
      { have : 0 ‚â§ n := by simp,
        linarith, },
      convert this using 1,
      simp [this_1],
      ring, },
    have eq1' : (k:‚Ñù) ‚â§ -1 := by exact_mod_cast eq1,
    cases lt_or_ge x 0,
    { -- x < 0
      have : (0:‚Ñù) ‚â§ 2*k*x := by nlinarith,
      have eq2 : 1 ‚â§ k*k  := by nlinarith,
      linarith, },
    { -- x ‚â• 0
      have eq2 : (2:‚Ñù) * x + k ‚â§ 0 := by nlinarith,
      nlinarith, }, },
end

/-- If `z‚ààùíü·µí`, and `n:‚Ñ§`, then `|z+n|>1`.   -/
lemma move_by_T {z : ‚Ñç} (hz : z ‚àà ùíü·µí) (n : ‚Ñ§) : 1 < norm_sq (((T_pow n) ‚Ä¢ z) : ‚Ñç) :=
begin
  rw T_pow,
  simp only [zero_add, div_one, modular_group.coe_smul, upper_half_plane.top.equations._eqn_1,
    matrix.special_linear_group.coe_fn_eq_coe, matrix.special_linear_group.coe_matrix_coe,
    matrix.special_linear_group.coe_mk, int.coe_cast_ring_hom, matrix.map_apply, matrix.cons_val',
    matrix.cons_val_zero, matrix.cons_val_fin_one, int.cast_one, complex.of_real_one, one_mul,
    matrix.cons_val_one, matrix.vec_head.equations._eqn_1, complex.of_real_int_cast,
    upper_half_plane.bottom.equations._eqn_1, int.cast_zero, complex.of_real_zero, zero_mul],
  rw complex.norm_sq_apply,
  have hz1 : 1 < z.re * z.re + z.im * z.im,
  { have := hz.1,
    rw norm_sq at this,
    convert this using 1, },
  rw (by simp : ((z:‚ÑÇ) + n).im = z.im),
  rw (by simp : ((z:‚ÑÇ) + n).re = z.re + n),
  rw (by ring : (z.re + ‚Üën) * (z.re + ‚Üën) = z.re * z.re + 2 * n * z.re + n * n),
  have : 0 ‚â§  2 * ‚Üën * z.re + ‚Üën * ‚Üën := int.non_neg_of_lt_half n (z.re) hz.2,
  convert add_lt_add_of_le_of_lt this hz1 using 1,
  { simp, },
  { ring_nf, },
end

/-- If `c=1`, then `[[1,-a],[0,1]]*g = S * [[1,d],[0,1]]`. -/
lemma T_pow_S_of_g (g : SL(2,‚Ñ§)) (hc : g 1 0 = 1) : T_pow (- g 0 0) * g = S * T_pow (g 1 1) :=
begin
  rw g_is_of_c_is_one g hc,
  ext i,
  fin_cases i; fin_cases j,
  { simp [vec_head, vec_tail, T_pow, S], },
  { simp only [add_zero, fin.succ_zero_eq_one, function.comp_app, matrix.add_cons, matrix.cons_add,
    matrix.cons_mul, matrix.cons_val_fin_one, matrix.cons_val_one, matrix.cons_val_zero,
    matrix.empty_add_empty, matrix.empty_vec_mul, matrix.smul_cons, matrix.smul_empty,
    matrix.special_linear_group.coe_fn_eq_coe, matrix.special_linear_group.coe_mk,
    matrix.special_linear_group.coe_mul, matrix.vec_head.equations._eqn_1, matrix.vec_mul_cons,
    matrix.vec_tail.equations._eqn_1, matrix.zero_empty, modular_group.S.equations._eqn_1,
    modular_group.T_pow.equations._eqn_1, mul_neg_eq_neg_mul_symm, mul_one, mul_zero,
    pi.zero_apply, pi.zero_comp, zero_add],
    ring,
  },
  { simp [vec_head, vec_tail, T_pow, S], },
  { simp [vec_head, vec_tail, T_pow, S], },
end

/-- If both `z` and `g‚Ä¢z` are in `ùíü·µí`, then `c` can't be `1`. -/
lemma false_of_c_eq_one {z : ‚Ñç} {g : SL(2,‚Ñ§)} (hc : g 1 0 = 1) (hz : z ‚àà ùíü·µí) (hg : g ‚Ä¢ z ‚àà ùíü·µí) :
false :=
begin
  let z‚ÇÅ := T_pow (g 1 1) ‚Ä¢ z,
  let w‚ÇÅ := T_pow (- g 0 0) ‚Ä¢ (g ‚Ä¢ z),
  have w‚ÇÅ_norm : 1 < norm_sq w‚ÇÅ := move_by_T hg (- g 0 0),
  have z‚ÇÅ_norm : 1 < norm_sq z‚ÇÅ := move_by_T hz (g 1 1),
  have w‚ÇÅ_S_z‚ÇÅ : w‚ÇÅ = S ‚Ä¢ z‚ÇÅ,
  { rw (_ : w‚ÇÅ = T_pow (- g 0 0) ‚Ä¢ g ‚Ä¢ z),
    rw (_ : z‚ÇÅ = T_pow (g 1 1) ‚Ä¢ z),
    convert (congr_arg (Œª (g:SL(2,‚Ñ§)), g ‚Ä¢ z) (T_pow_S_of_g g hc)) using 1,
    { convert (upper_half_plane.mul_smul' (T_pow (-g 0 0)) g z).symm using 1,
      -- refl, ** Failed???**
      sorry, },
    { convert (upper_half_plane.mul_smul' S (T_pow (g 1 1)) z).symm using 1,
      sorry, },
    refl,
    refl, },
  have := normsq_S_lt_of_normsq z‚ÇÅ_norm,
  rw ‚Üê w‚ÇÅ_S_z‚ÇÅ at this,
  linarith,
end

/-- Second Main Fundamental Domain Lemma: If both `z` and `g‚Ä¢z` are in the open domain `ùíü·µí`, where
  `z:‚Ñç` and `g:SL(2,‚Ñ§)`, then `z = g ‚Ä¢ z`. -/
lemma fun_dom_lemma‚ÇÇ (z : ‚Ñç) (g : SL(2,‚Ñ§)) (hz : z ‚àà ùíü·µí) (hg : g ‚Ä¢ z ‚àà ùíü·µí) : z = g ‚Ä¢ z :=
begin
/-  The argument overview is: either `c=0`, in which case the action is translation, which must be
  by `0`, OR
  `c=¬±1`, which gives a contradiction from considering `im z`, `im(g‚Ä¢z)`, and `norm_sq(T^* z)`. -/
  have g_det : matrix.det g = (g 0 0)*(g 1 1)-(g 1 0)*(g 0 1),
  { convert det_fin_two g using 1,
    ring, },
  by_cases (g 1 0 = 0),
  { -- case c=0
    have := g_det,
    rw h at this,
    simp only [matrix.special_linear_group.coe_fn_eq_coe, matrix.special_linear_group.det_coe,
      zero_mul, sub_zero] at this,
    have := int.eq_one_or_neg_one_of_mul_eq_one' (this.symm),
    have gzIs : ‚àÄ (gg : SL(2,‚Ñ§)), gg 1 0 = 0 ‚Üí gg 0 0 = 1 ‚Üí gg 1 1 = 1 ‚Üí
      ‚Üë(gg ‚Ä¢ z : ‚Ñç) = (z : ‚ÑÇ) + gg 0 1,
    { intros gg h‚ÇÄ h‚ÇÅ h‚ÇÇ,
      simp only [coe_fn_eq_coe] at h‚ÇÄ h‚ÇÅ h‚ÇÇ,
      simp [h‚ÇÄ, h‚ÇÅ, h‚ÇÇ], },
    have gIsId : ‚àÄ (gg : SL(2,‚Ñ§)), gg ‚Ä¢ z ‚àà ùíü·µí ‚Üí gg 1 0 = 0 ‚Üí gg 0 0 = 1 ‚Üí gg 1 1 = 1 ‚Üí gg = 1,
    { intros gg hh h‚ÇÄ h‚ÇÅ h‚ÇÇ,
      simp only [coe_fn_eq_coe] at h‚ÇÄ h‚ÇÅ h‚ÇÇ,
      ext i,
      fin_cases i; fin_cases j,
      simp only [h‚ÇÅ, coe_one, one_apply_eq],
      { simp only [nat.one_ne_zero, coe_one, fin.zero_eq_one_iff, ne.def, not_false_iff,
          one_apply_ne],
        by_contra hhh,
        have reZ : |z.re| < 1/2,
        { exact_mod_cast hz.2, },
        have reGz : |((gg ‚Ä¢ z):‚Ñç ).re| < 1/2,
        { exact_mod_cast hh.2, },
        have reZpN : |z.re + gg 0 1| < 1/2,
        { convert reGz using 2,
          rw (by simp : z.re + gg 0 1 = ((z:‚ÑÇ )+ gg 0 1).re),
          apply congr_arg complex.re,
          exact_mod_cast (gzIs gg h‚ÇÄ h‚ÇÅ h‚ÇÇ).symm, },
        refine move_by_large reZ reZpN _,
        exact_mod_cast  int.ne_zero_ge_one hhh, },
      simp only [h‚ÇÄ, nat.one_ne_zero, coe_one, fin.one_eq_zero_iff, ne.def, not_false_iff,
        one_apply_ne],
      simp only [h‚ÇÇ, coe_one, one_apply_eq], },
    have zIsGz : ‚àÄ (gg : SL(2,‚Ñ§)), gg 1 0 = 0 ‚Üí gg 0 0 = 1 ‚Üí gg 1 1 = 1 ‚Üí gg ‚Ä¢ z ‚àà ùíü·µí ‚Üí z = gg ‚Ä¢ z,
    { intros gg h‚ÇÄ h‚ÇÅ h‚ÇÇ hh,
      have := gIsId gg hh h‚ÇÄ h‚ÇÅ h‚ÇÇ,
      rw this,
      simp, },
    cases this,
    { -- case a = d = 1
      exact zIsGz g h this_1.1 this_1.2 hg, },
    { -- case a = d = -1
      rw ‚Üê neg_smul,
      apply zIsGz; simp,
      exact_mod_cast h,
      simp only [this_1, neg_neg],
      simp only [this_1, neg_neg],
      exact hg, }, },
  { -- case c ‚â† 0
    exfalso,
    -- argue first that c=¬± 1
    have := ineq_2 _ (ineq_1 z g hz hg h) h,
    -- then show this is impossible
    cases this with hc,
    { -- c = 1
      exact false_of_c_eq_one hc hz hg, },
    { -- c = -1
      have neg_c_one : (-g) 1 0 = 1,
      { have := eq_neg_of_eq_neg this,
        simp [this], },
      have neg_g_ùíü : (-g) ‚Ä¢ z ‚àà ùíü·µí,
      { convert hg using 1,
        simp, },
      exact false_of_c_eq_one neg_c_one hz neg_g_ùíü, }, },
end

end fundamental_domain

end modular_group
