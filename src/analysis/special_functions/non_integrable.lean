/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.special_functions.integrals

/-!
# Non integrable functions

In this file we prove that some functions (e.g., `Œª x, x‚Åª¬π`) are not interval integrable.
-/

open_locale measure_theory topological_space interval
open measure_theory topological_space set filter asymptotics

namespace interval_integral

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E] [measurable_space E] [borel_space E]
  [second_countable_topology E] [complete_space E]

lemma not_integrable_has_deriv_at_of_tendsto_norm_at_top_right {f f' : ‚Ñù ‚Üí E} {a b : ‚Ñù}
  (hlt : a < b) (h_deriv : ‚àÄ·∂† x in ùìù[Ioi a] a, has_deriv_at f (f' x) x)
  (h_infty : tendsto (Œª x, ‚à•f x‚à•) (ùìù[Ioi a] a) at_top) :
  ¬¨interval_integrable f' volume a b :=
begin
  intro h_int,
  obtain ‚ü®c, ‚ü®hac, hcb‚ü©, hc‚ü© : ‚àÉ c ‚àà Ioo a b, ‚àÄ x ‚àà Ioc a c, has_deriv_at f (f' x) x,
    from (mem_nhds_within_Ioi_iff_exists_mem_Ioo_Ioc_subset hlt).1 h_deriv,
  obtain ‚ü®d, ‚ü®had, hdc‚ü©, hdf‚ü© : ‚àÉ d, d ‚àà Ioo a c ‚àß ‚à•f c‚à• + ‚à´ x in a..b, ‚à•f' x‚à• < ‚à•f d‚à•,
    from (eventually.and (Ioo_mem_nhds_within_Ioi (left_mem_Ico.2 hac)) $
      h_infty.eventually (eventually_gt_at_top _)).exists,
  obtain ‚ü®hc', hd'‚ü© : c ‚àà [a, b] ‚àß d ‚àà [a, b],
  { rw interval_of_le hlt.le, exact ‚ü®‚ü®hac.le, hcb.le‚ü©, had.le, (hdc.trans hcb).le‚ü© },
  refine hdf.not_le (sub_le_iff_le_add'.1 _),
  calc ‚à•f d‚à• - ‚à•f c‚à• ‚â§ ‚à•f d - f c‚à• : norm_sub_norm_le _ _
  ... = ‚à•‚à´ x in d..c, f' x‚à• :
    begin
      rw [integral_symm, norm_neg],
      refine congr_arg _ (integral_eq_sub_of_has_deriv_at (Œª x hx, hc _ _) _).symm,
      { rw interval_of_ge hdc.le at hx,
        exact ‚ü®had.trans_le hx.1, hx.2‚ü© },
      { exact h_int.mono (interval_subset_interval hc' hd') le_rfl }
    end
  ... ‚â§ ‚à´ x in d..c, ‚à•f' x‚à• : norm_integral_le_integral_norm hdc.le
  ... ‚â§ ‚à´ x in a..b, ‚à•f' x‚à• :
    integral_mono_interval had.le hdc.le hcb.le (ae_of_all _ $ Œª _, norm_nonneg _) h_int.norm
end

lemma not_integrable_has_deriv_at_of_tendsto_norm_at_top_left {f f' : ‚Ñù ‚Üí E} {a b : ‚Ñù}
  (hlt : a < b) (h_deriv : ‚àÄ·∂† x in ùìù[Iio b] b, has_deriv_at f (f' x) x)
  (h_infty : tendsto (Œª x, ‚à•f x‚à•) (ùìù[Iio b] b) at_top) :
  ¬¨interval_integrable f' volume a b :=
begin
  intro h_int,
  obtain ‚ü®c, ‚ü®hac, hcb‚ü©, hc‚ü© : ‚àÉ c ‚àà Ioo a b, ‚àÄ x ‚àà Ico c b, has_deriv_at f (f' x) x,
    from (mem_nhds_within_Iio_iff_exists_mem_Ioo_Ico_subset hlt).1 h_deriv,
  obtain ‚ü®d, ‚ü®hcd, hdb‚ü©, hdf‚ü© : ‚àÉ d, d ‚àà Ioo c b ‚àß ‚à•f c‚à• + ‚à´ x in a..b, ‚à•f' x‚à• < ‚à•f d‚à•,
    from (eventually.and (Ioo_mem_nhds_within_Iio (right_mem_Ioc.2 hcb)) $
      h_infty.eventually (eventually_gt_at_top _)).exists,
  obtain ‚ü®hc', hd'‚ü© : c ‚àà [a, b] ‚àß d ‚àà [a, b],
  { rw interval_of_le hlt.le, exact ‚ü®‚ü®hac.le, hcb.le‚ü©, (hac.trans hcd).le, hdb.le‚ü© },
  refine hdf.not_le (sub_le_iff_le_add'.1 _),
  calc ‚à•f d‚à• - ‚à•f c‚à• ‚â§ ‚à•f d - f c‚à• : norm_sub_norm_le _ _
  ... = ‚à•‚à´ x in c..d, f' x‚à• :
    begin
      refine congr_arg _ (integral_eq_sub_of_has_deriv_at (Œª x hx, hc _ _) _).symm,
      { rw interval_of_le hcd.le at hx,
        exact ‚ü®hx.1, hx.2.trans_lt hdb‚ü© },
      { exact h_int.mono (interval_subset_interval hc' hd') le_rfl }
    end
  ... ‚â§ ‚à´ x in c..d, ‚à•f' x‚à• : norm_integral_le_integral_norm hcd.le
  ... ‚â§ ‚à´ x in a..b, ‚à•f' x‚à• :
    integral_mono_interval hac.le hcd.le hdb.le (ae_of_all _ $ Œª _, norm_nonneg _) h_int.norm
end

lemma not_integrable_has_deriv_at_of_tendsto_norm_at_top_punctured {f f' : ‚Ñù ‚Üí E} {a b c : ‚Ñù}
  (hne : a ‚â† b) (hc : c ‚àà [a, b]) (h_deriv : ‚àÄ·∂† x in ùìù[{c}·∂ú] c, has_deriv_at f (f' x) x)
  (h_infty : tendsto (Œª x, ‚à•f x‚à•) (ùìù[{c}·∂ú] c) at_top) :
  ¬¨interval_integrable f' volume a b :=
begin
  wlog hlt : a < b := hne.lt_or_lt using [a b, b a] tactic.skip,
  { rw interval_of_le hlt.le at hc,
    rcases hc.1.eq_or_lt with (rfl|hac),
    { have : ùìù[Ioi a] a ‚â§ ùìù[{a}·∂ú] a, from nhds_within_mono _ (Œª _, ne_of_gt),
      exact not_integrable_has_deriv_at_of_tendsto_norm_at_top_right hlt
        (h_deriv.filter_mono this) (h_infty.mono_left this) },
    { have : ùìù[Iio c] c ‚â§ ùìù[{c}·∂ú] c, from nhds_within_mono _ (Œª _, ne_of_lt),
      exact Œª h, not_integrable_has_deriv_at_of_tendsto_norm_at_top_left hac
        (h_deriv.filter_mono this) (h_infty.mono_left this)
        (h.mono_set $ interval_subset_interval_left (Icc_subset_interval hc)) } },
  { exact Œª hab hc h, this hab.symm (interval_swap a b ‚ñ∏ hc) h.symm }
end

@[simp] lemma interval_integrable_inv_iff {a b : ‚Ñù} :
  interval_integrable (Œª x, x‚Åª¬π) volume a b ‚Üî a = b ‚à® (0 : ‚Ñù) ‚àâ [a, b] :=
begin
  split,
  { refine Œª h, or_iff_not_imp_left.2 (Œª hne h‚ÇÄ, _),
    have : ‚àÄ·∂† x in ùìù[{0}·∂ú] (0 : ‚Ñù), has_deriv_at real.log x‚Åª¬π x,
      from eventually_nhds_with_of_forall (Œª x, real.has_deriv_at_log),
    refine not_integrable_has_deriv_at_of_tendsto_norm_at_top_punctured hne h‚ÇÄ this _ h,
    exact tendsto_abs_at_bot_at_top.comp real.tendsto_log_nhds_within_zero },
  { rintro (rfl|h‚ÇÄ),
    exacts [interval_integrable.refl,
      interval_integrable_inv (Œª x hx, ne_of_mem_of_not_mem hx h‚ÇÄ) continuous_on_id] }
end

end interval_integral
