import category_theory.category.Cat

universes v' u' v u

namespace category_theory

variables (C : Type u) [category.{v} C]

structure prelax_functor_to_Cat extends prefunctor C Cat.{v' u'} :=
(map_id (X : C) : map (ùüô X) ‚ü∂ ùü≠ (obj X))
(map_comp ‚¶ÉX Y Z : C‚¶Ñ (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : map (f ‚â´ g) ‚ü∂ map f ‚ãô map g)

structure prelax_functor_hom (F‚ÇÅ F‚ÇÇ : prelax_functor_to_Cat C) :=
(app (X : C) : F‚ÇÅ.obj X ‚ü∂ F‚ÇÇ.obj X)
(naturality {X Y : C} (f : X ‚ü∂ Y) : )

instance : category (prelax_functor_to_Cat C) :=
{ hom := ,

}

variables {C} (F : prelax_functor_to_Cat C)

structure dep_functor :=
(obj (X : C) : F.obj X)
(map {X Y : C} (f : X ‚ü∂ Y) : (F.map f).obj (obj X) ‚ü∂ obj Y)
(map_id (X : C) : map (ùüô X) = (F.map_id X).app (obj X))
(map_comp {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  map (f ‚â´ g) = (F.map_comp f g).app (obj X) ‚â´ (F.map g).map (map f) ‚â´ map g)

variables (Fd‚ÇÅ Fd‚ÇÇ : dep_functor F)

structure dep_functor_hom :=
(app (X : C) : Fd‚ÇÅ.obj X ‚ü∂ Fd‚ÇÇ.obj X)
(naturality {X Y : C} (f : X ‚ü∂ Y) : Fd‚ÇÅ.map f ‚â´ app Y = (F.map f).map (app X) ‚â´ Fd‚ÇÇ.map f)

instance : quiver (dep_functor F) := { hom := dep_functor_hom F }

variables {Fd‚ÇÅ Fd‚ÇÇ}

@[ext] lemma dep_functor_hom_ext (Œ±‚ÇÅ Œ±‚ÇÇ : Fd‚ÇÅ ‚ü∂ Fd‚ÇÇ) (h : Œ±‚ÇÅ.app = Œ±‚ÇÇ.app) : Œ±‚ÇÅ = Œ±‚ÇÇ :=
by { cases Œ±‚ÇÅ, cases Œ±‚ÇÇ, congr, exact h }

instance : category (dep_functor F) :=
{ hom := dep_functor_hom F,
  id := Œª Fd, { app := Œª X, ùüô _, naturality := by simp },
  comp := Œª Fd‚ÇÅ Fd‚ÇÇ Fd‚ÇÉ Œ±‚ÇÅ Œ±‚ÇÇ,
  { app := Œª X, Œ±‚ÇÅ.app X ‚â´ Œ±‚ÇÇ.app X,
    naturality := Œª X Y f, by { rw [‚Üê category.assoc, Œ±‚ÇÅ.naturality], simp [Œ±‚ÇÇ.naturality] } } }

def dep_functor_prelax_functor : prelax_functor_to_Cat (prelax_functor_to_Cat F) :=


end category_theory
