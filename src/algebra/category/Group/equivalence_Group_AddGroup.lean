import algebra.category.Group.basic

namespace Group

@[simps]
def to_AddGroup : Group ‚•§ AddGroup :=
{ obj := Œª X, ‚ü®additive X‚ü©,
  map := Œª X Y f,
  { to_fun := Œª x, f x,
    map_zero' := by { erw [map_one], refl },
    map_add' := Œª x y, by { erw [map_mul], refl } },
  map_id' := Œª X, by { ext, refl },
  map_comp' := Œª X Y Z f g, by { ext, refl } }

end Group

namespace CommGroup

@[simps]
def to_AddCommGroup : CommGroup ‚•§ AddCommGroup :=
{ obj := Œª X, ‚ü®additive X‚ü©,
  map := Œª X Y f,
  { to_fun := Œª x, f x,
    map_zero' := by { erw [map_one], refl },
    map_add' := Œª x y, by { erw [map_mul], refl } },
  map_id' := Œª X, by { ext, refl },
  map_comp' := Œª X Y Z f g, by { ext, refl } }

end CommGroup

namespace AddGroup

@[simps]
def to_Group : AddGroup ‚•§ Group :=
{ obj := Œª X, ‚ü®multiplicative X‚ü©,
  map := Œª X Y f,
  { to_fun := Œª x, f x,
    map_one' := by { erw [map_zero], refl },
    map_mul' := Œª x y, by { erw [map_add], refl } },
  map_id' := Œª X, by { ext, refl },
  map_comp' := Œª X Y Z f g, by { ext, refl } }

end AddGroup

namespace AddCommGroup

@[simps]
def to_CommGroup : AddCommGroup ‚•§ CommGroup :=
{ obj := Œª X, ‚ü®multiplicative X‚ü©,
  map := Œª X Y f,
  { to_fun := Œª x, f x,
    map_one' := by { erw [map_zero], refl },
    map_mul' := Œª x y, by { erw [map_add], refl } },
  map_id' := Œª X, by { ext, refl },
  map_comp' := Œª X Y Z f g, by { ext, refl } }

end AddCommGroup

@[simps]
def Group_AddGroup_equivalence : Group ‚âå AddGroup :=
{ functor := Group.to_AddGroup,
  inverse := AddGroup.to_Group,
  unit_iso :=
  { hom :=
    { app := Œª X, (ùüô X),
      naturality' := Œª _ _ _, by { ext, refl } },
    inv :=
    { app := Œª X, (ùüô X),
      naturality' := Œª _ _ _, by { ext, refl } },
    hom_inv_id' := rfl,
    inv_hom_id' := rfl },
  counit_iso :=
  { hom :=
    { app := Œª X, (ùüô X),
      naturality' := Œª _ _ _, by { ext, refl } },
    inv :=
    { app := Œª X, (ùüô X),
      naturality' := Œª _ _ _, by { ext, refl } },
    hom_inv_id' := rfl,
    inv_hom_id' := rfl },
  functor_unit_iso_comp' := Œª X, rfl }

def CommGroup_AddCommGroup_equivalence : CommGroup ‚âå AddCommGroup :=
{ functor := CommGroup.to_AddCommGroup,
  inverse := AddCommGroup.to_CommGroup,
  unit_iso :=
  { hom :=
    { app := Œª X, (ùüô X),
      naturality' := Œª _ _ _, by { ext, refl } },
    inv :=
    { app := Œª X, (ùüô X),
      naturality' := Œª _ _ _, by { ext, refl } },
    hom_inv_id' := rfl,
    inv_hom_id' := rfl },
  counit_iso :=
  { hom :=
    { app := Œª X, (ùüô X),
      naturality' := Œª _ _ _, by { ext, refl } },
    inv :=
    { app := Œª X, (ùüô X),
      naturality' := Œª _ _ _, by { ext, refl } },
    hom_inv_id' := rfl,
    inv_hom_id' := rfl },
  functor_unit_iso_comp' := Œª X, rfl }
