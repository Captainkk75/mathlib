import analysis.inner_product_space.gram_schmidt_ortho
import linear_algebra.matrix.pos_def

namespace matrix

open_locale matrix
open matrix

--TODO: move
variables {m n Œ± : Type*} [fintype n] [decidable_eq n] (A : matrix n n Œ±) [comm_ring Œ±] [star_ring Œ±]

noncomputable lemma invertible_conj_transpose [invertible A] : invertible A·¥¥ :=
by apply_instance

noncomputable lemma invertible_transpose [invertible A] : invertible A·µÄ :=
begin
  haveI : invertible A·µÄ.det, {
    simp,
    apply det_invertible_of_invertible,
  },
  exact invertible_of_det_invertible A·µÄ
end

noncomputable lemma invertible_of_invertible_conj_transpose [invertible A·¥¥] : invertible A :=
begin
  rw ‚Üêconj_transpose_conj_transpose A,
  exact matrix.invertible_conj_transpose A·¥¥
end

lemma inv_mul_eq_iff_eq_mul (A B C : matrix n n Œ±) [invertible A]  : A‚Åª¬π ‚¨ù B = C ‚Üî B = A ‚¨ù C :=
‚ü® Œª h, calc B = A ‚¨ù A‚Åª¬π ‚¨ù B : by simp only [mul_inv_of_invertible A, matrix.one_mul]
    ... = A ‚¨ù C : by rw [matrix.mul_assoc, h],
  Œª h, calc A‚Åª¬π ‚¨ù B = A‚Åª¬π ‚¨ù A ‚¨ù C : by rw [matrix.mul_assoc, h]
    ... = C : by simp only [inv_mul_of_invertible A, matrix.one_mul]‚ü©

lemma mul_inv_eq_iff_eq_mul (A B C : matrix n n Œ±) [invertible A]  : B ‚¨ù A‚Åª¬π = C ‚Üî B = C ‚¨ù A :=
‚ü® Œª h, calc B = B ‚¨ù A‚Åª¬π ‚¨ù A : by simp only [matrix.mul_assoc, inv_mul_of_invertible A, matrix.mul_one]
    ... = C ‚¨ù A : by rw [h],
  Œª h, calc B ‚¨ù A‚Åª¬π = C ‚¨ù A ‚¨ù A‚Åª¬π : by rw [h]
    ... = C : by simp only [matrix.mul_assoc, mul_inv_of_invertible A, matrix.mul_one]‚ü©

lemma mul_mul_apply (A B C : matrix n n Œ±) (i j : n) : (A ‚¨ù B ‚¨ù C) i j = A i ‚¨ù·µ• (B.mul_vec (C·µÄ j)) :=
by { rw matrix.mul_assoc, simpa only [mul_apply, dot_product, mul_vec] }

end matrix


namespace basis
open matrix

variables {Œπ Œπ' : Type*} {R : Type*} {M : Type*} [comm_ring R] [add_comm_monoid M] [module R M]
noncomputable lemma invertible_to_matrix (b : basis Œπ R M) (b' : basis Œπ R M) [decidable_eq Œπ] [fintype Œπ]  :
  invertible (b.to_matrix b') :=
invertible_of_left_inverse _ _ (basis.to_matrix_mul_to_matrix_flip _ _)

end basis

variables {ùïú : Type*} [is_R_or_C ùïú]
  {n : Type*} [linear_order n] [is_well_order n (<)] [locally_finite_order_bot n]

local notation `‚ü™`x`, `y`‚ü´` := @inner ùïú (n ‚Üí ùïú) (pi_Lp.inner_product_space (Œª _, ùïú)).to_has_inner x y
open matrix
open_locale matrix
variables {S : matrix n n ùïú} [fintype n] (hS : S.pos_def)

/-- The inverse of the lower triangular matrix `L` of the LDL-decomposition. It is obtained by
applying Gram-Schmidt-Orthogonalization w.r.t. the inner product induced by `S·µÄ` on the standard
basis vectors `pi.basis_fun`. -/
noncomputable def LDL.lower_inv : matrix n n ùïú :=
  @gram_schmidt
    ùïú (n ‚Üí ùïú) _ (inner_product_space.of_matrix hS.transpose) n _ _ _ (Œª k, pi.basis_fun ùïú n k)

lemma LDL.lower_inv_gram_schmidt_basis :
  LDL.lower_inv hS = ((pi.basis_fun ùïú n).to_matrix
    (@gram_schmidt_basis ùïú (n ‚Üí ùïú) _
    (inner_product_space.of_matrix hS.transpose) n _ _ _ (pi.basis_fun ùïú n)))·µÄ :=
begin
  ext i j,
  rw [LDL.lower_inv, basis.coe_pi_basis_fun.to_matrix_eq_transpose, coe_gram_schmidt_basis],
  refl
end

noncomputable instance LDL.invertible_lower_inv : invertible (LDL.lower_inv hS) :=
begin
  rw [LDL.lower_inv_gram_schmidt_basis],
  haveI := basis.invertible_to_matrix (pi.basis_fun ùïú n)
    (@gram_schmidt_basis ùïú (n ‚Üí ùïú) _ (inner_product_space.of_matrix hS.transpose)
      n _ _ _ (pi.basis_fun ùïú n)),
  apply invertible_transpose,
end

lemma LDL.lower_inv_orthogonal {i j : n} (h‚ÇÄ : i ‚â† j) :
  ‚ü™(LDL.lower_inv hS i), S·µÄ.mul_vec (LDL.lower_inv hS j)‚ü´ = 0 :=
show @inner ùïú (n ‚Üí ùïú) (inner_product_space.of_matrix hS.transpose).to_has_inner
    (LDL.lower_inv hS i)
    (LDL.lower_inv hS j) = 0,
by apply gram_schmidt_orthogonal _ _ h‚ÇÄ

/-- The entries of the diagonal matrix `D` of the LDL decomposition. -/
noncomputable def LDL.diag_entries : n ‚Üí ùïú :=
  Œª i, ‚ü™star (LDL.lower_inv hS i), S.mul_vec (star (LDL.lower_inv hS i))‚ü´

/-- The diagonal matrix `D` of the LDL decomposition. -/
noncomputable def LDL.diag : matrix n n ùïú := matrix.diagonal (LDL.diag_entries hS)

lemma LDL.lower_inv_triangular [succ_order n] {i j : n} (hij : i < j) :
  LDL.lower_inv hS i j = 0 :=
by rw [‚Üê @gram_schmidt_triangular ùïú (n ‚Üí ùïú) _ (inner_product_space.of_matrix hS.transpose) n _ _ _
    i j hij (pi.basis_fun ùïú n), pi.basis_fun_repr, LDL.lower_inv]

lemma ldl_decomposition‚ÇÄ : LDL.diag hS = LDL.lower_inv hS ‚¨ù S ‚¨ù (LDL.lower_inv hS)·¥¥ :=
begin
  ext i j,
  by_cases hij : i = j,
  { simpa only [hij, LDL.diag, diagonal_apply_eq, LDL.diag_entries, matrix.mul_assoc, inner,
      pi.star_apply, is_R_or_C.star_def, star_ring_end_self_apply] },
  { simp only [LDL.diag, hij, diagonal_apply_ne, ne.def, not_false_iff, mul_mul_apply],
    rw [conj_transpose, transpose_map, transpose_transpose, dot_product_mul_vec,
      (LDL.lower_inv_orthogonal hS (Œª h : j = i, hij h.symm)).symm,
      ‚Üê inner_conj_sym, mul_vec_transpose, euclidean_space.inner_eq_star_dot_product,
      ‚Üê is_R_or_C.star_def, ‚Üê star_dot_product_star, dot_product_comm, star_star],
    refl }
end

/-- The lower triangular matrix `L` of the LDL decomposition. -/
noncomputable def LDL.lower := (LDL.lower_inv hS)‚Åª¬π

theorem ldl_decomposition :
  LDL.lower hS ‚¨ù LDL.diag hS ‚¨ù (LDL.lower hS)·¥¥ = S :=
begin
  rw [LDL.lower, conj_transpose_nonsing_inv, matrix.mul_assoc,
    matrix.inv_mul_eq_iff_eq_mul (LDL.lower_inv hS), matrix.mul_inv_eq_iff_eq_mul],
  exact ldl_decomposition‚ÇÄ hS,
end
