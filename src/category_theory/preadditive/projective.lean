/-
Copyright (c) 2020 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel, Scott Morrison
-/
import algebra.homology.exact
import algebra.homology.single
import algebra.homology.quasi_iso
import algebra.homology.homotopy
import algebra.homology.augment
import category_theory.types

/-!
# Projective objects and categories with enough projectives

An object `P` is called projective if every morphism out of `P` factors through every epimorphism.

A category `C` has enough projectives if every object admits an epimorphism from some
projective object.

`projective.over X` picks an arbitrary such projective object,
and `projective.œÄ X : projective.over X ‚ü∂ X` is the corresponding epimorphism.

Given a morphism `f : X ‚ü∂ Y`, `projective.left f` is a projective object over `kernel f`,
and `projective.d f : projective.left f ‚ü∂ X` is the morphism `œÄ (kernel f) ‚â´ kernel.Œπ f`.
-/

noncomputable theory

open category_theory
open category_theory.limits

universes v u

namespace category_theory
variables {C : Type u} [category.{v} C]

/--
An object `P` is called projective if every morphism out of `P` factors through every epimorphism.
-/
class projective (P : C) : Prop :=
(factors : ‚àÄ {E X : C} (f : P ‚ü∂ X) (e : E ‚ü∂ X) [epi e], ‚àÉ f', f' ‚â´ e = f)

section

/--
A projective presentation of an object `X` consists of an epimorphism `f : P ‚ü∂ X`
from some projective object `P`.
-/
@[nolint has_inhabited_instance]
structure projective_presentation (X : C) :=
(P : C)
(projective : projective P . tactic.apply_instance)
(f : P ‚ü∂ X)
(epi : epi f . tactic.apply_instance)

variables (C)

/-- A category "has enough projectives" if for every object `X` there is a projective object `P` and
    an epimorphism `P ‚Ü† X`. -/
class enough_projectives : Prop :=
(presentation : ‚àÄ (X : C), nonempty (projective_presentation X))

end

namespace projective

/--
An arbitrarily chosen factorisation of a morphism out of a projective object through an epimorphism.
-/
def factor_thru {P X E : C} [projective P] (f : P ‚ü∂ X) (e : E ‚ü∂ X) [epi e] : P ‚ü∂ E :=
(projective.factors f e).some

@[simp] lemma factor_thru_comp {P X E : C} [projective P] (f : P ‚ü∂ X) (e : E ‚ü∂ X) [epi e] :
  factor_thru f e ‚â´ e = f :=
(projective.factors f e).some_spec

lemma of_iso {P Q : C} (i : P ‚âÖ Q) (hP : projective P) : projective Q :=
begin
  fsplit,
  introsI E X f e e_epi,
  obtain ‚ü®f', hf'‚ü© := projective.factors (i.hom ‚â´ f) e,
  exact ‚ü®i.inv ‚â´ f', by simp [hf']‚ü©
end

lemma iso_iff {P Q : C} (i : P ‚âÖ Q) : projective P ‚Üî projective Q :=
‚ü®of_iso i, of_iso i.symm‚ü©

/-- The axiom of choice says that every type is a projective object in `Type`. -/
instance (X : Type u) : projective X :=
{ factors := Œª E X' f e epi,
  ‚ü®Œª x, ((epi_iff_surjective _).mp epi (f x)).some,
  by { ext x, exact ((epi_iff_surjective _).mp epi (f x)).some_spec, }‚ü© }

instance Type_enough_projectives : enough_projectives (Type u) :=
{ presentation := Œª X, ‚ü®{ P := X, f := ùüô X, }‚ü©, }

instance {P Q : C} [has_binary_coproduct P Q] [projective P] [projective Q] :
  projective (P ‚®ø Q) :=
{ factors := Œª E X' f e epi, by exactI
  ‚ü®coprod.desc (factor_thru (coprod.inl ‚â´ f) e) (factor_thru (coprod.inr ‚â´ f) e), by tidy‚ü©, }

instance {Œ≤ : Type v} (g : Œ≤ ‚Üí C) [has_coproduct g] [‚àÄ b, projective (g b)] :
  projective (‚àê g) :=
{ factors := Œª E X' f e epi, by exactI
  ‚ü®sigma.desc (Œª b, factor_thru (sigma.Œπ g b ‚â´ f) e), by tidy‚ü©, }

instance {P Q : C} [has_zero_morphisms C] [has_binary_biproduct P Q]
  [projective P] [projective Q] :
  projective (P ‚äû Q) :=
{ factors := Œª E X' f e epi, by exactI
  ‚ü®biprod.desc (factor_thru (biprod.inl ‚â´ f) e) (factor_thru (biprod.inr ‚â´ f) e), by tidy‚ü©, }

instance {Œ≤ : Type v} [decidable_eq Œ≤] (g : Œ≤ ‚Üí C) [has_zero_morphisms C] [has_biproduct g]
  [‚àÄ b, projective (g b)] : projective (‚®Å g) :=
{ factors := Œª E X' f e epi, by exactI
  ‚ü®biproduct.desc (Œª b, factor_thru (biproduct.Œπ g b ‚â´ f) e), by tidy‚ü©, }

section enough_projectives
variables [enough_projectives C]

/--
`projective.over X` provides an arbitrarily chosen projective object equipped with
an epimorphism `projective.œÄ : projective.over X ‚ü∂ X`.
-/
def over (X : C) : C :=
(enough_projectives.presentation X).some.P

instance projective_over (X : C) : projective (over X) :=
(enough_projectives.presentation X).some.projective

/--
The epimorphism `projective.œÄ : projective.over X ‚ü∂ X`
from the arbitrarily chosen projective object over `X`.
-/
def œÄ (X : C) : over X ‚ü∂ X :=
(enough_projectives.presentation X).some.f

instance œÄ_epi (X : C) : epi (œÄ X) :=
(enough_projectives.presentation X).some.epi

section
variables [has_zero_morphisms C] {X Y : C} (f : X ‚ü∂ Y) [has_kernel f]

/-- When `C` has enough projectives, the object `projective.left f` is
the arbitrarily chosen projective object over `kernel f`. -/
@[derive projective]
def left : C := over (kernel f)

/-- When `C` has enough projectives,
`projective.d f : projective.left f ‚ü∂ X` is the composition
`œÄ (kernel f) ‚â´ kernel.Œπ f`.
-/
abbreviation d : left f ‚ü∂ X :=
œÄ (kernel f) ‚â´ kernel.Œπ f

end

section
variables [has_zero_morphisms C] [has_equalizers C] [has_images C]

/--
A `projective.resolution Z` consists of a `‚Ñï`-indexed chain complex of projective objects,
along with a quasi-isomorphism to the complex consisting of just `Z` supported in degree `0`.
-/
-- We implement this more concretely, however, in terms of an exact sequence,
-- not even mentioning chain complexes or quasi-isomorphisms.
@[nolint has_inhabited_instance]
structure resolution (Z : C) :=
(X : ‚Ñï ‚Üí C)
(d : Œ† n, X (n+1) ‚ü∂ X n)
(zero : X 0 ‚âÖ Z)
(projective : ‚àÄ n, projective (X (n+1)))
(epi : epi (d 0))
(exact : ‚àÄ n, exact (d (n+1)) (d n))

variables [has_zero_object C] [has_image_maps C] [has_cokernels C]

-- TODO generalize to `chain_complex.mk`?
def resolution.exact_sequence {Z : C} (P : resolution Z) : chain_complex C ‚Ñï :=
{ X := P.X,
  d := Œª i j, if h : i = j + 1 then eq_to_hom (congr_arg P.X h) ‚â´ P.d j else 0,
  shape' := Œª i j w, by rw dif_neg (ne.symm w),
  d_comp_d' := Œª i j k,
  begin
    split_ifs with h h' h',
    { substs h h', simp [(P.exact k).w], },
    all_goals { simp },
  end }

def resolution.complex {Z : C} (P : resolution Z) : chain_complex C ‚Ñï :=
chain_complex.truncate.obj P.exact_sequence

instance resolution.exact' {Z : C} (P : resolution Z) (n : ‚Ñï) :
  exact (P.complex.d (n+2) (n+1)) (P.complex.d (n+1) n) :=
begin
  dsimp [resolution.complex, resolution.exact_sequence],
  rw [if_pos rfl, if_pos rfl],
  rw [category.id_comp, category.id_comp],
  exact P.exact (n+1),
end

instance resolution.projective' {Z : C} (P : resolution Z) (n : ‚Ñï) :
  projective (P.complex.X n) :=
P.projective n

def resolution.map {Z : C} (P : resolution Z) :
  P.complex ‚ü∂ (homological_complex.single C _ 0).obj Z :=
chain_complex.truncate_to_single P.exact_sequence ‚â´ (homological_complex.single C _ 0).map P.zero.hom

instance {Z : C} (P : resolution Z) : exact (P.complex.d 1 0) (P.map.f 0) :=
begin
  -- TODO: yuck:
  dsimp [resolution.map, resolution.complex, resolution.exact_sequence, chain_complex.truncate_to_single, chain_complex.truncate, chain_complex.to_single_equiv],
  split_ifs,
  { rw [category.comp_id, category.id_comp, category.id_comp, category.id_comp, exact_comp_iso],
    exact P.exact 0, },
  { simpa using h, },
end

@[simp] lemma resolution.map_f_succ {Z : C} (P : resolution Z) (n : ‚Ñï) :
  P.map.f (n+1) = 0 :=
begin
  -- TODO: yuck
  dsimp [resolution.map, resolution.exact_sequence, chain_complex.truncate_to_single, chain_complex.truncate,
    chain_complex.to_single_equiv],
  rw [dif_neg, zero_comp],
  simp,
end

def resolution.quasi_iso {Z : C} (P : resolution Z) : quasi_iso P.map :=
sorry

attribute [instance] resolution.projective

instance {Z : C} (P : resolution Z) (n : ‚Ñï) : epi (P.map.f n) := sorry

namespace resolution

def chain_map.mk_inductive_aux (P Q : chain_complex C ‚Ñï)
  (zero : P.X 0 ‚ü∂ Q.X 0)
  (one : P.X 1 ‚ü∂ Q.X 1)
  (zero_one_comm : P.d 1 0 ‚â´ zero = one ‚â´ Q.d 1 0)
  (succ : ‚àÄ (n : ‚Ñï)
    (p : Œ£' (f : P.X n ‚ü∂ Q.X n) (f' : P.X (n+1) ‚ü∂ Q.X (n+1)), P.d (n+1) n ‚â´ f = f' ‚â´ Q.d (n+1) n),
    Œ£' f'' : P.X (n+2) ‚ü∂ Q.X (n+2), P.d (n+2) (n+1) ‚â´ p.2.1 = f'' ‚â´ Q.d (n+2) (n+1)) :
  Œ† n, Œ£' (f : P.X n ‚ü∂ Q.X n) (f' : P.X (n+1) ‚ü∂ Q.X (n+1)), P.d (n+1) n ‚â´ f = f' ‚â´ Q.d (n+1) n
| 0 := ‚ü®zero, one, zero_one_comm‚ü©
| (n+1) := ‚ü®(chain_map.mk_inductive_aux n).2.1,
    (succ n (chain_map.mk_inductive_aux n)).1, (succ n (chain_map.mk_inductive_aux n)).2‚ü©

-- TODO move, rename
def chain_map.mk_inductive (P Q : chain_complex C ‚Ñï)
  (zero : P.X 0 ‚ü∂ Q.X 0)
  (one : P.X 1 ‚ü∂ Q.X 1)
  (zero_one_comm : P.d 1 0 ‚â´ zero = one ‚â´ Q.d 1 0)
  (succ : ‚àÄ (n : ‚Ñï)
    (p : Œ£' (f : P.X n ‚ü∂ Q.X n) (f' : P.X (n+1) ‚ü∂ Q.X (n+1)), P.d (n+1) n ‚â´ f = f' ‚â´ Q.d (n+1) n),
    Œ£' f'' : P.X (n+2) ‚ü∂ Q.X (n+2), P.d (n+2) (n+1) ‚â´ p.2.1 = f'' ‚â´ Q.d (n+2) (n+1)) : P ‚ü∂ Q :=
{ f := Œª n, (chain_map.mk_inductive_aux P Q zero one zero_one_comm succ n).1,
  comm' := Œª n m,
  begin
    by_cases h : m + 1 = n,
    { subst h,
      exact (chain_map.mk_inductive_aux P Q zero one zero_one_comm succ m).2.2.symm, },
    { rw [P.shape n m h, Q.shape n m h], simp, }
  end }

/- Auxiliary construction for `lift`. -/
def lift_f_zero {Y Z : C} (f : Y ‚ü∂ Z) (P : resolution Y) (Q : resolution Z) :
  P.complex.X 0 ‚ü∂ Q.complex.X 0 :=
factor_thru (P.map.f 0 ‚â´ f) (Q.map.f 0)

local attribute [instance] epi_comp

/- Auxiliary construction for `lift`. -/
def lift_f_one {Y Z : C} (f : Y ‚ü∂ Z) (P : resolution Y) (Q : resolution Z) :
  P.complex.X 1 ‚ü∂ Q.complex.X 1 :=
begin
  have z : (P.complex.d 1 0 ‚â´ lift_f_zero f P Q) ‚â´ Q.map.f 0 = 0,
  { dsimp [lift_f_zero], simp, },
  let g := factor_thru_kernel_subobject (Q.map.f 0) _ z,
  -- It is tempting, but incorrect, to factor `g` through the composition in one step here!
  exact factor_thru (factor_thru g
    (image_to_kernel (Q.complex.d 1 0) (Q.map.f 0) (by simp)))
      (factor_thru_image_subobject (Q.complex.d 1 0))
end

/- Auxiliary lemma for `lift`. -/
@[simp] lemma lift_f_zero_one_comm
  {Y Z : C} (f : Y ‚ü∂ Z) (P : resolution Y) (Q : resolution Z) :
  P.complex.d 1 0 ‚â´ lift_f_zero f P Q = lift_f_one f P Q ‚â´ Q.complex.d 1 0 :=
begin
  dsimp [lift_f_zero, lift_f_one],
  conv_rhs { congr, skip, rw ‚Üê image_subobject_arrow_comp (Q.complex.d 1 0), },
  rw [‚Üêcategory.assoc, category_theory.projective.factor_thru_comp, ‚Üêimage_to_kernel_arrow,
    ‚Üêcategory.assoc, category_theory.projective.factor_thru_comp,
    factor_thru_kernel_subobject_comp_arrow],
end

/- Auxiliary construction for `lift`. -/
def lift_f_succ {Y Z : C} (f : Y ‚ü∂ Z) (P : resolution Y) (Q : resolution Z) (n : ‚Ñï)
  (p : Œ£' (f : P.complex.X n ‚ü∂ Q.complex.X n) (f' : P.complex.X (n+1) ‚ü∂ Q.complex.X (n+1)), P.complex.d (n+1) n ‚â´ f = f' ‚â´ Q.complex.d (n+1) n) :
    Œ£' f'' : P.complex.X (n+2) ‚ü∂ Q.complex.X (n+2), P.complex.d (n+2) (n+1) ‚â´ p.2.1 = f'' ‚â´ Q.complex.d (n+2) (n+1) :=
begin
  rcases p with ‚ü®f, f', w‚ü©,
  have z : (P.complex.d (n+2) (n+1) ‚â´ f') ‚â´ Q.complex.d (n+1) n = 0,
  { rw [category.assoc, ‚Üêw, ‚Üêcategory.assoc, P.complex.d_comp_d, zero_comp], },
  let g := factor_thru_kernel_subobject (Q.complex.d (n+1) n) _ z,
  fsplit,
  -- It is tempting, but incorrect, to factor `g` through the composition in one step here!
  exact factor_thru (factor_thru g
    (image_to_kernel (Q.complex.d (n+2) (n+1)) (Q.complex.d (n+1) n) (Q.complex.d_comp_d _ _ _)))
      (factor_thru_image_subobject (Q.complex.d (n+2) (n+1))),
  dsimp [g],
  conv_rhs { congr, skip, rw ‚Üê image_subobject_arrow_comp (Q.complex.d (n+2) (n+1)), },
  rw [‚Üêcategory.assoc, category_theory.projective.factor_thru_comp, ‚Üêimage_to_kernel_arrow,
    ‚Üêcategory.assoc, category_theory.projective.factor_thru_comp,
    factor_thru_kernel_subobject_comp_arrow],
end

/-- A morphism in `C` lifts to a chain map between projective resolutions. -/
def lift {Y Z : C} (f : Y ‚ü∂ Z) (P : resolution Y) (Q : resolution Z) :
  P.complex ‚ü∂ Q.complex :=
begin
  fapply chain_map.mk_inductive,
  apply lift_f_zero f,
  apply lift_f_one f,
  apply lift_f_zero_one_comm f,
  apply lift_f_succ f,
end

/-- The resolution maps interwine the lift of a morphism and that morphism. -/
@[simp, reassoc]
lemma lift_commutes {Y Z : C} (f : Y ‚ü∂ Z) (P : resolution Y) (Q : resolution Z) :
  lift f P Q ‚â´ Q.map = P.map ‚â´ (homological_complex.single C _ 0).map f :=
begin
  ext n,
  rcases n with (_|_|n),
  { dsimp [lift, chain_map.mk_inductive, chain_map.mk_inductive_aux, lift_f_zero], simp, },
  { dsimp [lift, chain_map.mk_inductive, chain_map.mk_inductive_aux, lift_f_one], simp, },
  { dsimp, simp, },
end

-- Now that we've checked this property of the lift,
-- we can seal away the actual definition.
attribute [irreducible] lift

end resolution

end

namespace resolution

variables [preadditive C] [has_equalizers C] [has_images C] [has_image_maps C]
  [has_zero_object C] [has_cokernels C]

def lift_homotopy {Y Z : C} (f : Y ‚ü∂ Z) {P : resolution Y} {Q : resolution Z}
  (g h : P.complex ‚ü∂ Q.complex)
  (g_comm : g ‚â´ Q.map = P.map ‚â´ (homological_complex.single C _ 0).map f)
  (h_comm : h ‚â´ Q.map = P.map ‚â´ (homological_complex.single C _ 0).map f) :
  homotopy g h :=
sorry

def lift_comp_homotopy {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (P : resolution X) (Q : resolution Y) (R : resolution Z) :
  homotopy (lift (f ‚â´ g) P R) (lift f P Q ‚â´ lift g Q R) :=
by { apply lift_homotopy (f ‚â´ g); simp, }

def homotopy_equiv {Z : C} (P Q : resolution Z) : P.complex ‚ü∂ Q.complex :=
  lift (ùüô Z) P Q

@[simp] lemma homotopy_equiv_commutes {Z : C} (P Q : resolution Z) :
  homotopy_equiv P Q ‚â´ Q.map = P.map :=
by simp [homotopy_equiv]

-- TODO state that in the homotopy category `resolution.homotopy_equiv P Q` becomes an isomorphism
-- (and hence that it is a homotopy equivalence and a quasi-isomorphism).

-- TODO construct `resolution_functor : C ‚•§ homotopy_category C ‚Ñï`



end resolution

end enough_projectives

end projective

end category_theory
