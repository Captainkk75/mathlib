/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import category_theory.limits.kan_extension
import category_theory.limits.filtered_colimit_commutes_finite_limit
import category_theory.limits.preserves.functor_category
import category_theory.limits.presheaf
import category_theory.limits.yoneda
import category_theory.limits.preserves.shapes.equalizers
import category_theory.bicones

/-!
# Representably flat functors

Define representably flat functors as functors such that the catetory of structured arrows over `X`
is cofiltered for each `X`. This concept is also knows as flat functors as in [Elephant], or
Remark C2.3.7, and this name is suggested by Mike Shulman in
https://golem.ph.utexas.edu/category/2011/06/flat_functors_and_morphisms_of.html to differentiate
this concept from other notions of flatness.

## Main results
* If `F : C ‚•§ D` preserves finite limits and `C` has all finite limits, then `F` is flat.
* If `F : C ‚•§ D` is a flat functor between small categories, then both `Lan F.op` and `F`
preserves finite limits.

## Future work

* Presumably flat functors still preserves finite limits in big categories under certain
constraints, such as

-/

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open category_theory
open category_theory.limits
open opposite

namespace category_theory

section representably_flat
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

class representably_flat (u : C ‚•§ D) : Prop :=
(cofiltered : ‚àÄ (X : D), is_cofiltered (structured_arrow X u))

lemma functor.flat_cofiltered (u : C ‚•§ D) [representably_flat u] (X : D) :
 is_cofiltered (structured_arrow X u) := representably_flat.cofiltered X

variables (u : C ‚•§ D) [representably_flat u] {X : D} (Y‚ÇÅ Y‚ÇÇ : costructured_arrow u X)

instance cofiltered_of_flat := u.flat_cofiltered X

end representably_flat

section has_limit
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÅ} D]

lemma flat_of_preserves_finite_limit [has_limits C] (F : C ‚•§ D)
  (H : ‚àÄ (J : Type v‚ÇÅ) [h : small_category J] [h' : @fin_category J h],
    @preserves_limits_of_shape _ _ _ _ J h F) : representably_flat F := ‚ü®Œª X,
{ cocone_objs := Œª A B, by
  { let fn := limits.binary_fan.mk A.hom B.hom,
    let is_lim := is_limit_of_has_binary_product_of_preserves_limit F A.right B.right,
    use structured_arrow.mk (is_lim.lift fn),
    use structured_arrow.hom_mk limits.prod.fst (is_lim.fac fn walking_pair.left),
    use structured_arrow.hom_mk limits.prod.snd (is_lim.fac fn walking_pair.right) },
  cocone_maps := Œª A B f g, by
  { let fn : fork (F.map f.right) (F.map g.right) := limits.fork.of_Œπ A.hom (f.w.symm.trans g.w),
    let is_lim := is_limit_of_has_equalizer_of_preserves_limit F f.right g.right,
    use structured_arrow.mk (is_lim.lift fn),
    use structured_arrow.hom_mk (equalizer.Œπ f.right g.right)
      (is_lim.fac fn walking_parallel_pair.zero),
    ext,
    exact equalizer.condition f.right g.right },
  nonempty := by
  { haveI := has_terminal_of_has_terminal_of_preserves_limit F,
    exact nonempty.intro (structured_arrow.mk
      (terminal.from X ‚â´ (preserves_terminal.iso F).inv)) } }‚ü©

open category_theory.limits.walking_parallel_pair_hom


namespace preserves_finite_limit_of_flat
@[simps]
def cone_to_diagram_of_structured_arrows {J : Type*} [category J] {K : J ‚•§ C}
(F : C ‚•§ D) (c : cone (K ‚ãô F)) : (J ‚•§ structured_arrow c.X F) :=
{ obj := Œª X, structured_arrow.mk (c.œÄ.app X),
  map := Œª X Y f, structured_arrow.hom_mk (K.map f)
    (by { convert (c.œÄ.naturality f).symm, exact (category.id_comp _).symm }) }

lemma cone_diagram_proj {J : Type*} [category J] {K : J ‚•§ C}
(F : C ‚•§ D) (c : cone (K ‚ãô F)) :
  cone_to_diagram_of_structured_arrows F c ‚ãô structured_arrow.proj c.X F = K := by
{ apply functor.hext; tidy }

variables (J : Type v‚ÇÅ) [small_category J] [fin_category J]

-- noncomputable
section end
variable {J}
@[simps]
def diagram_of_structured_arrows_of_extend {K : J ‚•§ C} (F : C ‚•§ D) (c : cone (K ‚ãô F)) {X : D}
  (f : X ‚ü∂ c.X) : J ‚•§ structured_arrow X F :=
{ obj := Œª j, structured_arrow.mk (f ‚â´ c.œÄ.app j),
  map := Œª j k g, structured_arrow.hom_mk (K.map g)
    (by simp only [structured_arrow.mk_hom_eq_self, category.assoc, @category.id_comp _ _ c.X,
      ‚Üê c.œÄ.naturality g, ‚Üê functor.comp_map, functor.const.obj_map]),
  map_id' := Œª X, by simpa,
  map_comp' := Œª X Y Z g h, by { ext, simp } }

-- variables (F : C ‚•§ D) [representably_flat F] [fin_category J]
variables {K : J ‚•§ C} (F : C ‚•§ D) (c : cone K)

@[simps]
def cone_of_structured_arrows_of_extend {X : D} (f : X ‚ü∂ F.obj c.X) :
  cone (diagram_of_structured_arrows_of_extend F (F.map_cone c) f) :=
{ X := structured_arrow.mk f,
  œÄ := { app := Œª j, structured_arrow.hom_mk (c.œÄ.app j) rfl,
         naturality' := Œª j k g, by { ext, dsimp, simp } } }

variables [representably_flat F] {c} (hc : is_limit c) (s : cone (K ‚ãô F))
include hc

noncomputable def lift : s.X ‚ü∂ F.obj c.X :=
begin
let s' := is_cofiltered.cone (cone_to_diagram_of_structured_arrows F s),
exact s'.X.hom ‚â´ F.map (hc.lift ((cones.postcompose (eq_to_hom (cone_diagram_proj F s))).obj
  ((structured_arrow.proj s.X F).map_cone s'))),
end

lemma fac (x : J) : lift F hc s ‚â´ (F.map_cone c).œÄ.app x = s.œÄ.app x :=
by { unfold lift, simpa [‚ÜêF.map_comp] }


lemma uniq {K : J ‚•§ C} {c : cone K} (hc : is_limit c)
  (s : cone (K ‚ãô F)) (f‚ÇÅ f‚ÇÇ : s.X ‚ü∂ F.obj c.X)
  (h‚ÇÅ : ‚àÄ (j : J), f‚ÇÅ ‚â´ (F.map_cone c).œÄ.app j = s.œÄ.app j)
  (h‚ÇÇ : ‚àÄ (j : J), f‚ÇÇ ‚â´ (F.map_cone c).œÄ.app j = s.œÄ.app j) : f‚ÇÅ = f‚ÇÇ :=
begin
let c‚ÇÅ := cone_of_structured_arrows_of_extend F c f‚ÇÅ,
let c‚ÇÇ := cone_of_structured_arrows_of_extend F c f‚ÇÇ,
let eq_hom : diagram_of_structured_arrows_of_extend F (F.map_cone c) f‚ÇÇ ‚ü∂
  diagram_of_structured_arrows_of_extend F (F.map_cone c) f‚ÇÅ :=
  { app := Œª j, structured_arrow.hom_mk (ùüô (K.obj j))
      (by { erw [F.map_id, category.comp_id], exact (h‚ÇÇ j).trans (h‚ÇÅ j).symm }),
    naturality' := Œª j k f, by
      { ext, simp[@category.comp_id _ _ _ (K.obj k), @category.id_comp _ _ (K.obj j)] } },
let bicone := bicones_mk _ c‚ÇÅ ((cones.postcompose eq_hom).obj c‚ÇÇ),
let c‚ÇÄ := is_cofiltered.cone bicone,
let g‚ÇÅ : c‚ÇÄ.X ‚ü∂ c‚ÇÅ.X := c‚ÇÄ.œÄ.app (bicones.left),
let g‚ÇÇ : c‚ÇÄ.X ‚ü∂ c‚ÇÇ.X := c‚ÇÄ.œÄ.app (bicones.right),
have extend_eq : c.extend g‚ÇÅ.right = c.extend g‚ÇÇ.right,
{ unfold cone.extend, congr' 1,
  ext x, change g‚ÇÅ.right ‚â´ c.œÄ.app x = g‚ÇÇ.right ‚â´ c.œÄ.app x,
  injection (c‚ÇÄ.œÄ.naturality (bicones_hom.left x)).symm.trans
    (c‚ÇÄ.œÄ.naturality (bicones_hom.right x) : _) with _ h,
  convert h, exact (category.comp_id (c.œÄ.app x)).symm },
have : g‚ÇÅ.right = g‚ÇÇ.right,
{ rw hc.uniq (c.extend g‚ÇÅ.right) g‚ÇÅ.right (Œª j, by simp),
  rw hc.uniq (c.extend g‚ÇÇ.right) g‚ÇÇ.right (Œª j, by simp),
  congr,
  exact extend_eq },
calc f‚ÇÅ = ùüô _ ‚â´ f‚ÇÅ : by simp
    ... = c‚ÇÄ.X.hom ‚â´ F.map g‚ÇÅ.right : g‚ÇÅ.w
    ... = c‚ÇÄ.X.hom ‚â´ F.map g‚ÇÇ.right : by { congr, exact this }
    ... = ùüô _ ‚â´ f‚ÇÇ : g‚ÇÇ.w.symm
    ... = f‚ÇÇ : by simp
end

end preserves_finite_limit_of_flat

noncomputable
def preserves_finite_limit_of_flat (F : C ‚•§ D) [representably_flat F]
(J : Type v‚ÇÅ) [small_category J] [fin_category J]
: preserves_limits_of_shape J F := ‚ü®Œª K, ‚ü®Œª c hc,
{ lift := preserves_finite_limit_of_flat.lift F hc,
  fac' := preserves_finite_limit_of_flat.fac F hc,
  uniq' := Œª s m h, by
  { apply preserves_finite_limit_of_flat.uniq F hc,
    exact h,
    exact preserves_finite_limit_of_flat.fac F hc s } }‚ü©‚ü©

end has_limit

section small_category
variables {C D : Type u‚ÇÅ} [small_category C] [small_category D]

/--
(Implementation)
The evaluation of `Lan F` at `X` is the colimit over the costrucuted arrows over `X`.
-/
lemma Lan_evaluation_eq_colim (E : Type u‚ÇÇ) [category.{u‚ÇÅ} E] (F : C ‚•§ D) (X : D)
  [‚àÄ (X : D), has_colimits_of_shape (costructured_arrow F X) E] :
  Lan F ‚ãô (evaluation D E).obj X =
  ((whiskering_left _ _ E).obj (costructured_arrow.proj F X)) ‚ãô colim :=
begin
  apply functor.hext,
  { intro Y, simp },
  intros Y‚ÇÅ Y‚ÇÇ f,
  simp only [functor.comp_map, evaluation_obj_map, whiskering_left_obj_map, Lan_map_app, heq_iff_eq],
  symmetry,
  apply (colimit.is_colimit (Lan.diagram F Y‚ÇÅ X)).uniq { X := colimit _, Œπ := _ }
    (colim.map (whisker_left (costructured_arrow.proj F X) f)),
  intro Z,
  simp only [colimit.Œπ_map, colimit.cocone_Œπ, whisker_left_app, category.comp_id, category.assoc],
  transitivity f.app Z.left ‚â´ (colimit.Œπ (costructured_arrow.map Z.hom ‚ãô Lan.diagram F Y‚ÇÇ X :
    costructured_arrow F _ ‚•§ _) (costructured_arrow.mk (ùüô (F.obj Z.left))) : _)
    ‚â´ (colimit.pre (Lan.diagram F Y‚ÇÇ X) (costructured_arrow.map Z.hom)),
  { rw colimit.Œπ_pre,
    congr,
    simp only [category.id_comp, costructured_arrow.map_mk],
    apply costructured_arrow.eq_mk },
  { congr }
end

/--
If `F : C ‚•§ D` is a representably flat functor between small categories, then the functor
`Lan F.op` that takes presheaves over `C` to presheaves over `D` preserves finite limits.
-/
noncomputable
def Lan_presesrves_finite_limit_of_flat (F : C ‚•§ D) [representably_flat F]
  (J : Type u‚ÇÅ) [small_category J] [fin_category J] :
  preserves_limits_of_shape J (Lan F.op : _ ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) :=
begin
  apply preserves_limits_of_shape_if_evaluation (Lan F.op : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) J,
  intro K,
  rw Lan_evaluation_eq_colim,
  haveI : is_filtered (costructured_arrow F.op K) :=
    is_filtered.of_equivalence (structured_arrow_op_equivalence F (unop K)),
  apply_instance
end

noncomputable
def extend_of_comp_yoneda_iso_Lan (F : C ‚•§ D) :
  colimit_adj.extend_along_yoneda (F ‚ãô yoneda) ‚âÖ Lan F.op :=
adjunction.nat_iso_of_right_adjoint_nat_iso
  (colimit_adj.yoneda_adjunction (F ‚ãô yoneda))
  (Lan.adjunction (Type u‚ÇÅ) F.op)
  (iso_whisker_right curried_yoneda_lemma' ((whiskering_left C·µí·µñ D·µí·µñ (Type u‚ÇÅ)).obj F.op : _))

noncomputable
def yoneda_comp_Lan (F : C ‚•§ D) : F ‚ãô yoneda ‚âÖ yoneda ‚ãô Lan F.op :=
(colimit_adj.is_extension_along_yoneda (F ‚ãô yoneda)).symm ‚â™‚â´
  iso_whisker_left yoneda (extend_of_comp_yoneda_iso_Lan F)

noncomputable
def preserves_finite_limit_of_flat (F : C ‚•§ D) [representably_flat F]
  (J : Type u‚ÇÅ) [small_category J] [fin_category J] :
  preserves_limits_of_shape J F := by {
  apply preserves_limits_of_shape_of_reflects_of_preserves F yoneda,
  haveI := Lan_presesrves_finite_limit_of_flat F J,
  exact preserves_limits_of_shape_of_nat_iso (yoneda_comp_Lan F).symm,
  apply_instance
}

-- local attribute[ext] functor.hext

end small_category

end category_theory
