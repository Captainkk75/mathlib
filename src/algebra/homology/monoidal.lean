import category_theory.monoidal.CommMon_
import algebra.homology.single
import category_theory.limits.shapes.biproducts
import data.finset.nat_antidiagonal
import category_theory.monoidal.functorial
import algebra.category.Module.monoidal
import algebra.category.Module.abelian
import category_theory.monoidal.preadditive

open category_theory
open category_theory.limits

universes v u

noncomputable theory

variables {C : Type u} [category.{0} C] [has_zero_object C] [preadditive C]
  [has_finite_biproducts C] [monoidal_category C] [monoidal_preadditive C]

open_locale big_operators

open category_theory.monoidal_category

def antidiagonal (i : ‚Ñï) := { p : ‚Ñï √ó ‚Ñï // p.1 + p.2 = i }
instance (i : ‚Ñï) : fintype (antidiagonal i) := sorry

namespace cochain_complex

def tensor_d (X Y : cochain_complex C ‚Ñï) (i j : ‚Ñï) (p : antidiagonal i) (q : antidiagonal j) :
  X.X p.1.1 ‚äó Y.X p.1.2 ‚ü∂ X.X q.1.1 ‚äó Y.X q.1.2 :=
if h : p.1.1 = q.1.1 then
  (-1 : ‚Ñ§)^p.1.1 ‚Ä¢ eq_to_hom (congr_arg X.X h) ‚äó Y.d p.1.2 q.1.2
else if h : p.1.2 = q.1.2 then
  X.d p.1.1 q.1.1 ‚äó eq_to_hom (congr_arg Y.X h)
else
  0

def tensor_obj (X Y : cochain_complex C ‚Ñï) : cochain_complex C ‚Ñï :=
{ X := Œª i, ‚®Å (Œª p : antidiagonal i, X.X p.1.1 ‚äó Y.X p.1.2),
  d := Œª i j, biproduct.matrix (tensor_d X Y i j),
  shape' := sorry,
  d_comp_d' := sorry, }

def tensor_hom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : cochain_complex C ‚Ñï} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) :
  tensor_obj X‚ÇÅ Y‚ÇÅ ‚ü∂ tensor_obj X‚ÇÇ Y‚ÇÇ :=
{ f := Œª i, biproduct.map (Œª p, f.f p.1.1 ‚äó g.f p.1.2),
  comm' := sorry, }

def tensor_unit : cochain_complex C ‚Ñï := (cochain_complex.single‚ÇÄ C).obj (ùüô_ C)

def associator_hom_aux (X Y Z : ‚Ñï ‚Üí C) (i : ‚Ñï)
  (p q : antidiagonal i) (j : antidiagonal p.1.1) (k : antidiagonal q.1.2) :
    (X j.1.1 ‚äó Y j.1.2) ‚äó Z p.1.2 ‚ü∂ X q.1.1 ‚äó (Y k.1.1 ‚äó Z k.1.2) :=
if h : j.1.1 = q.1.1 ‚àß j.1.2 = k.1.1 ‚àß p.1.2 = k.1.2 then
  (Œ±_ _ _ _).hom ‚â´
    (eq_to_hom (congr_arg X h.1) ‚äó eq_to_hom (congr_arg Y h.2.1) ‚äó
      eq_to_hom (congr_arg Z h.2.2))
else
  0

def associator_hom (X Y Z : cochain_complex C ‚Ñï) :
  tensor_obj (tensor_obj X Y) Z ‚ü∂ tensor_obj X (tensor_obj Y Z) :=
{ f := Œª i, biproduct.matrix (Œª p q,
  (right_distributor _ _).hom ‚â´ biproduct.matrix (associator_hom_aux X.X Y.X Z.X i p q) ‚â´
    (left_distributor _ _).inv),
  comm' := sorry }

def associator_inv_aux (X Y Z : ‚Ñï ‚Üí C) (i : ‚Ñï)
  (p q : antidiagonal i) (j : antidiagonal p.1.2) (k : antidiagonal q.1.1) :
    X p.1.1 ‚äó (Y j.1.1 ‚äó Z j.1.2) ‚ü∂ (X k.1.1 ‚äó Y k.1.2) ‚äó Z q.1.2 :=
if h : p.1.1 = k.1.1 ‚àß j.1.1 = k.1.2 ‚àß j.1.2 = q.1.2 then
  (eq_to_hom (congr_arg X h.1) ‚äó eq_to_hom (congr_arg Y h.2.1) ‚äó
      eq_to_hom (congr_arg Z h.2.2)) ‚â´ (Œ±_ _ _ _).inv
else
  0

def associator_inv (X Y Z : cochain_complex C ‚Ñï) :
  tensor_obj X (tensor_obj Y Z) ‚ü∂ tensor_obj (tensor_obj X Y) Z :=
{ f := Œª i, biproduct.matrix (Œª p q,
  (left_distributor _ _).hom ‚â´ biproduct.matrix (associator_inv_aux X.X Y.X Z.X i p q) ‚â´
    (right_distributor _ _).inv),
  comm' := sorry }

def associator (X Y Z : cochain_complex C ‚Ñï) :
  tensor_obj (tensor_obj X Y) Z ‚âÖ tensor_obj X (tensor_obj Y Z) :=
{ hom := associator_hom X Y Z,
  inv := associator_inv X Y Z,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry, }

def left_unitor_hom (X : cochain_complex C ‚Ñï) :
  tensor_obj tensor_unit X ‚ü∂ X :=
{ f := Œª i, biproduct.œÄ _ ‚ü®‚ü®0, i‚ü©, by simp‚ü© ‚â´ (Œª_ (X.X i)).hom,
  comm' := sorry, }

def left_unitor_inv (X : cochain_complex C ‚Ñï) :
  X ‚ü∂ tensor_obj tensor_unit X :=
{ f := Œª i, (Œª_ (X.X i)).inv ‚â´ biproduct.Œπ (Œª p : antidiagonal i, tensor_unit.X p.1.1 ‚äó X.X p.1.2) ‚ü®‚ü®0, i‚ü©, by simp‚ü©,
  comm' := sorry, }

def left_unitor (X : cochain_complex C ‚Ñï) :
  tensor_obj tensor_unit X ‚âÖ X :=
{ hom := left_unitor_hom X,
  inv := left_unitor_inv X,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry, }

def right_unitor_hom (X : cochain_complex C ‚Ñï) :
  tensor_obj X tensor_unit ‚ü∂ X :=
{ f := Œª i, biproduct.œÄ _ ‚ü®‚ü®i, 0‚ü©, by simp‚ü© ‚â´ (œÅ_ (X.X i)).hom,
  comm' := sorry, }

def right_unitor_inv (X : cochain_complex C ‚Ñï) :
  X ‚ü∂ tensor_obj X tensor_unit :=
{ f := Œª i, (œÅ_ (X.X i)).inv ‚â´ biproduct.Œπ (Œª p : antidiagonal i, X.X p.1.1 ‚äó tensor_unit.X p.1.2) ‚ü®‚ü®i, 0‚ü©, by simp‚ü©,
  comm' := sorry, }

def right_unitor (X : cochain_complex C ‚Ñï) :
  tensor_obj X tensor_unit ‚âÖ X :=
{ hom := right_unitor_hom X,
  inv := right_unitor_inv X,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry, }

end cochain_complex

instance : monoidal_category (cochain_complex C ‚Ñï) :=
{ tensor_obj := Œª X Y, cochain_complex.tensor_obj X Y,
  tensor_hom := Œª X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ f g, cochain_complex.tensor_hom f g,
  tensor_unit := cochain_complex.tensor_unit,
  associator := cochain_complex.associator,
  left_unitor := cochain_complex.left_unitor,
  right_unitor := cochain_complex.right_unitor,
  tensor_id' := sorry,
  tensor_comp' := sorry,
  associator_naturality' := sorry,
  left_unitor_naturality' := sorry,
  right_unitor_naturality' := sorry,
  pentagon' := sorry,
  triangle' := sorry, }

variables [braided_category C]

namespace cochain_complex

def braiding_hom (X Y : cochain_complex C ‚Ñï) : X ‚äó Y ‚ü∂ Y ‚äó X :=
{ f := Œª i, biproduct.lift (Œª p, biproduct.œÄ (Œª p : antidiagonal i, X.X p.1.1 ‚äó Y.X p.1.2) ‚ü®‚ü®p.1.2, p.1.1‚ü©, sorry‚ü© ‚â´ (Œ≤_ _ _).hom),
  comm' := sorry, }

def braiding_inv (X Y : cochain_complex C ‚Ñï) : Y ‚äó X ‚ü∂ X ‚äó Y :=
{ f := Œª i, biproduct.desc (Œª p, (Œ≤_ _ _).inv ‚â´ biproduct.Œπ (Œª p : antidiagonal i, X.X p.1.1 ‚äó Y.X p.1.2) ‚ü®‚ü®p.1.2, p.1.1‚ü©, sorry‚ü©),
  comm' := sorry, }

def braiding (X Y : cochain_complex C ‚Ñï) : X ‚äó Y ‚âÖ Y ‚äó X :=
{ hom := braiding_hom X Y,
  inv := braiding_inv X Y,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry, }

end cochain_complex

instance : braided_category (cochain_complex C ‚Ñï) :=
{ braiding := cochain_complex.braiding,
  braiding_naturality' := sorry,
  hexagon_forward' := sorry,
  hexagon_reverse' := sorry, }

namespace graded_object

def tensor_obj (X Y : graded_object ‚Ñï C) : graded_object ‚Ñï C :=
Œª i, ‚®Å (Œª p : antidiagonal i, X p.1.1 ‚äó Y p.1.2)

def tensor_hom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : graded_object ‚Ñï C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) :
  tensor_obj X‚ÇÅ Y‚ÇÅ ‚ü∂ tensor_obj X‚ÇÇ Y‚ÇÇ :=
-- I can't write this in term mode and have it typecheck... ?
by exact Œª i, biproduct.map (Œª p, f p.1.1 ‚äó g p.1.2)

local attribute [instance] has_zero_object.has_zero

def tensor_unit : graded_object ‚Ñï C :=
Œª i, match i with
| 0 := ùüô_ C
| n+1 := 0
end

def associator_hom (X Y Z : graded_object ‚Ñï C) :
  tensor_obj (tensor_obj X Y) Z ‚ü∂ tensor_obj X (tensor_obj Y Z) :=
by exact Œª i, biproduct.matrix (Œª p q,
  (right_distributor _ _).hom ‚â´ biproduct.matrix (cochain_complex.associator_hom_aux X Y Z i p q) ‚â´
    (left_distributor _ _).inv)

def associator_inv (X Y Z : graded_object ‚Ñï C) :
  tensor_obj X (tensor_obj Y Z) ‚ü∂ tensor_obj (tensor_obj X Y) Z :=
by exact Œª i, biproduct.matrix (Œª p q,
  (left_distributor _ _).hom ‚â´ biproduct.matrix (cochain_complex.associator_inv_aux X Y Z i p q) ‚â´
    (right_distributor _ _).inv)

def associator (X Y Z : graded_object ‚Ñï C) :
  tensor_obj (tensor_obj X Y) Z ‚âÖ tensor_obj X (tensor_obj Y Z) :=
{ hom := associator_hom X Y Z,
  inv := associator_inv X Y Z,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry, }

def left_unitor (X : graded_object ‚Ñï C) :
  tensor_obj tensor_unit X ‚âÖ X :=
{ hom := Œª i, biproduct.œÄ _ ‚ü®‚ü®0, i‚ü©, by simp‚ü© ‚â´ (Œª_ (X i)).hom,
  inv := Œª i, (Œª_ (X i)).inv ‚â´ biproduct.Œπ (Œª p : antidiagonal i, tensor_unit p.1.1 ‚äó X p.1.2) ‚ü®‚ü®0, i‚ü©, by simp‚ü©,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry, }

def right_unitor (X : graded_object ‚Ñï C) :
  tensor_obj X tensor_unit ‚âÖ X :=
{ hom := Œª i, biproduct.œÄ _ ‚ü®‚ü®i, 0‚ü©, by simp‚ü© ‚â´ (œÅ_ (X i)).hom,
  inv := Œª i, (œÅ_ (X i)).inv ‚â´ biproduct.Œπ (Œª p : antidiagonal i, X p.1.1 ‚äó tensor_unit p.1.2) ‚ü®‚ü®i, 0‚ü©, by simp‚ü©,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry, }

end graded_object

instance : monoidal_category (graded_object ‚Ñï C) :=
{ tensor_obj := Œª X Y, graded_object.tensor_obj X Y,
  tensor_hom := Œª X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ f g, graded_object.tensor_hom f g,
  tensor_unit := graded_object.tensor_unit,
  associator := graded_object.associator,
  left_unitor := graded_object.left_unitor,
  right_unitor := graded_object.right_unitor,
  tensor_id' := sorry,
  tensor_comp' := sorry,
  associator_naturality' := sorry,
  left_unitor_naturality' := sorry,
  right_unitor_naturality' := sorry,
  pentagon' := sorry,
  triangle' := sorry, }

namespace graded_object

def braiding_hom (X Y : graded_object ‚Ñï C) : X ‚äó Y ‚ü∂ Y ‚äó X :=
Œª i, biproduct.lift (Œª p, biproduct.œÄ (Œª p : antidiagonal i, X p.1.1 ‚äó Y p.1.2) ‚ü®‚ü®p.1.2, p.1.1‚ü©, sorry‚ü© ‚â´ (Œ≤_ _ _).hom)

def braiding_inv (X Y : graded_object ‚Ñï C) : Y ‚äó X ‚ü∂ X ‚äó Y :=
Œª i, biproduct.desc (Œª p, (Œ≤_ _ _).inv ‚â´ biproduct.Œπ (Œª p : antidiagonal i, X p.1.1 ‚äó Y p.1.2) ‚ü®‚ü®p.1.2, p.1.1‚ü©, sorry‚ü©)

def braiding (X Y : graded_object ‚Ñï C) : X ‚äó Y ‚âÖ Y ‚äó X :=
{ hom := braiding_hom X Y,
  inv := braiding_inv X Y,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry, }

end graded_object

instance : braided_category (graded_object ‚Ñï C) :=
{ braiding := graded_object.braiding,
  braiding_naturality' := sorry,
  hexagon_forward' := sorry,
  hexagon_reverse' := sorry, }

/-!
At this point we specialise to `C = Module R`,
and prove that the homology functor is lax monoidal.
I'm not certain how far this could be generalised.
-/

variables (R : Type) [comm_ring R]

def lax_monoidal_Œµ :
  ùüô_ (graded_object ‚Ñï (Module.{0} R)) ‚ü∂
    (graded_homology_functor (Module.{0} R) (complex_shape.up ‚Ñï)).obj (ùüô_ _) :=
by exact Œª i, match i with
| 0 := sorry
| n+1 := 0
end

def lax_monoidal_Œº (X Y : cochain_complex (Module.{0} R) ‚Ñï) :
  (graded_homology_functor (Module.{0} R) (complex_shape.up ‚Ñï)).obj X ‚äó
    (graded_homology_functor (Module.{0} R) (complex_shape.up ‚Ñï)).obj Y ‚ü∂
  (graded_homology_functor (Module.{0} R) (complex_shape.up ‚Ñï)).obj (X ‚äó Y) :=
by exact Œª i, biproduct.desc (Œª ‚ü®‚ü®j,k‚ü©,h‚ü©,
begin dsimp, sorry end)

instance : lax_monoidal (graded_homology_functor (Module.{0} R) (complex_shape.up ‚Ñï)).obj :=
{ Œµ := lax_monoidal_Œµ R,
  Œº := lax_monoidal_Œº R,
  Œº_natural' := sorry,
  associativity' := sorry,
  left_unitality' := sorry,
  right_unitality' := sorry, }

def graded_homology_lax_monoidal_functor : lax_monoidal_functor (cochain_complex (Module.{0} R) ‚Ñï) (graded_object ‚Ñï (Module.{0} R)) :=
lax_monoidal_functor.of (graded_homology_functor (Module.{0} R) (complex_shape.up ‚Ñï)).obj

def graded_homology_lax_braided_functor : lax_braided_functor (cochain_complex (Module.{0} R) ‚Ñï) (graded_object ‚Ñï (Module.{0} R)) :=
{ braided' := sorry,
  ..graded_homology_lax_monoidal_functor R }

def CDGA_challenge : CommMon_ (cochain_complex (Module.{0} R) ‚Ñï) ‚•§ CommMon_ (graded_object ‚Ñï (Module.{0} R)) :=
(graded_homology_lax_braided_functor R).map_CommMon
