import algebra.homology2.complex_shape
import category_theory.limits.shapes.zero
import category_theory.subobject.lattice
import category_theory.subobject.factor_thru

universes v u

open category_theory category_theory.limits

variables {Œπ : Type*}
variables (V : Type u) [category.{v} V] [has_zero_morphisms V]

structure homological_complex (c : complex_shape Œπ) :=
(X : Œπ ‚Üí V)
(d : Œ† i j, X i ‚ü∂ X j)
(shape' : ‚àÄ i j, ¬¨ c.rel i j ‚Üí d i j = 0 . obviously)
(d_comp_d' : ‚àÄ i j k, d i j ‚â´ d j k = 0 . obviously)

restate_axiom homological_complex.shape'
restate_axiom homological_complex.d_comp_d'

attribute [simp] homological_complex.shape
attribute [simp, reassoc] homological_complex.d_comp_d

namespace homological_complex
variables {V} {c : complex_shape Œπ} (C : homological_complex V c)

@[ext] structure hom (A B : homological_complex V c) :=
(f : ‚àÄ i, A.X i ‚ü∂ B.X i)
(comm' : ‚àÄ i j, f i ‚â´ B.d i j = A.d i j ‚â´ f j . obviously)

restate_axiom hom.comm'
attribute [simp, reassoc, elementwise] hom.comm

def id (A : homological_complex V c) : hom A A :=
{ f := Œª _, ùüô _ }

def comp (A B C : homological_complex V c) (œÜ : hom A B) (œà : hom B C) : hom A C :=
{ f := Œª i, œÜ.f i ‚â´ œà.f i }

section
local attribute [simp] id comp

instance : category (homological_complex V c) :=
{ hom := hom,
  id := id,
  comp := comp, }

end

@[simp] lemma id_f (C : homological_complex V c) (i : Œπ) : hom.f (ùüô C) i = ùüô (C.X i) := rfl
@[simp] lemma comp_f {C‚ÇÅ C‚ÇÇ C‚ÇÉ : homological_complex V c} (f : C‚ÇÅ ‚ü∂ C‚ÇÇ) (g : C‚ÇÇ ‚ü∂ C‚ÇÉ) (i : Œπ) :
  (f ‚â´ g).f i = f.f i ‚â´ g.f i :=
rfl

lemma hom_f_injective {C‚ÇÅ C‚ÇÇ : homological_complex V c} :
  function.injective (Œª f : hom C‚ÇÅ C‚ÇÇ, hom.f f) :=
by tidy

open_locale classical
noncomputable theory

variables [has_zero_object V]
local attribute [instance] has_zero_object.has_zero

lemma d_comp_eq_to_hom {i j j' : Œπ} (rij : c.rel i j) (rij' : c.rel i j') :
  C.d i j' ‚â´ eq_to_hom (congr_arg C.X (c.next_eq rij' rij)) = C.d i j :=
begin
  have P : ‚àÄ h : j' = j, C.d i j' ‚â´ eq_to_hom (congr_arg C.X h) = C.d i j,
  { rintro rfl, simp, },
  apply P,
end

lemma eq_to_hom_comp_d {i i' j : Œπ} (rij : c.rel i j) (rij' : c.rel i' j) :
  eq_to_hom (congr_arg C.X (c.prev_eq rij rij')) ‚â´ C.d i' j = C.d i j :=
begin
  have P : ‚àÄ h : i = i', eq_to_hom (congr_arg C.X h) ‚â´ C.d i' j = C.d i j,
  { rintro rfl, simp, },
  apply P,
end

lemma kernel_eq_kernel [has_kernels V] {i j j' : Œπ} (r : c.rel i j) (r' : c.rel i j') :
  kernel_subobject (C.d i j) = kernel_subobject (C.d i j') :=
begin
  rw ‚Üêd_comp_eq_to_hom C r r',
  apply kernel_subobject_comp_mono,
end

lemma image_eq_image [has_images V] [has_equalizers V] [has_zero_object V]
  {i i' j : Œπ} (r : c.rel i j) (r' : c.rel i' j) :
  image_subobject (C.d i j) = image_subobject (C.d i' j) :=
begin
  rw ‚Üêeq_to_hom_comp_d C r r',
  apply image_subobject_iso_comp,
end

def X_pred (j : Œπ) : V :=
match c.prev j with
| none := 0
| (some ‚ü®i,_‚ü©) := C.X i
end

def X_pred_iso {i j : Œπ} (r : c.rel i j) :
  C.X_pred j ‚âÖ C.X i :=
begin
  dsimp [X_pred],
  apply eq_to_iso,
  rw c.prev_eq_some r,
  refl,
end

def X_pred_iso_zero {j : Œπ} (h : c.prev j = none) :
  C.X_pred j ‚âÖ 0 :=
begin
  dsimp [X_pred],
  apply eq_to_iso,
  rw h,
  refl,
end

def X_succ (i : Œπ) : V :=
match c.next i with
| none := 0
| (some ‚ü®j,_‚ü©) := C.X j
end

def X_succ_iso {i j : Œπ} (r : c.rel i j) :
  C.X_succ i ‚âÖ C.X j :=
begin
  dsimp [X_succ],
  apply eq_to_iso,
  rw c.next_eq_some r,
  refl,
end

def X_succ_iso_zero {i : Œπ} (h : c.next i = none) :
  C.X_succ i ‚âÖ 0 :=
begin
  dsimp [X_succ],
  apply eq_to_iso,
  rw h,
  refl,
end

/--
The differential mapping into `C.X j`, or zero if there isn't one.
-/
def d_to (j : Œπ) : C.X_pred j ‚ü∂ C.X j :=
match c.prev j with
| none := (0 : C.X_pred j ‚ü∂ C.X j)
| (some ‚ü®i, w‚ü©) := (C.X_pred_iso w).hom ‚â´ C.d i j
end

/--
The differential mapping out of `C.X i`, or zero if there isn't one.
-/
def d_from (i : Œπ) : C.X i ‚ü∂ C.X_succ i :=
match c.next i with
| none := (0 : C.X i ‚ü∂ C.X_succ i)
| (some ‚ü®j, w‚ü©) := C.d i j ‚â´ (C.X_succ_iso w).inv
end

lemma d_to_eq {i j : Œπ} (r : c.rel i j) :
  C.d_to j = (C.X_pred_iso r).hom ‚â´ C.d i j :=
begin
  dsimp [d_to, X_pred_iso],
  rw c.prev_eq_some r,
  refl,
end

@[simp]
lemma d_to_eq_zero {j : Œπ} (h : c.prev j = none) :
  C.d_to j = 0 :=
begin
  dsimp [d_to],
  rw h, refl,
end

lemma d_from_eq {i j : Œπ} (r : c.rel i j) :
  C.d_from i = C.d i j ‚â´ (C.X_succ_iso r).inv :=
begin
  dsimp [d_from, X_succ_iso],
  rw c.next_eq_some r,
  refl,
end

@[simp]
lemma d_from_eq_zero {i : Œπ} (h : c.next i = none) :
  C.d_from i = 0 :=
begin
  dsimp [d_from],
  rw h, refl,
end

@[simp]
lemma d_to_comp_d_from (j : Œπ) : C.d_to j ‚â´ C.d_from j = 0 :=
begin
  rcases h‚ÇÅ : c.next j with _ | ‚ü®k,w‚ÇÅ‚ü©,
  { rw [d_from_eq_zero _ h‚ÇÅ], simp, },
  { rw [d_from_eq _ w‚ÇÅ],
    rcases h‚ÇÇ : c.prev j with _ | ‚ü®i,w‚ÇÇ‚ü©,
    { rw [d_to_eq_zero _ h‚ÇÇ], simp, },
    { rw [d_to_eq _ w‚ÇÇ], simp, } }
end

lemma kernel_from_eq_kernel [has_kernels V] {i j : Œπ} (r : c.rel i j) :
  kernel_subobject (C.d_from i) = kernel_subobject (C.d i j) :=
begin
  rw C.d_from_eq r,
  apply kernel_subobject_comp_mono,
end

lemma image_to_eq_image [has_images V] [has_equalizers V] [has_zero_object V]
  {i j : Œπ} (r : c.rel i j) :
  image_subobject (C.d_to j) = image_subobject (C.d i j) :=
begin
  rw C.d_to_eq r,
  apply image_subobject_iso_comp,
end

namespace hom

variables {C‚ÇÅ C‚ÇÇ : homological_complex V c}

/-- The commutative square
```
C‚ÇÅ.X i ---d---> C‚ÇÅ.X j
  |               |
f.f i           f.f j
  |               |
  v               v
C‚ÇÇ.X i ---d---> C‚ÇÇ.X j
```
-/
def sq (f : hom C‚ÇÅ C‚ÇÇ) (i j : Œπ) : arrow.mk (C‚ÇÅ.d i j) ‚ü∂ arrow.mk (C‚ÇÇ.d i j) :=
arrow.hom_mk (f.comm i j)

@[simp] lemma sq_left (f : hom C‚ÇÅ C‚ÇÇ) (i j : Œπ) : (f.sq i j).left = f.f i := rfl
@[simp] lemma sq_right (f : hom C‚ÇÅ C‚ÇÇ) (i j : Œπ) : (f.sq i j).right = f.f j := rfl

/--
The map induced on boundaries by a chain map.
-/
def image_map [has_images V] [has_image_maps V] (f : hom C‚ÇÅ C‚ÇÇ) (i j : Œπ) :
  image (C‚ÇÅ.d i j) ‚ü∂ image (C‚ÇÇ.d i j) :=
image.map (f.sq i j)

/-! Lemmas relating chain maps and `d_to`/`d_from`. -/

/-- `f.f_pred j` is `f.f i` if there is some `r i j`, and zero otherwise. -/
def f_pred (f : hom C‚ÇÅ C‚ÇÇ) (j : Œπ) : C‚ÇÅ.X_pred j ‚ü∂ C‚ÇÇ.X_pred j :=
match c.prev j with
| none := 0
| some ‚ü®i,w‚ü© := (C‚ÇÅ.X_pred_iso w).hom ‚â´ f.f i ‚â´ (C‚ÇÇ.X_pred_iso w).inv
end

lemma f_pred_eq (f : hom C‚ÇÅ C‚ÇÇ) {i j : Œπ} (w : c.rel i j) :
  f.f_pred j = (C‚ÇÅ.X_pred_iso w).hom ‚â´ f.f i ‚â´ (C‚ÇÇ.X_pred_iso w).inv :=
begin
  dsimp [f_pred],
  rw c.prev_eq_some w,
  refl,
end

/-- `f.f_succ i` is `f.f j` if there is some `r i j`, and zero otherwise. -/
def f_succ (f : hom C‚ÇÅ C‚ÇÇ) (i : Œπ) : C‚ÇÅ.X_succ i ‚ü∂ C‚ÇÇ.X_succ i :=
match c.next i with
| none := 0
| some ‚ü®j,w‚ü© := (C‚ÇÅ.X_succ_iso w).hom ‚â´ f.f j ‚â´ (C‚ÇÇ.X_succ_iso w).inv
end

lemma f_succ_eq (f : hom C‚ÇÅ C‚ÇÇ) {i j : Œπ} (w : c.rel i j) :
  f.f_succ i = (C‚ÇÅ.X_succ_iso w).hom ‚â´ f.f j ‚â´ (C‚ÇÇ.X_succ_iso w).inv :=
begin
  dsimp [f_succ],
  rw c.next_eq_some w,
  refl,
end

@[simp, reassoc, elementwise]
lemma comm_from (f : hom C‚ÇÅ C‚ÇÇ) (i : Œπ) :
  f.f i ‚â´ C‚ÇÇ.d_from i = C‚ÇÅ.d_from i ‚â´ f.f_succ i :=
begin
  rcases h : c.next i with _ | ‚ü®j,w‚ü©,
  { simp [h], },
  { simp [d_from_eq _ w, f_succ_eq _ w], }
end

@[simp, reassoc, elementwise]
lemma comm_to (f : hom C‚ÇÅ C‚ÇÇ) (j : Œπ) :
  f.f_pred j ‚â´ C‚ÇÇ.d_to j = C‚ÇÅ.d_to j ‚â´ f.f j :=
begin
  rcases h : c.prev j with _ | ‚ü®j,w‚ü©,
  { simp [h], },
  { simp [d_to_eq _ w, f_pred_eq _ w], }
end

def sq_to (f : hom C‚ÇÅ C‚ÇÇ) (j : Œπ) : arrow.mk (C‚ÇÅ.d_to j) ‚ü∂ arrow.mk (C‚ÇÇ.d_to j) :=
arrow.hom_mk (f.comm_to j)

@[simp] lemma sq_to_right (f : hom C‚ÇÅ C‚ÇÇ) (j : Œπ) : (f.sq_to j).right = f.f j := rfl

def image_map_to [has_images V] [has_image_maps V] (f : hom C‚ÇÅ C‚ÇÇ) (j : Œπ) :
  image (C‚ÇÅ.d_to j) ‚ü∂ image (C‚ÇÇ.d_to j) :=
image.map (f.sq_to j)

end hom

end homological_complex
