import measure_theory.integral.complex
import analysis.analytic.basic
import analysis.calculus.parametric_interval_integral
import data.complex.basic

open topological_space set measure_theory interval_integral metric filter function
open_locale interval real nnreal ennreal topological_space big_operators

noncomputable theory

universes u v

variables {E : Type u} [normed_group E] [normed_space ‚ÑÇ E] [measurable_space E] [borel_space E]
  [second_countable_topology E] [complete_space E]

namespace complex

lemma holo_test {R : ‚Ñù} {z w : ‚ÑÇ} (hw : w ‚àà ball z R)
  {f : ‚ÑÇ ‚Üí E} (hd : differentiable_on ‚ÑÇ f (closed_ball z R)) :

  f w  = (1/(2 ‚Ä¢ œÄ ‚Ä¢ I)) ‚Ä¢ ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ,
    ((R * exp (Œ∏ * I) * I) / (z + R * exp (Œ∏ * I) - w) : ‚ÑÇ) ‚Ä¢ f (z + R * exp (Œ∏ * I)) :=

begin
have := integral_circle_div_sub_of_differentiable_on hw hd,
simp only [this, one_div, nat.cast_bit0, real_smul, nsmul_eq_mul, nat.cast_one],
simp_rw ‚Üê smul_assoc,
simp,
simp_rw ‚Üê mul_assoc,
have hn : (2 * ‚ÜëœÄ * I) ‚â† 0, by {simp, simp [real.pi_ne_zero, complex.I_ne_zero],},
have tt := inv_mul_cancel hn,
simp_rw ‚Üê mul_assoc at tt,
rw tt,
simp,
end



def int_diff0 (R : ‚Ñù) (hR: 0 < R)  (f : ‚ÑÇ ‚Üí E) (z w : ‚ÑÇ): (‚Ñù ‚Üí E) :=
Œª Œ∏, (1/(2 ‚Ä¢ œÄ ‚Ä¢ I)) ‚Ä¢ ((R * exp (Œ∏ * I) * I) / (z + R * exp (Œ∏ * I) - w) : ‚ÑÇ) ‚Ä¢ f (z + R * exp (Œ∏ * I))

lemma int_diff0_cont (R : ‚Ñù) (hR: 0 < R)  (f : ‚ÑÇ ‚Üí E) (z w : ‚ÑÇ) (hf : continuous f) (hw : w ‚àà ball z R):
  continuous (int_diff0 R hR f z w) :=
begin
  rw int_diff0,
  simp,
  apply continuous.smul,
  exact continuous_const,
  apply continuous.smul,
  apply continuous.div,
  sorry,
sorry,
  {intro x,
    simp at hw,
    by_contradiction hc,
    simp_rw dist_eq_norm at hw,
    have hc' : (w : ‚ÑÇ)-z = R * exp (‚Üëx * I), by {rw sub_eq_zero at hc,
    rw ‚Üê hc, simp only [add_sub_cancel'],},
     simp_rw hc' at hw,
     simp at hw,
     rw abs_lt at hw,
     simp at hw,
     apply hw},
sorry,

end

def fbound (R : ‚Ñù) (hR: 0 < R)  (z : ‚ÑÇ) (Œ∏ : ‚Ñù): (‚ÑÇ ‚Üí ‚ÑÇ) :=
Œª w, (1/(2 ‚Ä¢ œÄ ‚Ä¢ I)) ‚Ä¢ ((R * exp (Œ∏ * I) * I) / (z + (2‚Åª¬π*R) * exp (Œ∏ * I) - w)^2 : ‚ÑÇ)

def fbound' (R : ‚Ñù) (hR: 0 < R)  (z : ‚ÑÇ): (‚ÑÇ √ó ‚Ñù ‚Üí ‚ÑÇ) :=
Œª w, (1/(2 ‚Ä¢ œÄ ‚Ä¢ I)) ‚Ä¢ ((R * exp (w.2 * I) * I) / (z + (R) * exp (w.2 * I) - w.1)^2 : ‚ÑÇ)


lemma fbounded'  (R : ‚Ñù) (hR: 0 < R)  (z : ‚ÑÇ) (Œ∏ : ‚Ñù) :
 ‚àÉ (x : (closed_ball z R).prod (interval 0 (2*œÄ))) , ‚àÄ  (y : (closed_ball z R).prod (interval 0 (2*œÄ))),
 complex.abs (fbound' R hR z  y) ‚â§ complex.abs(fbound' R hR z  x):=
 begin
 have cts: continuous_on  (complex.abs ‚àò (fbound' R hR z ))  ((closed_ball z R).prod (interval 0 (2*œÄ))),
 by {simp_rw fbound',
 have c1:= continuous_abs, have c2: continuous_on abs ‚ä§, by {apply continuous.continuous_on c1},
  apply continuous_on.comp c2,
   apply continuous_on.smul,
   apply continuous_const.continuous_on,
    apply continuous_on.div,

 sorry,
 apply continuous_on.pow,
 apply continuous_on.sub,
 apply continuous_on.add,
 apply continuous_const.continuous_on,
 apply continuous_on.mul,
 apply continuous_const.continuous_on,
 apply continuous_on.cexp,
 apply continuous_on.mul,
 apply continuous.continuous_on,
 rw metric.continuous_iff,
 intros b Œµ hŒµ,
 use Œµ,

 simp [hŒµ],
 intros a b1 hab1,


 },

 end


lemma fbounded  (R : ‚Ñù) (hR: 0 < R)  (z : ‚ÑÇ) (Œ∏ : ‚Ñù) :
 ‚àÉ (x : closed_ball z R), ‚àÄ (y : closed_ball z R),
 complex.abs (fbound R hR z Œ∏ y) ‚â§ complex.abs(fbound R hR z Œ∏ x):=

begin
have cts: continuous_on  (complex.abs ‚àò (fbound R hR z Œ∏))  ( closed_ball z R ), by {
have c1:= continuous_abs, have c2: continuous_on abs ‚ä§, by {apply continuous.continuous_on c1},
  apply continuous_on.comp c2,
  simp_rw fbound,
  apply continuous_on.smul,
  apply continuous_const.continuous_on,
  apply continuous_on.div,
  apply continuous_const.continuous_on,
  sorry,
  sorry, simp,},
have int: is_compact (closed_ball z R), by {exact proper_space.is_compact_closed_ball z R, },
have inne:  ((closed_ball z R)).nonempty, by {simp, apply hR.le},
have:= is_compact.exists_forall_ge int inne cts,
simp at *,
apply this,
end

def int_diff0' (R : ‚Ñù) (hR: 0 < R)  (f : ‚ÑÇ ‚Üí E) (z w : ‚ÑÇ): (‚Ñù ‚Üí E) :=
Œª Œ∏, (1/(2 ‚Ä¢ œÄ ‚Ä¢ I)) ‚Ä¢ ((R * exp (Œ∏ * I) * I) / (z + R * exp (Œ∏ * I) - w)^2 : ‚ÑÇ) ‚Ä¢ f (z + R * exp (Œ∏ * I))



lemma int_diff0_cont' (R : ‚Ñù) (hR: 0 < R)  (f : ‚ÑÇ ‚Üí E) (z w : ‚ÑÇ) (hf : continuous f) (hw : w ‚àà ball z R):
  continuous (int_diff0' R hR f z w) :=
  begin
    sorry,
  end

def int_diff (R : ‚Ñù) (hR: 0 < R)  (f : ‚ÑÇ ‚Üí E) (z : ‚ÑÇ)
   : (‚ÑÇ ‚Üí E) := Œª w,  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, (int_diff0 R hR f z w Œ∏)

def int_diff' (R : ‚Ñù) (hR: 0 < R)  (f : ‚ÑÇ ‚Üí E) (z : ‚ÑÇ)
   : (‚ÑÇ ‚Üí E) := Œª w,  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, (int_diff0' R hR f z w Œ∏)

def der1 (R : ‚Ñù)  (hR: 0 < R) (z : ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) :
 ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ := Œª w, (Œª Œ∏, (int_diff0' R hR f z w Œ∏))

lemma auxle (r : ‚Ñù) (hr : 0 ‚â§  r) : r ‚â§ 2*r :=
begin
linarith,
end

lemma der1bound (R : ‚Ñù)  (hR: 0 < R) (z : ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (x : ‚ÑÇ) (hx : x ‚àà ball z R): ‚àÉ (boun : ‚Ñù ‚Üí ‚Ñù),
 ‚àÄ·µê t ‚àÇvolume, t ‚àà Œô 0 (2 * œÄ) ‚Üí ‚àÄ y ‚àà ball x R, ‚à•der1 R hR z f y t‚à• ‚â§  boun t :=
 begin
 have h2R: 0 < 2*R, by {linarith,},
have fbb := fbounded (2*R) h2R z,
set diskel: ‚Ñù ‚Üí (closed_ball z (2*R)):= Œª r, classical.some (fbb r),
set bound : ‚Ñù ‚Üí ‚Ñù := Œª r, (complex.abs ( fbound (2*R) h2R z r (diskel r)))*complex.abs (f(z+R*exp(r*I))) ,
use bound,
simp,
 rw filter.eventually_iff_exists_mem,
 use ‚ä§,
 simp,
 intros y hy v hv,
 simp_rw bound,
 simp_rw der1,
 simp_rw int_diff0',
 simp at *,
 have vf:= classical.some_spec (fbb y),
 have vfv := vf ‚ü®v, by {simp, have := dist_triangle v x z, have lad:= (add_lt_add hv hx).le,
 have lad2:= le_trans this lad, simp_rw two_mul, apply lad2,}‚ü©,
 simp_rw diskel,
 simp_rw fbound at *,
simp at *,
have abp : 0 ‚â§ complex.abs (f(z+R*exp(y*I))), by {apply abs_nonneg},
have := mul_le_mul_of_nonneg_right vfv abp,
simp at this,
simp_rw ‚Üê mul_assoc,
have LE: (2 * |œÄ|)‚Åª¬π * (|R| / abs (z + ‚ÜëR * exp (‚Üëy * I) - v) ^ 2) * abs (f (z + ‚ÜëR * exp (‚Üëy * I)))
‚â§ (2 * |œÄ|)‚Åª¬π * (2*|R| / abs (z + ‚ÜëR * exp (‚Üëy * I) - v) ^ 2) * abs (f (z + ‚ÜëR * exp (‚Üëy * I))),
by {
have e1: (2 * |œÄ|)‚Åª¬π * (2*|R| / abs (z + ‚ÜëR * exp (‚Üëy * I) - v) ^ 2) * abs (f (z + ‚ÜëR * exp (‚Üëy * I)))
  = 2*((2 * |œÄ|)‚Åª¬π * (|R| / abs (z + ‚ÜëR * exp (‚Üëy * I) - v) ^ 2) * abs (f (z + ‚ÜëR * exp (‚Üëy * I)))),
by {field_simp,  simp_rw ‚Üê mul_assoc, },
simp_rw e1,
apply auxle,
apply mul_nonneg,
apply mul_nonneg,
simp,
apply _root_.abs_nonneg,
apply div_nonneg,
apply _root_.abs_nonneg,
apply pow_two_nonneg,
apply abs_nonneg,},
apply le_trans LE this,
 end


lemma int_diff_has_fdrevi (R : ‚Ñù)  (hR: 0 < R) (z : ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ)  (hf: continuous f) :
  differentiable_on ‚ÑÇ (int_diff R hR f z) (ball z R) :=
begin
rw int_diff,
simp_rw int_diff0,
rw differentiable_on,
simp_rw differentiable_within_at,
intros x hx,
set F: ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ  := Œª w, (Œª Œ∏, (int_diff0 R hR f z w Œ∏)),
set F': ‚ÑÇ ‚Üí ‚Ñù ‚Üí ‚ÑÇ := der1 R hR z f,
have hF_meas : ‚àÄ·∂† y in ùìù x, ae_measurable (F y) (volume.restrict (Œô 0 (2 * œÄ))) ,
by {simp_rw F,  rw filter.eventually_iff_exists_mem,
    have BALL:= exists_ball_subset_ball hx,
    obtain ‚ü®Œµ', He, HB‚ü© := BALL,
    use (ball x Œµ'),
    have hm:= metric.ball_mem_nhds x He,
    simp [hm],
    intros y hy,
    have := continuous.ae_measurable (int_diff0_cont R hR f z y hf _),
    apply ae_measurable.restrict,
    apply this,
    apply HB,
    simp [hy],},
have hF_int : interval_integrable (F x) volume 0  (2 * œÄ),
by {simp_rw F,
  have := continuous.interval_integrable (int_diff0_cont R hR f z x hf hx) 0 (2*œÄ),
  apply this,
  apply_instance,},
have  hF'_meas : ae_measurable (F' x) (volume.restrict (Œô 0 (2 * œÄ))) , by {
  simp_rw F',
    have := continuous.ae_measurable (int_diff0_cont' R hR f z x hf _),
    apply ae_measurable.restrict,
    apply this,
    apply hx,},
have hF_int : interval_integrable (F x) volume 0  (2 * œÄ),
by {simp_rw F,
  have := continuous.interval_integrable (int_diff0_cont R hR f z x hf hx) 0 (2*œÄ),
  apply this,
  apply_instance,},
  have BOU := der1bound R hR z f x hx,
  obtain ‚ü®bound, h_boun‚ü©:= BOU,
have h_bound : ‚àÄ·µê t ‚àÇvolume, t ‚àà Œô 0 (2 * œÄ) ‚Üí ‚àÄ y ‚àà ball x R, ‚à•F' y t‚à• ‚â§  bound t,
by {
  simp_rw F',
  apply h_boun,
},
have  bound_integrable : interval_integrable bound volume 0 (2 * œÄ) , by {sorry},
have h_diff : ‚àÄ·µê t ‚àÇvolume, t ‚àà Œô 0 (2 * œÄ) ‚Üí ‚àÄ y ‚àà ball x R, has_deriv_at (Œª y, F y t) (F' y t) y,
by {

  sorry},
have := interval_integral.has_deriv_at_integral_of_dominated_loc_of_deriv_le hR hF_meas hF_int hF'_meas
  h_bound bound_integrable h_diff,
simp_rw F at this,
simp_rw int_diff0 at this,
simp_rw has_deriv_at at this,
simp_rw has_deriv_at_filter at this,
simp_rw has_fderiv_within_at,
simp at *,
have h3:= this.2,
let der := (interval_integral (F' x) 0 (2 * œÄ) volume),
let DER := continuous_linear_map.smul_right (1 : ‚ÑÇ ‚ÜíL[‚ÑÇ] ‚ÑÇ) der,
use DER,
simp_rw [DER, der],
have this2:= (has_fderiv_at_filter.mono h3),
apply this2,
rw nhds_within,
simp [inf_le_left],
end

lemma int_diff0_sub  (R : ‚Ñù) (hR: 0 < R)  (f g : ‚ÑÇ ‚Üí ‚ÑÇ) (z w : ‚ÑÇ) : ‚àÄ Œ∏ : ‚Ñù,
   complex.abs (((int_diff0 R hR f z w ) Œ∏)-((int_diff0 R hR g z w) Œ∏)) =
   complex.abs (int_diff0 R hR (f -g) z w Œ∏) :=
begin
  intro Œ∏,
simp_rw int_diff0,
simp only [one_div, nat.cast_bit0, real_smul, nsmul_eq_mul, nat.cast_one, pi.sub_apply],
simp,
simp_rw ‚Üê mul_assoc,
ring_nf,
simp_rw [abs_mul],
simp,
end

lemma int_diff0_sub_bound  (R : ‚Ñù) (hR: 0 < R)  (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z w : ‚ÑÇ) (r : ‚Ñù)
    (h:  ‚àÄ (x : ‚ÑÇ), (complex.abs (f x) ‚â§ abs r)) : ‚àÄ Œ∏ : ‚Ñù,
    complex.abs (int_diff0 R hR f z w Œ∏) ‚â§ complex.abs (int_diff0 R hR (Œª x, r) z w Œ∏) :=
begin
intro Œ∏,
simp_rw int_diff0,
simp,
simp_rw ‚Üê mul_assoc,

sorry,
end


lemma int_diff0_int (R : ‚Ñù) (hR: 0 < R) (F : ‚ÑÇ ‚Üí ‚ÑÇ) (F_cts :  continuous (F ))
  (z : ‚ÑÇ) (w : ball z R): integrable (int_diff0 R hR (F) z w) (volume.restrict (Ioc 0  (2*œÄ))) :=

begin
apply integrable_on.integrable,
rw ‚Üê  interval_integrable_iff_integrable_Ioc_of_le,
apply continuous_on.interval_integrable,
have hw:= w.property,
simp at hw,
have := int_diff0_cont R hR F z w F_cts,
simp at this,
have hc:= this hw,
apply continuous.continuous_on,
apply hc,
simp,
linarith [real.pi_pos],
end

lemma abs_aux (x : ‚ÑÇ) (r : ‚Ñù) (h : ‚àÉ (b : ‚ÑÇ), complex.abs (x-b)+ complex.abs(b) ‚â§  r) :
  complex.abs(x) ‚â§  r :=
begin
obtain ‚ü®b, hb‚ü© := h,
have hs: (x -b) + b = x , by {simp,},
rw ‚Üê hs,
apply le_trans _ hb,
exact (x - b).abs_add b,
end

lemma auxfind (x y z: ‚ÑÇ) (h : complex.abs x ‚â§ complex.abs y):
  (complex.abs x) ‚â§   (complex.abs z) + (complex.abs y) :=

begin
have := le_add_of_le_of_nonpos h (abs_nonneg z),
rw add_comm,
apply this,
end

lemma u1 (R : ‚Ñù) (hR: 0 < R) (F : ‚Ñï ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ)  (F_cts : ‚àÄ n, continuous (F n))
   (hlim : tendsto_uniformly F f filter.at_top) (z : ‚ÑÇ) (w : ball z R) :
    ‚àÄ (a : ‚Ñù), tendsto (Œª n, ((int_diff0 R hR (F n) z w)) a)
  at_top (ùìù (((int_diff0 R hR f z w)) a)) :=
begin
rw metric.tendsto_uniformly_iff at hlim, simp_rw metric.tendsto_nhds, simp_rw  dist_comm,
  simp_rw int_diff0,
  simp at *,
  intros y Œµ hŒµ,
  set r : ‚ÑÇ :=  ((2 * (‚ÜëœÄ * I))‚Åª¬π * (‚ÜëR * exp (‚Üëy * I) * I / (z + ‚ÜëR * exp (‚Üëy * I) - ‚Üëw))),
  have hr: 0 < ‚à• r ‚à•, by {simp, rw div_eq_inv_mul,
    apply mul_pos, rw inv_eq_one_div, rw one_div_pos,
    apply mul_pos, linarith, simp, apply real.pi_ne_zero,
    apply mul_pos,
    rw inv_pos,
    rw abs_pos,
    have hw:=w.property,
    simp at hw,
    by_contradiction hc,
    simp_rw dist_eq_norm at hw,
    have hc' : (w : ‚ÑÇ)-z = R * exp (‚Üëy * I), by {rw sub_eq_zero at hc,
    rw ‚Üê hc, simp only [add_sub_cancel'],},
     simp_rw hc' at hw,
     simp at hw,
     rw abs_lt at hw,
     simp at hw,
     apply hw,
     simp,
     by_contradiction hrr,
     rw hrr at hR,
     simp at hR,
     apply hR,},
  have hr':  ‚à• r ‚à• ‚â† 0, by {linarith,},
  let e:= (‚à• r ‚à•)‚Åª¬π * (Œµ/2),
  have he: 0 < e, by {simp_rw e, apply mul_pos,
  apply inv_pos.2 hr, apply div_pos, apply hŒµ, linarith,},
  have h_lim2:= hlim e he,
  obtain ‚ü®a, ha‚ü© := h_lim2,
  use a,
  intros b hb,
  simp [ha b hb],
  simp_rw dist_eq_norm at *,
  simp_rw ‚Üê mul_sub,
  have hg: ‚à•(2 * (‚ÜëœÄ * I))‚Åª¬π * (‚ÜëR * exp (‚Üëy * I) * I / (z + ‚ÜëR * exp (‚Üëy * I) - ‚Üëw) *
    (f (z + ‚ÜëR * exp (‚Üëy * I)) - F b (z + ‚ÜëR * exp (‚Üëy * I))))‚à• =
    ‚à•(2 * (‚ÜëœÄ * I))‚Åª¬π * (‚ÜëR * exp (‚Üëy * I) * I / (z + ‚ÜëR * exp (‚Üëy * I) - ‚Üëw)) ‚à• *
    ‚à• (f (z + ‚ÜëR * exp (‚Üëy * I)) - F b (z + ‚ÜëR * exp (‚Üëy * I)))‚à•, by {simp, ring,},
    rw hg,
    simp_rw ‚Üê r,
    have haa:= ha b hb,
    have hab:= haa (z + ‚ÜëR * exp (‚Üëy * I)),
    have haav: ‚à• r ‚à• * ‚à•f (z + ‚ÜëR * exp (‚Üëy * I)) - F b (z + ‚ÜëR * exp (‚Üëy * I))‚à• < ‚à• r ‚à• * e,
    by {apply mul_lt_mul_of_pos_left hab hr,},
    simp_rw e at haav,
    apply lt_trans haav,
    rw div_eq_inv_mul,
    simp_rw ‚Üê mul_assoc,
    simp_rw [mul_inv_cancel hr'],
    simp,
    rw  mul_lt_iff_lt_one_left,
    rw inv_eq_one_div,
    linarith,
    apply hŒµ,
end

lemma sum_ite_eq_extract {Œ± : Type*} [decidable_eq Œ±] (s : finset Œ±) (b : s) (f : s ‚Üí ‚ÑÇ) :
  ‚àë n, f n = f b + ‚àë n, ite (n = b) 0 (f n) :=
begin

simp_rw ‚Üê tsum_fintype,
apply tsum_ite_eq_extract,
simp at *,
have := (has_sum_fintype f).summable,
apply this,
end

lemma add_nonneg_add_iff (a b : ‚Ñù) : a ‚â§ a +b ‚Üî 0 ‚â§ b :=
begin
simp only [le_add_iff_nonneg_right],
end


lemma UNIF_CONV_INT (R : ‚Ñù) (hR: 0 < R) (F : ‚Ñï ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ)  (F_cts : ‚àÄ n, continuous (F n))
   (hlim : tendsto_uniformly F f filter.at_top) (z : ‚ÑÇ) (w : ball z R) :
tendsto (Œªn, ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, (int_diff0 R hR (F n) z w) Œ∏)
  at_top (ùìù $  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, (int_diff0 R hR f z w) Œ∏) :=

begin
have f_cont: continuous f, by {sorry,},

have F_measurable : ‚àÄ n, ae_measurable (int_diff0 R hR (F n) z w) (volume.restrict (Ioc 0  (2*œÄ))),
 by {intro n,
     have:= int_diff0_int R hR (F n) (F_cts n) z w,
     apply this.ae_measurable, },


have h_lim'' : ‚àÄ (a : ‚Ñù), tendsto (Œª n, ((int_diff0 R hR (F n) z w)) a)
  at_top (ùìù (((int_diff0 R hR f z w)) a)),
 by {apply u1 R hR F f F_cts hlim},

have h_lim' : ‚àÄ·µê a ‚àÇ(volume.restrict (Ioc 0  (2*œÄ))), tendsto (Œª n, ((int_diff0 R hR (F n) z w)) a)
  at_top (ùìù (((int_diff0 R hR f z w)) a)),
  by {simp [h_lim''],},
rw metric.tendsto_uniformly_iff at hlim,
simp only [gt_iff_lt, ge_iff_le, eventually_at_top] at hlim,
have hlimb:= hlim 1 (zero_lt_one),
obtain ‚ü® a, ha‚ü© :=hlimb,
set bound: ‚Ñù ‚Üí ‚Ñù :=Œª Œ∏, (‚àë (i : finset.range (a+1) ),complex.abs ((int_diff0 R hR (F i) z w) Œ∏))  +
complex.abs ((int_diff0 R hR (Œª x, 1) z w) Œ∏)  + complex.abs ((int_diff0 R hR f z w) Œ∏),

have h_bound : ‚àÄ n, ‚àÄ·µê a ‚àÇ(volume.restrict (Ioc 0  (2*œÄ))), ‚à•(int_diff0 R hR (F n) z w) a‚à• ‚â§ bound a,
by {
  intro n,
  rw  ae_restrict_iff' at *,
  rw eventually_iff_exists_mem,
  use ‚ä§,
  simp only [true_and, and_imp, mem_Ioc, top_eq_univ, univ_mem, mem_univ, forall_true_left, norm_eq_abs],
  intros y hyl hyu,
  by_cases (n ‚â§ a),
  simp_rw bound,
  have:= sum_ite_eq_extract (finset.range (a+1)) ‚ü®n, by {simp [h],linarith}‚ü©
    (Œª (i : finset.range (a+1) ),complex.abs ((int_diff0 R hR (F i) z w) y)),
    simp at *,
    norm_cast at *,
    simp_rw this,
    rw add_assoc,
    rw add_assoc,
    simp only [le_add_iff_nonneg_right],
    apply add_nonneg,
    apply finset.sum_nonneg,
    intros i hi,
    simp only,
    rw ‚Üê dite_eq_ite,
    by_cases H : i =  ‚ü®n, by {simp only [finset.mem_range],linarith}‚ü©,
    simp only [H, dite_eq_ite, if_true, eq_self_iff_true],
    simp only [dif_neg H],
    apply abs_nonneg,
    simp only [add_nonneg, abs_nonneg],

  simp only [not_le] at h,
  apply abs_aux ((int_diff0 R hR (F n) z w) y) (bound y),
  use int_diff0 R hR f z ‚Üëw y,
  rw int_diff0_sub,
  simp_rw bound,
  simp only [add_le_add_iff_right, finset.univ_eq_attach],
  have := int_diff0_sub_bound R hR ((F n) - f) z w 1,
  have haan:= ha n h.le,
  simp only [of_real_one, abs_one, pi.sub_apply] at this,
  simp_rw dist_eq_norm at *,
  simp only [norm_eq_abs] at haan,
  have haf:  ‚àÄ (x : ‚ÑÇ), abs (F n x - f x) ‚â§  1, by {intro x, rw abs_sub_comm, apply (haan x).le,},
  have h5:= this haf,
  have h6:= h5 y,
  refine le_add_of_nonneg_of_le _ h6,
  apply finset.sum_nonneg,
  intros i hi,
  apply abs_nonneg,
  all_goals {simp only [measurable_set_Ioc]},},


have bound_integrable : integrable bound (volume.restrict (Ioc 0  (2*œÄ))), by {sorry,},
have := tendsto_integral_of_dominated_convergence bound F_measurable bound_integrable h_bound h_lim',
have pi: 0 ‚â§ 2*œÄ , by {sorry},
simp_rw  integral_of_le pi,
apply this,
end

lemma unif_of_diff_is_diff (F : ‚Ñï ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) (R : ‚Ñù)  (hR: 0 < R)
  (hdiff : ‚àÄ (n : ‚Ñï), differentiable_on ‚ÑÇ (F n) (closed_ball z R))
  (hlim : tendsto_uniformly F f filter.at_top) :
  differentiable_on ‚ÑÇ f (ball z R) :=
begin
have F_measurable : ‚àÄ n, integrable (F n) volume, by {sorry,},
have F_cts : ‚àÄ n, continuous (F n) , by {sorry,},
rw differentiable_on,
intros x hx,
have key:= UNIF_CONV_INT R hR F f F_cts hlim z ‚ü®x, hx‚ü©,
--have key := int_diff_of_uniform' F f z x R hR hlim,
rw differentiable_within_at,
have h0:= int_diff R hR f z,
--have h1:= holo_test hx (hdiff _),
have hf: continuous f, by {sorry,},
have HF:= int_diff_has_fdrevi R hR x f hf,
rw differentiable_on at HF,
have HF2:= HF x,
simp [hx, hR] at HF2,
rw differentiable_within_at at HF2,
obtain ‚ü®D, hD‚ü©:= HF2,
use D,
simp_rw has_fderiv_within_at_iff_tendsto at *,
rw metric.tendsto_nhds at *,
rw tendsto_uniformly_iff at hlim,
simp_rw dist_eq_norm at *,
intros Œµ hŒµ,
have hlim2:= hlim Œµ hŒµ,
simp at *,
obtain ‚ü®a, ha‚ü© := hlim2,
have HH: ‚àÄ (y : ‚ÑÇ), f y - f x - (D y - D x) =
(f y - F a y) - ((f x)- (F a x)) + ((F a y)- (F a x))  - (D y - D x), by {sorry,},
simp_rw HH,
rw int_diff at hD,
simp at hD,
sorry,
end

end complex
