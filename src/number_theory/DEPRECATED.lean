--import topology.algebra.module
--import analysis.normed_space.finite_dimension
--import order.filter.basic

--open function
--open filter


/- Note:  hopefully all useful material has now been extracted from this file, so it can be
disregarded. -/

-- section
-- variables (k U V W: Type*)  [field k] [topological_space k]
-- [topological_space U] [topological_space V] [topological_space W]
--  [add_comm_group U] [add_comm_group V]
-- [add_comm_group W] [module k U] [module k V] [module k W]
-- [has_continuous_add U]
-- [has_continuous_add V]
-- [has_continuous_add W]
--  [has_continuous_smul k U]
-- (f : continuous_linear_map k U V) (g : continuous_linear_map k U W)


-- -- make this a general linear algebra theorem, no topology
-- theorem thm3 {A B C : Type*} (f : A ‚Üí B) (g : A ‚Üí C ) (p : C ) (h : injective (Œª x, (f x, g x))) :
-- injective (f ‚àò (coe: (g ‚Åª¬π' {p}) ‚Üí A ))
-- :=
-- begin
--   intros x y hf,
--   simp at hf,
--   have x2 := x.2,
--   have : g x = g y,
--   {
--     have := set.mem_preimage.mp (subtype.mem x),
--     have gxp := set.eq_of_mem_singleton this,
--     have := set.mem_preimage.mp (subtype.mem y),
--     have gyp := set.eq_of_mem_singleton this,
--     simp [gxp, gyp],
--   },
--   have : (f x, g x ) = (f y , g y),
--   {
--     simp [hf, this],
--   },
--   have := h this,
--   exact subtype.ext (h (congr_arg (Œª (x : A), (f x, g x)) this)),
-- end


-- --make this a general linear algebra theorem, no topology
-- def thm5 {A B C : Type*}
-- (F : equiv A (B√óC)) (p : C ):
-- equiv ((prod.snd ‚àò F) ‚Åª¬π' {p}) B :=  --(F.fst ‚àò (coe: ((snd‚àò F) ‚Åª¬π' {p}) ‚Üí A ))
-- { to_fun :=  Œª x, prod.fst (F x),
--   inv_fun :=  Œª b,  ‚ü® F.symm (b, p), by simp‚ü©,
--   left_inv := _,
--   right_inv := _ }


-- -- make this a general linear algebra theorem, no topology
-- def thm4 {A B C : Type*} [topological_space A] [topological_space B] [topological_space C]
-- (F : homeomorph A (B√óC)) (p : C ):
-- homeomorph ((prod.snd ‚àò F) ‚Åª¬π' {p}) B :=  --(F.fst ‚àò (coe: ((snd‚àò F) ‚Åª¬π' {p}) ‚Üí A ))
-- { to_fun :=  Œª x, prod.fst (F x) ,
--   inv_fun := Œª b,  ‚ü® F.symm (b, p), by simp‚ü© ,
--   left_inv :=
--   begin
--     rw left_inverse,
--     intros x,
--     have x1 := x.1,
--     have x2 := x.2,
--     have := F.left_inv x,

--   end,
--   right_inv := _,
--   continuous_to_fun := _,
--   continuous_inv_fun := _ }


-- theorem thm2 (p : W) (h‚ÇÅ : injective (continuous_linear_map.prod f g))
-- (h‚ÇÇ : is_open_map (f‚àò(coe : (g ‚Åª¬π' {p}) ‚Üí U))) :
-- open_embedding (f‚àò(coe : (g ‚Åª¬π' {p}) ‚Üí U)) :=
-- begin
--   apply open_embedding_of_continuous_injective_open,
--   -- (continuous_linear_map.continuous f),
--   exact continuous.comp (continuous_linear_map.continuous f) continuous_subtype_coe,
--   --have:= injective.comp,
--   exact thm3 f g p h‚ÇÅ,
--   exact h‚ÇÇ,
-- end

-- -- Heather homework
-- theorem thm1 (p : W) (h‚ÇÅ : embedding (continuous_linear_map.prod f g))
-- (h‚ÇÇ : is_open_map (f‚àò(coe : (g ‚Åª¬π' {p}) ‚Üí U))) :
-- tendsto (f‚àò(coe : (g ‚Åª¬π' {p}) ‚Üí U)) (cocompact _) (cocompact _) :=
-- begin
--   sorry,
-- end



-- theorem thm0 {ùïú : Type*} [nondiscrete_normed_field ùïú] {E : Type*} [normed_group E]
-- [normed_space ùïú E] [complete_space ùïú] [finite_dimensional ùïú E]
-- {F : Type*} [normed_group F]
-- [normed_space ùïú F] [finite_dimensional ùïú F]
-- (f : linear_map ùïú E F) (h: surjective f)
--  :
-- is_open_map f :=
-- begin
--   have f_cont := linear_map.continuous_of_finite_dimensional f,

--   sorry,
-- end

--end



-- ********* HM new idea!!!



-- -- Natural bijection from the fibre over `p : C`, in a product type `B √ó C`, to `B`.
-- def fibre_embed {B C : Type*} (p : C) :
--   equiv (prod.snd ‚Åª¬π' {p} : set (B √ó C)) B :=
-- { to_fun := prod.fst ‚àò (coe : _ ‚Üí B √ó C),
--   inv_fun := _,
--   left_inv := _,
--   right_inv := _ }

-- -- Natural homeomorphism from the fibre over `p : C`, in a product space `B √ó C`, to `B`.
-- def fibre_embed_homeomorph {B C : Type*} [topological_space B] [topological_space C] (p : C) :
--   homeomorph (prod.snd ‚Åª¬π' {p} : set (B √ó C)) B :=
-- { continuous_to_fun := _,
--   continuous_inv_fun := _,
--   .. fibre_embed p }


-- /-- If the composition of a continuous function `f` with a closed embedding `g` is a closed
-- embedding, then `f` is a closed embedding -/
-- -- for `topology.maps`
-- lemma closed_embedding_of_closed_embedding_compose {A X Y : Type*} [topological_space A]
--   [topological_space X] [topological_space Y]
--   {f : A ‚Üí X} {g : X ‚Üí Y} (hf : continuous f) (hg : closed_embedding g)
--   (hfg : closed_embedding (g ‚àò f)) :
--   closed_embedding f :=
-- begin
--   refine ‚ü®embedding_of_embedding_compose hf hg.continuous hfg.to_embedding, _‚ü©,
--   simpa [hg.closed_iff_image_closed, set.range_comp g f] using hfg.closed_range
-- end

-- /-- Given a closed embedding, the codomain-restriction to any closed subset is also a closed
-- embedding -/
-- -- for `topology.constructions`
-- lemma closed_embedding.cod_restrict {B X : Type*} [topological_space B]
--   [topological_space X]
--   {F : B ‚Üí X} (hF : closed_embedding F) {s : set X} (hs : is_closed s) (hgs : ‚àÄ x, F x ‚àà s) :
--   closed_embedding (set.cod_restrict F s hgs) :=
-- begin
--   refine closed_embedding_of_closed_embedding_compose _ (closed_embedding_subtype_coe hs) hF,
--   exact continuous_subtype_mk _ hF.continuous
-- end

-- variables {k U V : Type*} [nondiscrete_normed_field k] [complete_space k]
--   [normed_group U] [normed_group V] [normed_space k U] [normed_space k V]
--   {f : linear_map k U V}

-- -- for `analysis.normed_space.finite_dimension`
-- /-- An injective linear map with finite-dimensional domain is a closed embedding. -/
-- lemma linear_equiv.closed_embedding_of_injective (hf : f.ker = ‚ä•) [finite_dimensional k U] :
--   closed_embedding ‚áëf :=
-- let g := linear_equiv.of_injective f hf in
-- { closed_range := begin
--     haveI := f.finite_dimensional_range,
--     simpa [f.range_coe] using f.range.closed_of_finite_dimensional
--   end,
--   .. embedding_subtype_coe.comp g.to_continuous_linear_equiv.to_homeomorph.embedding }

-- variables {W : Type*} [normed_group W] [normed_space k W] {g : linear_map k U W}

-- /-- Here's how to do the big theorem, although this is a bit too specific to actually join the library -/
-- theorem big_thm [finite_dimensional k U] (p : W) (h‚ÇÅ : (f.prod g).ker = ‚ä•) :
--   tendsto (f ‚àò (coe : (g ‚Åª¬π' {p}) ‚Üí U)) (cocompact _) (cocompact _) :=
-- begin
--   let hf := linear_equiv.closed_embedding_of_injective h‚ÇÅ,
--   let hs : is_closed (prod.snd ‚Åª¬π' {p} : set (V √ó W)) := is_closed_singleton.preimage continuous_snd,
--   have := (hf.comp (closed_embedding_subtype_coe (hs.preimage hf.continuous))).cod_restrict hs (by simp),
--   exact ((fibre_embed_homeomorph p).closed_embedding.comp this).tendsto_cocompact,
-- end


-- @[simp]
-- lemma coeff_coe {g : SL(2,‚Ñ§)} {i j : fin 2} : (g : SL(2,‚Ñù)).val i j = ((g.val i j) : ‚Ñù) := by refl

-- @[simp]
-- lemma coeff_coe' {g : SL(2,‚Ñ§)} {i j : fin 2} : (g : SL(2,‚Ñù)) i j = ((g i j) : ‚Ñù) := by refl

-- lemma div_eq_mul_conj_div_norm_sq {z w : ‚ÑÇ} : z / w = (z * (w.conj)) / complex.norm_sq w :=
-- begin
--   rw [div_eq_mul_inv, inv_def, div_eq_mul_inv, mul_assoc],
--   norm_num,
-- end


-- @[simp]
-- lemma mul_congr { x y : SL(2,‚Ñ§)} : x * y = 1 ‚Üî x.1 * y.1 = 1 := by simp




-- lemma e14 : at_top ‚â§ cocompact ‚Ñù :=
-- begin
--   intros s hs,
--   simp only [mem_at_top_sets],
--   simp only [mem_cocompact] at hs,
--   obtain ‚ü®t, ht, hts‚ü© := hs,
--   obtain ‚ü®r, hr‚ü© := e7 ht.bounded,
--   use r + 1,
--   intros b hb,
--   apply hts,
--   intros hb',
--   have := hr _ hb',
--   simp only [real.norm_eq_abs, abs_le] at this,
--   linarith
-- end

-- lemma e16 {E : Type*} [normed_group E] [normed_space ‚Ñù E] [proper_space E] [nontrivial E] (s : set ‚Ñù) :
--   norm ‚Åª¬π' s ‚àà cocompact E ‚Üî s ‚àà (at_top : filter ‚Ñù) :=
-- begin
--   rw [mem_at_top_sets, mem_cocompact],
--   split,
--   { rintros ‚ü®t, ht, hts‚ü©,
--     obtain ‚ü®r, hr‚ü© := e7 ht.bounded,
--     use r + 1,
--     intros b hb,
--     obtain ‚ü®x, hx‚ü© : ‚àÉ x : E, x ‚â† 0 := exists_ne 0,
--     have h_norm : ‚à•b ‚Ä¢ (‚à•x‚à•)‚Åª¬π ‚Ä¢ x‚à• = b := sorry,
--     have : b ‚Ä¢ (‚à•x‚à•)‚Åª¬π ‚Ä¢ x ‚àà t·∂ú,
--     { have := mt (hr (b ‚Ä¢ (‚à•x‚à•)‚Åª¬π ‚Ä¢ x)),
--       apply this,
--       linarith },
--     simpa [h_norm] using hts this },
--   { rintros ‚ü®r, hr‚ü©,
--     refine ‚ü®metric.closed_ball 0 r, proper_space.compact_ball 0 r, _‚ü©,
--     intros x hx,
--     simp at hx,
--     exact hr (‚à•x‚à•) hx.le },
-- end

-- lemma e17 {E : Type*} [normed_group E] [normed_space ‚Ñù E] [proper_space E] [nontrivial E] :
--   map norm (cocompact E) = (at_top : filter ‚Ñù) :=
-- begin
--   ext s,
--   exact e16 s
-- end

-- lemma e15 {Œ± : Type*} {E : Type*} [normed_group E] [normed_space ‚Ñù E] [proper_space E] [nontrivial E] (l : filter Œ±) {f : Œ± ‚Üí E} :
--   tendsto f l (cocompact E) ‚Üî tendsto (norm ‚àò f) l at_top :=
-- begin
--   split,
--   { exact tendsto_norm_cocompact_at_top.comp },
--   sorry
-- end


-- lemma finite_integers {M : ‚Ñù} :
--   set.finite {c : ‚Ñ§ | |(c : ‚Ñù)| ‚â§ M } :=
-- begin
--     let s:= finset.Ico_‚Ñ§ (‚åä-M‚åã) (‚åäM‚åã+1),
--     suffices : {c : ‚Ñ§ | |‚Üëc| ‚â§ M} ‚äÜ  s,
--     {
--       refine set.finite.subset s.finite_to_set this,
--     },
--     intros c,
--     simp [s],
--     intros h,
--     rw abs_le at h,
--     have h1 := h.1,
--     have h2 := h.2,
--     split,
--     {
--       have : (‚åä-M‚åã :‚Ñù ) ‚â§ -M :=  floor_le (-M),
--       have := le_trans this h1,
--       exact_mod_cast this,
--     },
--     {
--       have : (c:‚Ñù ) < (‚åäM‚åã:‚Ñù) + 1,
--       {
--         calc
--         (c:‚Ñù) ‚â§ M           : h2
--         ...   < (‚åäM‚åã:‚Ñù) + 1 : M_lt_Mp1 M,
--       },

--       norm_cast at this,
--       exact this,
--     },
-- end

-- -- for `normed_space.basic`
-- lemma metric.bounded.exists_norm_le {Œ± : Type*} [normed_group Œ±] {s : set Œ±} (hs : metric.bounded s) :
--   ‚àÉ R, ‚àÄ x ‚àà s, ‚à•x‚à• ‚â§ R :=
-- begin
--   rcases s.eq_empty_or_nonempty with (rfl | hs'),
--   { simp },
--   obtain ‚ü®R‚ÇÅ, hR‚ÇÅ‚ü© := hs,
--   obtain ‚ü®x, hx‚ü© := hs',
--   use ‚à•x‚à• + R‚ÇÅ,
--   intros y hy,
--   have : ‚à•x - y‚à• ‚â§ R‚ÇÅ := by simpa [dist_eq_norm] using hR‚ÇÅ x y hx hy,
--   have := norm_le_insert x y,
--   linarith
-- end

-- -- for `order.filter.basic`
-- lemma e9 {Œ± : Type*} (l : filter Œ±) {s t : set Œ±} (hst : s ‚à™ t·∂ú ‚àà l) (ht : t ‚àà l) : s ‚àà l :=
-- begin
--   refine mem_sets_of_superset _ (s.inter_subset_left t),
--   convert inter_mem_sets hst ht using 1,
--   ext,
--   simp only [set.mem_inter_eq, set.mem_union_eq, set.mem_compl_eq],
--   finish
-- end


-- lemma e10 {Œ± : Type*} {l : filter Œ±} {E F : Type*} [normed_group E] [normed_group F] [proper_space E]
--   {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} (h : asymptotics.is_O f g l) (hf : tendsto f l (cocompact E)) :
--   tendsto g l (cocompact F) :=
-- begin
--   rw tendsto_def at ‚ä¢ hf,
--   intros s hs,
--   simp [filter.mem_cocompact'] at hs,
--   obtain ‚ü®t, ht, hts‚ü© := hs,
--   obtain ‚ü®r, hr‚ü© : ‚àÉ r, ‚àÄ p ‚àà s·∂ú, ‚à•p‚à• ‚â§ r := (ht.bounded.subset hts).exists_norm_le,
--   rw asymptotics.is_O_iff at h,
--   obtain ‚ü®c, hc‚ü© := h,
--   rw eventually_iff_exists_mem at hc,
--   obtain ‚ü®v, hv, hvfg‚ü© := hc,
--   have : ‚àÄ x ‚àà v ‚à© g ‚Åª¬π' s·∂ú, x ‚àà f ‚Åª¬π' metric.closed_ball (0:E) (c * r),
--   { rintros x ‚ü®hxv, hxgs‚ü©,
--     have := hr (g x) hxgs,
--     have := hvfg x hxv,
--     simp,
--     sorry },
--   have h‚ÇÇ : f ‚Åª¬π' (metric.closed_ball (0:E) (c * r))·∂ú ‚äÜ g ‚Åª¬π' s ‚à™ v·∂ú,
--   { intros x,
--     have := this x,
--     simp only [set.mem_preimage, set.mem_inter_eq, set.mem_compl_eq] at this,
--     simp only [set.mem_preimage, set.mem_union_eq, set.mem_compl_eq],
--     contrapose!,
--     finish },
--   have h‚ÇÉ : f ‚Åª¬π' (metric.closed_ball 0 (c * r))·∂ú ‚àà l,
--   { apply hf (metric.closed_ball (0:E) (c * r))·∂ú,
--     simp only [mem_cocompact'],
--     refine ‚ü®metric.closed_ball (0:E) (c * r), proper_space.compact_ball 0 (c * r), _‚ü©,
--     simp },
--   have : g ‚Åª¬π' s ‚à™ v·∂ú ‚àà l := mem_sets_of_superset h‚ÇÉ h‚ÇÇ,
--   refine e9 l this hv
-- end


-- lemma tendsto_cocompact_of_antilipschitz {Œ± Œ≤ : Type*} [metric_space Œ±] [proper_space Œ±]
--   [metric_space Œ≤] {c : nnreal} {f : Œ± ‚Üí Œ≤} (hf : antilipschitz_with c f) :
--   tendsto f (cocompact Œ±) (cocompact Œ≤) :=
-- begin
--   rw tendsto_iff_eventually,
--   simp only [mem_cocompact, eventually_iff_exists_mem],
--   rintros p ‚ü®v, hv, hvp‚ü©,
--   rw mem_cocompact' at hv,
--   obtain ‚ü®t, ht, htv‚ü© := hv,
--   obtain ‚ü®r, hr‚ü© := ht.bounded,
--   -- have := hf.bounded_preimage ht.bounded,
--   by_cases h : ‚àÉ x, ¬¨ p (f x),
--   { obtain ‚ü®x, hx‚ü© := h,
--     have hxt : f x ‚àà t := htv (mt (hvp (f x)) hx),
--     refine ‚ü®(metric.closed_ball x (c * r))·∂ú, _, _‚ü©,
--     { rw mem_cocompact,
--       refine ‚ü®metric.closed_ball x (c * r), proper_space.compact_ball x (‚Üëc * r), rfl.subset‚ü© },
--     intros x' hx',
--     have hxx'r : r < dist (f x) (f x'),
--     { simp at hx',
--       rw dist_comm at hx',
--       rw antilipschitz_with_iff_le_mul_dist at hf,
--       have : dist x x' ‚â§ c * dist (f x) (f x') := hf x x',
--       have := lt_of_lt_of_le hx' this,
--       sorry }, -- this follows from the previous line except with a special case for `c = 0`
--     have := mt (hr (f x) (f x') hxt),
--     push_neg at this,
--     have := (mt (@htv (f x'))) (this hxx'r),
--     apply hvp,
--     simpa using this },
--   { push_neg at h,
--     refine ‚ü®set.univ, univ_mem_sets, _‚ü©,
--     intros x hx,
--     exact h x },
-- end

-- lemma tendsto_at_top_sum_sq :
--   tendsto (Œª x : ‚Ñù √ó ‚Ñù, x.1 ^ 2 + x.2 ^ 2) (cocompact (‚Ñù √ó ‚Ñù)) at_top :=
-- begin
--   refine tendsto_at_top_mono _
--     (tendsto_norm_cocompact_at_top.at_top_mul_at_top tendsto_norm_cocompact_at_top),
--   rintros ‚ü®x‚ÇÅ, x‚ÇÇ‚ü©,
--   simp only [prod.norm_def, real.norm_eq_abs],
--   cases max_choice (|x‚ÇÅ|) (|x‚ÇÇ|) with h h;
--   { rw [h, abs_mul_abs_self],
--     nlinarith },
-- end

-- @[simp] lemma expand_sum_01 {R : Type*} [ring R] (f : fin 2 ‚Üí R ) :
-- (‚àë (x : fin 2), f x) = f 0 + f 1 :=
-- by simp [fin.sum_univ_succ]


-- -- method 1 -
-- def line (cd : coprime_ints) : set (matrix (fin 2) (fin 2) ‚Ñù) :=
--   {g | g 1 0 = (cd : ‚Ñ§ √ó ‚Ñ§).1 ‚àß g 1 1 = (cd : ‚Ñ§ √ó ‚Ñ§).2 ‚àß det g = 1}

-- - Do we need this? Maybe delete
-- lemma line_proper (cd : coprime_ints) :
--   map coe (cocompact (line cd)) = cocompact (matrix (fin 2) (fin 2) ‚Ñù) :=
-- begin

--   sorry
-- end
-- -


-- -- make `line` an affine subspace of 2x2 matrices, using the following lemma
-- lemma line_det (cd : coprime_ints) {g : matrix _ _ ‚Ñù} (hg : g ‚àà line cd) :
--   g 0 0 * cd.d - g 0 1 * cd.c = 1 :=
-- begin
--   convert hg.2.2,
--   rw [det2, hg.1, hg.2.1],
--   ring,
-- end

-- lemma in_line (cd : coprime_ints) {g : SL(2, ‚Ñ§)} (hg : bottom_row g = cd) :
--   ‚Üë(g : SL(2, ‚Ñù)) ‚àà line cd :=
-- begin
--   rw line,
--   rw set.mem_set_of_eq,
--   rw bottom_row at hg,
--   simp only [subtype.val_eq_coe] at hg,
--   split,
--   simp [hg],
--   sorry,
--   split,
--   simp [hg],
--   sorry,
--   exact (g: SL(2,‚Ñù)).2,
-- end

-- def to_line (cd : coprime_ints) (g : bottom_row ‚Åª¬π' {cd}) : line cd :=
-- ‚ü®‚Üë(g : SL(2, ‚Ñù)), in_line cd g.2‚ü©




-- lemma sddsf (cd : coprime_ints) (z : ‚ÑÇ) :
--   tendsto (Œª g : lattice_intersect (line cd), _root_.abs (smul_aux' ‚Üë(lattice_intersect_fun _ g) z).re)
--     cofinite at_top :=
-- (tendsto_at_top_abs.comp (tendsto_action cd z)).comp (tendsto_lattice_intersect_fun (line cd))

-- -- method 2 -
-- def line' (cd : coprime_ints) : set (‚Ñù √ó ‚Ñù) :=
--   {ab | ab.1 * (cd : ‚Ñ§ √ó ‚Ñ§).2 - ab.2 * (cd : ‚Ñ§ √ó ‚Ñ§).1 = 1}

-- def in_line' (cd : coprime_ints) {g : SL(2, ‚Ñ§)} (hg : bottom_row g = cd) :
--   (‚Üë(g 0 0), ‚Üë(g 0 1)) ‚àà line' cd :=
-- sorry

-- def to_line' (cd : coprime_ints) (g : bottom_row ‚Åª¬π' {cd}) : line' cd :=
-- ‚ü®(g 0 0, g 0 1), in_line' cd g.2‚ü©

-- lemma tendsto_line' (cd : coprime_ints) : tendsto (to_line' cd) cofinite (cocompact _) := sorry

-- lemma inv_image_eq_line (cd : coprime_ints) :
--   bottom_row ‚Åª¬π' {cd} = (prod.map coe coe : ‚Ñ§ √ó ‚Ñ§ ‚Üí ‚Ñù √ó ‚Ñù) ‚Åª¬π' line cd :=
-- sorry

-- end




-- lemma tendsto_acbd (cd : coprime_ints):
--   tendsto (Œª g, acbd (‚Üëg)) (cocompact (line cd)) (cocompact ‚Ñù) :=
-- begin
--   let cabs := _root_.abs cd.c,
--   let dabs := _root_.abs cd.d,
--   let maxCD := max cabs dabs,
--   intros K hK ,
--   rw mem_cocompact at hK,

--   obtain ‚ü® K1, hK1, hK2‚ü©  := hK,

--   obtain ‚ü® t, ht‚ü©  := (metric.bounded_iff_subset_ball 0).mp (is_compact.bounded hK1),
--   rw mem_map,
--   rw mem_cocompact,
--   refine ‚ü®
--   ((coe : line cd ‚Üí (matrix (fin 2) (fin 2) ‚Ñù)) ‚Åª¬π'
--    (metric.closed_ball (0: matrix (fin 2) (fin 2) ‚Ñù) (max (2*(_root_.abs t)+1) maxCD) )),
--    sorry, _‚ü© ,
--    --simp,
--   rw set.compl_subset_comm,
--   rw set.compl_subset_comm at hK2,
--   intros g hg,
--   simp [dist_eq_norm] at hg,
--   simp only [set.mem_preimage, metric.mem_closed_ball,  int_cast_abs, subtype.val_eq_coe],
--   have : acbd ‚Üëg ‚àà metric.closed_ball (0:‚Ñù) t,
--   {
--     apply ht,
--     apply hK2,
--     exact hg,
--   },
--   rw dist_pi_def,
--   let a : nnreal := nnreal.of_real (max (2 * |t| + 1) ‚ÜëmaxCD),
--   rw ‚Üê nnreal.coe_of_real (max (2 * |t| + 1) ‚ÜëmaxCD),
--   norm_cast,
--   have : (‚àÄ (b : fin 2), b ‚àà finset.univ ‚Üí (Œª (b : fin 2), nndist ((‚Üëg: matrix _ _ ‚Ñù) b) 0) b ‚â§ a) := sorry,
--   refine @finset.sup_le nnreal (fin 2) _ (finset.univ) ((Œª (b : fin 2), nndist ((‚Üëg: matrix _ _ ‚Ñù) b) (0))) a _,

--   sorry
-- end

-- - Is this non-crap? (More elegant phrasing?...) We know that $‚Ñ§$ matrices are discrete in $‚Ñù$; so intersection of $Z$ matrices is discrete in line -
-- lemma tendsto_inverse_image_fun' {Œ± Œ≤ : Type*} [topological_space Œ≤] (A : set Œ±) (B : set Œ≤)
--   {f : Œ± ‚Üí Œ≤} (hf‚ÇÅ : ‚àÄ x ‚àà A, f x ‚àà B ) (hf‚ÇÇ : tendsto f cofinite (cocompact _)) :
--   tendsto (subtype.map f (Œª x h, set.mem_def.mp (hf‚ÇÅ x h))) cofinite (cocompact _) :=
-- begin
-- --  refine tendsto_inverse_image_fun subtype.coe_injective continuous_subtype_coe _ hf‚ÇÇ,
--   refine filter.tendsto.of_tendsto_comp _ (comap_cocompact continuous_subtype_coe),
--   simpa [hf‚ÇÅ] using hf‚ÇÇ.comp subtype.coe_injective.tendsto_cofinite,
-- end


-- -- Big filter theorem -
-- theorem big_thm' (cd : coprime_ints) (w : ‚Ñù) :
--   tendsto (Œª A : bottom_row ‚Åª¬π' {cd}, acbd cd ‚ÜëA + w) cofinite (cocompact ‚Ñù) :=
-- begin
--   let cd' : fin 2 ‚Üí ‚Ñ§ :=  Œª i, if i = 0 then cd.c else cd.d,
--   let l := bottom_row ‚Åª¬π' {cd},
--   let f : SL(2, ‚Ñ§) ‚Üí matrix (fin 2) (fin 2) ‚Ñù := Œª g, matrix.map (‚Üëg : matrix _ _ ‚Ñ§) (coe : ‚Ñ§ ‚Üí ‚Ñù),
--   have hf : tendsto f cofinite (cocompact _) :=
--     cocompact_‚Ñù_to_cofinite_‚Ñ§_matrix.comp subtype.coe_injective.tendsto_cofinite,
--   have hl : ‚àÄ g ‚àà l, f g ‚àà new_line_def cd,
--   { intros g hg,
--     simp [new_line_def, line_map, matrix.coord, f],
--     split,
--     { norm_cast,
--       convert g.det_coe_matrix using 1,
--       sorry },
--     { sorry } },
--   let f' : l ‚Üí new_line_def cd := subtype.map f hl,
--   have h‚ÇÅ : tendsto f' cofinite (cocompact _),
--   { refine filter.tendsto.of_tendsto_comp _ (comap_cocompact continuous_subtype_coe),
--     simpa [hl] using hf.comp subtype.coe_injective.tendsto_cofinite },
--   have h‚ÇÇ : tendsto (Œª A, acbd cd ‚ÜëA + w) (cocompact (new_line_def cd)) (cocompact ‚Ñù),
--   { let hf := linear_equiv.closed_embedding_of_injective (lin_indep_acbd cd),
--     let p : ‚Ñù √ó (fin 2 ‚Üí ‚Ñù) := (1, Œª i, if i = 0 then cd.c else cd.d),
--     let hs : is_closed (prod.snd ‚Åª¬π' {p} : set (‚Ñù √ó (‚Ñù √ó (fin 2 ‚Üí ‚Ñù)))) :=
--       is_closed_singleton.preimage continuous_snd,
--     have := (hf.comp (closed_embedding_subtype_coe (hs.preimage hf.continuous))).cod_restrict hs (by simp),
--     have := ((fibre_embed_homeomorph p).trans (homeomorph.add_right w)).closed_embedding.comp this,
--     exact this.tendsto_cocompact },
--   have := h‚ÇÇ.comp h‚ÇÅ,
--   convert this,
-- end




-- example : T‚Åª¬π * T = 1 := inv_mul_self T

-- example { R : SL(2,‚Ñ§) } : R * T = 1 ‚Üí R = T‚Åª¬π := eq_inv_of_mul_eq_one

-- example { R : SL(2,‚Ñ§) } : T * R = 1 ‚Üí T‚Åª¬π = R := inv_eq_of_mul_eq_one

-- example { x y : SL(2,‚Ñ§)} (‚Ñç : x.1 = y.1) : x = y := subtype.eq h

-- @[simp]
-- lemma mat_congr_SL { x y : SL(2,‚Ñ§) } : x = y ‚Üî x.val = y.val := subtype.ext_iff_val

-- @[simp]
-- lemma mat_ext_iff  {F : Type*} [comm_ring F] (x y : matrix (fin 2) (fin 2) F) :
--   x = y ‚Üî x 0 0 = y 0 0 ‚àß x 0 1 = y 0 1 ‚àß x 1 0 = y 1 0 ‚àß x 1 1 = y 1 1 :=
-- begin
--   rw ‚Üêmatrix.ext_iff,
--   split,
--   {
--     intro h,
--     rw h,
--     tauto },
--   {
--     rintros ‚ü®h1, h2, h3, h4‚ü© i j,
--     fin_cases i; fin_cases j; assumption,
--   }
-- end

-- @[simp]
-- lemma mat_one {F : Type*} [comm_ring F] : (![![1,0], ![0,1]] : matrix (fin 2) (fin 2) F)
--   = (1 : matrix (fin 2) (fin 2) F) := by {simp}


-- lemma T_inv : T‚Åª¬π = { val := ![![1, -1], ![0, 1]], property := by simp [det2] } :=
-- begin
--   suffices : T * { val := ![![1, -1], ![0, 1]], property := by simp [det2] } = 1,
--   { exact inv_eq_of_mul_eq_one this},
--   simp [T],
-- end

-- lemma T_n_def {n : ‚Ñ§} :  T^(-n) = (T‚Åª¬π)^n := by {simp [inv_gpow, gpow_neg]}

-- lemma T_pow_‚Ñï {n : ‚Ñï} : T ^ n = { val := ![![1, n], ![0, 1]], property := by simp [det2] } :=
-- begin
--   induction n with n hn,
--   { simp },
--   { rw [pow_succ', hn, T],
--     simp [add_comm] }
-- end

-- lemma T_inv_pow_‚Ñï {n : ‚Ñï} : (T‚Åª¬π)^n = { val := ![![1, -n], ![0, 1]], property := by simp [det2] } :=
-- begin
--   induction n with n hn,
--   simp,
--   have : (T‚Åª¬π) ^ n.succ = ((T‚Åª¬π)^n)* (T‚Åª¬π),
--   {
--     exact pow_succ' (T‚Åª¬π) n,
--   },
--   rw this,
--   rw hn,
--   rw T_inv,
--   simp,
-- end


-- lemma T_pow {n : ‚Ñ§} : T^n = { val := ![![1, n], ![0, 1]], property := by simp [det2] } :=
-- begin
--   by_cases n_ge_0 : 0 ‚â§ n,
--   lift n to ‚Ñï with n_ge_0,
--   refine T_pow_‚Ñï,
--   exact n_ge_0,
--   have : T ^ n = T ^ (- (-n)) := by simp,
--   rw this,
--   rw T_n_def,
--   generalize' hk : -n=k,
--   have k_ge_0 : 0 ‚â§ k,
--   {
--     rw ‚Üê hk,
--     linarith,
--   },
--   have : n = -k,
--   {
--     rw ‚Üê hk,
--     ring,
--   },
--   rw this,
--   lift k to ‚Ñï using k_ge_0,
--   rw gpow_coe_nat,
--   norm_cast,
--   rw T_inv_pow_‚Ñï,
-- end

-- lemma T_action {z : ‚Ñç} : (T ‚Ä¢ z).1 = z + 1 :=
-- begin
--   convert @smul_sound T z,
--   simp only [smul_aux_def, top, bottom, T, has_coe_SL_apply, subtype.coe_mk, map_cons],
--   simp [special_linear_group.cons_apply_zero, special_linear_group.cons_apply_one],
-- end


-- lemma Tn_action {z : ‚Ñç} {n : ‚Ñ§} : (T^n ‚Ä¢ z).1 = z + n :=
-- begin
--   have := @smul_sound (T^n) z,
--   convert this,
--   rw smul_aux,
--   rw T_pow,
--   rw top,
--   rw bottom,
--   simp,
-- end

-- lemma S_action (z : ‚Ñç) : (S ‚Ä¢ z).1 = -z‚Åª¬π :=
-- begin
--   convert @smul_sound S z,
--   simp only [smul_aux_def, top, bottom, S, has_coe_SL_apply, subtype.coe_mk, map_cons],
--   simp [special_linear_group.cons_apply_zero, special_linear_group.cons_apply_one],
--   ring,
-- end

-- lemma S_bottom (z : ‚Ñç) : bottom S z = (z:‚ÑÇ) :=
--   by simp [S, bottom, map_cons, comp_cons, cons_apply_one, cons_apply_zero]



-- lemma S_action_im (z : ‚Ñç) : (S ‚Ä¢ z).im = z.im / norm_sq z :=
-- begin
--   rw matrix.special_linear_group.im_smul_int,
--   field_simp [normsq_bottom_ne_zero, norm_sq_nonzero, S, bottom, map_cons, comp_cons,
--     cons_apply_one, cons_apply_zero],
-- end

-- lemma T'_action_re (z : ‚Ñç) : (T' ‚Ä¢ z).re = z.re - 1 :=
-- begin
--   simp [T', smul_aux, smul_aux', top, bottom, map_cons, comp_cons, cons_apply_one, cons_apply_zero],
--   refl,
-- end

-- lemma T_action_re (z : ‚Ñç) : (T ‚Ä¢ z).re = z.re + 1 :=
-- begin
-- end




-- lemma half_ge_x_T_inv (z : ‚Ñç) (h : 1/2 < z.re) : |(T' ‚Ä¢ z).re| < |z.re| :=
-- begin
--   have : |z.re - 1| < |z.re|,
--   { rw [(abs_eq_self.mpr (by linarith : 0 ‚â§ z.re)), abs_lt],
--     split; linarith, },
--   convert this,
--   simp [T', smul_aux, smul_aux', top, bottom, map_cons, comp_cons, cons_apply_one, cons_apply_zero],
--   refl,
-- end

-- lemma half_le_neg_x_T (z : ‚Ñç) (h : 1/2 < - z.re) : |(T ‚Ä¢ z).re| < |z.re| :=
-- begin
--   have : |z.re + 1| < |z.re|,
--   { rw [(abs_eq_neg_self.mpr (by linarith : z.re ‚â§ 0)), abs_lt],
--     split; linarith, },
--   convert this,
--   simp [T, smul_aux, smul_aux', top, bottom, map_cons, comp_cons, cons_apply_one, cons_apply_zero],
--   refl,
-- end

-- lemma norm_sq_ge_one_of_act_S {z : ‚Ñç} (h : (S ‚Ä¢ z).im ‚â§ z.im) : 1 ‚â§ norm_sq z :=
-- begin
--   by_contradiction hcontra,
--   push_neg at hcontra,
--   have := im_lt_im_S hcontra,
--   linarith,
-- end



-- lemma T_inv_action {z : ‚Ñç} : (T‚Åª¬π ‚Ä¢ z).1 = z - 1 :=
-- begin
--   convert @smul_sound (T‚Åª¬π) z,
--   rw smul_aux,
--   rw T_inv,
--   simp,
--   ring,
-- end

------------------------------------

-- lemma find_g_with_min_re (z:‚Ñç) (cd : coprime_ints) :
-- ‚àÉ g : SL(2,‚Ñ§), bottom_row g = cd ‚àß (‚àÄ g' : SL(2,‚Ñ§),  bottom_row g = bottom_row g' ‚Üí
-- _root_.abs ((g ‚Ä¢ z).val.re) ‚â§ _root_.abs ((g' ‚Ä¢ z).val.re)) :=
-- begin
-- -  -- Argh this is all wrong;
-- -- Need to look somehow at the set of all preimages of cd
-- -- among those, choose g with minimal real part
-- -- the rest is tautological
--   obtain ‚ü®g, hg‚ü© := bottom_row_surj cd,
--   use g,
--   split,
--   exact hg,
--   intros g' hg',
--   by_contradiction hcontra,
--   push_neg at hcontra,
--   obtain ‚ü®n, hn‚ü© := bot_row_eq_diff_by_T_n g g' hg',
--   rw hn at hcontra,
--   -
--   sorry,
-- end
