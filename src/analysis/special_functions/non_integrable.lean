/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.special_functions.integrals
import analysis.calculus.fderiv_measurable

/-!
# Non integrable functions

In this file we prove that the derivative of a function that tends to infinity is not interval
integrable, see `interval_integral.not_integrable_has_deriv_at_of_tendsto_norm_at_top_filter` and
`interval_integral.not_integrable_has_deriv_at_of_tendsto_norm_at_top_punctured`.  Then we apply the
latter lemma to prove that the function `Œª x, x‚Åª¬π` is integrable on `a..b` if and only if `a = b` or
`0 ‚àâ [a, b]`.

## Tags

integrable function
-/

open_locale measure_theory topological_space interval nnreal ennreal
open measure_theory topological_space set filter asymptotics

namespace interval_integral

variables {E F : Type*} [normed_group E] [normed_space ‚Ñù E] [measurable_space E] [borel_space E]
  [second_countable_topology E] [complete_space E] [normed_group F] [normed_space ‚Ñù F]
  [measurable_space F] [borel_space F] [second_countable_topology F] [complete_space F]

/-- If `f` has derivative `f'` eventually along a nontrivial filter `l : filter ‚Ñù` that is generated
by convex sets, the norm of `f` tends to infinity along `l`, then `f'` is not integrable on any
interval `a..b` such that `[a, b] ‚àà l`. -/
lemma not_interval_integrable_of_tendsto_norm_at_top_of_deriv_is_O_filter {f : ‚Ñù ‚Üí E} {g : ‚Ñù ‚Üí F}
  {a b : ‚Ñù} (l : filter ‚Ñù) [ne_bot l] [tendsto_Ixx_class Icc l l] (hl : [a, b] ‚àà l)
  (hd : ‚àÄ·∂† x in l, differentiable_at ‚Ñù f x) (hf : tendsto (Œª x, ‚à•f x‚à•) l at_top)
  (hg : is_O (deriv f) g l) :
  ¬¨interval_integrable g volume a b :=
begin
  intro hgi,
  have : ‚àÉ (C : ‚Ñù) (hC‚ÇÄ : 0 ‚â§ C) (s ‚àà l), ‚àÄ (x ‚àà s) (y ‚àà s), [x, y] ‚äÜ [a, b] ‚àß
    ‚àÄ z ‚àà [x, y], differentiable_at ‚Ñù f z ‚àß ‚à•deriv f z‚à• ‚â§ C * ‚à•g z‚à•,
  { rcases hg.exists_nonneg with ‚ü®C, C‚ÇÄ, hC‚ü©,
    have h : ‚àÄ·∂† x : ‚Ñù √ó ‚Ñù in l.prod l, ‚àÄ y ‚àà [x.1, x.2], (differentiable_at ‚Ñù f y ‚àß
      ‚à•deriv f y‚à• ‚â§ C * ‚à•g y‚à•) ‚àß y ‚àà [a, b],
      from (tendsto_fst.interval tendsto_snd).eventually ((hd.and hC.bound).and hl).lift'_powerset,
    rcases mem_prod_self_iff.1 h with ‚ü®s, hsl, hs‚ü©,
    simp only [prod_subset_iff, mem_set_of_eq] at hs,
    exact ‚ü®C, C‚ÇÄ, s, hsl, Œª x hx y hy, ‚ü®Œª z hz, (hs x hx y hy z hz).2,
      Œª z hz, (hs x hx y hy z hz).1‚ü©‚ü© },
  clear hl hd hg,
  choose C hC‚ÇÄ s hsl hsub hfd hg,
  replace hgi : interval_integrable (Œª x, C * ‚à•g x‚à•) volume a b, by convert hgi.norm.smul C,
  obtain ‚ü®c, hc, d, hd, hlt‚ü© : ‚àÉ (c ‚àà s) (d ‚àà s), ‚à•f c‚à• + ‚à´ y in Œô a b, C * ‚à•g y‚à• < ‚à•f d‚à•,
  { rcases filter.nonempty_of_mem hsl with ‚ü®c, hc‚ü©,
    have : ‚àÄ·∂† x in l, ‚à•f c‚à• + ‚à´ y in Œô a b, C * ‚à•g y‚à• < ‚à•f x‚à•,
      from hf.eventually (eventually_gt_at_top _),
    exact ‚ü®c, hc, (this.and hsl).exists.imp (Œª d hd, ‚ü®hd.2, hd.1‚ü©)‚ü© },
  specialize hsub c hc d hd, specialize hfd c hc d hd,
  replace hg : ‚àÄ x ‚àà Œô c d, ‚à•deriv f x‚à• ‚â§ C * ‚à•g x‚à•, from Œª z hz, hg c hc d hd z ‚ü®hz.1.le, hz.2‚ü©,
  have hg_ae : ‚àÄ·µê x ‚àÇ(volume.restrict (Œô c d)), ‚à•deriv f x‚à• ‚â§ C * ‚à•g x‚à•,
    from (ae_restrict_mem measurable_set_interval_oc).mono hg,
  have hsub' : Œô c d ‚äÜ Œô a b,
    from interval_oc_subset_interval_oc_of_interval_subset_interval hsub,
  have hfi : interval_integrable (deriv f) volume c d,
    from (hgi.mono_set hsub).mono_fun' (ae_measurable_deriv _ _) hg_ae,
  refine hlt.not_le (sub_le_iff_le_add'.1 _),
  calc ‚à•f d‚à• - ‚à•f c‚à• ‚â§ ‚à•f d - f c‚à• : norm_sub_norm_le _ _
  ... = ‚à•‚à´ x in c..d, deriv f x‚à• : congr_arg _ (integral_deriv_eq_sub hfd hfi).symm
  ... = ‚à•‚à´ x in Œô c d, deriv f x‚à• : norm_integral_eq_norm_integral_Ioc _
  ... ‚â§ ‚à´ x in Œô c d, ‚à•deriv f x‚à• : measure_theory.norm_integral_le_integral_norm _
  ... ‚â§ ‚à´ x in Œô c d, C * ‚à•g x‚à• :
    set_integral_mono_on hfi.norm.def (hgi.def.mono_set hsub') measurable_set_interval_oc hg
  ... ‚â§ ‚à´ x in Œô a b, C * ‚à•g x‚à• :
    set_integral_mono_set hgi.def (ae_of_all _ $ Œª x, mul_nonneg hC‚ÇÄ (norm_nonneg _))
      hsub'.eventually_le
end

/-- If `‚à•f x‚à• ‚Üí ‚àû` as `x ‚Üí c` (more formally, along the filter `ùìù[‚â†] c`) and `[a, b] ‚àã c` is a
nontrivial closed (unordered) interval, then the derivative `f'` of `f` is not interval integrable
on `a..b`. -/
lemma not_integrable_has_deriv_at_of_tendsto_norm_at_top_punctured {f f' : ‚Ñù ‚Üí E} {a b c : ‚Ñù}
  (hne : a ‚â† b) (hc : c ‚àà [a, b]) (h_deriv : ‚àÄ·∂† x in ùìù[‚â†] c, has_deriv_at f (f' x) x)
  (h_infty : tendsto (Œª x, ‚à•f x‚à•) (ùìù[‚â†] c) at_top) :
  ¬¨interval_integrable f' volume a b :=
begin
  wlog hlt : a < b := hne.lt_or_lt using [a b, b a] tactic.skip,
  { rw interval_of_le hlt.le at hc,
    rcases hc.1.eq_or_lt with (rfl|hac),
    { have : ùìù[>] a ‚â§ ùìù[‚â†] a, from nhds_within_mono _ (Œª _, ne_of_gt),
      exact not_integrable_has_deriv_at_of_tendsto_norm_at_top_filter _
        (Icc_mem_nhds_within_Ioi ‚ü®min_le_left _ _, lt_max_iff.2 (or.inr hlt)‚ü©)
        (h_deriv.filter_mono this) (h_infty.mono_left this) },
    { have : ùìù[<] c ‚â§ ùìù[‚â†] c, from nhds_within_mono _ (Œª _, ne_of_lt),
      exact Œª h, not_integrable_has_deriv_at_of_tendsto_norm_at_top_filter _
        (Icc_mem_nhds_within_Iio ‚ü®min_lt_iff.2 (or.inl hac), le_max_right _ _‚ü©)
        (h_deriv.filter_mono this) (h_infty.mono_left this)
        (h.mono_set $ interval_subset_interval_left (Icc_subset_interval hc)) } },
  { exact Œª hab hc h, this hab.symm (interval_swap a b ‚ñ∏ hc) h.symm }
end

/-- The function `Œª x, (x - c)‚Åª¬π` is integrable on `a..b` if and only if `a = b` or `c ‚àâ [a, b]`. -/
@[simp] lemma interval_integrable_sub_inv_iff {a b c : ‚Ñù} :
  interval_integrable (Œª x, (x - c)‚Åª¬π) volume a b ‚Üî a = b ‚à® c ‚àâ [a, b] :=
begin
  split,
  { refine Œª h, or_iff_not_imp_left.2 (Œª hne h‚ÇÄ, _),
    have : ‚àÄ·∂† x in ùìù[‚â†] c, has_deriv_at (Œª x, real.log (x - c)) (x - c)‚Åª¬π x,
    { refine eventually_nhds_with_of_forall (Œª x, _),
      simpa only [sub_ne_zero, one_div] using ((has_deriv_at_id x).sub_const _).log },
    refine not_integrable_has_deriv_at_of_tendsto_norm_at_top_punctured hne h‚ÇÄ this _ h,
    refine tendsto_abs_at_bot_at_top.comp (real.tendsto_log_nhds_within_zero.comp _),
    rw ‚Üê sub_self c,
    exact ((has_deriv_at_id c).sub_const c).tendsto_punctured_nhds one_ne_zero },
  { rintro (rfl|h‚ÇÄ),
    exacts [interval_integrable.refl,
      interval_integrable_inv (Œª x hx, sub_ne_zero.2 $ ne_of_mem_of_not_mem hx h‚ÇÄ)
        (continuous_on_id.sub continuous_on_const)] }
end

/-- The function `Œª x, x‚Åª¬π` is integrable on `a..b` if and only if `a = b` or `0 ‚àâ [a, b]`. -/
@[simp] lemma interval_integrable_inv_iff {a b : ‚Ñù} :
  interval_integrable (Œª x, x‚Åª¬π) volume a b ‚Üî a = b ‚à® (0 : ‚Ñù) ‚àâ [a, b] :=
by simp only [‚Üê interval_integrable_sub_inv_iff, sub_zero]

lemma not_integrable_of_sub_inv_is_O {a b c : ‚Ñù} (hlt : a ‚â† b) (hc : c ‚àà [a, b]) {f : ‚Ñù ‚Üí E}
  (hf : is_O (Œª x, (x - c)‚Åª¬π) f (ùìù[‚â†] c)) : ¬¨interval_integrable f volume a b :=
begin
  rcases hf.bound with ‚ü®C, hC‚ü©,
end

end interval_integral
