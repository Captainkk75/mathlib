import algebraic_geometry.projective_spectrum.structure_sheaf
import algebraic_geometry.Spec
import algebraic_geometry.Scheme
import algebraic_geometry.projective_spectrum.clear_denominator

noncomputable theory

namespace algebraic_geometry

open_locale direct_sum big_operators pointwise big_operators
open direct_sum set_like

variables {R A: Type}
variables [comm_ring R] [comm_ring A] [algebra R A] [nontrivial A]

variables (ùíú : ‚Ñï ‚Üí submodule R A)
variables [graded_algebra ùíú] [Œ† (i : ‚Ñï) (x : ùíú i), decidable (x ‚â† 0)]

open Top
open topological_space
open category_theory
open opposite

local notation `pst` := projective_spectrum.Top ùíú
local notation `pss` := projective_spectrum.structure_sheaf.structure_sheaf ùíú

open projective_spectrum projective_spectrum.structure_sheaf

local notation `Proj` := Proj.to_LocallyRingedSpace ùíú


local notation `Spec` ring := Spec.LocallyRingedSpace_obj (CommRing.of ring)

lemma aux.pow_deg (f : A) (m : ‚Ñï) (f_deg : f ‚àà ùíú m) : ‚àÄ n, f ^ n ‚àà ùíú (m * n) :=
begin
  intros n, induction n with n ih,
  rw [pow_zero, mul_zero], exact set_like.graded_monoid.one_mem,
  rw [pow_succ', nat.mul_succ], apply set_like.graded_monoid.mul_mem ih f_deg,
end

@[derive [comm_ring]]
def degree_zero_part (f : A) (m : ‚Ñï) (f_deg : f ‚àà ùíú m) : subring (localization.away f) :=
  subring.mk
    { y : localization.away f | ‚àÉ (n : ‚Ñï) (a : A) (a_deg : a ‚àà ùíú (m * n)),
      y = localization.mk a ‚ü®f^n, ‚ü®n, rfl‚ü©‚ü© }
  ‚ü®0, 1, begin
    rw mul_zero,
    exact set_like.graded_monoid.one_mem,
  end, begin
    transitivity (localization.mk 1 ‚ü®1, ‚ü®0, _‚ü©‚ü© : localization.away f),
    erw localization.mk_self 1,
    rw pow_zero, congr, rw pow_zero,
  end‚ü© begin
    rintros _ _ ‚ü®n1, a1, a1_deg, rfl‚ü© ‚ü®n2, a2, a2_deg, rfl‚ü©,
    rw localization.mk_mul,
    refine ‚ü®n1 + n2, a1 * a2, _, _‚ü©,
    { rw mul_add, apply set_like.graded_monoid.mul_mem a1_deg a2_deg, },
    { congr, rw subtype.ext_iff_val, dsimp only, rw pow_add, refl, },
  end ‚ü®0, 0, begin
    rw mul_zero, exact submodule.zero_mem _,
  end, begin
    rw localization.mk_zero
  end‚ü© begin
    rintros _ _ ‚ü®n1, a1, a1_deg, rfl‚ü© ‚ü®n2, a2, a2_deg, rfl‚ü©,
    rw localization.add_mk,
    refine ‚ü®(n1 + n2), (f ^ n1 * a2 + f ^ n2 * a1), submodule.add_mem _ _ _, _‚ü©,
    { rw mul_add, apply set_like.graded_monoid.mul_mem _ a2_deg, apply aux.pow_deg, exact f_deg, },
    { rw [add_comm, mul_add], apply set_like.graded_monoid.mul_mem _ a1_deg, apply aux.pow_deg,
      exact f_deg, },
    { congr, rw [subtype.ext_iff_val], dsimp only, rw pow_add, refl, }
  end begin
    rintros _ ‚ü®n, a, a_deg, rfl‚ü©,
    rw localization.neg_mk,
    refine ‚ü®n, -a, submodule.neg_mem _ a_deg, rfl‚ü©,
  end

def isos.forward.carrier (f : A) (m : ‚Ñï) (f_deg : f ‚àà ùíú m)
  (x : Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))) : ideal (degree_zero_part _ f m f_deg) :=
{ carrier := {z | z.1 ‚àà (ideal.span { y | ‚àÉ (g : A), g ‚àà x.1.as_homogeneous_ideal.1 ‚àß
            y = (localization.mk g 1 : localization.away f) }) },
  zero_mem' := submodule.zero_mem _,
  add_mem' := Œª z1 z2 hz1 hz2, begin
    refine submodule.add_mem _ hz1 hz2,
  end,
  smul_mem' := Œª z1 z2 hz2, begin
    refine submodule.smul_mem _ _ hz2,
  end }

def isos.forward.carrier' (f : A) (m : ‚Ñï) (f_deg : f ‚àà ùíú m)
  (x : Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))) : ideal (degree_zero_part _ f m f_deg) :=
ideal.span
  { z : degree_zero_part _ f m f_deg |
    ‚àÉ (s : A) (hs : s ‚àà x.1.as_homogeneous_ideal) (n : ‚Ñï) (s_mem : s ‚àà ùíú (m * n)),
      z = (‚ü®localization.mk s ‚ü®f^n, ‚ü®_, rfl‚ü©‚ü©, ‚ü®n, s, s_mem, rfl‚ü©‚ü© : degree_zero_part _ f m f_deg) }

lemma isos.forward.carrier_eq_carrier' (f : A) [decidable_eq (localization.away f)]
  (m : ‚Ñï) (f_deg : f ‚àà ùíú m)
  (x : Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))) :
  isos.forward.carrier ùíú f m f_deg x = isos.forward.carrier' ùíú f m f_deg x :=
begin
  ext z, split; intros hz,
  { change z.1 ‚àà _ at hz,
    change z ‚àà ideal.span _,
    have mem1 := z.2,
    change ‚àÉ _, _ at mem1,
    obtain ‚ü®k, a, a_mem, hk‚ü© := mem1,
    erw hk at hz,

    erw [‚Üêideal.submodule_span_eq, finsupp.span_eq_range_total, set.mem_range] at hz,
    obtain ‚ü®c, eq1‚ü© := hz,
    erw [finsupp.total_apply, finsupp.sum] at eq1,

    suffices mem1 : a ‚àà x.1.as_homogeneous_ideal,
    apply ideal.subset_span,
    refine ‚ü®a, mem1, _, a_mem, _‚ü©,
    rw subtype.ext_iff_val, dsimp only, rw hk,

    obtain ‚ü®N, hN‚ü© := clear_denominator _ f (finset.image (Œª i, c i * i.1) c.support),
    -- N is the common denom
    choose after_clear_denominator hacd using hN,
    have prop1 : ‚àÄ i, i ‚àà c.support ‚Üí c i * i.1 ‚àà (finset.image (Œª i, c i * i.1) c.support),
    { intros i hi, rw finset.mem_image, refine ‚ü®_, hi, rfl‚ü©, },
    have eq3 := calc (localization.mk a 1 : localization.away f) * localization.mk (f^N) 1
            = localization.mk a ‚ü®f^k, ‚ü®_, rfl‚ü©‚ü© * localization.mk (f^k) 1 * localization.mk (f^N) 1
            : begin
              congr,
              rw [localization.mk_mul, localization.mk_eq_mk', is_localization.eq],
              use 1,
              erw [mul_one, mul_one, mul_one, mul_one, ‚Üêsubtype.val_eq_coe],
            end
        ... = localization.mk (f^k) 1 * localization.mk a ‚ü®f^k, ‚ü®_, rfl‚ü©‚ü© * localization.mk (f^N) 1
            : by ring
        ... = localization.mk (f^k) 1 * localization.mk (f^N) 1 * ‚àë i in c.support, c i * i.1
            : begin
              erw eq1, ring,
            end
        ... = localization.mk (f^k) 1 * (localization.mk (f^N) 1 * ‚àë i in c.support, c i * i.1) : by ring
        ... = localization.mk (f^k) 1 * ‚àë i in c.support, (localization.mk (f^N) 1) * (c i * i.1)
            : begin
              congr' 1,
              rw finset.mul_sum,
            end
        ... = localization.mk (f^k) 1 * ‚àë i in c.support.attach, (localization.mk (f^N) 1) * (c i.1 * i.1.1)
            : begin
              congr' 1,
              rw finset.sum_bij',
              work_on_goal 5 { intros a _, exact a.1 },
              work_on_goal 3 { intros a ha, exact ‚ü®a, ha‚ü©},
              { intros a ha, dsimp only, refl, },
              { intros a ha, dsimp only, refl, },
              { intros a ha, dsimp only, rw subtype.ext_iff_val, },
              { intros a ha, dsimp only, apply finset.mem_attach, },
              { intros a ha, dsimp only, exact a.2, },
            end
        ... = localization.mk (f^k) 1 * ‚àë i in c.support.attach, (localization.mk (after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) 1)
            : begin
              congr' 1,
              rw finset.sum_congr rfl (Œª j hj, _),
              have eq2 := (hacd (c j.1 * j.1.1) (prop1 j.1 j.2)).2,
              dsimp only at eq2,
              erw eq2,
              rw mul_comm,
            end
        ... = ‚àë i in c.support.attach, (localization.mk (f^k) 1) * (localization.mk (after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) 1)
            : begin
              rw finset.mul_sum,
            end
        ... = ‚àë i in c.support.attach, localization.mk (f^k * (after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2))) 1
            : begin
              rw finset.sum_congr rfl (Œª j hj, _),
              erw [localization.mk_mul, one_mul],
            end
        ... = localization.mk (‚àë i in c.support.attach, (f^k * (after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)))) 1
            : begin
              induction c.support.attach using finset.induction_on with y s hy ih,
              rw [finset.sum_empty, finset.sum_empty, localization.mk_zero],

              erw [finset.sum_insert hy, finset.sum_insert hy, ih, localization.add_mk, mul_one, one_mul, one_mul, add_comm],
            end,
        erw [localization.mk_mul, one_mul] at eq3,
        simp only [localization.mk_eq_mk', is_localization.eq] at eq3,
        obtain ‚ü®‚ü®_, ‚ü®l, rfl‚ü©‚ü©, eq3‚ü© := eq3,
        erw [mul_one, ‚Üêsubtype.val_eq_coe, mul_one] at eq3,
        dsimp only at eq3,

    suffices : (‚àë i in c.support.attach, (f^k * (after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)))) * f^l ‚àà x.1.as_homogeneous_ideal,
    erw ‚Üêeq3 at this,
    rcases x.1.is_prime.mem_or_mem this with H1 | H3,
    rcases x.1.is_prime.mem_or_mem H1 with H1 | H2,
    { exact H1 },
    { exfalso,
      have mem3 := x.2,
      have mem4 := x.1.is_prime.mem_of_pow_mem _ H2,
      erw projective_spectrum.mem_basic_open at mem3,
      apply mem3,
      exact mem4, },
    { exfalso,
      have mem3 := x.2,
      have mem4 := x.1.is_prime.mem_of_pow_mem _ H3,
      erw projective_spectrum.mem_basic_open at mem3,
      apply mem3,
      exact mem4, },

    apply ideal.mul_mem_right,
    apply ideal.sum_mem,
    intros j hj,
    apply ideal.mul_mem_left,
    set g := classical.some j.1.2 with g_eq,
    have mem3 : g ‚àà x.1.as_homogeneous_ideal := (classical.some_spec j.1.2).1,
    have eq3 : j.1.1 = localization.mk g 1 := (classical.some_spec j.1.2).2,
    have eq4 := (hacd (c j.1 * j.1.1) (prop1 j.1 j.2)).2,
    dsimp only at eq4,

    have eq5 : ‚àÉ (a : A) (z : ‚Ñï), c j.1 = localization.mk a ‚ü®f^z, ‚ü®z, rfl‚ü©‚ü©,
    { induction (c j.1) using localization.induction_on with data,
      rcases data with ‚ü®a, ‚ü®_, ‚ü®z, rfl‚ü©‚ü©‚ü©,
      refine ‚ü®a, z, rfl‚ü©, },
    obtain ‚ü®Œ±, z, hz‚ü© := eq5,

    have eq6 := calc localization.mk (after_clear_denominator (c j.1 * j.1.1) (prop1 j.1 j.2)) 1
            = c j.1 * j.1.1 * localization.mk (f^N) 1 : eq4
        ... = (localization.mk Œ± ‚ü®f^z, ‚ü®z, rfl‚ü©‚ü© : localization.away f) * j.1.1 * localization.mk (f^N) 1
            : by erw hz
        ... = (localization.mk Œ± ‚ü®f^z, ‚ü®z, rfl‚ü©‚ü© : localization.away f) * localization.mk g 1 * localization.mk (f^N) 1
            : by erw eq3
        ... = localization.mk (Œ± * g * f^N) ‚ü®f^z, ‚ü®z, rfl‚ü©‚ü©
            : begin
              erw [localization.mk_mul, localization.mk_mul, mul_one, mul_one],
            end,
    simp only [localization.mk_eq_mk', is_localization.eq] at eq6,
    obtain ‚ü®‚ü®_, ‚ü®v, rfl‚ü©‚ü©, eq6‚ü© := eq6,
    erw [‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, mul_one] at eq6,
    dsimp only at eq6,

    have mem4 : Œ± * g * f ^ N * f ^ v ‚àà x.1.as_homogeneous_ideal,
    { apply ideal.mul_mem_right,
      apply ideal.mul_mem_right,
      apply ideal.mul_mem_left,
      exact mem3, },
    erw ‚Üêeq6 at mem4,

    rcases x.1.is_prime.mem_or_mem mem4 with H1 | H3,
    rcases x.1.is_prime.mem_or_mem H1 with H1 | H2,
    { exact H1 },
    { exfalso,
      have mem3 := x.2,
      have mem4 := x.1.is_prime.mem_of_pow_mem _ H2,
      erw projective_spectrum.mem_basic_open at mem3,
      apply mem3,
      exact mem4, },
    { exfalso,
      have mem3 := x.2,
      have mem4 := x.1.is_prime.mem_of_pow_mem _ H3,
      erw projective_spectrum.mem_basic_open at mem3,
      apply mem3,
      exact mem4, } },

  { change z ‚àà ideal.span _ at hz,
    change z.1 ‚àà ideal.span _,

    erw [‚Üêideal.submodule_span_eq, finsupp.span_eq_range_total, set.mem_range] at hz,
    obtain ‚ü®c, eq1‚ü© := hz,
    erw [finsupp.total_apply, finsupp.sum] at eq1,

    erw [‚Üêeq1, show (‚àë i in c.support, c i * i.1).val = ‚àë i in c.support, (c i).1 * i.1.1, begin
      induction c.support using finset.induction_on with a s ha ih,

      rw [finset.sum_empty, finset.sum_empty],
      refl,

      erw [finset.sum_insert ha, finset.sum_insert ha, ‚Üêih],
      dsimp only,
      refl,
    end],

    eapply ideal.sum_mem (ideal.span {y :
     localization (submonoid.powers f) | ‚àÉ (g : A),
     g ‚àà (projective_spectrum.as_homogeneous_ideal x.val).val ‚àß y = localization.mk g 1}),

    rintros j hj,
    apply ideal.mul_mem_left  (ideal.span {y :
     localization (submonoid.powers f) | ‚àÉ (g : A),
     g ‚àà (projective_spectrum.as_homogeneous_ideal x.val).val ‚àß y = localization.mk g 1}),
    have hj2 := j.2,
    change ‚àÉ s, _ at hj2,
    obtain ‚ü®s, hs, n, s_mem, hj2‚ü© := hj2,
    erw hj2, dsimp only,
    have eq2 : (localization.mk s ‚ü®f ^ n, ‚ü®_, rfl‚ü©‚ü© : localization.away f) =
      localization.mk 1 ‚ü®f^n, ‚ü®_, rfl‚ü©‚ü© * localization.mk s 1,
    { rw [localization.mk_mul, one_mul, mul_one], },
    erw eq2,
    apply ideal.mem_span.smul_mem,
    refine ‚ü®s, hs, rfl‚ü©, },
end

lemma set_like.graded_monoid.pow_deg {f : A} {m} (f_deg : f ‚àà ùíú m) (n : ‚Ñï) : f ^ n ‚àà ùíú (n * m) :=
begin
  induction n with n ih,
  erw [pow_zero, zero_mul],
  exact set_like.graded_monoid.one_mem,

  erw [mul_comm n.succ m, pow_succ', nat.mul_succ, mul_comm m n],
  apply set_like.graded_monoid.mul_mem ih f_deg,
end

lemma set_like.graded_monoid.nat_deg_zero (n : ‚Ñï) : (n : A) ‚àà ùíú 0 :=
begin
  induction n with n ih,
  exact submodule.zero_mem _,

  rw nat.succ_eq_add_one,
  have : (‚Üë(n + 1) : A) = (n : A) + 1 := rfl,
  erw this,
  apply submodule.add_mem _ ih,
  exact set_like.graded_monoid.one_mem,
end

variable [Œ† (i : ‚Ñï) (x : ùíú i), decidable (x ‚â† 0)]

def isos.backward.carrier (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m)
  (f_deg : f ‚àà ùíú m)
  (q : (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1) : set _ :=
  {a | ‚àÄ (i : ‚Ñï),
    (‚ü®localization.mk ((graded_algebra.proj ùíú i a)^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
      i, ((graded_algebra.proj ùíú i a)^m),
      (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
      degree_zero_part _ f m f_deg) ‚àà q.1}

lemma isos.backward.carrier.zero_mem (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï)
  (hm : 0 < m)
  (f_deg : f ‚àà ùíú m)
  (q : (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1) :
  (0 : A) ‚àà isos.backward.carrier ùíú f m hm f_deg q :=
begin
  rw isos.backward.carrier,
  { intros i,
    simp only [linear_map.map_zero, zero_pow hm, localization.mk_zero],
    exact submodule.zero_mem _, },
end

lemma isos.backward.carrier.add_mem (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï)
  (hm : 0 < m)
  (f_deg : f ‚àà ùíú m)
  (q : (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1)
  (a b : A)
  (ha : a ‚àà isos.backward.carrier ùíú f m hm f_deg q)
  (hb : b ‚àà isos.backward.carrier ùíú f m hm f_deg q) :
  a + b ‚àà isos.backward.carrier ùíú f m hm f_deg q :=
begin
  rw isos.backward.carrier at ha hb ‚ä¢,
  { intros i,
    suffices : (‚ü®localization.mk ((graded_algebra.proj ùíú i (a + b))^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
    i, ((graded_algebra.proj ùíú i (a+b))^m),
    (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
    degree_zero_part _ f m f_deg) * (‚ü®localization.mk ((graded_algebra.proj ùíú i (a+b))^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
    i, ((graded_algebra.proj ùíú i (a+b))^m),
    (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
    degree_zero_part _ f m f_deg) ‚àà q.1,
    cases q.2.mem_or_mem this, assumption, assumption,

    have eq1 : (‚ü®localization.mk ((graded_algebra.proj ùíú i (a + b))^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
    i, ((graded_algebra.proj ùíú i (a+b))^m),
    (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
    degree_zero_part _ f m f_deg) * (‚ü®localization.mk ((graded_algebra.proj ùíú i (a+b))^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
    i, ((graded_algebra.proj ùíú i (a+b))^m),
    (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
    degree_zero_part _ f m f_deg) = ‚ü®localization.mk ((graded_algebra.proj ùíú i (a + b))^(2*m))
     ‚ü®f^(2*i), ‚ü®_, rfl‚ü©‚ü©, 2*i, (graded_algebra.proj ùíú i (a+b))^(2*m), begin
        rw [‚Üêmul_assoc m 2 i, mul_comm m 2],
        apply set_like.graded_monoid.pow_deg,
        rw linear_map.map_add,
        apply submodule.add_mem,
        apply submodule.coe_mem,
        apply submodule.coe_mem,
      end, rfl‚ü©,
    { rw [subtype.ext_iff_val],
      rw show ((‚ü®localization.mk ((graded_algebra.proj ùíú i (a + b))^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
      i, ((graded_algebra.proj ùíú i (a+b))^m),
      (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
      degree_zero_part _ f m f_deg) * (‚ü®localization.mk ((graded_algebra.proj ùíú i (a+b))^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
      i, ((graded_algebra.proj ùíú i (a+b))^m),
      (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
      degree_zero_part _ f m f_deg)).val = (‚ü®localization.mk ((graded_algebra.proj ùíú i (a + b))^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
      i, ((graded_algebra.proj ùíú i (a+b))^m),
      (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
      degree_zero_part _ f m f_deg).val * (‚ü®localization.mk ((graded_algebra.proj ùíú i (a+b))^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
      i, ((graded_algebra.proj ùíú i (a+b))^m),
      (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
      degree_zero_part _ f m f_deg).val, from rfl,
        dsimp only,

      rw localization.mk_mul, congr' 1,
      rw [two_mul, pow_add],

      rw [subtype.ext_iff_val, show ((‚ü®f^i, _‚ü© : submonoid.powers f) * ‚ü®f^i, _‚ü©).val = f^i * f^i, from rfl],
      dsimp only, rw [two_mul, pow_add], },
      erw eq1,

      have eq2 := calc
              (‚ü®localization.mk (((graded_algebra.proj ùíú i) (a + b)) ^ (2 * m)) ‚ü®f ^ (2 * i), ‚ü®_, rfl‚ü©‚ü©,
              2*i, (((graded_algebra.proj ùíú i) (a + b)) ^ (2 * m)), begin
                rw [‚Üêmul_assoc m 2 i, mul_comm m 2],
                apply set_like.graded_monoid.pow_deg,
                rw linear_map.map_add,
                apply submodule.add_mem,
                apply submodule.coe_mem,
                apply submodule.coe_mem,
              end, rfl‚ü© : degree_zero_part _ f m f_deg)
            = ‚ü®localization.mk ((‚àë j in finset.range (2 * m + 1), ((graded_algebra.proj ùíú i) a)^j *
                ((graded_algebra.proj ùíú i) b)^(2 * m - j) * (2 * m).choose j)) ‚ü®f ^ (2 * i), ‚ü®_, rfl‚ü©‚ü©,
                2*i, ((‚àë j in finset.range (2 * m + 1), ((graded_algebra.proj ùíú i) a)^j *
                ((graded_algebra.proj ùíú i) b)^(2 * m - j) * (2 * m).choose j)), begin
                  apply submodule.sum_mem,
                  intros k hk,
                  have mem1 : (graded_algebra.proj ùíú i) a ^ k ‚àà ùíú (k * i),
                  { apply set_like.graded_monoid.pow_deg,
                    exact submodule.coe_mem _, },
                  have mem2 : (graded_algebra.proj ùíú i) b ^ (2 * m - k) ‚àà ùíú ((2*m-k) * i),
                  { apply set_like.graded_monoid.pow_deg,
                    exact submodule.coe_mem _, },
                  have mem3 : ((2 * m).choose k : A) ‚àà ùíú 0,
                  { exact set_like.graded_monoid.nat_deg_zero _ _, },
                  have eq2 : m * (2 * i) = ((k*i) + (2*m-k)*i + 0),
                  { zify,
                    have eq3 : (‚Üë(2 * m - k) : ‚Ñ§) = 2 * m - k,
                    { rw eq_sub_iff_add_eq,
                      rw [‚Üêint.coe_nat_add],
                      congr',
                      erw nat.sub_add_cancel,
                      erw finset.mem_range at hk,
                      rw nat.lt_succ_iff at hk,
                      exact hk, },
                    erw [eq3, sub_mul], ring, },
                  erw eq2,
                  apply set_like.graded_monoid.mul_mem _ mem3,
                  apply set_like.graded_monoid.mul_mem mem1 mem2,
                end, rfl‚ü©
            : begin
              erw [subtype.ext_iff_val],
              dsimp only,
              erw [linear_map.map_add, add_pow],
            end
        ... = ‚ü®localization.mk (‚àë j in (finset.range (2*m + 1)).attach,
                (graded_algebra.proj ùíú i a)^(j.val) *
                (graded_algebra.proj ùíú i b)^(2 * m - j.val) * (2 * m).choose j.val) ‚ü®f ^ (2 * i), ‚ü®_, rfl‚ü©‚ü©,
                2*i, ((‚àë j in (finset.range (2 * m + 1)).attach, ((graded_algebra.proj ùíú i) a)^j.val *
                ((graded_algebra.proj ùíú i) b)^(2 * m - j.val) * (2 * m).choose j.val)), begin
                  apply submodule.sum_mem,
                  intros k hk,
                  have mem1 : (graded_algebra.proj ùíú i) a ^ k.val ‚àà ùíú (k * i),
                  { apply set_like.graded_monoid.pow_deg,
                    exact submodule.coe_mem _, },
                  have mem2 : (graded_algebra.proj ùíú i) b ^ (2 * m - k.val) ‚àà ùíú ((2*m-k.val) * i),
                  { apply set_like.graded_monoid.pow_deg,
                    exact submodule.coe_mem _, },
                  have mem3 : ((2 * m).choose k.val : A) ‚àà ùíú 0,
                  { exact set_like.graded_monoid.nat_deg_zero _ _, },
                  have eq2 : m * (2 * i) = ((k.val*i) + (2*m-k.val)*i + 0),
                  { zify,
                    have eq3 : (‚Üë(2 * m - k.val) : ‚Ñ§) = 2 * m - k.val,
                    { rw eq_sub_iff_add_eq,
                      rw [‚Üêint.coe_nat_add],
                      congr',
                      erw nat.sub_add_cancel,
                      have hk := k.2,
                      erw finset.mem_range at hk,
                      rw nat.lt_succ_iff at hk,
                      exact hk, },
                    erw [eq3, sub_mul], ring, },
                  erw eq2,
                  apply set_like.graded_monoid.mul_mem _ mem3,
                  apply set_like.graded_monoid.mul_mem mem1 mem2,
                end, rfl‚ü© : begin
                  rw subtype.ext_iff_val,
                  dsimp only,
                  congr' 1,
                  apply finset.sum_bij',
                  work_on_goal 5 { intros a _, exact a.1, },
                  work_on_goal 3 { intros a ha, exact ‚ü®a, ha‚ü©, },
                  { intros j hj, refl, },
                  { intros j hj, dsimp only, refl, },
                  { intros j hj, dsimp only, rw subtype.ext_iff_val, },
                  { intros j hj, dsimp only, apply finset.mem_attach, },
                  { intros j hj, dsimp only, exact j.2, },
                end
        ... = ‚àë j in (finset.range (2 * m + 1)).attach,
                ‚ü®localization.mk (((graded_algebra.proj ùíú i) a)^j.1 *
                ((graded_algebra.proj ùíú i) b)^(2 * m - j.1) * (2 * m).choose j.1) ‚ü®f^(2 * i), ‚ü®2*i, rfl‚ü©‚ü©,
                2*i, (((graded_algebra.proj ùíú i) a)^j.1 *
                ((graded_algebra.proj ùíú i) b)^(2 * m - j.1) * (2 * m).choose j), begin
                  have mem1 : (graded_algebra.proj ùíú i) a ^ j.1 ‚àà ùíú (j.1 * i),
                  { apply set_like.graded_monoid.pow_deg,
                    exact submodule.coe_mem _, },
                  have mem2 : (graded_algebra.proj ùíú i) b ^ (2 * m - j.1) ‚àà ùíú ((2*m-j.1) * i),
                  { apply set_like.graded_monoid.pow_deg,
                    exact submodule.coe_mem _, },
                  have mem3 : ((2 * m).choose j.1 : A) ‚àà ùíú 0,
                  { exact set_like.graded_monoid.nat_deg_zero _ _, },

                  have eq2 : m * (2 * i) = ((j.1*i) + (2*m-j.1)*i + 0),
                  { zify,
                    have eq3 : (‚Üë(2 * m - j.1) : ‚Ñ§) = 2 * m - j.1,
                    { rw eq_sub_iff_add_eq,
                      rw [‚Üêint.coe_nat_add],
                      congr',
                      erw nat.sub_add_cancel,
                      have hj := j.2,
                      erw finset.mem_range at hj,
                      rw nat.lt_succ_iff at hj,
                      exact hj, },
                    erw [eq3, sub_mul], ring, },
                  erw eq2,
                  apply set_like.graded_monoid.mul_mem _ mem3,
                  apply set_like.graded_monoid.mul_mem mem1 mem2,
                end, rfl‚ü©
            : begin
              rw subtype.ext_iff_val,
              dsimp only,
              have : (‚àë j in (finset.range (2 * m + 1)).attach,
                (‚ü®localization.mk (((graded_algebra.proj ùíú i) a)^j.1 *
                ((graded_algebra.proj ùíú i) b)^(2 * m - j.1) * (2 * m).choose j.1)
                ‚ü®f^(2 * i), ‚ü®2*i, rfl‚ü©‚ü©, _‚ü© : degree_zero_part _ f m f_deg)).val =
                ‚àë j in (finset.range (2 * m + 1)).attach,
                  (‚ü®localization.mk (((graded_algebra.proj ùíú i) a)^j.1 *
                ((graded_algebra.proj ùíú i) b)^(2 * m - j.1) * (2 * m).choose j.1)
                ‚ü®f^(2 * i), ‚ü®2*i, rfl‚ü©‚ü©, _‚ü© : degree_zero_part _ f m f_deg).val,
              { induction (finset.range (2*m+1)).attach using finset.induction_on with b s hb ih,
                { rw [finset.sum_empty, finset.sum_empty], refl, },
                { rw [finset.sum_insert, finset.sum_insert, ‚Üêih], refl,
                  exact hb, exact hb, }, },
              erw this, dsimp only,

              induction (finset.range (2*m+1)).attach using finset.induction_on with c s hc ih,
              { rw [finset.sum_empty, finset.sum_empty, localization.mk_zero], },
              { rw [finset.sum_insert hc, finset.sum_insert hc, ‚Üêih, localization.add_mk],
                simp only [localization.mk_eq_mk', is_localization.eq],
                use 1,
                erw [mul_one, ‚Üêmul_add, mul_one],
                conv_rhs { rw [mul_assoc, mul_comm, mul_assoc] },
                congr' 1,
                rw add_comm, },
            end,
      erw eq2, apply ideal.sum_mem,
      intros k hk,
      by_cases ineq : m ‚â§ k.val,
      { -- use this part : (graded_algebra.proj ùíú i) a ^ k
        have : (‚ü®localization.mk
          ((graded_algebra.proj ùíú i) a ^ k.val * (graded_algebra.proj ùíú i) b ^ (2 * m - k.val) *
          ((2 * m).choose k.val))
          ‚ü®f ^ (2 * i), ‚ü®_, rfl‚ü©‚ü©, begin
            refine ‚ü®2*i, _, _, rfl‚ü©,
            have mem1 : (graded_algebra.proj ùíú i) a ^ k.val ‚àà ùíú (k.1 * i),
            { apply set_like.graded_monoid.pow_deg,
              exact submodule.coe_mem _, },
            have mem2 : (graded_algebra.proj ùíú i) b ^ (2 * m - k.1) ‚àà ùíú ((2*m-k.1) * i),
            { apply set_like.graded_monoid.pow_deg,
              exact submodule.coe_mem _, },
            have mem3 : ((2 * m).choose k.1 : A) ‚àà ùíú 0,
            { exact set_like.graded_monoid.nat_deg_zero _ _, },
            have eq2 : m * (2 * i) = ((k.1*i) + (2*m-k.1)*i + 0),
            { zify,
              have eq3 : (‚Üë(2 * m - k.1) : ‚Ñ§) = 2 * m - k.1,
              { rw eq_sub_iff_add_eq,
                rw [‚Üêint.coe_nat_add],
                congr',
                erw nat.sub_add_cancel,
                have hk := k.2,
                erw finset.mem_range at hk,
                rw nat.lt_succ_iff at hk,
                exact hk, },
                erw [eq3, sub_mul], ring, },
                erw eq2,
                apply set_like.graded_monoid.mul_mem _ mem3,
                apply set_like.graded_monoid.mul_mem mem1 mem2,
          end‚ü© : degree_zero_part _ f m f_deg) =
          (‚ü®localization.mk ((graded_algebra.proj ùíú i) a ^ m) ‚ü®f^i, ‚ü®i, rfl‚ü©‚ü©, begin
            refine ‚ü®i, _, _, rfl‚ü©,
            apply set_like.graded_monoid.pow_deg,
            exact submodule.coe_mem _,
          end‚ü©
            : degree_zero_part _ f m f_deg) *
          (‚ü®localization.mk ((graded_algebra.proj ùíú i) a ^ (k.val - m) *
            (graded_algebra.proj ùíú i) b ^ (2 * m - k.val) * (2*m).choose k.1) ‚ü®f^i, ‚ü®i, rfl‚ü©‚ü©, begin
              refine ‚ü®i, _, _, rfl‚ü©,
              have mem1 : (graded_algebra.proj ùíú i) a ^ (k.val - m) ‚àà ùíú ((k.val - m) * i),
              { apply set_like.graded_monoid.pow_deg,
                exact submodule.coe_mem _, },
              have mem2 : (graded_algebra.proj ùíú i) b ^ (2 * m - k.val) ‚àà ùíú ((2*m-k.1) * i),
              { apply set_like.graded_monoid.pow_deg,
                exact submodule.coe_mem _, },
              have mem3 : ((2*m).choose k.1 : A) ‚àà ùíú 0,
              { exact set_like.graded_monoid.nat_deg_zero _ _, },
              have eq1 : m * i = ((k.val - m) * i) + ((2*m-k.1) * i) + 0,
              { erw [add_zero, ‚Üêadd_mul],
                congr' 1,
                symmetry,
                exact calc k.val - m + (2*m - k.val)
                          = (k.val + (2 * m - k.1)) - m : by { rw nat.sub_add_comm ineq, }
                      ... = (k.1 + 2 * m) - k.1 - m
                          : begin
                            rw ‚Üênat.add_sub_assoc,
                            have hk := k.2,
                            rw [finset.mem_range, nat.lt_succ_iff] at hk,
                            exact hk,
                          end
                      ... = 2 * m - m : by { rw nat.add_sub_cancel_left k.1 (2*m), }
                      ... = m + m - m : by { rw two_mul, }
                      ... = m : by rw nat.add_sub_cancel, },
              erw eq1,
              apply set_like.graded_monoid.mul_mem,
              apply set_like.graded_monoid.mul_mem,
              exact mem1, exact mem2, exact mem3,
            end‚ü©
            : degree_zero_part _ f m f_deg),
        { rw [subtype.ext_iff_val, show ‚àÄ (a b : degree_zero_part _ f m f_deg),
            (a * b).val = a.val * b.val, from Œª _ _, rfl],
          dsimp only,
          rw localization.mk_mul,
          congr' 1,
          { conv_rhs { rw [‚Üêmul_assoc, ‚Üêmul_assoc, ‚Üêpow_add] },
            congr',
            symmetry,
            exact calc m + (k.1 - m)
                    = m + k.1 - m : by erw ‚Üênat.add_sub_assoc ineq
                ... = k.1 + m - m : by rw nat.add_comm
                ... = k.1 + (m-m) : by erw nat.add_sub_assoc (le_refl _)
                ... = k.1 + 0 : by rw nat.sub_self
                ... = k.1 : by rw add_zero,
             },
          { rw [subtype.ext_iff_val, show ‚àÄ (x y : submonoid.powers f), (x * y).val = x.1 * y.1,
              from Œª _ _, rfl],
            dsimp only,
            rw [‚Üêpow_two, ‚Üêpow_mul, mul_comm], }, },
        erw this,
        apply ideal.mul_mem_right,
        apply ha, },
      { -- k < m
        -- so use this part : (graded_algebra.proj ùíú i) b ^ (2 * m - k)
        have : (‚ü®localization.mk
          ((graded_algebra.proj ùíú i) a ^ k.val * (graded_algebra.proj ùíú i) b ^ (2 * m - k.val) *
          ((2 * m).choose k.val))
          ‚ü®f ^ (2 * i), ‚ü®_, rfl‚ü©‚ü©, begin
            refine ‚ü®2*i, _, _, rfl‚ü©,
            have mem1 : (graded_algebra.proj ùíú i) a ^ k.val ‚àà ùíú (k.1 * i),
            { apply set_like.graded_monoid.pow_deg,
              exact submodule.coe_mem _, },
            have mem2 : (graded_algebra.proj ùíú i) b ^ (2 * m - k.1) ‚àà ùíú ((2*m-k.1) * i),
            { apply set_like.graded_monoid.pow_deg,
              exact submodule.coe_mem _, },
            have mem3 : ((2 * m).choose k.1 : A) ‚àà ùíú 0,
            { exact set_like.graded_monoid.nat_deg_zero _ _, },
            have eq2 : m * (2 * i) = ((k.1*i) + (2*m-k.1)*i + 0),
            { zify,
              have eq3 : (‚Üë(2 * m - k.1) : ‚Ñ§) = 2 * m - k.1,
              { rw eq_sub_iff_add_eq,
                rw [‚Üêint.coe_nat_add],
                congr',
                erw nat.sub_add_cancel,
                have hk := k.2,
                erw finset.mem_range at hk,
                rw nat.lt_succ_iff at hk,
                exact hk, },
                erw [eq3, sub_mul], ring, },
                erw eq2,
                apply set_like.graded_monoid.mul_mem _ mem3,
                apply set_like.graded_monoid.mul_mem mem1 mem2,
          end‚ü© : degree_zero_part _ f m f_deg) =
          (‚ü®localization.mk ((graded_algebra.proj ùíú i) b ^ m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©, begin
            refine ‚ü®i, _, _, rfl‚ü©,
            apply set_like.graded_monoid.pow_deg,
            exact submodule.coe_mem _,
          end‚ü©
            : degree_zero_part _ f m f_deg)
          * (‚ü®localization.mk ((graded_algebra.proj ùíú i) a ^ k.val *
              (graded_algebra.proj ùíú i) b ^ (m - k.val) * ((2 * m).choose k.val))
              ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©, begin
                have mem1 : (graded_algebra.proj ùíú i) a ^ k.val ‚àà ùíú (k.1 * i),
                { apply set_like.graded_monoid.pow_deg,
                  exact submodule.coe_mem _, },
                have mem2 : (graded_algebra.proj ùíú i) b ^ (m - k.val) ‚àà ùíú ((m - k.1) * i),
                { apply set_like.graded_monoid.pow_deg,
                  exact submodule.coe_mem _, },
                have mem3 : ‚Üë((2 * m).choose k.val) ‚àà ùíú 0,
                { apply set_like.graded_monoid.nat_deg_zero, },
                have eq1 : k.1 * i + (m - k.1) * i + 0 = m * i,
                { exact calc k.1 * i + (m - k.1) * i + 0
                          = k.1 * i + (m - k.1) * i : by { rw add_zero }
                      ... = (k.1 + (m - k.1)) * i : by { rw add_mul, }
                      ... = (k.1 + m - k.1) * i
                            : begin
                              rw nat.add_sub_assoc,
                              rw not_le at ineq,
                              apply le_of_lt,
                              exact ineq,
                            end
                      ... = m * i : by rw nat.add_sub_cancel_left, },
                refine ‚ü®_, _, _, rfl‚ü©,
                erw ‚Üêeq1,
                apply set_like.graded_monoid.mul_mem,
                apply set_like.graded_monoid.mul_mem,
                exact mem1, exact mem2, exact mem3,
              end‚ü© : degree_zero_part _ f m f_deg),
        { rw subtype.ext_iff_val,
          rw show ‚àÄ (a b : degree_zero_part _ f m f_deg), (a * b).val = a.1 * b.1, from Œª _ _, rfl,
          dsimp only,
          rw localization.mk_mul,
          congr' 1,
          { conv_rhs { rw [‚Üêmul_assoc, ‚Üêmul_assoc] },
            congr' 1,
            conv_rhs { rw [mul_comm, ‚Üêmul_assoc, ‚Üêpow_add, mul_comm] },
            congr',
            erw [‚Üênat.sub_add_comm],
            simp only [two_mul],
            rw not_le at ineq,
            apply le_of_lt,
            exact ineq, },
          { rw [subtype.ext_iff_val, show ‚àÄ (x y : submonoid.powers f), (x * y).val = x.1 * y.1,
              from Œª _ _, rfl],
            dsimp only,
            rw [‚Üêpow_two, ‚Üêpow_mul, mul_comm], }, },
        erw this,
        apply ideal.mul_mem_right,
        apply hb, }, },
end

lemma isos.backward.carrier.smul_mem (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï)
  (hm : 0 < m)
  (f_deg : f ‚àà ùíú m)
  (q : (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1)
  (c x : A) (hx : x ‚àà isos.backward.carrier ùíú f m hm f_deg q) :
  c ‚Ä¢ x ‚àà isos.backward.carrier ùíú f m hm f_deg q :=
begin
  apply set_like.homogeneous_induction ùíú c,
  { rw zero_smul,
    apply isos.backward.carrier.zero_mem, },
  { rintros ‚ü®a, ‚ü®n, ha‚ü©‚ü©,
    rw isos.backward.carrier at hx ‚ä¢,
    { intros i,
      by_cases ineq1 : n ‚â§ i,
      { have eq1 : (graded_algebra.proj ùíú i) (a * x) =
          ite (i - n ‚àà graded_algebra.support ùíú x) (a * (graded_algebra.proj ùíú (i - n)) x) 0,
        { exact calc
                  (graded_algebra.proj ùíú i) (a * x)
                = graded_algebra.proj ùíú i ‚àë j in graded_algebra.support ùíú x, (a * (graded_algebra.proj ùíú j x))
                : begin
                  conv_lhs { rw [‚Üêgraded_algebra.sum_support_decompose ùíú x] },
                  simp_rw [‚Üêgraded_algebra.proj_apply],
                  rw [finset.mul_sum],
                end
            ... = ‚àë j in graded_algebra.support ùíú x, (graded_algebra.proj ùíú i (a * (graded_algebra.proj ùíú j x)))
                : begin
                  rw linear_map.map_sum,
                end
            ... = ‚àë j in graded_algebra.support ùíú x, (ite (j = i - n) (graded_algebra.proj ùíú i (a * (graded_algebra.proj ùíú j x))) 0)
                : begin
                  rw finset.sum_congr rfl,
                  intros j hj, symmetry,
                  split_ifs with H,
                  refl,
                  symmetry,
                  have mem1 : a * graded_algebra.proj ùíú j x ‚àà ùíú (n + j),
                  { apply set_like.graded_monoid.mul_mem ha (submodule.coe_mem _), },
                  rw graded_algebra.proj_apply,
                  apply graded_algebra.decompose_of_mem_ne ùíú mem1,
                  intro rid,
                  rw [‚Üêrid, add_comm, nat.add_sub_assoc, nat.sub_self, add_zero] at H,
                  apply H, refl, refl,
                end
            ... = ‚àë j in graded_algebra.support ùíú x,
                  (ite (j = i - n) (a * (graded_algebra.proj ùíú j x)) 0)
                : begin
                  rw finset.sum_congr rfl,
                  intros j hj,
                  split_ifs with eq1 ineq1,
                  rw [graded_algebra.proj_apply, graded_algebra.proj_apply],
                  apply graded_algebra.decompose_of_mem_same,
                  rw ‚Üêgraded_algebra.proj_apply,
                  have eq2 : i = j + n,
                  { rw [eq1, nat.sub_add_cancel], exact ineq1, },
                  rw [eq2, add_comm],
                  apply set_like.graded_monoid.mul_mem ha (submodule.coe_mem _),
                  refl,
                end
            ... = ite (i - n ‚àà graded_algebra.support ùíú x)
                    (a * (graded_algebra.proj ùíú (i - n)) x) 0 : by rw finset.sum_ite_eq',
                },

        split_ifs at eq1,

        have eq2 := calc
                (‚ü®localization.mk ((graded_algebra.proj ùíú i) (a * x) ^ m) ‚ü®f ^ i, ‚ü®_, rfl‚ü©‚ü©,
                  isos.backward.carrier._proof_4 _ f m (a * x) i‚ü© : degree_zero_part _ f m f_deg)
              = (‚ü®localization.mk
                    ((a * (graded_algebra.proj ùíú (i - n) x))^m) ‚ü®f ^ i, ‚ü®_, rfl‚ü©‚ü©,
                  begin
                    erw ‚Üêeq1,
                    apply isos.backward.carrier._proof_4 ùíú f m ((a * x)) i,
                  end‚ü© : degree_zero_part _ f m f_deg)
              : begin
                rw subtype.ext_iff_val, dsimp only, erw eq1,
              end
          ... = (‚ü®localization.mk ((a^m * (graded_algebra.proj ùíú (i - n) x)^m))
                  ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©, begin
                    erw [‚Üêmul_pow, ‚Üêeq1],
                    apply isos.backward.carrier._proof_4 ùíú f m ((a * x)) i,
                  end‚ü© : degree_zero_part _ f m f_deg)
              : begin
                rw subtype.ext_iff_val, dsimp only,
                erw mul_pow,
              end
          ... = (‚ü®localization.mk (a^m) ‚ü®f^n, ‚ü®_, rfl‚ü©‚ü©, begin
                  refine ‚ü®n, a^m, _, rfl‚ü©,
                  dsimp only,
                  have mem1 := aux.pow_deg ùíú a n ha m,
                  rw mul_comm at mem1,
                  exact mem1,
                end‚ü© : degree_zero_part _ f m f_deg) *
                (‚ü®localization.mk ((graded_algebra.proj ùíú (i -n) x)^m) ‚ü®f^(i-n), ‚ü®_, rfl‚ü©‚ü©, begin
                  refine ‚ü®i-n, _, _, rfl‚ü©,
                  have mem1 := aux.pow_deg ùíú (graded_algebra.proj ùíú (i-n) x) (i-n) (submodule.coe_mem _) m,
                  rw mul_comm at mem1,
                  exact mem1,
                end‚ü© : degree_zero_part _ f m f_deg)
              : begin
                rw subtype.ext_iff_val,
                rw [show ‚àÄ (x y : degree_zero_part _ f m f_deg), (x * y).val = x.val * y.val, begin
                  intros x y, refl,
                end],
                dsimp only,
                erw [localization.mk_mul],
                congr',
                dsimp only,
                erw ‚Üêpow_add,
                congr',
                rw [‚Üênat.add_sub_assoc, add_comm, nat.add_sub_assoc, nat.sub_self, add_zero],
                refl,
                exact ineq1,
              end,

        erw eq2,
        apply ideal.mul_mem_left,
        apply hx,


        simp only [smul_eq_mul, eq1, zero_pow hm, localization.mk_zero],
        exact submodule.zero_mem _, },

      { -- in this case, the left hand side is zero
        rw not_le at ineq1,
        convert submodule.zero_mem _,
        suffices : graded_algebra.proj ùíú i (a ‚Ä¢ x) = 0,
        erw [this, zero_pow hm, localization.mk_zero],

        rw [‚Üêgraded_algebra.sum_support_decompose ùíú x, smul_eq_mul, finset.mul_sum, linear_map.map_sum],
        simp_rw [‚Üêgraded_algebra.proj_apply],
        convert finset.sum_eq_zero _,
        intros j hj,
        rw [graded_algebra.proj_apply],
        have mem1 : a * graded_algebra.proj ùíú j x ‚àà ùíú (n + j),
        { apply set_like.graded_monoid.mul_mem ha (submodule.coe_mem _), },
        apply graded_algebra.decompose_of_mem_ne ùíú mem1,
        suffices : i < n + j,
        symmetry,
        apply ne_of_lt this,

        exact lt_of_lt_of_le ineq1 (nat.le_add_right _ _), }, },
    },
  { intros a b ha hb,
    erw add_smul,
    apply isos.backward.carrier.add_mem _ f m hm f_deg q (a ‚Ä¢ x) (b ‚Ä¢ x) ha hb, },
end

def isos.backward.carrier.as_ideal (f : A) [decidable_eq (localization.away f)]
  (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (q : (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1) :
  ideal A :=
{ carrier := isos.backward.carrier _ f m hm f_deg q,
  zero_mem' := isos.backward.carrier.zero_mem _ f m hm f_deg q,
  add_mem' := isos.backward.carrier.add_mem _ f m hm f_deg q,
  smul_mem' := isos.backward.carrier.smul_mem _ f m hm f_deg q }

lemma isos.backward.carrier.homogeneous (f : A) [decidable_eq (localization.away f)]
  (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (q : (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1) :
  ideal.is_homogeneous ùíú (isos.backward.carrier.as_ideal _ f m hm f_deg q) :=
begin
  intros i a ha,
  rw ‚Üêgraded_algebra.proj_apply,
  rw isos.backward.carrier.as_ideal at ha ‚ä¢,
  suffices : (graded_algebra.proj _ i a) ‚àà isos.backward.carrier _ f m hm f_deg q,
  exact this,
  change a ‚àà isos.backward.carrier _ f m hm f_deg q at ha,
  rw isos.backward.carrier at ha ‚ä¢,
  { intros j,
    have := calc (‚ü®localization.mk ((graded_algebra.proj ùíú j (graded_algebra.proj ùíú i a)) ^ m)
              ‚ü®f^j, ‚ü®_, rfl‚ü©‚ü©, begin
                refine ‚ü®j, _, _, rfl‚ü©,
                apply set_like.graded_monoid.pow_deg,
                exact submodule.coe_mem _,
              end‚ü© : degree_zero_part _ f m f_deg)
            = (‚ü®localization.mk ((ite (j = i) (graded_algebra.proj ùíú j a) 0)^m)
              ‚ü®f^j, ‚ü®_, rfl‚ü©‚ü©, begin
                refine ‚ü®j, _, _, rfl‚ü©,
                apply set_like.graded_monoid.pow_deg,
                split_ifs,
                exact submodule.coe_mem _,
                exact submodule.zero_mem _,
              end‚ü© : degree_zero_part _ f m f_deg)
              : begin
                rw [subtype.ext_iff_val],
                dsimp only,
                congr',
                split_ifs with eq1,
                rw [graded_algebra.proj_apply, graded_algebra.proj_apply, eq1],
                apply graded_algebra.decompose_of_mem_same,
                rw [‚Üêgraded_algebra.proj_apply],
                exact submodule.coe_mem _,

                apply graded_algebra.decompose_of_mem_ne ùíú (submodule.coe_mem _),
                symmetry, exact eq1,
              end
        ... = (‚ü®localization.mk ((ite (j = i) ((graded_algebra.proj ùíú j a)^m) 0))
              ‚ü®f^j, ‚ü®_, rfl‚ü©‚ü©, begin
                refine ‚ü®j, _, _, rfl‚ü©,
                split_ifs,
                apply set_like.graded_monoid.pow_deg,
                exact submodule.coe_mem _,
                exact submodule.zero_mem _,
              end‚ü© : degree_zero_part _ f m f_deg)
              : begin
                rw [subtype.ext_iff_val],
                dsimp only,
                split_ifs, refl,
                rw zero_pow hm,
              end
        ... = ite (j = i) (‚ü®localization.mk ((graded_algebra.proj ùíú i a)^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
              begin
                refine ‚ü®i, _, _, rfl‚ü©,
                apply set_like.graded_monoid.pow_deg,
                exact submodule.coe_mem _,
              end‚ü©
              : degree_zero_part _ f m f_deg) (0 : degree_zero_part _ f m f_deg)
              : begin
                split_ifs with H,
                erw H,
                simp only [subtype.ext_iff_val, localization.mk_zero],
                refl,
              end,
    erw this,
    split_ifs with H,
    { apply ha, },
    { exact submodule.zero_mem _, }, },
end

variable [Œ† (I : homogeneous_ideal ùíú) (x : A),
  decidable_pred (Œª (i : ‚Ñï), (graded_algebra.proj ùíú i) x ‚àâ I)]

lemma isos.backward.carrier.prime (f : A) [decidable_eq (localization.away f)]
  (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (q : (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1) :
  ideal.is_prime (isos.backward.carrier.as_ideal _ f m hm f_deg q) :=
begin
  apply homogeneous_ideal.is_prime_iff ùíú ‚ü®(isos.backward.carrier.as_ideal ùíú f m hm f_deg q),
    isos.backward.carrier.homogeneous ùíú f m hm f_deg q‚ü©,
  { -- ‚â† ‚ä§
    intro rid,
    rw homogeneous_ideal.eq_top_iff at rid,
    dsimp only at rid,
    rw ideal.eq_top_iff_one at rid,
    apply q.is_prime.1,
    rw ideal.eq_top_iff_one,
    specialize rid 0,
    have eq1 : graded_algebra.proj ùíú 0 1 = 1,
    { rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same],
      exact set_like.graded_monoid.one_mem, },
    simp only [eq1, one_pow] at rid,
    convert rid,
    rw [subtype.ext_iff_val, show (1 : degree_zero_part _ f m f_deg).val = 1, from rfl],
    dsimp only,
    symmetry,
    convert localization.mk_one,
    rw pow_zero, },
  { -- homogeneously prime
    rintros x y ‚ü®nx, hnx‚ü© ‚ü®ny, hny‚ü© hxy,
    contrapose hxy,
    rw not_or_distrib at hxy,
    dsimp only at hxy,
    rcases hxy with ‚ü®hx, hy‚ü©,
    change x ‚àâ isos.backward.carrier _ f m hm f_deg q at hx,
    change y ‚àâ isos.backward.carrier _ f m hm f_deg q at hy,
    change ¬¨(‚àÄ (i : ‚Ñï), (‚ü®localization.mk ((graded_algebra.proj ùíú i x)^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
      i, ((graded_algebra.proj ùíú i x)^m),
      (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
      degree_zero_part _ f m f_deg) ‚àà q.1) at hx,
    change ¬¨(‚àÄ (i : ‚Ñï), (‚ü®localization.mk ((graded_algebra.proj ùíú i y)^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
      i, ((graded_algebra.proj ùíú i y)^m),
      (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
      degree_zero_part _ f m f_deg) ‚àà q.1) at hy,
    rw not_forall at hx hy,
    obtain ‚ü®ix, hix‚ü© := hx,
    obtain ‚ü®iy, hiy‚ü© := hy,
    intro rid,
    change ‚àÄ (i : ‚Ñï), (‚ü®localization.mk ((graded_algebra.proj ùíú i (x*y))^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
      i, ((graded_algebra.proj ùíú i (x*y))^m),
      (set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) m), rfl‚ü© :
      degree_zero_part _ f m f_deg) ‚àà q.1 at rid,
    specialize rid (nx + ny),
    have eqx : nx = ix,
    { by_contra rid,
      apply hix,
      convert submodule.zero_mem _,
      rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_ne ùíú hnx rid, zero_pow hm,
        localization.mk_zero], },
    have eqy : ny = iy,
    { by_contra rid,
      apply hiy,
      convert submodule.zero_mem _,
      rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_ne ùíú hny rid, zero_pow hm,
        localization.mk_zero], },
    erw ‚Üêeqx at hix,
    erw ‚Üêeqy at hiy,
    have eqx2 : (‚ü®localization.mk ((graded_algebra.proj ùíú nx) x ^ m) ‚ü®f ^ nx, ‚ü®_, rfl‚ü©‚ü©, begin
      refine ‚ü®nx, _, _, rfl‚ü©,
      apply set_like.graded_monoid.pow_deg,
      rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same ùíú hnx],
      exact hnx,
    end‚ü©
      : degree_zero_part _ f m f_deg) =
      (‚ü®localization.mk (x^m) ‚ü®f^nx, ‚ü®_, rfl‚ü©‚ü©, begin
        refine ‚ü®nx, _, _, rfl‚ü©,
        apply set_like.graded_monoid.pow_deg,
        exact hnx,
      end‚ü© : degree_zero_part _ f m f_deg),
    { rw subtype.ext_iff_val,
      dsimp only,
      congr' 1,
      rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same],
      exact hnx },
    erw eqx2 at hix,

    have eqy2 : (‚ü®localization.mk ((graded_algebra.proj ùíú ny) y ^ m) ‚ü®f ^ ny, ‚ü®_, rfl‚ü©‚ü©, begin
      refine ‚ü®ny, _, _, rfl‚ü©,
      apply set_like.graded_monoid.pow_deg,
      rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same ùíú hny],
      exact hny,
    end‚ü©
      : degree_zero_part _ f m f_deg) =
      (‚ü®localization.mk (y^m) ‚ü®f^ny, ‚ü®_, rfl‚ü©‚ü©, begin
        refine ‚ü®ny, _, _, rfl‚ü©,
        apply set_like.graded_monoid.pow_deg,
        exact hny,
      end‚ü© : degree_zero_part _ f m f_deg),
    { rw subtype.ext_iff_val,
      dsimp only,
      congr' 1,
      rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same],
      exact hny },
    erw eqy2 at hiy,

    have eq3 : (‚ü®localization.mk ((graded_algebra.proj ùíú (nx+ny)) (x*y) ^ m)
      ‚ü®f^(nx+ny), ‚ü®_, rfl‚ü©‚ü©, begin
        refine ‚ü®nx + ny, _, _, rfl‚ü©,
        apply set_like.graded_monoid.pow_deg,
        rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same],
        apply set_like.graded_monoid.mul_mem hnx hny,
        apply set_like.graded_monoid.mul_mem hnx hny,
      end‚ü©
      : degree_zero_part _ f m f_deg) =
      (‚ü®localization.mk ((x*y)^m) ‚ü®f^(nx+ny), ‚ü®_, rfl‚ü©‚ü©, begin
        refine ‚ü®nx + ny, _, _, rfl‚ü©,
        apply set_like.graded_monoid.pow_deg,
        apply set_like.graded_monoid.mul_mem hnx hny,
      end‚ü© : degree_zero_part _ f m f_deg),
    { rw subtype.ext_iff_val,
      dsimp only,
      congr' 1,
      rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same],
      apply set_like.graded_monoid.mul_mem hnx hny, },
    erw eq3 at rid,

    have eq4 : (‚ü®localization.mk ((x*y)^m) ‚ü®f^(nx+ny), ‚ü®_, rfl‚ü©‚ü©, begin
      refine ‚ü®nx + ny, _, _, rfl‚ü©,
      apply set_like.graded_monoid.pow_deg,
      apply set_like.graded_monoid.mul_mem hnx hny,
    end‚ü© : degree_zero_part _ f m f_deg)
    = (‚ü®localization.mk (x^m) ‚ü®f^nx, ‚ü®_, rfl‚ü©‚ü©, begin
        refine ‚ü®nx, _, _, rfl‚ü©,
        apply set_like.graded_monoid.pow_deg,
        exact hnx,
    end‚ü© : degree_zero_part _ f m f_deg) *
      (‚ü®localization.mk (y^m) ‚ü®f^ny, ‚ü®_, rfl‚ü©‚ü©, begin
        refine ‚ü®ny, _, _, rfl‚ü©,
        apply set_like.graded_monoid.pow_deg,
        exact hny,
      end‚ü© : degree_zero_part _ f m f_deg),
    { rw [subtype.ext_iff_val, show ‚àÄ (x y : degree_zero_part _ f m f_deg), (x * y).1 = x.1 * y.1,
        from Œª _ _, rfl],
      dsimp only,
      rw [localization.mk_mul],
      congr',
      rw mul_pow,
      rw pow_add, },
    erw eq4 at rid,

    rcases ideal.is_prime.mem_or_mem (q.is_prime) rid with L | R,
    apply hix, exact L,
    apply hiy, exact R, },
end

lemma isos.backward.carrier.irrelavent (f : A) [decidable_eq (localization.away f)]
  (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (q : (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1) :
  ¬¨(irrelavent_ideal ùíú ‚â§ ‚ü®isos.backward.carrier.as_ideal ùíú f m hm f_deg q,
    isos.backward.carrier.homogeneous ùíú f m hm f_deg q‚ü©) :=
begin
  intro rid,
  have mem1 : f ‚àâ isos.backward.carrier.as_ideal ùíú f m hm f_deg q,
  { intro rid2,
    specialize rid2 m,
    apply q.is_prime.1,
    rw ideal.eq_top_iff_one,
    convert rid2,
    rw [subtype.ext_iff_val, show (1 : degree_zero_part _ f m f_deg).1 = 1, from rfl],
    dsimp only,
    symmetry,
    erw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same],
    convert localization.mk_self _,
    refl,
    exact f_deg,
  },
  apply mem1,
  have mem2 : f ‚àà irrelavent_ideal ùíú,
  { change graded_algebra.proj ùíú 0 f = 0,
    rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_ne ùíú f_deg],
    symmetry,
    apply ne_of_lt,
    exact hm,
  },
  apply rid mem2,
end

def isos.forward.carrer_ne_top (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (f_deg : f ‚àà ùíú m)
  (x : Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))) :
  ((x.1.as_homogeneous_ideal.1 : set A) ‚à© (submonoid.powers f : set A)) = ‚àÖ ‚Üí
  isos.forward.carrier ùíú f m f_deg x ‚â† ‚ä§ := Œª eq_top,
begin
  contrapose eq_top, rw not_not at eq_top,
  rw [ideal.eq_top_iff_one, isos.forward.carrier] at eq_top,
  simp only [submodule.mem_mk, set.mem_set_of_eq] at eq_top,
  erw [‚Üêideal.submodule_span_eq, finsupp.span_eq_range_total, set.mem_range] at eq_top,
  obtain ‚ü®c, eq1‚ü© := eq_top,
  rw [finsupp.total_apply, finsupp.sum] at eq1, dsimp only at eq1,
  -- y = localization.mk (g y) 1
  set g :=
  Œª (a : {y : localization (submonoid.powers f) | ‚àÉ (g : A),
      g ‚àà (projective_spectrum.as_homogeneous_ideal x.val).val ‚àß y = localization.mk g 1}),
    classical.some a.2 with g_eq,
  obtain ‚ü®N, hN‚ü© := clear_denominator _ f (finset.image c c.support), -- N is the common denom
  choose after_clear_denominator hacd using hN,
  -- if x ‚àà c.support, then `after_clear_denominatro x = x * f ^ N ‚àà A`
  have prop1 : ‚àÄ i, i ‚àà c.support ‚Üí c i ‚àà finset.image c c.support,
  { intros i hi, rw finset.mem_image, refine ‚ü®_, hi, rfl‚ü©, },
  set G := ‚àë i in c.support.attach, (after_clear_denominator (c i.1) (prop1 i.1 i.2)) * (g i.1) with
    G_eq,
  have G_mem1 : G ‚àà x.1.as_homogeneous_ideal.1,
  { apply ideal.sum_mem, intros i hi,
    apply ideal.mul_mem_left,
    refine (classical.some_spec i.1.2).1, },
  have G_mem2 : ‚àÉ (m : ‚Ñï), G * f^m ‚àà submonoid.powers f,
  { have eq2 := calc
          (localization.mk G 1 : localization.away f)
        = localization.mk (‚àë i in c.support.attach,
          after_clear_denominator (c i.1) (prop1 i.1 i.2) * (g i.1)) 1
        : begin
          congr' 1,
        end
    ... = ‚àë i in c.support.attach, localization.mk
            (after_clear_denominator (c i.1) (prop1 i.1 i.2) * (g i.1)) 1
        : begin
          induction c.support.attach using finset.induction_on with a s ha ih,
          { rw [finset.sum_empty, finset.sum_empty, localization.mk_zero], },
          { rw [finset.sum_insert, finset.sum_insert, ‚Üêih, localization.add_mk, mul_one],
            congr' 1, erw [add_comm, one_mul, one_mul], exact ha, exact ha,
             },
        end
    ... = ‚àë i in c.support.attach, localization.mk
            (after_clear_denominator (c i.1) (prop1 i.1 i.2)) 1 * localization.mk (g i.1) 1
        : begin
          rw [finset.sum_congr rfl (Œª i hi, _)],
          rw [localization.mk_mul, one_mul],
        end
    ... = ‚àë i in c.support.attach, (c i.1) * localization.mk (f^N) 1 * localization.mk (g i.1) 1
        : begin
          rw [finset.sum_congr rfl (Œª i hi, _)],
          erw ‚Üê(hacd _ _).2,
        end
    ... = ‚àë i in c.support.attach, (c i.1) * localization.mk (f^N) 1 * i.1.1
        : begin
          rw [finset.sum_congr rfl (Œª i hi, _)],
          rw (classical.some_spec i.1.2).2,
        end
    ... = localization.mk (f^N) 1 * ‚àë i in c.support.attach, (c i.1) ‚Ä¢ i.1.1
        : begin
          rw [finset.mul_sum, finset.sum_congr rfl (Œª i hi, _)], rw smul_eq_mul, ring,
        end
    ... = localization.mk (f^N) 1 * ‚àë i in c.support, (c i) ‚Ä¢ i.1
        : begin
          congr' 1, apply finset.sum_bij',
          work_on_goal 5 { rintros a ha, exact ‚ü®a, ha‚ü©, },
          work_on_goal 3 { rintros a _, exact a.1, },
          { rintros, dsimp only, refl, },
          { rintros, dsimp only, rw subtype.ext_iff, refl, },
          { rintros, dsimp only, rw subtype.ext_iff, },
          { rintros, dsimp only, exact a.2, },
          { rintros, dsimp only, apply finset.mem_attach, },
        end
    ... = localization.mk (f^N) 1 * 1 : by { erw eq1, congr' 1, }
    ... = localization.mk (f^N) 1 : by rw mul_one,
    simp only [localization.mk_eq_mk', is_localization.eq] at eq2,
    obtain ‚ü®‚ü®c, ‚ü®m, rfl‚ü©‚ü©, hc2‚ü© := eq2,
    erw [‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, show (1 : submonoid.powers f).val = 1, from rfl,
      mul_one, mul_one] at hc2,
    dsimp only at hc2, rw ‚Üêpow_add at hc2,
    refine ‚ü®m, ‚ü®N+m, hc2.symm‚ü©‚ü©, },

  obtain ‚ü®m, hm‚ü© := G_mem2,
  erw [‚Üêne.def, set.ne_empty_iff_nonempty],
  refine ‚ü®_, _, hm‚ü©,
  apply ideal.mul_mem_right,
  exact G_mem1,
end

-- forward direction `p ‚àà Proj` so `p` is a prime ideal in `A`. Send it to `p S_f ‚à© S_(f)`
def isos.top_component.forward.to_fun (f : A) [decidable_eq (localization.away f)]  (m : ‚Ñï) (f_deg : f ‚àà ùíú m) :
  (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.to_PresheafedSpace.1 ‚Üí
  (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1 := Œª x,
‚ü®isos.forward.carrier _ f m f_deg x,
  ‚ü®begin
    apply isos.forward.carrer_ne_top, by_contra rid,
    erw [‚Üêne.def, set.ne_empty_iff_nonempty] at rid,
    choose g hg using rid,
    obtain ‚ü®hg1, ‚ü®k, rfl‚ü©‚ü© := hg, by_cases k_ineq : 0 < k,
    erw ideal.is_prime.pow_mem_iff_mem at hg1,
    apply x.2, exact hg1, exact x.1.is_prime, exact k_ineq,
    have k_eq : 0 = k, linarith,
    erw [‚Üêk_eq, pow_zero, ‚Üêideal.eq_top_iff_one] at hg1,
    apply x.1.is_prime.1, exact hg1,
  end, Œª x1 x2 hx12, begin
    rw isos.forward.carrier at hx12,
    rcases x1 with ‚ü®x1, hx1‚ü©,
    induction x1 using localization.induction_on with data_x1,
    rcases data_x1 with ‚ü®a1, _, ‚ü®n1, rfl‚ü©‚ü©,
    rcases x2 with ‚ü®x2, hx2‚ü©,
    induction x2 using localization.induction_on with data_x2,
    rcases data_x2 with ‚ü®a2, _, ‚ü®n2, rfl‚ü©‚ü©,
    dsimp only at hx1 hx2 hx12,
    have : (‚ü®localization.mk a1 ‚ü®f ^ n1, _‚ü©, hx1‚ü© : degree_zero_part _ f m f_deg) *
        ‚ü®localization.mk a2 ‚ü®f ^ n2, _‚ü©, hx2‚ü© =
    ‚ü®localization.mk a1 ‚ü®f ^ n1, _‚ü© * localization.mk a2 ‚ü®f ^ n2, _‚ü©, _‚ü© := rfl,
    erw [this] at hx12, simp only [localization.mk_mul] at hx12,
    replace hx12 : localization.mk (a1 * a2) (‚ü®f ^ n1, _‚ü© * ‚ü®f ^ n2, _‚ü©) ‚àà ideal.span {y :
      localization (submonoid.powers f) | ‚àÉ (g : A),
        g ‚àà (projective_spectrum.as_homogeneous_ideal x.val).val ‚àß y = localization.mk g 1} :=
        hx12,
    erw [‚Üêideal.submodule_span_eq, finsupp.span_eq_range_total, set.mem_range] at hx12,
    obtain ‚ü®c, eq1‚ü© := hx12,
    erw [finsupp.total_apply, finsupp.sum] at eq1,
    -- (a1 a2) / (f^(n + m)) = ‚àë i in c.support, (c i) * i,

    have prop1 : ‚àÄ i, i ‚àà c.support ‚Üí c i ‚àà finset.image c c.support,
    { intros i hi, rw finset.mem_image, refine ‚ü®_, hi, rfl‚ü©, },
    set g :=
    Œª (a : {y : localization (submonoid.powers f) | ‚àÉ (g : A),
      g ‚àà (projective_spectrum.as_homogeneous_ideal x.val).val ‚àß y = localization.mk g 1}),
        classical.some a.2 with g_eq,
    obtain ‚ü®N, hN‚ü© := clear_denominator _ f (finset.image c c.support), -- N is the common denom
    choose after_clear_denominator hacd using hN,
    -- if x ‚àà c.support, then `after_clear_denominator x = x * f ^ N`
    have eq2 := calc
            localization.mk (f^(n1+n2)) 1 * localization.mk (f^N) 1 *
            ‚àë i in c.support, c i ‚Ä¢ i.1
          = localization.mk (f^(n1+n2)) 1 * localization.mk (f^N) 1 *
            ‚àë i in c.support.attach, c (i.1) ‚Ä¢ i.1.1
          : begin
          congr' 1, apply finset.sum_bij',
          work_on_goal 5 { rintros a _, exact a.1, },
          work_on_goal 3 { rintros a ha, exact ‚ü®a, ha‚ü© },
            { rintros, dsimp only, refl, },
            { rintros, dsimp only, rw subtype.ext_iff, },
            { rintros, dsimp only, rw subtype.ext_iff, refl, },
            { rintros, dsimp only, apply finset.mem_attach, },
            { rintros, dsimp only, exact a.2, },
          end
      ... = localization.mk (f^(n1+n2)) 1 * localization.mk (f^N) 1 *
            ‚àë i in c.support.attach, c (i.1) * i.1.1
          : by congr' 1
      ... = localization.mk (f^(n1+n2)) 1 *
            ‚àë i in c.support.attach, c (i.1) * localization.mk (f^N) 1 * i.1.1
          : begin
            erw [mul_assoc, finset.mul_sum, finset.sum_congr rfl (Œª i hi, _)], ring,
          end
      ... = localization.mk (f^(n1+n2)) 1 * ‚àë i in c.support.attach,
              localization.mk (after_clear_denominator (c i.1) (prop1 i.1 i.2)) 1 * i.1.1
          : begin
            erw [finset.sum_congr rfl (Œª i hi, _)],
            erw ‚Üê(hacd _ _).2,
          end
      ... = localization.mk (f^(n1+n2)) 1 * ‚àë i in c.support.attach,
              localization.mk (after_clear_denominator (c i.1) (prop1 i.1 i.2)) 1 *
              localization.mk (g i.1) 1
          : begin
            erw [finset.sum_congr rfl (Œª i hi, _)],
            rw (classical.some_spec i.1.2).2,
          end
      ... = localization.mk (f^(n1+n2)) 1 * ‚àë i in c.support.attach,
              localization.mk ((after_clear_denominator (c i.1) (prop1 i.1 i.2)) * (g i.1)) 1
          : begin
            erw [finset.sum_congr rfl (Œª i hi, _)],
            rw [localization.mk_mul, mul_one],
          end
      ... = localization.mk (f^(n1+n2)) 1 *
            localization.mk (‚àë i in c.support.attach, (after_clear_denominator (c i.1)
              (prop1 i.1 i.2)) * (g i.1)) 1
          : begin
            congr' 1,
            induction c.support.attach using finset.induction_on with a s ha ih,
            { rw [finset.sum_empty, finset.sum_empty, localization.mk_zero], },
            { rw [finset.sum_insert, finset.sum_insert, ih, localization.add_mk, mul_one],
              congr' 1, erw [one_mul, one_mul, add_comm], exact ha, exact ha, }
          end,
    erw [eq1, localization.mk_mul, one_mul, localization.mk_mul, one_mul] at eq2,
    have eq3 : (localization.mk (f ^ (n1 + n2) * f ^ N * (a1 * a2)) (‚ü®f ^ n1, _‚ü© * ‚ü®f ^ n2, _‚ü©)
      : localization.away f) = localization.mk (f^N * (a1 * a2)) 1,
    { simp only [localization.mk_eq_mk'],
      rw [is_localization.eq], use 1,
      erw [‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, mul_one, mul_one, mul_one,
        show (‚àÄ (a b : submonoid.powers f), (a * b).val = a.val * b.val), from Œª _ _, rfl,
        pow_add], ring, },
    erw [eq3, localization.mk_mul, mul_one] at eq2,
    simp only [localization.mk_eq_mk'] at eq2,
    erw [is_localization.eq] at eq2,
    obtain ‚ü®‚ü®_, ‚ü®k, rfl‚ü©‚ü©, eq2‚ü© := eq2,
    erw [mul_one, mul_one, ‚Üêsubtype.val_eq_coe] at eq2,
    dsimp only at eq2,
    have mem1 : f ^ N * (a1 * a2) * f ^ k ‚àà x.1.as_homogeneous_ideal.1,
    { rw eq2, apply ideal.mul_mem_right, apply ideal.mul_mem_left,
      apply ideal.sum_mem, intros i hi,
      apply ideal.mul_mem_left,
      exact (classical.some_spec i.1.2).1, },
    rcases x.1.is_prime.mem_or_mem mem1 with h1|h3,
    rcases x.1.is_prime.mem_or_mem h1 with h1|h2,
    { exfalso, apply x.2,
      apply x.1.is_prime.mem_of_pow_mem N h1, },
    { rcases x.1.is_prime.mem_or_mem h2,
      { left, dsimp only,
        rw isos.forward.carrier,
        have eq3 : (localization.mk a1 ‚ü®f ^ n1, _‚ü© : localization.away f) =
          localization.mk a1 1 * localization.mk 1 ‚ü®f^n1, ‚ü®n1, rfl‚ü©‚ü©,
        { erw [localization.mk_mul, mul_one, one_mul], },
        suffices : _ ‚àà ideal.span {y : localization (submonoid.powers f) | ‚àÉ (g : A),
            g ‚àà (projective_spectrum.as_homogeneous_ideal x.val).val ‚àß y = localization.mk g 1},
        exact this, dsimp only,
        erw eq3,
        suffices : localization.mk a1 1 ‚àà ideal.span _,
        apply ideal.mul_mem_right _ _ this,
        apply ideal.subset_span,
        refine ‚ü®a1, h, rfl‚ü©, },
      { right, dsimp only,
        rw isos.forward.carrier,
        have eq3 : (localization.mk a2 ‚ü®f ^ n2, _‚ü© : localization.away f) =
          localization.mk a2 1 * localization.mk 1 ‚ü®f^n2, ‚ü®n2, rfl‚ü©‚ü©,
        { erw [localization.mk_mul, mul_one, one_mul], },
        suffices : _ ‚àà ideal.span {y : localization (submonoid.powers f) | ‚àÉ (g : A),
            g ‚àà (projective_spectrum.as_homogeneous_ideal x.val).val ‚àß y = localization.mk g 1},
        exact this, dsimp only,
        erw eq3,
        suffices : localization.mk a2 1 ‚àà ideal.span _,
        apply ideal.mul_mem_right _ _ this,
        apply ideal.subset_span,
        refine ‚ü®a2, h, rfl‚ü©, } },
    { exfalso, apply x.2,
      apply x.1.is_prime.mem_of_pow_mem k h3, },
  end‚ü©‚ü©


def isos.top_component.backward.to_fun (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï)
  (hm : 0 < m)
  (f_deg : f ‚àà ùíú m) :
  (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace.1 ‚Üí
  (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.to_PresheafedSpace.1 :=
Œª q, ‚ü®‚ü®‚ü®isos.backward.carrier.as_ideal _ f m hm f_deg q,
  isos.backward.carrier.homogeneous _ f m hm f_deg q‚ü©,
  isos.backward.carrier.prime _ f m hm f_deg q,
  isos.backward.carrier.irrelavent _ f m hm f_deg q‚ü©,
  begin
    erw projective_spectrum.mem_basic_open,
    intro rid,
    change ‚àÄ i : ‚Ñï, _ ‚àà q.1 at rid,
    specialize rid m,
    apply q.is_prime.1,
    rw ideal.eq_top_iff_one,
    convert rid,
    symmetry,
    rw [subtype.ext_iff_val, show (1 : degree_zero_part _ f m f_deg).1 = 1, from rfl],
    dsimp only,
    rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same ùíú f_deg],
    convert localization.mk_self _,
    refl,
end‚ü©

lemma isos.top_component.backward_forward (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï)
  (hm : 0 < m)
  (f_deg : f ‚àà ùíú m)
  (x) :
  isos.top_component.backward.to_fun ùíú f m hm f_deg
    (isos.top_component.forward.to_fun ùíú f m f_deg x) = x :=
begin
  ext z, split; intros hz,
  { change ‚àÄ i, _ at hz,
    erw ‚Üêgraded_algebra.sum_support_decompose ùíú z,
    apply ideal.sum_mem,
    intros i hi,
    specialize hz i,
    change _ ‚àà ideal.span _ at hz,
    dsimp only at hz,
    rw ‚Üêgraded_algebra.proj_apply,
    erw [‚Üêideal.submodule_span_eq, finsupp.span_eq_range_total, set.mem_range] at hz,
    obtain ‚ü®c, eq1‚ü© := hz,
    erw [finsupp.total_apply, finsupp.sum] at eq1,
    obtain ‚ü®N, hN‚ü© := clear_denominator _ f (finset.image (Œª i, c i * i.1) c.support),
    -- N is the common denom
    choose after_clear_denominator hacd using hN,
    have prop1 : ‚àÄ i, i ‚àà c.support ‚Üí c i * i.1 ‚àà (finset.image (Œª i, c i * i.1) c.support),
    { intros i hi, rw finset.mem_image, refine ‚ü®_, hi, rfl‚ü©, },
    have eq2 := calc (localization.mk (f^(i + N)) 1) * (localization.mk ((graded_algebra.proj ùíú i z)^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü© : localization.away f)
                  = (localization.mk (f^(i + N)) 1) * ‚àë i in c.support, c i ‚Ä¢ i.1 : by erw eq1
              ... = (localization.mk (f^(i + N)) 1) * ‚àë i in c.support.attach, c i.1 ‚Ä¢ i.1.1
                  : begin
                    rw finset.sum_bij',
                    work_on_goal 5 { intros a _, exact a.1, },
                    work_on_goal 3 { intros a ha, exact ‚ü®a, ha‚ü©, },
                    { intros a ha, dsimp only, refl, },
                    { intros a ha, dsimp only, refl, },
                    { intros a ha, rw subtype.ext_iff_val, },
                    { intros a ha, dsimp only, apply finset.mem_attach, },
                    { intros a ha, dsimp only, exact a.2, },
                  end
              ... = localization.mk (f^i) 1 * ((localization.mk (f^N) 1) * ‚àë i in c.support.attach, c i.1 ‚Ä¢ i.1.1)
                  : begin
                    rw [‚Üêmul_assoc, localization.mk_mul, mul_one, pow_add],
                  end
              ... = localization.mk (f^i) 1 * (localization.mk (f^N) 1 * ‚àë i in c.support.attach, c i.1 * i.1.1) : rfl
              ... = localization.mk (f^i) 1 * ‚àë i in c.support.attach, (localization.mk (f^N) 1) * (c i.1 * i.1.1)
                  : by rw finset.mul_sum
              ... = localization.mk (f^i) 1 * ‚àë i in c.support.attach, localization.mk (after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) 1
                  : begin
                    congr' 1,
                    rw finset.sum_congr rfl (Œª j hj, _),
                    have := (hacd (c j.1 * j.1.1) (prop1 j.1 j.2)).2,
                    dsimp only at this,
                      erw [this, mul_comm],
                    end
              ... = localization.mk (f^i) 1 * localization.mk (‚àë i in c.support.attach, after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) 1
                  : begin
                    congr' 1,
                    induction c.support.attach using finset.induction_on with a s ha ih,
                    { rw [finset.sum_empty, finset.sum_empty, localization.mk_zero], },
                    { erw [finset.sum_insert ha, finset.sum_insert ha, ih, localization.add_mk, mul_one, one_mul, one_mul, add_comm], },
                  end
              ... = localization.mk (f^i * ‚àë i in c.support.attach, after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) 1
                  : begin
                    rw [localization.mk_mul, one_mul],
                  end,
    have eq3 := calc
                (localization.mk (f^(i + N)) 1) * (localization.mk ((graded_algebra.proj ùíú i z)^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü© : localization.away f)
              = (localization.mk (f^N) 1) * (localization.mk ((graded_algebra.proj ùíú i z)^m) 1)
              : begin
                rw [localization.mk_mul, localization.mk_mul, one_mul, one_mul, localization.mk_eq_mk', is_localization.eq],
                refine ‚ü®1, _‚ü©,
                erw [mul_one, mul_one, mul_one, pow_add, ‚Üêsubtype.val_eq_coe],
                dsimp only,
                ring,
              end
          ... = (localization.mk (f^N * (graded_algebra.proj ùíú i z)^m) 1)
              : begin
                rw [localization.mk_mul, one_mul],
              end,
    have eq4 : ‚àÉ (C : submonoid.powers f),
      (f^i * ‚àë i in c.support.attach, after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) * C.1 =
      (f^N * (graded_algebra.proj ùíú i z)^m) * C.1,
    { rw [eq2] at eq3,
      simp only [localization.mk_eq_mk', is_localization.eq] at eq3,
      obtain ‚ü®C, hC‚ü© := eq3,
      erw [mul_one, mul_one] at hC,
      refine ‚ü®C, hC‚ü©, },
    obtain ‚ü®C, hC‚ü© := eq4,
    have mem1 :
      (f^i * ‚àë i in c.support.attach, after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) * C.1 ‚àà x.1.as_homogeneous_ideal,
    { apply ideal.mul_mem_right,
      apply ideal.mul_mem_left,
      apply ideal.sum_mem,
      rintros ‚ü®j, hj‚ü© _,
      have eq5 := (hacd (c j * j.1) (prop1 j hj)).2,
      dsimp only at eq5 ‚ä¢,
      have mem2 := j.2,
      change ‚àÉ g, _ at mem2,
      obtain ‚ü®g, hg1, hg2‚ü© := mem2,
      have eq6 : ‚àÉ (k : ‚Ñï) (z : A), c j = localization.mk z ‚ü®f^k, ‚ü®_, rfl‚ü©‚ü©,
      { induction (c j) using localization.induction_on with data,
        obtain ‚ü®z, ‚ü®_, k, rfl‚ü©‚ü© := data,
        refine ‚ü®_, _, rfl‚ü©,},
      obtain ‚ü®k, z, eq6‚ü© := eq6,
      have eq7 := calc localization.mk (after_clear_denominator (c j * j.1) (prop1 j hj)) 1
                = c j * j.1 * localization.mk (f^N) 1 : eq5
            ... = (localization.mk z ‚ü®f^k, ‚ü®_, rfl‚ü©‚ü© : localization.away f) * j.1 * localization.mk (f^N) 1 : by rw eq6
            ... = (localization.mk z ‚ü®f^k, ‚ü®_, rfl‚ü©‚ü© : localization.away f) * localization.mk g 1 * localization.mk (f^N) 1 : by rw hg2
            ... = localization.mk (z*g*f^N) ‚ü®f^k, ‚ü®_, rfl‚ü©‚ü©
                : begin
                  rw [localization.mk_mul, localization.mk_mul, mul_one, mul_one],
                end,
      simp only [localization.mk_eq_mk', is_localization.eq] at eq7,
      obtain ‚ü®‚ü®_, ‚ü®l, rfl‚ü©‚ü©, eq7‚ü© := eq7,
      erw [‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, mul_one] at eq7,
      dsimp only at eq7,
      have mem3 : z * g * f ^ N * f ^ l ‚àà x.1.as_homogeneous_ideal,
      { apply ideal.mul_mem_right,
        apply ideal.mul_mem_right,
        apply ideal.mul_mem_left,
        exact hg1, },
      erw [‚Üêeq7, mul_assoc, ‚Üêpow_add] at mem3,
      rcases ideal.is_prime.mem_or_mem (x.1.is_prime) mem3 with H | RID,
      { exact H, },
      { exfalso,
        have mem4 := x.2,
        erw projective_spectrum.mem_basic_open at mem4,
        apply mem4,
        replace RID := ideal.is_prime.mem_of_pow_mem (x.1.is_prime) _ RID,
        exact RID,
        } },

    erw hC at mem1,
    rcases ideal.is_prime.mem_or_mem (x.1.is_prime) mem1 with S | RID2,
    rcases ideal.is_prime.mem_or_mem (x.1.is_prime) S with RID1 | H,
    { exfalso,
      replace RID1 := ideal.is_prime.mem_of_pow_mem (x.1.is_prime) _ RID1,
      have mem2 := x.2,
      erw projective_spectrum.mem_basic_open at mem2,
      apply mem2,
      apply RID1, },
    { replace H := ideal.is_prime.mem_of_pow_mem (x.1.is_prime) _ H,
      exact H, },
    { exfalso,
      rcases C with ‚ü®_, ‚ü®k, rfl‚ü©‚ü©,
      replace RID2 := ideal.is_prime.mem_of_pow_mem (x.1.is_prime) _ RID2,
      have mem2 := x.2,
      erw projective_spectrum.mem_basic_open at mem2,
      apply mem2,
      exact RID2, }, },
  { change ‚àÄ i, _ ‚àà ideal.span _,
    intros i,
    dsimp only,
    have mem2 := x.1.as_homogeneous_ideal.2 i hz,
    rw ‚Üêgraded_algebra.proj_apply at mem2,
    have eq1 : (localization.mk ((graded_algebra.proj ùíú i z)^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü© : localization.away f)
          = localization.mk 1 ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü© * localization.mk ((graded_algebra.proj ùíú i z)^m) 1,
    { erw [localization.mk_mul, one_mul, mul_one] },
    erw eq1,
    apply ideal.mem_span.smul_mem,
    refine ‚ü®(graded_algebra.proj ùíú i z)^m, _, rfl‚ü©,
    erw ideal.is_prime.pow_mem_iff_mem (x.1.is_prime),
    exact mem2,
    exact hm, },
end

lemma isos.top_component.forward_backward (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï)
  (hm : 0 < m)
  (f_deg : f ‚àà ùíú m)
  (x) :
  isos.top_component.forward.to_fun ùíú f m f_deg
  (isos.top_component.backward.to_fun ùíú f m hm f_deg x) = x :=
begin
ext z, split,
{ intros hz,
  change z ‚àà (isos.top_component.forward.to_fun _ f m f_deg
    (‚ü®‚ü®‚ü®isos.backward.carrier.as_ideal ùíú f m hm f_deg x,
      isos.backward.carrier.homogeneous ùíú f m hm f_deg x‚ü©,
      isos.backward.carrier.prime _ f m hm f_deg x,
      isos.backward.carrier.irrelavent _ f m hm f_deg x‚ü©, _‚ü©)).1 at hz,
  unfold isos.top_component.forward.to_fun at hz,
  dsimp only at hz,
  erw isos.forward.carrier_eq_carrier' at hz,
  unfold isos.forward.carrier' at hz,
  erw [‚Üêideal.submodule_span_eq, finsupp.span_eq_range_total, set.mem_range] at hz,
  obtain ‚ü®c, eq1‚ü© := hz,
  erw [finsupp.total_apply, finsupp.sum] at eq1,
  erw ‚Üêeq1,
  apply ideal.sum_mem,
  rintros ‚ü®‚ü®j, j_degree_zero‚ü©, j_mem‚ü© hj,
  change ‚àÉ _, _ at j_mem,
  obtain ‚ü®s, hs, n, s_mem, eq3‚ü© := j_mem,
  apply ideal.mul_mem_left,
  erw [‚Üêsubtype.val_eq_coe],
  dsimp only,
  erw eq3,
  dsimp only at hs,
  change ‚àÄ _, _ at hs,
  specialize hs (m * n),
  simp only [graded_algebra.proj_apply, graded_algebra.decompose_of_mem_same ùíú s_mem] at hs,
  have eq4 : ((‚ü®localization.mk s ‚ü®f ^ n, ‚ü®_, rfl‚ü©‚ü©, ‚ü®n, s, s_mem, rfl‚ü©‚ü© : degree_zero_part _ f m f_deg))^m =
    ‚ü®localization.mk (s^m) ‚ü®f^(m*n), ‚ü®_, rfl‚ü©‚ü©, ‚ü®m*n, s^m, begin
      apply set_like.graded_monoid.pow_deg,
      exact s_mem,
    end, rfl‚ü©‚ü©,
  { rw [subtype.ext_iff_val,
        show (‚àÄ (Œ≤ : degree_zero_part ùíú f m f_deg) (l : ‚Ñï), (Œ≤^l).val = (Œ≤.val)^l), begin
          intros Œ≤ l,
          induction l with l ih,
          { erw [pow_zero, pow_zero], refl, },
          { erw [pow_succ, pow_succ, show (‚àÄ z1 z2 : degree_zero_part ùíú f m f_deg, (z1 * z2).val = z1.1 * z2.1),
            from Œª _ _, rfl, ih], },
        end],
    dsimp only,
    rw localization.mk_pow,
    exact hm, },
  erw ‚Üêeq4 at hs,
  exact ideal.is_prime.mem_of_pow_mem (x.is_prime) _ hs, },
  { intros hz,
    unfold isos.top_component.forward.to_fun,
    dsimp only,
    unfold isos.forward.carrier,
    change z.1 ‚àà ideal.span _,
    dsimp only,
    rcases z with ‚ü®z, z_degree_zero‚ü©,
    induction z using localization.induction_on with data,
    rcases data with ‚ü®a, ‚ü®_, ‚ü®k, rfl‚ü©‚ü©‚ü©,
    dsimp only at hz ‚ä¢,
    change ‚àÉ (n : ‚Ñï), _ at z_degree_zero,
    obtain ‚ü®n, Œ±, Œ±_mem, hŒ±‚ü© := z_degree_zero,
    dsimp only at hŒ±,
    have Œ±_mem_x : (‚ü®localization.mk Œ± ‚ü®f ^ n, _‚ü©, ‚ü®n, Œ±, Œ±_mem, rfl‚ü©‚ü© : degree_zero_part _ f m f_deg) ‚àà x.1,
    { convert hz using 1,
      symmetry,
      rw subtype.ext_iff_val,
      dsimp only,
      exact hŒ±, },
    erw hŒ±,
    have mem1 : Œ± ‚àà isos.backward.carrier _ f m hm f_deg x,
    { intros j,
      by_cases ineq1 : j = m * n,
      { simp only [ineq1, graded_algebra.proj_apply],
        dsimp only,
        simp only [graded_algebra.decompose_of_mem_same ùíú Œ±_mem],
        have mem2 := (ideal.is_prime.pow_mem_iff_mem x.is_prime m hm).mpr Œ±_mem_x,
        convert mem2 using 1,
        rw [subtype.ext_iff_val,
          show (‚àÄ (Œ≤ : degree_zero_part ùíú f m f_deg) (l : ‚Ñï), (Œ≤^l).val = (Œ≤.val)^l),
          begin
            intros Œ≤ l,
            induction l with l ih,
            { erw [pow_zero, pow_zero], refl, },
            { erw [pow_succ, pow_succ,
                show (‚àÄ z1 z2 : degree_zero_part ùíú f m f_deg, (z1 * z2).val = z1.1 * z2.1),
                from Œª _ _, rfl, ih], },
          end],
          dsimp only,
          symmetry,
          apply localization.mk_pow,
          exact hm, },
    { simp only [graded_algebra.proj_apply,
      graded_algebra.decompose_of_mem_ne ùíú Œ±_mem (ne.symm ineq1),
      zero_pow hm, localization.mk_zero],
      exact submodule.zero_mem _, }, },
    have eq2 : (localization.mk Œ± ‚ü®f^n, ‚ü®_, rfl‚ü©‚ü© : localization.away f) =
      localization.mk 1 ‚ü®f^n, ‚ü®_, rfl‚ü©‚ü© * localization.mk Œ± 1,
      { rw [localization.mk_mul, one_mul, mul_one], },
        erw eq2,
        apply ideal.mem_span.smul_mem,
        refine ‚ü®Œ±, mem1, rfl‚ü©, },
end

lemma isos.top_component.forward_preimage_eq (f : A) [decidable_eq (localization.away f)]
  (m : ‚Ñï) (f_deg : f ‚àà ùíú m) (a : A) (n : ‚Ñï)
  (a_mem_degree_zero : (localization.mk a ‚ü®f ^ n, ‚ü®n, rfl‚ü©‚ü© : localization.away f) ‚àà degree_zero_part ùíú f m f_deg) :
  isos.top_component.forward.to_fun ùíú f m f_deg ‚Åª¬π'
      (prime_spectrum.basic_open (‚ü®localization.mk a ‚ü®f ^ n, ‚ü®_, rfl‚ü©‚ü©, a_mem_degree_zero‚ü© : degree_zero_part _ f m f_deg)).1
  = {x | x.1 ‚àà projective_spectrum.basic_open ùíú f ‚äì projective_spectrum.basic_open ùíú a} :=
begin
  symmetry,
  ext1 y, split; intros hy,
      { change y.1 ‚àà _ at hy,
        rcases hy with ‚ü®hy1, hy2‚ü©,
        erw projective_spectrum.mem_basic_open at hy1 hy2,
        rw [set.mem_preimage, isos.top_component.forward.to_fun],
        dsimp only,
        erw prime_spectrum.mem_basic_open,
        intro rid,
        -- unfold isos.forward.carrier at rid,
        change (localization.mk a ‚ü®f^n, ‚ü®n, rfl‚ü©‚ü© : localization.away f) ‚àà _ at rid,
        erw [‚Üêideal.submodule_span_eq, finsupp.span_eq_range_total, set.mem_range] at rid,
        obtain ‚ü®c, eq1‚ü© := rid,
        erw [finsupp.total_apply, finsupp.sum] at eq1,

        obtain ‚ü®N, hN‚ü© := clear_denominator _ f (finset.image (Œª i, c i * i.1) c.support),
        -- N is the common denom
        choose after_clear_denominator hacd using hN,
        have prop1 : ‚àÄ i, i ‚àà c.support ‚Üí c i * i.1 ‚àà (finset.image (Œª i, c i * i.1) c.support),
        { intros i hi, rw finset.mem_image, refine ‚ü®_, hi, rfl‚ü©, },

        have eq2 := calc (localization.mk (f^N * a) 1 : localization.away f)
                = (localization.mk (f^N) 1 : localization.away f) * localization.mk a 1
                : begin
                  erw [localization.mk_mul, one_mul],
                end
            ... = localization.mk (f^N) 1 * localization.mk (f^n) 1 * localization.mk a ‚ü®f^n, ‚ü®_, rfl‚ü©‚ü©
                : begin
                  erw [localization.mk_mul, localization.mk_mul, localization.mk_mul, one_mul, one_mul],
                  simp only [localization.mk_eq_mk', is_localization.eq],
                  use 1,
                  erw [mul_one, mul_one, mul_one, ‚Üêsubtype.val_eq_coe],
                  dsimp only,
                  ring,
                end
            ... = localization.mk (f^N) 1* localization.mk (f^n) 1 * ‚àë i in c.support, c i * i.1 : by erw eq1
            ... = localization.mk (f^N) 1* localization.mk (f^n) 1 * ‚àë i in c.support.attach, c i.1 * i.1.1
                : begin
                  congr' 1,
                  rw finset.sum_bij',
                  work_on_goal 5 { intros a ha, exact a.1 },
                  work_on_goal 3 { intros a ha, exact ‚ü®a, ha‚ü© },
                  { intros a ha, dsimp only, refl, },
                  { intros a ha, dsimp only, refl, },
                  { intros a ha, dsimp only, rw subtype.ext_iff_val, },
                  { intros a ha, dsimp only, apply finset.mem_attach, },
                  { intros a ha, dsimp only, exact a.2, },
                end
            ... = localization.mk (f^n) 1 * (localization.mk (f^N) 1 * ‚àë i in c.support.attach, c i.1 * i.1.1) : by ring
            ... = localization.mk (f^n) 1 * ‚àë i in c.support.attach, localization.mk (f^N) 1 * (c i.1 * i.1.1)
                : begin
                  congr' 1,
                  erw finset.mul_sum,
                end
            ... = localization.mk (f^n) 1 *
                  ‚àë i in c.support.attach, localization.mk
                    (after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) 1
                : begin
                  congr' 1,
                  erw finset.sum_congr rfl (Œª j hj, _),
                  have := (hacd (c j * j) (prop1 j _)).2,
                  dsimp only at this,
                  erw [this, mul_comm],
                  refl,
                end
            ... = localization.mk (f^n) 1 *
                  localization.mk
                    (‚àë i in c.support.attach, after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) 1
                : begin
                  congr' 1,
                  induction c.support.attach using finset.induction_on with a s ha ih,
                  erw [finset.sum_empty, finset.sum_empty, localization.mk_zero],
                  erw [finset.sum_insert ha, finset.sum_insert ha, ih, localization.add_mk,
                    one_mul, one_mul, one_mul, add_comm],
                end
            ... = localization.mk (f^n * ‚àë i in c.support.attach, after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) 1
                : begin
                  erw [localization.mk_mul, one_mul],
                end
            ... = localization.mk (‚àë i in c.support.attach, f^n * after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) 1
                : by erw finset.mul_sum,

        simp only [localization.mk_eq_mk', is_localization.eq] at eq2,
        obtain ‚ü®‚ü®_, ‚ü®k1, rfl‚ü©‚ü©, eq2‚ü© := eq2,
        erw [mul_one, mul_one, ‚Üêsubtype.val_eq_coe] at eq2,
        dsimp only at eq2,

        have mem1 : (‚àë i in c.support.attach, f^n * after_clear_denominator (c i.1 * i.1.1) (prop1 i.1 i.2)) * f^k1 ‚àà y.1.as_homogeneous_ideal,
        { apply ideal.mul_mem_right,
          apply ideal.sum_mem,
          intros j hj,
          apply ideal.mul_mem_left,
          set g := classical.some j.1.2 with g_eq,
          have mem3 : g ‚àà y.1.as_homogeneous_ideal := (classical.some_spec j.1.2).1,
          have eq3 : j.1.1 = localization.mk g 1 := (classical.some_spec j.1.2).2,
          have eq4 := (hacd (c j.1 * j.1.1) (prop1 j.1 j.2)).2,
          dsimp only at eq4,

           have eq5 : ‚àÉ (a : A) (z : ‚Ñï), c j.1 = localization.mk a ‚ü®f^z, ‚ü®z, rfl‚ü©‚ü©,
          { induction (c j.1) using localization.induction_on with data,
            rcases data with ‚ü®a, ‚ü®_, ‚ü®z, rfl‚ü©‚ü©‚ü©,
            refine ‚ü®a, z, rfl‚ü©, },
          obtain ‚ü®Œ±, z, hz‚ü© := eq5,

          have eq6 := calc localization.mk (after_clear_denominator (c j.1 * j.1.1) (prop1 j.1 j.2)) 1
              = c j.1 * j.1.1 * localization.mk (f^N) 1 : eq4
          ... = (localization.mk Œ± ‚ü®f^z, ‚ü®z, rfl‚ü©‚ü© : localization.away f) * j.1.1 * localization.mk (f^N) 1
              : by erw hz
          ... = (localization.mk Œ± ‚ü®f^z, ‚ü®z, rfl‚ü©‚ü© : localization.away f) * localization.mk g 1 * localization.mk (f^N) 1
              : by erw eq3
          ... = localization.mk (Œ± * g * f^N) ‚ü®f^z, ‚ü®z, rfl‚ü©‚ü©
              : begin
                erw [localization.mk_mul, localization.mk_mul, mul_one, mul_one],
              end,
          simp only [localization.mk_eq_mk', is_localization.eq] at eq6,
          obtain ‚ü®‚ü®_, ‚ü®v, rfl‚ü©‚ü©, eq6‚ü© := eq6,
          erw [‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, mul_one] at eq6,
          dsimp only at eq6,

          have mem3 : Œ± * g * f ^ N * f ^ v ‚àà y.1.as_homogeneous_ideal,
          { apply ideal.mul_mem_right,
            apply ideal.mul_mem_right,
            apply ideal.mul_mem_left,
            exact mem3, },
          erw ‚Üêeq6 at mem3,
          rcases y.1.is_prime.mem_or_mem mem3 with H1 | H3,
          rcases y.1.is_prime.mem_or_mem H1 with H1 | H2,
          { exact H1 },
          { exfalso, apply hy1,
            exact y.1.is_prime.mem_of_pow_mem _ H2, },
          { exfalso, apply hy1,
            exact y.1.is_prime.mem_of_pow_mem _ H3, }, },

      erw ‚Üêeq2 at mem1,
      rcases y.1.is_prime.mem_or_mem mem1 with H1 | H3,
      rcases y.1.is_prime.mem_or_mem H1 with H1 | H2,
      { apply hy1,
        exact y.1.is_prime.mem_of_pow_mem _ H1, },
      { apply hy2,
        exact H2, },
      { apply hy1,
        exact y.1.is_prime.mem_of_pow_mem _ H3, }, },

    { change y.1 ‚àà _ ‚äì _,
      refine ‚ü®y.2, _‚ü©,
      -- a ‚àâ y,
      erw [set.mem_preimage, prime_spectrum.mem_basic_open] at hy,
      erw projective_spectrum.mem_basic_open,
      intro a_mem_y,
      apply hy,
      change (localization.mk a ‚ü®f ^ n, ‚ü®_, rfl‚ü©‚ü© : localization.away f) ‚àà ideal.span _,
      have eq1 : (localization.mk a ‚ü®f^n, ‚ü®_, rfl‚ü©‚ü© : localization.away f) =
        localization.mk 1 ‚ü®f^n, ‚ü®_, rfl‚ü©‚ü© * localization.mk a 1,
      { erw [localization.mk_mul, one_mul, mul_one], },
      erw eq1,
      apply ideal.mem_span.smul_mem,
      refine ‚ü®a, a_mem_y, rfl‚ü©, }
end

def isos.top_component.forward (f : A) [decidable_eq (localization.away f)]
  (m : ‚Ñï) (f_deg : f ‚àà ùíú m) :
  (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.carrier ‚ü∂
  (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.carrier :=
{ to_fun := isos.top_component.forward.to_fun ùíú f m f_deg,
  continuous_to_fun := begin
    apply is_topological_basis.continuous,
    exact prime_spectrum.is_topological_basis_basic_opens,
    rintros _ ‚ü®‚ü®g, hg‚ü©, rfl‚ü©,
    induction g using localization.induction_on with data,
    obtain ‚ü®a, ‚ü®_, ‚ü®n, rfl‚ü©‚ü©‚ü© := data,
    dsimp only,

    -- we want to use `projective_spectrum.basic_open ùíú (f*a) = preimage`
    set set1 : set ((Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.to_PresheafedSpace.1) :=
    { x | x.1 ‚àà projective_spectrum.basic_open ùíú f ‚äì projective_spectrum.basic_open ùíú a } with set1_eq,
    have o1 : is_open set1,
    { rw is_open_induced_iff,
      refine ‚ü®(projective_spectrum.basic_open ùíú f).1 ‚äì (projective_spectrum.basic_open ùíú a).1,
        is_open.inter (projective_spectrum.basic_open ùíú f).2 (projective_spectrum.basic_open ùíú a).2, _‚ü©,
      ext z, split; intros hz,
      { erw set.mem_preimage at hz,
        erw set1_eq,
        exact hz, },
      { erw set1_eq at hz,
        change _ ‚àß _ at hz,
        erw set.mem_preimage,
        exact hz, }, },
    suffices : set1 = isos.top_component.forward.to_fun ùíú f m f_deg ‚Åª¬π'
      (prime_spectrum.basic_open (‚ü®localization.mk a ‚ü®f ^ n, _‚ü©, hg‚ü© : degree_zero_part _ f m f_deg)).1,
    { erw ‚Üêthis,
      exact o1, },
    { symmetry,
      apply isos.top_component.forward_preimage_eq },
  end }

lemma isos.top_component.forward.to_fun_inj (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï)
  (hm : 0 < m)
  (f_deg : f ‚àà ùíú m) : function.injective (isos.top_component.forward.to_fun ùíú f m f_deg) := Œª x1 x2 hx12,
begin
  convert congr_arg (isos.top_component.backward.to_fun ùíú f m hm f_deg) hx12; symmetry;
  apply isos.top_component.backward_forward,
end

lemma isos.top_component.forward.to_fun_surj (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï)
  (hm : 0 < m)
  (f_deg : f ‚àà ùíú m) : function.surjective (isos.top_component.forward.to_fun ùíú f m f_deg) :=
begin
  erw function.surjective_iff_has_right_inverse,
  refine ‚ü®isos.top_component.backward.to_fun ùíú f m hm f_deg, Œª x, _‚ü©,
  rw isos.top_component.forward_backward,
end

def isos.top_component.backward (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï)
  (hm : 0 < m)
  (f_deg : f ‚àà ùíú m) :
  (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.carrier ‚ü∂
  (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.carrier :=
{ to_fun := isos.top_component.backward.to_fun _ f m hm f_deg,
  continuous_to_fun := begin
    apply is_topological_basis.continuous,
    exact @is_topological_basis.inducing (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.to_PresheafedSpace.1
    _ Proj _ (Œª x, x.1) _ begin
      fconstructor, refl,
    end (projective_spectrum.is_topological_basis_basic_opens ùíú),

    intros s hs,
    erw set.mem_preimage at hs,
    obtain ‚ü®t, ht1, ht2‚ü© := hs,
    rw set.mem_range at ht1,
    obtain ‚ü®a, rfl‚ü© := ht1,
    dsimp only at ht2,
    have set_eq1 : s =
      {x | x.1 ‚àà (projective_spectrum.basic_open ùíú f) ‚äì (projective_spectrum.basic_open ùíú a) },
    { ext x, split; intros hx,
      erw [‚Üêht2, set.mem_preimage] at hx,
      refine ‚ü®x.2, hx‚ü©,

      rcases hx with ‚ü®hx1, hx2‚ü©,
      erw [‚Üêht2, set.mem_preimage],
      exact hx2, },

    -- we want to use preimage = forward s,
    set set1 := isos.top_component.forward.to_fun ùíú f m f_deg '' s with set1_eq,
    have o1 : is_open set1,
    {
      suffices : is_open (isos.top_component.forward.to_fun ùíú f m f_deg ''
        {x | x.1 ‚àà (projective_spectrum.basic_open ùíú f).1 ‚äì (projective_spectrum.basic_open ùíú a).1}),
      erw [set1_eq, set_eq1], exact this,
      -- erw projective_spectrum.basic_open_as_union_of_projection ùíú a,

      have set_eq2 := calc isos.top_component.forward.to_fun ùíú f m f_deg ''
            {x | x.1 ‚àà (projective_spectrum.basic_open ùíú f) ‚äì (projective_spectrum.basic_open ùíú a)}
          = isos.top_component.forward.to_fun ùíú f m f_deg ''
            {x | x.1 ‚àà (projective_spectrum.basic_open ùíú f) ‚äì (‚®Ü (i : ‚Ñï), (projective_spectrum.basic_open ùíú (graded_algebra.proj ùíú i a)))}
          : begin
            congr',
            ext x,
            erw projective_spectrum.basic_open_as_union_of_projection ùíú a,
          end
      ... = isos.top_component.forward.to_fun ùíú f m f_deg '' {x | x.1 ‚àà
              (‚®Ü (i : ‚Ñï), ((projective_spectrum.basic_open ùíú f) ‚äì
                (projective_spectrum.basic_open ùíú (graded_algebra.proj ùíú i a))))}
          : begin
            congr',
            ext x,
            split; intros hx,
            { rcases hx with ‚ü®hx1, hx2‚ü©,
              erw opens.mem_Sup at hx2 ‚ä¢,
              obtain ‚ü®_, ‚ü®j, rfl‚ü©, hx2‚ü© := hx2,
              refine ‚ü®projective_spectrum.basic_open ùíú f ‚äì
                projective_spectrum.basic_open ùíú (graded_algebra.proj ùíú j a), ‚ü®j, rfl‚ü©, ‚ü®hx1, hx2‚ü©‚ü©, },
            { erw opens.mem_Sup at hx,
              obtain ‚ü®_, ‚ü®j, rfl‚ü©, ‚ü®hx1, hx2‚ü©‚ü© := hx,
              refine ‚ü®hx1, _‚ü©,
              erw opens.mem_Sup,
              refine ‚ü®projective_spectrum.basic_open ùíú (graded_algebra.proj ùíú j a), ‚ü®j, rfl‚ü©, hx2‚ü©, },
          end
      ... = isos.top_component.forward.to_fun ùíú f m f_deg '' ‚ãÉ (i : ‚Ñï),
                {x | x.1 ‚àà ((projective_spectrum.basic_open ùíú f) ‚äì
                (projective_spectrum.basic_open ùíú (graded_algebra.proj ùíú i a)))}
          : begin
            congr',
            ext x,
            split; intros hx; dsimp only at hx ‚ä¢,
            { change ‚àÉ _, _ at hx,
              obtain ‚ü®s, hs1, hs2‚ü© := hx,
              erw set.mem_image at hs1,
              obtain ‚ü®s, hs1, rfl‚ü© := hs1,
              erw set.mem_range at hs1,
              obtain ‚ü®i, rfl‚ü© := hs1,
              change ‚àÉ _, _,
              refine ‚ü®_, ‚ü®i, rfl‚ü©, _‚ü©,
              exact hs2, },
            { change ‚àÉ _, _ at hx,
              obtain ‚ü®_, ‚ü®j, rfl‚ü©, hx‚ü© := hx,
              change x.val ‚àà _ at hx,
              simp only [opens.mem_supr],
              refine ‚ü®j, hx‚ü©, },
          end
      ... = ‚ãÉ (i : ‚Ñï), isos.top_component.forward.to_fun ùíú f m f_deg ''
              {x | x.1 ‚àà ((projective_spectrum.basic_open ùíú f) ‚äì
                (projective_spectrum.basic_open ùíú (graded_algebra.proj ùíú i a)))}
          : begin
            erw set.image_Union,
          end,

    erw set_eq2,
    apply is_open_Union,
    intros i,
    suffices : isos.top_component.forward.to_fun ùíú f m f_deg ''
              {x | x.1 ‚àà ((projective_spectrum.basic_open ùíú f) ‚äì
                (projective_spectrum.basic_open ùíú (graded_algebra.proj ùíú i a)))}
        = (prime_spectrum.basic_open (‚ü®localization.mk ((graded_algebra.proj ùíú i a)^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
            ‚ü®i, (graded_algebra.proj ùíú i a)^m, set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) _, rfl‚ü©‚ü© : degree_zero_part ùíú f m f_deg)).1,
    erw this,
    exact (prime_spectrum.basic_open _).2,


    suffices : isos.top_component.forward.to_fun ùíú f m f_deg ‚Åª¬π' (prime_spectrum.basic_open (‚ü®localization.mk ((graded_algebra.proj ùíú i a)^m) ‚ü®f^i, ‚ü®_, rfl‚ü©‚ü©,
            ‚ü®i, (graded_algebra.proj ùíú i a)^m, set_like.graded_monoid.pow_deg ùíú (submodule.coe_mem _) _, rfl‚ü©‚ü© : degree_zero_part ùíú f m f_deg)).1 =
      {x | x.1 ‚àà ((projective_spectrum.basic_open ùíú f) ‚äì
                (projective_spectrum.basic_open ùíú (graded_algebra.proj ùíú i a)))},

    { erw ‚Üêthis,
      apply function.surjective.image_preimage,
      apply isos.top_component.forward.to_fun_surj,
      exact hm },

    symmetry,
    { symmetry,
      erw isos.top_component.forward_preimage_eq ùíú f m f_deg ((graded_algebra.proj ùíú i a)^m) i,
      erw projective_spectrum.basic_open_pow,
      exact hm,
    } },

    suffices : set1 = isos.top_component.backward.to_fun ùíú f m hm f_deg ‚Åª¬π' _,
    erw ‚Üêthis,
    exact o1,

    { erw set1_eq,
      ext z, split; intros hz,
      { erw set.mem_preimage,
        erw set.mem_image at hz,
        obtain ‚ü®Œ±, Œ±_mem, rfl‚ü© := hz,
        erw isos.top_component.backward_forward,
        exact Œ±_mem, },
      { erw set.mem_preimage at hz,
        erw set.mem_image,
        refine ‚ü®isos.top_component.backward.to_fun ùíú f m hm f_deg z, _, _‚ü©,
        exact hz,
        erw isos.top_component.forward_backward, } },
  end }

def isos.top_component (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m)
  (f_deg : f ‚àà ùíú m) :
  (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.carrier ‚âÖ
  (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.carrier :=
{ hom := isos.top_component.forward ùíú f m f_deg,
  inv := isos.top_component.backward ùíú f m hm f_deg,
  hom_inv_id' := begin
    ext1 x,
    simp only [id_app, comp_app],
    apply isos.top_component.backward_forward,
  end,
  inv_hom_id' := begin
    ext1 x,
    simp only [id_app, comp_app],
    apply isos.top_component.forward_backward,
  end }

def isos.sheaf_component.forward.hartshorne
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) :=
hh.1 ‚ü®((isos.top_component ùíú f m hm f_deg).inv y.1).1, begin
        erw set.mem_preimage,
        refine ‚ü®‚ü®((isos.top_component ùíú f m hm f_deg).inv y.1).1, ((isos.top_component ùíú f m hm f_deg).inv y.1).2‚ü©, _, rfl‚ü©,
        change _ ‚àà _ ‚Åª¬π' _,
        erw set.mem_preimage,
        change (isos.top_component.forward.to_fun ùíú f m f_deg (isos.top_component.backward.to_fun ùíú f m hm f_deg y.1)) ‚àà _,
        erw isos.top_component.forward_backward ùíú f m hm f_deg y.1,
        exact y.2,
      end‚ü©

lemma isos.sheaf_component.forward.hartshorne_one
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  ‚àÄ y, isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U 1 y = 1 := Œª y,
begin
  unfold isos.sheaf_component.forward.hartshorne,
  erw show (1 : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U)).1 = 1, from rfl,
  erw pi.one_apply,
end

lemma isos.sheaf_component.forward.hartshorne_zero
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  ‚àÄ y, isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U 0 y = 0 := Œª y,
begin
  unfold isos.sheaf_component.forward.hartshorne,
  erw show (0 : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U)).1 = 0, from rfl,
  erw pi.zero_apply,
end

lemma isos.sheaf_component.forward.hartshorne_add
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  ‚àÄ x y z, isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U (x + y) z
    = isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U x z
    + isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U y z := Œª x y z,
begin
  unfold isos.sheaf_component.forward.hartshorne,
  erw show (x + y).1 = x.1 + y.1, from rfl,
  erw pi.add_apply,
end

lemma isos.sheaf_component.forward.hartshorne_mul
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  ‚àÄ x y z, isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U (x * y) z
    = isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U x z
    * isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U y z := Œª x y z,
begin
  unfold isos.sheaf_component.forward.hartshorne,
  erw show (x * y).1 = x.1 * y.1, from rfl,
  erw pi.mul_apply,
end

def isos.sheaf_component.forward.hartshorne.num
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) :=
(isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).num

def isos.sheaf_component.forward.hartshorne.denom
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) :=
(isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).denom

def isos.sheaf_component.forward.hartshorne.i
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) :=
(isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).i

lemma isos.sheaf_component.forward.hartshorne.denom_hom
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) :
  (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U hh y) ‚àà
  ùíú (isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y) :=
(isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).denom_hom

lemma isos.sheaf_component.forward.hartshorne.denom_not_mem
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) :
  (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U hh y) ‚àâ
    ((isos.top_component ùíú f m hm f_deg).inv y.1).1.as_homogeneous_ideal :=
(isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).denom_not_mem

lemma isos.sheaf_component.forward.hartshorne.num_hom
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) :
  (isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U hh y) ‚àà
  ùíú (isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y) :=
(isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).num_hom

lemma isos.sheaf_component.forward.hartshorne.eq_num_div_denom
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) :
  (isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).1 =
  localization.mk (isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U hh y)
    ‚ü®(isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U hh y),
      isos.sheaf_component.forward.hartshorne.denom_not_mem ùíú f m hm f_deg U hh y‚ü© :=
(isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).eq_num_div_denom

def isos.sheaf_component.forward.hartshorne.mk_num
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) : degree_zero_part ùíú f m f_deg :=
‚ü®localization.mk
  ((isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U hh y) *
   (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U hh y) ^ m.pred)
  ‚ü®f^(isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y), ‚ü®_, rfl‚ü©‚ü©,
  ‚ü®isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y, _, begin
    have mem1 := isos.sheaf_component.forward.hartshorne.num_hom ùíú f m hm f_deg U hh y,
    have mem2 := isos.sheaf_component.forward.hartshorne.denom_hom ùíú f m hm f_deg U hh y,
    have mem3 := set_like.graded_monoid.pow_deg ùíú mem2 m.pred,
    have mem4 := set_like.graded_monoid.mul_mem mem1 mem3,
    convert mem4,

    have eq1 := nat.succ_pred_eq_of_pos hm,
    exact calc m * (isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y)
            = (m.pred + 1) * (isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y)
            : begin
              congr,
              conv_lhs { rw ‚Üêeq1 },
            end
        ... = m.pred * isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y +
              1 * isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y
            : by rw add_mul
        ... = _ : begin
          rw [add_comm, one_mul],
        end,
  end, rfl‚ü©‚ü©

def isos.sheaf_component.forward.hartshorne.mk_denom
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U))
  (y : unop U) : (y.1.as_ideal.prime_compl) :=
‚ü®‚ü®localization.mk ((isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U hh y) ^ m)
  ‚ü®f^(isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y), ‚ü®_, rfl‚ü©‚ü©,
  ‚ü®(isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y), _, begin
    apply set_like.graded_monoid.pow_deg,
    apply isos.sheaf_component.forward.hartshorne.denom_hom,
  end, rfl‚ü©‚ü©, Œª rid, begin
    have prop1 := (isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).denom_not_mem,
    change _ ‚àâ (isos.top_component.backward.to_fun ùíú f m hm f_deg y.1).1.as_homogeneous_ideal at prop1,
    contrapose prop1,
    erw not_not,
    change ‚àÄ _, _,

    contrapose prop1,
    erw not_not,
    erw not_forall at prop1,
    obtain ‚ü®n, hn‚ü© := prop1,

    have eq1 : (isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U hh y) = n,
    { -- n ‚â† i, contradiction,
      by_contra ineq,
      simp only [graded_algebra.proj_apply,
        graded_algebra.decompose_of_mem_ne ùíú
          ((isos.sheaf_component.forward.hartshorne ùíú f m hm f_deg U hh y).denom_hom) ineq,
        zero_pow hm, localization.mk_zero] at hn,
      apply hn,
      exact submodule.zero_mem _, },
    apply hn,
    convert rid,

    erw [graded_algebra.proj_apply, ‚Üêeq1, graded_algebra.decompose_of_mem_same],
    refl,
    apply isos.sheaf_component.forward.hartshorne.denom_hom,
    exact eq1.symm,
  end‚ü©

def isos.sheaf_component.forward.mk
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U)) : Œ† (y : unop U),
    structure_sheaf.localizations (degree_zero_part ùíú f m f_deg) y.1 := Œª y,
localization.mk
  (isos.sheaf_component.forward.hartshorne.mk_num ùíú f m hm f_deg U hh y)
  (isos.sheaf_component.forward.hartshorne.mk_denom ùíú f m hm f_deg U hh y)

lemma isos.sheaf_component.forward.mk_one
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  isos.sheaf_component.forward.mk ùíú f m hm f_deg U 1 = 1 :=
begin
  ext1 y,
  erw pi.one_apply,
  unfold isos.sheaf_component.forward.mk,
  dsimp only,
  erw [show (1 : structure_sheaf.localizations (degree_zero_part ùíú f m f_deg) y.val) =
    localization.mk 1 1, begin
      erw localization.mk_self 1,
    end, localization.mk_eq_mk', is_localization.eq],

  have eq1 := isos.sheaf_component.forward.hartshorne.eq_num_div_denom ùíú f m hm f_deg U 1 y,
  erw isos.sheaf_component.forward.hartshorne_one at eq1,
  erw [show (1 : hartshorne_localisation ùíú ((isos.top_component ùíú f m hm f_deg).inv y).1).1 = 1, from rfl] at eq1,
  erw [show (1 : localization.at_prime ((isos.top_component ùíú f m hm f_deg).inv y.1).1.as_homogeneous_ideal.1) =
    localization.mk 1 1,
      begin
        symmetry,
        convert localization.mk_self _,
        erw [‚Üêsubtype.val_eq_coe],
        refl,
      end, localization.mk_eq_mk', is_localization.eq] at eq1,
  obtain ‚ü®‚ü®c, hc1‚ü©, eq1‚ü© := eq1,

  change c ‚àâ isos.backward.carrier ùíú f m hm f_deg _ at hc1,
  change ¬¨(‚àÄ i : ‚Ñï, _ ‚àà _) at hc1,
  erw not_forall at hc1,
  obtain ‚ü®j, hc1‚ü© := hc1,
  erw [one_mul, mul_one, ‚Üêsubtype.val_eq_coe] at eq1,
  dsimp only,
  replace eq1 : isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * c =
    isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 1 y * c,
  { convert eq1, },
  have eq2 : graded_algebra.proj ùíú ((isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U 1 y) + j)
    (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * c) =
    graded_algebra.proj ùíú ((isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U 1 y) + j)
    (isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 1 y * c),
  { refine congr_arg _ eq1, },

  have eq3 : graded_algebra.proj ùíú ((isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U 1 y) + j)
    (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * c)
    = isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * (graded_algebra.proj ùíú j c),
  { apply graded_algebra.proj_hom_mul,
    apply isos.sheaf_component.forward.hartshorne.denom_hom,
    intro rid,
    apply hc1,
    simp only [rid, zero_pow hm, localization.mk_zero],
    exact submodule.zero_mem _, },

  have eq4 : graded_algebra.proj ùíú ((isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U 1 y) + j)
    (isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 1 y * c)
    = isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 1 y * (graded_algebra.proj ùíú j c),
  { apply graded_algebra.proj_hom_mul,
    apply isos.sheaf_component.forward.hartshorne.num_hom,
    intro rid,
    apply hc1,
    simp only [rid, zero_pow hm, localization.mk_zero],
    exact submodule.zero_mem _, },

  erw [eq3, eq4] at eq2,

  use localization.mk ((graded_algebra.proj ùíú j c)^m) ‚ü®f^j, ‚ü®_, rfl‚ü©‚ü©,
  erw [‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, mul_one, one_mul],
  dsimp only,

  unfold isos.sheaf_component.forward.hartshorne.mk_num,
  unfold isos.sheaf_component.forward.hartshorne.mk_denom,
  erw [subtype.ext_iff_val,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    localization.mk_mul, localization.mk_mul],
  dsimp only,
  congr' 1,
  exact calc isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 1 y
            * isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y ^ m.pred
            * (graded_algebra.proj ùíú j) c ^ m
          = isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 1 y
            * isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y ^ m.pred
            * (graded_algebra.proj ùíú j) c ^ (m.pred + 1)
          : begin
            congr',
            symmetry,
            apply nat.succ_pred_eq_of_pos,
            exact hm
          end
      ... = isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 1 y
            * isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y ^ m.pred
            * ((graded_algebra.proj ùíú j) c ^ m.pred * graded_algebra.proj ùíú j c)
          : begin
            congr',
            erw [pow_add, pow_one],
          end
      ... = (isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 1 y * graded_algebra.proj ùíú j c)
            * (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y ^ m.pred * (graded_algebra.proj ùíú j) c ^ m.pred)
          : by ring
      ... = (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * graded_algebra.proj ùíú j c)
            * (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y ^ m.pred * (graded_algebra.proj ùíú j) c ^ m.pred)
          : by erw eq2
      ... = (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * graded_algebra.proj ùíú j c)
            * (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * graded_algebra.proj ùíú j c) ^ m.pred
          : begin
            congr' 1,
            erw mul_pow,
          end
      ... = (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * graded_algebra.proj ùíú j c) ^ 1
            * (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * graded_algebra.proj ùíú j c) ^ m.pred
          : by rw pow_one
      ... = (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * graded_algebra.proj ùíú j c) ^ (1 + m.pred)
          : by rw pow_add
      ... = (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 1 y * graded_algebra.proj ùíú j c) ^ m
          : begin
            congr' 1,
            rw [add_comm],
            convert nat.succ_pred_eq_of_pos hm,
          end
      ... = _ : by rw mul_pow,
end

lemma isos.sheaf_component.forward.mk_zero
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  isos.sheaf_component.forward.mk ùíú f m hm f_deg U 0 = 0 :=
begin
  ext1 y,
  erw [pi.zero_apply],
  unfold isos.sheaf_component.forward.mk,
  erw [show (0 : structure_sheaf.localizations (degree_zero_part ùíú f m f_deg) y.val) =
    localization.mk 0 1, begin
      erw localization.mk_zero,
    end, localization.mk_eq_mk', is_localization.eq],
  dsimp only,

  have eq1 := isos.sheaf_component.forward.hartshorne.eq_num_div_denom ùíú f m hm f_deg U 0 y,
  erw isos.sheaf_component.forward.hartshorne_zero at eq1,
  erw [show (0 : hartshorne_localisation ùíú ((isos.top_component ùíú f m hm f_deg).inv y).1).1 = 0, from rfl] at eq1,
  erw [show (0 : localization.at_prime ((isos.top_component ùíú f m hm f_deg).inv y.1).1.as_homogeneous_ideal.1) =
    localization.mk 0 1,
      begin
        erw localization.mk_zero,
      end, localization.mk_eq_mk', is_localization.eq] at eq1,
  obtain ‚ü®‚ü®c, hc1‚ü©, eq1‚ü© := eq1,
  erw [zero_mul, zero_mul, mul_one, ‚Üêsubtype.val_eq_coe] at eq1,
  dsimp only at eq1,

  change c ‚àâ isos.backward.carrier ùíú f m hm f_deg _ at hc1,
  change ¬¨(‚àÄ i : ‚Ñï, _ ‚àà _) at hc1,
  erw not_forall at hc1,
  obtain ‚ü®j, hc1‚ü© := hc1,
  replace eq1 := eq1.symm,
  have eq2 : graded_algebra.proj ùíú ((isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U 0 y) + j)
    (isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 0 y * c) = 0,
  { erw [eq1, linear_map.map_zero], },
  have eq3 : graded_algebra.proj ùíú ((isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U 0 y) + j)
    (isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 0 y * c)
    = isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 0 y * graded_algebra.proj ùíú j c,
  { apply graded_algebra.proj_hom_mul,
    apply isos.sheaf_component.forward.hartshorne.num_hom,
    intro rid,
    apply hc1,
    simp only [rid, zero_pow hm, localization.mk_zero],
    exact submodule.zero_mem _, },
    erw eq3 at eq2,

  use localization.mk ((graded_algebra.proj ùíú j c)^m) ‚ü®f^j, ‚ü®_, rfl‚ü©‚ü©,
  unfold isos.sheaf_component.forward.hartshorne.mk_num,
  erw [mul_one, zero_mul, zero_mul, ‚Üêsubtype.val_eq_coe, subtype.ext_iff_val,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    show (0 : degree_zero_part ùíú f m f_deg).1 = 0, from rfl, localization.mk_mul],
  dsimp only,
  convert localization.mk_zero _,
  exact calc isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 0 y
            * isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 0 y ^ m.pred
            * (graded_algebra.proj ùíú j) c ^ m
          = isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 0 y
            * isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 0 y ^ m.pred
            * (graded_algebra.proj ùíú j) c ^ (m.pred + 1)
          : begin
            congr',
            symmetry,
            apply nat.succ_pred_eq_of_pos,
            exact hm
          end
      ... = isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 0 y
            * isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 0 y ^ m.pred
            * ((graded_algebra.proj ùíú j) c ^ m.pred * graded_algebra.proj ùíú j c)
          : by rw [pow_add, pow_one]
      ... = (isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U 0 y *
              graded_algebra.proj ùíú j c)
            * (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 0 y ^ m.pred *
                (graded_algebra.proj ùíú j) c ^ m.pred) : by ring
      ... = 0 * (isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U 0 y ^ m.pred *
                (graded_algebra.proj ùíú j) c ^ m.pred) : by rw eq2
      ... = 0 : by rw zero_mul,
end

lemma isos.sheaf_component.forward.mk_add
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (x y) :
  isos.sheaf_component.forward.mk ùíú f m hm f_deg U (x + y) =
  isos.sheaf_component.forward.mk ùíú f m hm f_deg U x +
  isos.sheaf_component.forward.mk ùíú f m hm f_deg U y :=
begin
  ext1 z,
  rw pi.add_apply,
  unfold isos.sheaf_component.forward.mk,
  erw [localization.add_mk],

  have eq_xz := isos.sheaf_component.forward.hartshorne.eq_num_div_denom ùíú f m hm f_deg U x z,
  have eq_yz := isos.sheaf_component.forward.hartshorne.eq_num_div_denom ùíú f m hm f_deg U y z,
  have eq_addz := isos.sheaf_component.forward.hartshorne.eq_num_div_denom ùíú f m hm f_deg U (x + y) z,
  erw [isos.sheaf_component.forward.hartshorne_add,
    show ‚àÄ (a b : hartshorne_localisation ùíú (((isos.top_component ùíú f m hm f_deg).inv) z.val).val),
      (a + b).1 = a.1 + b.1, from Œª _ _, rfl,
    eq_xz, eq_yz, localization.add_mk, localization.mk_eq_mk', is_localization.eq] at eq_addz,
  obtain ‚ü®‚ü®c, hc‚ü©, eq_addz‚ü© := eq_addz,
  simp only [‚Üêsubtype.val_eq_coe] at eq_addz,
  erw [show ‚àÄ (a b : (projective_spectrum.as_homogeneous_ideal
    (((isos.top_component ùíú f m hm f_deg).inv) z.val).val).val.prime_compl), (a * b).1 = a.1 * b.1,
    from Œª _ _, rfl] at eq_addz,
  dsimp only,

  set d_x := isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U x z with dx_eq,
  set n_x := isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U x z with nx_eq,
  set d_y := isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U y z with dy_eq,
  set n_y := isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U y z with ny_eq,
  set d_xy := isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U (x +y) z with dxy_eq,
  set n_xy := isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U (x+y) z with nxy_eq,
  set i_x := isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U x z with ix_eq,
  set i_y := isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U y z with iy_eq,
  set i_xy := isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U (x+y) z with ixy_eq,

  unfold isos.sheaf_component.forward.hartshorne.mk_num,
  unfold isos.sheaf_component.forward.hartshorne.mk_denom,
  simp only [‚Üêdx_eq, ‚Üênx_eq, ‚Üêdy_eq, ‚Üêny_eq, ‚Üêdxy_eq, ‚Üênxy_eq, ‚Üêi_x, ‚Üêi_y, ‚Üêi_xy] at eq_addz ‚ä¢,
  erw [localization.mk_eq_mk', is_localization.eq],

  change c ‚àâ isos.backward.carrier ùíú f m hm f_deg _ at hc,
  change ¬¨(‚àÄ i : ‚Ñï, _ ‚àà _) at hc,
  erw not_forall at hc,
  obtain ‚ü®j, hc‚ü© := hc,

  use localization.mk ((graded_algebra.proj ùíú j c)^m) ‚ü®f^j, ‚ü®_, rfl‚ü©‚ü©,
  erw [‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe,
    ‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe,
    show ‚àÄ (a b : (prime_spectrum.as_ideal z.val).prime_compl), (a * b).1 = a.1 * b.1,
    from Œª _ _, rfl],
  dsimp only,
  erw [subtype.ext_iff_val,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x + y).1 = x.1 + y.1, from Œª _ _, rfl,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    show ‚àÄ (x y : degree_zero_part ùíú f m f_deg), (x * y).1 = x.1 * y.1, from Œª _ _, rfl,
    localization.mk_mul, localization.mk_mul, localization.mk_mul, localization.mk_mul,
    localization.mk_mul, localization.add_mk, localization.mk_mul, localization.mk_mul,
    localization.mk_eq_mk', is_localization.eq],
  use 1,
  simp only [‚Üêsubtype.val_eq_coe,
    show (1 : submonoid.powers f).1 = 1, from rfl,
    show ‚àÄ (a b : submonoid.powers f), (a * b).1 = a.1 * b.1, from Œª _ _, rfl,
    one_mul, mul_one, ‚Üêpow_add],

  rw calc (f ^ (i_x + i_y) * (d_y ^ m * (n_x * d_x ^ m.pred))
          + f ^ (i_y + i_x) * (d_x ^ m * (n_y * d_y ^ m.pred)))
          * d_xy ^ m
          * (graded_algebra.proj ùíú j) c ^ m
          * f ^ (i_xy + (i_x + i_y) + j)
        = (f ^ (i_x + i_y) * (d_y ^ m * (n_x * d_x ^ m.pred))
            + f ^ (i_x + i_y) * (d_x ^ m * (n_y * d_y ^ m.pred)))
          * d_xy ^ m
          * (graded_algebra.proj ùíú j) c ^ m
          * f ^ (i_xy + (i_x + i_y) + j)
        : begin
          congr' 4,
          rw add_comm,
        end
    ... = (f ^ (i_x + i_y) * (d_y ^ m * (n_x * d_x ^ m.pred) + d_x ^ m * (n_y * d_y ^ m.pred)))
          * d_xy ^ m
          * (graded_algebra.proj ùíú j) c ^ m
          * f ^ (i_xy + (i_x + i_y) + j)
        : begin
          congr' 3,
          rw mul_add,
        end
    ... = (d_y ^ m * (n_x * d_x ^ m.pred) + d_x ^ m * (n_y * d_y ^ m.pred))
          * d_xy ^ m
          * (graded_algebra.proj ùíú j) c ^ m
          * (f ^ (i_x + i_y) * f ^ (i_xy + (i_x + i_y) + j)) : by ring
    ... = (d_y ^ m * (n_x * d_x ^ m.pred) + d_x ^ m * (n_y * d_y ^ m.pred))
          * d_xy ^ m
          * (graded_algebra.proj ùíú j) c ^ m
          * (f ^ (i_x + i_y + (i_xy + (i_x + i_y) + j)))
        : begin
          congr' 1,
          rw [‚Üêpow_add],
        end
    ... = (d_y ^ m * (n_x * d_x ^ m.pred) + d_x ^ m * (n_y * d_y ^ m.pred))
          * d_xy ^ m
          * (graded_algebra.proj ùíú j) c ^ m
          * (f ^ (i_x + i_y + (i_y + i_x) + i_xy + j))
        : begin
          congr' 2,
          ring,
        end,
  congr' 1,
  suffices EQ : (d_x * n_y + d_y * n_x) * d_xy * graded_algebra.proj ùíú j c = n_xy * (d_x * d_y) * graded_algebra.proj ùíú j c,
  erw calc n_xy * d_xy ^ m.pred * (d_x ^ m * d_y ^ m) * (graded_algebra.proj ùíú j) c ^ m
        = n_xy * d_xy ^ m.pred * (d_x ^ m * d_y ^ m) * (graded_algebra.proj ùíú j) c ^ (m.pred + 1)
        : begin
          congr',
          symmetry,
          apply nat.succ_pred_eq_of_pos hm,
        end
    ... = n_xy * d_xy ^ m.pred * (d_x ^ (m.pred + 1) * d_y ^ m) * (graded_algebra.proj ùíú j) c ^ (m.pred + 1)
        : begin
          congr',
          symmetry,
          apply nat.succ_pred_eq_of_pos hm,
        end
    ... = n_xy * d_xy ^ m.pred * (d_x ^ (m.pred + 1) * d_y ^ (m.pred + 1)) * (graded_algebra.proj ùíú j) c ^ (m.pred + 1)
        : begin
          congr',
          symmetry,
          apply nat.succ_pred_eq_of_pos hm,
        end
    ... = n_xy * d_xy ^ m.pred * (d_x ^ m.pred * d_x * (d_y ^ m.pred * d_y))
          * ((graded_algebra.proj ùíú j) c ^ m.pred * (graded_algebra.proj ùíú j) c)
        : begin
          simp only [pow_add, pow_one],
        end
    ... = (n_xy * (d_x * d_y) * graded_algebra.proj ùíú j c)
          * (d_xy ^ m.pred * d_x ^ m.pred * d_y ^ m.pred * (graded_algebra.proj ùíú j c) ^ m.pred)
        : by ring
    ... = ((d_x * n_y + d_y * n_x) * d_xy * (graded_algebra.proj ùíú j) c)
          * (d_xy ^ m.pred * d_x ^ m.pred * d_y ^ m.pred * (graded_algebra.proj ùíú j c) ^ m.pred)
        : by rw EQ
    ... = (d_x * n_y + d_y * n_x)
          * ((d_xy ^ m.pred * d_xy) * d_x ^ m.pred * d_y ^ m.pred
            * ((graded_algebra.proj ùíú j c) ^ m.pred * (graded_algebra.proj ùíú j c)))
        : by ring
    ... = (d_x * n_y + d_y * n_x)
          * (d_xy ^ m * d_x ^ m.pred * d_y ^ m.pred
            * (graded_algebra.proj ùíú j c) ^ m)
        : begin
          congr';
          conv_rhs { rw [show m = m.pred + 1, from (nat.succ_pred_eq_of_pos hm).symm] };
          rw [pow_add, pow_one],
        end
    ... = (d_x * n_y + d_y * n_x)
          * d_x ^ m.pred * d_y ^ m.pred * d_xy ^ m
          * (graded_algebra.proj ùíú j c) ^ m : by ring,
  congr',

  exact calc (d_x * n_y + d_y * n_x) * d_x ^ m.pred * d_y ^ m.pred
        = (d_y ^ m.pred * d_y) * (n_x * d_x ^ m.pred) + (d_x ^ m.pred * d_x) * (n_y * d_y ^ m.pred)
        : by ring
    ... = (d_y ^ m.pred * d_y^1) * (n_x * d_x ^ m.pred) + (d_x ^ m.pred * d_x ^ 1) * (n_y * d_y ^ m.pred)
        : by simp only [pow_one]
    ... = (d_y ^ (m.pred + 1)) * (n_x * d_x ^ m.pred) + (d_x ^ (m.pred + 1)) * (n_y * d_y ^ m.pred)
        : by simp only [pow_add]
    ... = d_y ^ m * (n_x * d_x ^ m.pred) + d_x ^ m * (n_y * d_y ^ m.pred)
        : begin
          congr';
          apply nat.succ_pred_eq_of_pos hm,
        end,

  replace eq_addz := congr_arg (graded_algebra.proj ùíú ((i_x + i_y) + i_xy + j)) eq_addz,
  have eq1 : (graded_algebra.proj ùíú (i_x + i_y + i_xy + j)) ((d_x * n_y + d_y * n_x) * d_xy * c)
    = (d_x * n_y + d_y * n_x) * d_xy * graded_algebra.proj ùíú j c,
  { apply graded_algebra.proj_hom_mul,
    { apply set_like.graded_monoid.mul_mem,
      apply submodule.add_mem _ _ _,
      apply set_like.graded_monoid.mul_mem,
      apply isos.sheaf_component.forward.hartshorne.denom_hom,
      apply isos.sheaf_component.forward.hartshorne.num_hom,
      rw add_comm,
      apply set_like.graded_monoid.mul_mem,
      apply isos.sheaf_component.forward.hartshorne.denom_hom,
      apply isos.sheaf_component.forward.hartshorne.num_hom,
      apply isos.sheaf_component.forward.hartshorne.denom_hom, },
    intro rid,
    apply hc,
    simp only [rid, zero_pow hm, localization.mk_zero],
    exact submodule.zero_mem _, },
  rw eq1 at eq_addz,

  have eq2 : (graded_algebra.proj ùíú (i_x + i_y + i_xy + j)) (n_xy * (d_x * d_y) * c)
    = n_xy * (d_x * d_y) * graded_algebra.proj ùíú j c,
  { apply graded_algebra.proj_hom_mul,
    { rw show i_x + i_y + i_xy = i_xy + (i_x + i_y), by ring,
      apply set_like.graded_monoid.mul_mem,
      apply isos.sheaf_component.forward.hartshorne.num_hom,
      apply set_like.graded_monoid.mul_mem,
      apply isos.sheaf_component.forward.hartshorne.denom_hom,
      apply isos.sheaf_component.forward.hartshorne.denom_hom, },
    intro rid,
    apply hc,
    simp only [rid, zero_pow hm, localization.mk_zero],
    exact submodule.zero_mem _, },
  rw eq2 at eq_addz,
  exact eq_addz,
end

lemma isos.sheaf_component.forward.mk_mul
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (x y) :
  isos.sheaf_component.forward.mk ùíú f m hm f_deg U (x * y) =
  isos.sheaf_component.forward.mk ùíú f m hm f_deg U x *
  isos.sheaf_component.forward.mk ùíú f m hm f_deg U y :=
begin
  ext1 z,
  rw pi.mul_apply,
  unfold isos.sheaf_component.forward.mk,
  erw [localization.mk_mul],

  have eq_xz := isos.sheaf_component.forward.hartshorne.eq_num_div_denom ùíú f m hm f_deg U x z,
  have eq_yz := isos.sheaf_component.forward.hartshorne.eq_num_div_denom ùíú f m hm f_deg U y z,
  have eq_mulz := isos.sheaf_component.forward.hartshorne.eq_num_div_denom ùíú f m hm f_deg U (x * y) z,
  erw [isos.sheaf_component.forward.hartshorne_mul,
    show ‚àÄ (a b : hartshorne_localisation ùíú (((isos.top_component ùíú f m hm f_deg).inv) z.val).val),
      (a * b).1 = a.1 * b.1, from Œª _ _, rfl,
    eq_xz, eq_yz, localization.mk_mul, localization.mk_eq_mk', is_localization.eq] at eq_mulz,
  obtain ‚ü®‚ü®c, hc‚ü©, eq_mulz‚ü© := eq_mulz,
  simp only [‚Üêsubtype.val_eq_coe] at eq_mulz,
  erw [show ‚àÄ (a b : (projective_spectrum.as_homogeneous_ideal
    (((isos.top_component ùíú f m hm f_deg).inv) z.val).val).val.prime_compl), (a * b).1 = a.1 * b.1,
    from Œª _ _, rfl] at eq_mulz,
  dsimp only,

  set d_x := isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U x z with dx_eq,
  set n_x := isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U x z with nx_eq,
  set d_y := isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U y z with dy_eq,
  set n_y := isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U y z with ny_eq,
  set d_xy := isos.sheaf_component.forward.hartshorne.denom ùíú f m hm f_deg U (x*y) z with dxy_eq,
  set n_xy := isos.sheaf_component.forward.hartshorne.num ùíú f m hm f_deg U (x*y) z with nxy_eq,
  set i_x := isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U x z with ix_eq,
  set i_y := isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U y z with iy_eq,
  set i_xy := isos.sheaf_component.forward.hartshorne.i ùíú f m hm f_deg U (x*y) z with ixy_eq,

  unfold isos.sheaf_component.forward.hartshorne.mk_num,
  unfold isos.sheaf_component.forward.hartshorne.mk_denom,
  simp only [‚Üêdx_eq, ‚Üênx_eq, ‚Üêdy_eq, ‚Üêny_eq, ‚Üêdxy_eq, ‚Üênxy_eq, ‚Üêi_x, ‚Üêi_y, ‚Üêi_xy] at eq_mulz ‚ä¢,
  erw [localization.mk_eq_mk', is_localization.eq],

  change c ‚àâ isos.backward.carrier ùíú f m hm f_deg _ at hc,
  change ¬¨(‚àÄ i : ‚Ñï, _ ‚àà _) at hc,
  erw not_forall at hc,
  obtain ‚ü®j, hc‚ü© := hc,

  use localization.mk ((graded_algebra.proj ùíú j c)^m) ‚ü®f^j, ‚ü®_, rfl‚ü©‚ü©,
  erw [‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe, ‚Üêsubtype.val_eq_coe,
    show ‚àÄ (a b : (prime_spectrum.as_ideal z.val).prime_compl), (a * b).1 = a.1 * b.1,
    from Œª _ _, rfl, subtype.ext_iff_val],
  simp only [show ‚àÄ (a b : degree_zero_part ùíú f m f_deg), (a * b).1 = a.1 * b.1, from Œª _ _, rfl],
  rw [localization.mk_mul, localization.mk_mul, localization.mk_mul, localization.mk_mul,
    localization.mk_mul, localization.mk_mul, localization.mk_eq_mk', is_localization.eq],

  use 1,
  simp only [‚Üêsubtype.val_eq_coe,
    show (1 : submonoid.powers f).1 = 1, from rfl,
    show ‚àÄ (a b : submonoid.powers f), (a * b).1 = a.1 * b.1, from Œª _ _, rfl,
    ‚Üêpow_add, mul_one],

  suffices EQ : n_x * n_y * d_xy * graded_algebra.proj ùíú j c = n_xy * (d_x * d_y) * graded_algebra.proj ùíú j c,

  rw calc n_xy * d_xy ^ m.pred * (d_x ^ m * d_y ^ m)
          * (graded_algebra.proj ùíú j) c ^ m
          * f ^ (i_x + i_y + i_xy + j)
        = n_xy * d_xy ^ m.pred * (d_x ^ m * d_y ^ m)
          * (graded_algebra.proj ùíú j) c ^ (m.pred + 1)
          * f ^ (i_x + i_y + i_xy + j)
        : begin
          congr',
          symmetry,
          apply nat.succ_pred_eq_of_pos hm,
        end
    ... = n_xy * d_xy ^ m.pred * (d_x ^ m * d_y ^ m)
          * ((graded_algebra.proj ùíú j) c ^ m.pred * (graded_algebra.proj ùíú j) c)
          * f ^ (i_x + i_y + i_xy + j)
        : begin
          congr',
          rw [pow_add, pow_one],
        end
    ... = n_xy * d_xy ^ m.pred * (d_x ^ (m.pred + 1) * d_y ^ (m.pred + 1))
          * ((graded_algebra.proj ùíú j) c ^ m.pred * (graded_algebra.proj ùíú j) c)
          * f ^ (i_x + i_y + i_xy + j)
        : begin
          congr',
          all_goals { symmetry, apply nat.succ_pred_eq_of_pos hm, },
        end
    ... = n_xy * d_xy ^ m.pred * ((d_x ^ m.pred * d_x) * (d_y ^ m.pred * d_y))
          * ((graded_algebra.proj ùíú j) c ^ m.pred * (graded_algebra.proj ùíú j) c)
          * f ^ (i_x + i_y + i_xy + j)
          : begin
            congr';
            rw [pow_add, pow_one],
          end
    ... = (n_xy * (d_x * d_y) * graded_algebra.proj ùíú j c) * (d_xy^m.pred * d_x^m.pred * d_y^m.pred * (graded_algebra.proj ùíú j c)^m.pred)
          * f ^ (i_x + i_y + i_xy + j)
        : by ring
    ... = (n_x * n_y * d_xy * graded_algebra.proj ùíú j c) * (d_xy^m.pred * d_x^m.pred * d_y^m.pred * (graded_algebra.proj ùíú j c)^m.pred)
          * f ^ (i_x + i_y + i_xy + j)
        : by rw EQ
    ... = (n_x * n_y * d_xy) * (d_xy^m.pred * d_x^m.pred * d_y^m.pred * ((graded_algebra.proj ùíú j c)^m.pred * graded_algebra.proj ùíú j c))
          * f ^ (i_x + i_y + i_xy + j) : by ring
    ... = (n_x * n_y * d_xy) * (d_xy^m.pred * d_x^m.pred * d_y^m.pred * ((graded_algebra.proj ùíú j c)^m.pred * (graded_algebra.proj ùíú j c)^1))
          * f ^ (i_x + i_y + i_xy + j) : by rw pow_one
    ... = (n_x * n_y * d_xy) * (d_xy^m.pred * d_x^m.pred * d_y^m.pred * ((graded_algebra.proj ùíú j c)^(m.pred + 1)))
          * f ^ (i_x + i_y + i_xy + j)
        : begin
          congr',
          rw pow_add,
        end
    ... = (n_x * n_y * d_xy) * (d_xy^m.pred * d_x^m.pred * d_y^m.pred * ((graded_algebra.proj ùíú j c)^m))
          * f ^ (i_x + i_y + i_xy + j)
        : begin
          congr',
          exact nat.succ_pred_eq_of_pos hm,
        end
    ... = (n_x * n_y) * ((d_xy^m.pred * d_xy) * d_x^m.pred * d_y^m.pred * ((graded_algebra.proj ùíú j c)^m))
          * f ^ (i_x + i_y + i_xy + j) : by ring
    ... = (n_x * n_y) * ((d_xy^m.pred * d_xy^1) * d_x^m.pred * d_y^m.pred * ((graded_algebra.proj ùíú j c)^m))
          * f ^ (i_x + i_y + i_xy + j) : by rw pow_one
    ... = (n_x * n_y) * ((d_xy^(m.pred + 1)) * d_x^m.pred * d_y^m.pred * ((graded_algebra.proj ùíú j c)^m))
          * f ^ (i_x + i_y + i_xy + j)
        : begin
          congr',
          rw pow_add,
        end
    ... = (n_x * n_y) * (d_xy^m * d_x^m.pred * d_y^m.pred * ((graded_algebra.proj ùíú j c)^m))
          * f ^ (i_x + i_y + i_xy + j)
        : begin
          congr',
          exact nat.succ_pred_eq_of_pos hm,
        end,
  ring_nf,
  congr' 7,
  ring,

  have INEQ : graded_algebra.proj ùíú j c ‚â† 0,
  { intro rid,
    apply hc,
    simp only [rid, zero_pow hm, localization.mk_zero],
    exact submodule.zero_mem _,
  },
  replace eq_mulz := congr_arg (graded_algebra.proj ùíú (i_x + i_y + i_xy + j)) eq_mulz,
  erw [graded_algebra.proj_hom_mul, graded_algebra.proj_hom_mul] at eq_mulz,
  exact eq_mulz,

  rw show i_x + i_y + i_xy = i_xy + (i_x + i_y), by ring,
  apply set_like.graded_monoid.mul_mem,
  apply isos.sheaf_component.forward.hartshorne.num_hom,
  apply set_like.graded_monoid.mul_mem,
  apply isos.sheaf_component.forward.hartshorne.denom_hom,
  apply isos.sheaf_component.forward.hartshorne.denom_hom,
  exact INEQ,

  apply set_like.graded_monoid.mul_mem,
  apply set_like.graded_monoid.mul_mem,
  apply isos.sheaf_component.forward.hartshorne.num_hom,
  apply isos.sheaf_component.forward.hartshorne.num_hom,
  apply isos.sheaf_component.forward.hartshorne.denom_hom,
  exact INEQ,
end

lemma isos.sheaf_component.forward.mk_is_locally_quotient
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U)) :
  (structure_sheaf.is_locally_fraction
   (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_prelocal_predicate.pred
  (isos.sheaf_component.forward.mk ùíú f m hm f_deg U hh) := sorry

def isos.sheaf_component.forward.to_fun
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (U : (opens
    ((Spec‚Ü•(degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  (((isos.top_component ùíú f m hm f_deg).hom _*
      ((Proj.to_LocallyRingedSpace ùíú).restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
        (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.val).obj
     U) ‚Üí (Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.sheaf.val.obj U := Œª hh,
‚ü®isos.sheaf_component.forward.mk ùíú f m hm f_deg U hh,
  isos.sheaf_component.forward.mk_is_locally_quotient ùíú f m hm f_deg U hh‚ü©


def isos.sheaf_component.forward
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
  (isos.top_component ùíú f m hm f_deg).hom _*
    (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.sheaf.1 ‚ü∂
  (Spec degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg).to_SheafedSpace.sheaf.1
:=
{ app := Œª U,
  { to_fun := isos.sheaf_component.forward.to_fun ùíú f m hm f_deg U,
    map_one' := begin
      rw [subtype.ext_iff_val,
        show (1 : ((Spec‚Ü•(degree_zero_part ùíú f m f_deg)).to_SheafedSpace.sheaf.val.obj U)).val = 1,
        from rfl],
      apply isos.sheaf_component.forward.mk_one,
    end,
    map_zero' := begin
      rw [subtype.ext_iff_val,
        show (0 : ((Spec‚Ü•(degree_zero_part ùíú f m f_deg)).to_SheafedSpace.sheaf.val.obj U)).val = 0,
        from rfl],
      dsimp only,
      apply isos.sheaf_component.forward.mk_zero,
    end,
    map_add' := Œª x y, begin
      rw [subtype.ext_iff_val],
      dsimp only,
      convert isos.sheaf_component.forward.mk_add ùíú f m hm f_deg U x y,
    end,
    map_mul' := Œª x y, begin
      rw [subtype.ext_iff_val],
      dsimp only,
      convert isos.sheaf_component.forward.mk_mul ùíú f m hm f_deg U x y,
    end },
  naturality' := Œª U V subset1, begin
    ext1 z,
    simp only [comp_apply, ring_hom.coe_mk, functor.op_map, presheaf.pushforward_obj_map],
    sorry
  end, }

lemma isos.sheaf_component.backward.data_prop1
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop) :
  y.1 ‚àà (projective_spectrum.basic_open ùíú f).val :=
begin
  obtain ‚ü®a, ha1, ha2‚ü© := y.2,
  erw ‚Üêha2,
  exact a.2,
end

lemma isos.sheaf_component.backward.data_prop2
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop) :
  ((isos.top_component ùíú f m hm f_deg).hom)
    ‚ü®y.val, isos.sheaf_component.backward.data_prop1 ùíú f m hm f_deg V hh y‚ü© ‚àà unop V :=
begin
  obtain ‚ü®a, ha1, ha2‚ü© := y.2,
  erw set.mem_preimage at ha1,
  convert ha1,
  rw [subtype.ext_iff_val],
  erw ‚Üêha2,
  refl,
end

def isos.sheaf_component.backward.data
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop) :
  structure_sheaf.localizations (degree_zero_part ùíú f m f_deg)
  ((isos.top_component ùíú f m hm f_deg).hom
    ‚ü®y.1, isos.sheaf_component.backward.data_prop1 ùíú f m hm f_deg V hh y‚ü©) :=
hh.1
  ‚ü®(isos.top_component ùíú f m hm f_deg).hom
    ‚ü®y.1, isos.sheaf_component.backward.data_prop1 ùíú f m hm f_deg V hh y‚ü©,
      isos.sheaf_component.backward.data_prop2 ùíú f m hm f_deg V hh y‚ü©

lemma isos.sheaf_component.backward.data_exists_rep
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop)
  (data : structure_sheaf.localizations (degree_zero_part ùíú f m f_deg)
    ((isos.top_component ùíú f m hm f_deg).hom
      ‚ü®y.1, isos.sheaf_component.backward.data_prop1 ùíú f m hm f_deg V hh y‚ü©)) :
  ‚àÉ (a : degree_zero_part ùíú f m f_deg)
    (b : ((isos.top_component ùíú f m hm f_deg).hom
      ‚ü®y.1, isos.sheaf_component.backward.data_prop1 ùíú f m hm f_deg V hh y‚ü©).as_ideal.prime_compl),
    data = localization.mk a b :=
begin
  induction data using localization.induction_on with p,
  obtain ‚ü®a, b‚ü© := p,
  refine ‚ü®a, b, rfl‚ü©,
end

def isos.sheaf_component.backward.data_num
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop)
  : degree_zero_part ùíú f m f_deg :=
classical.some (isos.sheaf_component.backward.data_exists_rep ùíú f m hm f_deg V hh y
  (isos.sheaf_component.backward.data ùíú f m hm f_deg V hh y))

def isos.sheaf_component.backward.data_denom
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop)
  : ((isos.top_component ùíú f m hm f_deg).hom
      ‚ü®y.1, isos.sheaf_component.backward.data_prop1 ùíú f m hm f_deg V hh y‚ü©).as_ideal.prime_compl :=
classical.some $ classical.some_spec
  (isos.sheaf_component.backward.data_exists_rep ùíú f m hm f_deg V hh y
    (isos.sheaf_component.backward.data ùíú f m hm f_deg V hh y))

lemma isos.sheaf_component.backward.data_eq_num_div_denom
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop) :
  ((isos.sheaf_component.backward.data ùíú f m hm f_deg V hh y)) =
  localization.mk
    (isos.sheaf_component.backward.data_num ùíú f m hm f_deg V hh y)
    (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y) :=
classical.some_spec $ classical.some_spec
  (isos.sheaf_component.backward.data_exists_rep ùíú f m hm f_deg V hh y
    (isos.sheaf_component.backward.data ùíú f m hm f_deg V hh y))

variable {ùíú}
def degree_zero_part.degree
  {f : A} {m : ‚Ñï} {f_deg : f ‚àà ùíú m}
  (x : degree_zero_part ùíú f m f_deg) : ‚Ñï :=
classical.some x.2

def degree_zero_part.num
  {f : A} {m : ‚Ñï} {f_deg : f ‚àà ùíú m}
  (x : degree_zero_part ùíú f m f_deg) : A :=
classical.some $ classical.some_spec x.2

lemma degree_zero_part.num_mem
  {f : A} {m : ‚Ñï} {f_deg : f ‚àà ùíú m}
  (x : degree_zero_part ùíú f m f_deg) :
  degree_zero_part.num x ‚àà ùíú (m * degree_zero_part.degree x) :=
classical.some $ classical.some_spec $ classical.some_spec x.2

lemma degree_zero_part.eq_num_div
  {f : A} {m : ‚Ñï} {f_deg : f ‚àà ùíú m}
  (x : degree_zero_part ùíú f m f_deg) :
  x.1 = localization.mk (degree_zero_part.num x) ‚ü®f^(degree_zero_part.degree x), ‚ü®_, rfl‚ü©‚ü© :=
classical.some_spec $ classical.some_spec $ classical.some_spec x.2

variable (ùíú)

def isos.sheaf_component.backward.hartshorne_num
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop) : A :=
((degree_zero_part.num (isos.sheaf_component.backward.data_num ùíú f m hm f_deg V hh y)) *
            f^(degree_zero_part.degree (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y).1))

def isos.sheaf_component.backward.hartshorne_denom
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop) :
y.1.as_homogeneous_ideal.1.prime_compl :=
‚ü®(degree_zero_part.num (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y).1)*
  f^(degree_zero_part.degree (isos.sheaf_component.backward.data_num ùíú f m hm f_deg V hh y)),
  Œª rid, begin
    rcases y.1.is_prime.mem_or_mem rid with H1 | H2,
    { have mem1 := (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y).2,
      have eq1 := degree_zero_part.eq_num_div (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y).1,
      dsimp only at mem1,
      change _ ‚àâ _ at mem1,
      apply mem1,
      change
        (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y).1 ‚àà
        ((isos.forward.carrier ùíú f m f_deg) ‚ü®y.1, _‚ü©),

      change
        (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y).1.1 ‚àà
        (ideal.span _),
      erw eq1,
      convert ideal.mem_span.smul_mem _ _ _ _ _,
      work_on_goal 3 { refine ‚ü®degree_zero_part.num (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y).val, H1, rfl‚ü©, },
      work_on_goal 1 { exact localization.mk 1 ‚ü®f^(degree_zero_part.degree (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y).1), ‚ü®_, rfl‚ü©‚ü©},
      erw [smul_eq_mul, localization.mk_mul, one_mul, mul_one], },
    { replace H2 := y.1.is_prime.mem_of_pow_mem _ H2,
      obtain ‚ü®‚ü®a, ha1‚ü©, ha2, ha3‚ü© := y.2,
      erw projective_spectrum.mem_basic_open at ha1,
      apply ha1,
      convert H2, }
  end‚ü©

def isos.sheaf_component.backward.hartshorne
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V))
  (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop) :
  hartshorne_localisation ùíú y.1 :=
‚ü®localization.mk (isos.sheaf_component.backward.hartshorne_num ùíú f m hm f_deg V hh y)
  (isos.sheaf_component.backward.hartshorne_denom ùíú f m hm f_deg V hh y),
  ‚ü®projective_spectrum.structure_sheaf.hl.condition.mk
    (isos.sheaf_component.backward.hartshorne_num ùíú f m hm f_deg V hh y)
    (isos.sheaf_component.backward.hartshorne_denom ùíú f m hm f_deg V hh y).1
    (isos.sheaf_component.backward.hartshorne_denom ùíú f m hm f_deg V hh y).2
    (m * (degree_zero_part.degree (isos.sheaf_component.backward.data_num ùíú f m hm f_deg V hh y))
    + m * (degree_zero_part.degree (isos.sheaf_component.backward.data_denom ùíú f m hm f_deg V hh y).1))
    begin
      apply set_like.graded_monoid.mul_mem,
      apply degree_zero_part.num_mem,
      rw mul_comm,
      apply set_like.graded_monoid.pow_deg ùíú f_deg,
    end begin
      change _ * _ ‚àà _,
      conv_lhs { rw mul_comm },
      apply set_like.graded_monoid.mul_mem,
      rw mul_comm,
      apply set_like.graded_monoid.pow_deg ùíú f_deg,
      apply degree_zero_part.num_mem,
    end, rfl‚ü©‚ü©

def isos.sheaf_component.backward.mk
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V)) :
  Œ† (y :
    ((@opens.open_embedding (projective_spectrum.Top ùíú) (projective_spectrum.basic_open ùíú f)).is_open_map.functor.op.obj
            ((opens.map (isos.top_component ùíú f m hm f_deg).hom).op.obj V)).unop), hartshorne_localisation ùíú y.1 :=
Œª y, isos.sheaf_component.backward.hartshorne ùíú f m hm f_deg V hh y

lemma isos.sheaf_component.backward.mk_one
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  isos.sheaf_component.backward.mk ùíú f m hm f_deg V 1 = 1 := sorry

lemma isos.sheaf_component.backward.mk_zero
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  isos.sheaf_component.backward.mk ùíú f m hm f_deg V 0 = 0 := sorry

lemma isos.sheaf_component.backward.mk_add
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  ‚àÄ x y, isos.sheaf_component.backward.mk ùíú f m hm f_deg V (x + y) =
    isos.sheaf_component.backward.mk ùíú f m hm f_deg V x +
    isos.sheaf_component.backward.mk ùíú f m hm f_deg V y := sorry

lemma isos.sheaf_component.backward.mk_mul
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ) :
  ‚àÄ x y, isos.sheaf_component.backward.mk ùíú f m hm f_deg V (x * y) =
    isos.sheaf_component.backward.mk ùíú f m hm f_deg V x *
    isos.sheaf_component.backward.mk ùíú f m hm f_deg V y := sorry

lemma isos.sheaf_component.backward.mk_is_locally_quotient
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m)
  (V : (opens ((Spec (degree_zero_part ùíú f m f_deg)).to_SheafedSpace.to_PresheafedSpace.carrier))·µí·µñ)
  (hh : ((Spec (degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg)).to_SheafedSpace.to_PresheafedSpace.presheaf.obj V)) :
  (is_locally_fraction ùíú).to_prelocal_predicate.pred (isos.sheaf_component.backward.mk ùíú f m hm f_deg V hh) :=
sorry

def isos.sheaf_component.backward
  (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
  (Spec degree_zero_part ùíú f m f_deg).to_SheafedSpace.to_PresheafedSpace.presheaf ‚ü∂
  (isos.top_component ùíú f m hm f_deg).hom _*
    (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.to_PresheafedSpace.presheaf :=
{ app := Œª V,
    { to_fun := Œª hh, ‚ü®isos.sheaf_component.backward.mk ùíú f m hm f_deg V hh,
        isos.sheaf_component.backward.mk_is_locally_quotient ùíú f m hm f_deg V hh‚ü©,
      map_one' := begin
        erw [subtype.ext_iff_val],
        dsimp only,
        convert isos.sheaf_component.backward.mk_one ùíú f m hm f_deg V,
      end,
      map_mul' := Œª x y, begin
        erw subtype.ext_iff_val,
        dsimp only,
        convert isos.sheaf_component.backward.mk_mul ùíú f m hm f_deg V x y,
      end,
      map_zero' := begin
        erw [subtype.ext_iff_val],
        dsimp only,
        convert isos.sheaf_component.backward.mk_zero ùíú f m hm f_deg V,
      end,
      map_add' := Œª x y, begin
        erw subtype.ext_iff_val,
        dsimp only,
        convert isos.sheaf_component.backward.mk_add ùíú f m hm f_deg V x y,
      end },
  naturality' := sorry, }

def isos.sheaf_component (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
  (isos.top_component ùíú f m hm f_deg).hom _*
    (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.to_PresheafedSpace.presheaf ‚âÖ
  (Spec degree_zero_part (Œª (m : ‚Ñï), ùíú m) f m f_deg).to_SheafedSpace.to_PresheafedSpace.presheaf :=
{ hom := isos.sheaf_component.forward ùíú f m hm f_deg,
  inv := isos.sheaf_component.backward ùíú f m hm f_deg,
  hom_inv_id' := begin
    ext1,
    ext1 V,
    ext1 y,
    erw [nat_trans.comp_app, nat_trans.id_app, comp_apply, id_apply],
    sorry
  end,
  inv_hom_id' := begin
    ext1, ext1 V, ext1 y,
    erw [nat_trans.comp_app, nat_trans.id_app, comp_apply, id_apply],

    sorry
  end, }

def isos (f : A) [decidable_eq (localization.away f)] (m : ‚Ñï) (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
  Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f)) ‚âÖ (Spec (degree_zero_part _ f m f_deg)) :=
  LocallyRingedSpace.iso_of_SheafedSpace_iso $ SheafedSpace.iso_of_presheaf_iso _ _ $
  @PresheafedSpace.iso_of_components _ _
    (Proj .restrict (@opens.open_embedding (projective_spectrum.Top ùíú)
    (projective_spectrum.basic_open ùíú f))).to_SheafedSpace.to_PresheafedSpace
    (Spec (degree_zero_part _ f m f_deg)).to_SheafedSpace.to_PresheafedSpace
    (isos.top_component _ f m hm f_deg) (isos.sheaf_component _ f m hm f_deg)

def test.choose_element [Œ† (i : ‚Ñï) (x : ùíú i), decidable (x ‚â† 0)] (x : pst) :
  Œ£' (n : ‚Ñï) (hn : 0 < n) (f : A), f ‚àà ùíú n ‚àß f ‚àâ x.as_homogeneous_ideal.1 :=
begin
  have := x.2.2,
  erw set.not_subset at this,
  choose f h1 h2 using this,
  erw ‚Üêgraded_algebra.sum_support_decompose ùíú f at h2,
  have : ‚àÉ (n : ‚Ñï) (hn : 0 < n), (graded_algebra.decompose ùíú f n : A) ‚àâ x.as_homogeneous_ideal.1,
  { by_contra rid,
    simp only [not_exists, exists_prop, not_and, not_not, subtype.val_eq_coe] at rid,
    apply h2,
    apply ideal.sum_mem,
    intros c hc,
    by_cases ineq1 : 0 < c,
    { apply rid _ ineq1, },
    { rw not_lt at ineq1,
      replace ineq1 := nat.eq_zero_of_le_zero ineq1,
      rw ineq1,
      dsimp only at h1,
      change f ‚àà (irrelavent_ideal ùíú) at h1,
      rw ‚Üêgraded_algebra.proj_apply,
      have := irrelavent_ideal.mem ùíú f h1,
      erw this,
      exact submodule.zero_mem _, },
    },
  choose n hn1 hn2 using this,
  refine ‚ü®n, hn1, (graded_algebra.decompose _ f n : A), submodule.coe_mem _, hn2‚ü©,
end

def Proj.to_Scheme [Œ† (i : ‚Ñï) (x : ùíú i), decidable (x ‚â† 0)]
  [Œ† x, decidable_eq (localization.away (test.choose_element ùíú x).snd.snd.fst)] : Scheme :=
{ local_affine := Œª x,
  ‚ü®‚ü®projective_spectrum.basic_open ùíú (test.choose_element ùíú x).2.2.1, begin
    rw projective_spectrum.mem_basic_open,
    exact (test.choose_element ùíú x).2.2.2.2,
  end‚ü©,
  ‚ü®CommRing.of (degree_zero_part ùíú (test.choose_element ùíú x).2.2.1 (test.choose_element ùíú x).1
    (test.choose_element ùíú x).2.2.2.1),
    ‚ü®isos ùíú (test.choose_element ùíú x).2.2.1 (test.choose_element ùíú x).1
      (test.choose_element ùíú x).2.1
    (test.choose_element ùíú x).2.2.2.1‚ü©‚ü©‚ü©,
  ..Proj }

end algebraic_geometry
