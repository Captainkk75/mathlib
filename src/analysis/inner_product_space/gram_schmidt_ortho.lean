/-
Copyright (c) 2022 Jiale Miao. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiale Miao, Kevin Buzzard
-/

import analysis.inner_product_space.projection
import order.well_founded_set

/-!
# Gram-Schmidt Orthogonalization and Orthonormalization

In this file we introduce Gram-Schmidt Orthogonalization and Orthonormalization.

The Gram-Schmidt process takes a set of vectors as input
and outputs a set of orthogonal vectors which have the same span.

## Main results

- `gram_schmidt` : the Gram-Schmidt process
- `gram_schmidt_orthogonal` :
  `gram_schmidt` produces an orthogonal system of vectors.
- `span_gram_schmidt` :
  `gram_schmidt` preserves span of vectors.
- `gram_schmidt_ne_zero` :
  If the input of the first `n + 1` vectors of `gram_schmidt` are linearly independent,
  then the output of the first `n + 1` vectors are non-zero.
- `gram_schmidt_normed` :
  the normalized `gram_schmidt` (i.e each vector in `gram_schmidt_normed` has unit length.)
- `gram_schmidt_orthornormal` :
  `gram_schmidt_normed` produces an orthornormal system of vectors.

## TODO
  Construct a version with an orthonormal basis from Gram-Schmidt process.
-/

-- TODO: move
namespace order
open set
variables {Œ± : Type*} [partial_order Œ±] [succ_order Œ±] (a : Œ±)
@[simp] lemma succ_eq_self_iff_is_max : succ a = a ‚Üî is_max a :=
begin
  rw [‚Üêorder.succ_le_iff_is_max],
  exact iff.intro (Œª h, by rw [h]) (Œª h, (le_antisymm h (le_succ a))),
end

lemma Iio_succ_eq_insert' {Œ± : Type*} [partial_order Œ±] [succ_order Œ±]
    (a : Œ±) (ha : ¬¨ is_max a):
  Iio (succ a) = insert a (Iio a) :=
ext (Œª _, lt_succ_iff_eq_or_lt_of_not_is_max ha)

end order

-- TODO: move
namespace is_well_order
def has_well_founded {Œπ : Type*} [preorder Œπ] [hwo : is_well_order Œπ (<)] : has_well_founded Œπ := {
  r := (<),
  wf := hwo.wf
}
end is_well_order

local attribute [instance] is_well_order.has_well_founded

open_locale big_operators
open finset

variables (ùïú : Type*) {E : Type*} [is_R_or_C ùïú] [inner_product_space ùïú E]
variables {Œπ : Type*} [linear_order Œπ] [order_bot Œπ] [succ_order Œπ]
variables [is_succ_archimedean Œπ] [locally_finite_order Œπ] [is_well_order Œπ (<)]

local notation `‚ü™`x`, `y`‚ü´` := @inner ùïú _ _ x y

/-- The Gram-Schmidt process takes a set of vectors as input
and outputs a set of orthogonal vectors which have the same span. -/
noncomputable def gram_schmidt (f : Œπ ‚Üí E) : Œπ ‚Üí E
| n := f n - ‚àë i : Ico ‚ä• n, orthogonal_projection (ùïú ‚àô gram_schmidt i) (f n)
using_well_founded { dec_tac := `[exact (mem_Ico.1 i.2).2] }

/-- This lemma uses `‚àë i in` instead of `‚àë i :`.-/
lemma gram_schmidt_def (f : Œπ ‚Üí E) (n : Œπ):
  gram_schmidt ùïú f n = f n - ‚àë i in Ico ‚ä• n,
    orthogonal_projection (ùïú ‚àô gram_schmidt ùïú f i) (f n) :=
by { rw [‚Üêsum_attach, attach_eq_univ, gram_schmidt], refl }

lemma gram_schmidt_def' (f : Œπ ‚Üí E) (n : Œπ):
  f n = gram_schmidt ùïú f n + ‚àë i in Ico ‚ä• n,
    orthogonal_projection (ùïú ‚àô gram_schmidt ùïú f i) (f n) :=
by rw [gram_schmidt_def, sub_add_cancel]

@[simp] lemma gram_schmidt_zero (f : Œπ ‚Üí E) :
  gram_schmidt ùïú f ‚ä• = f ‚ä• :=
by rw [gram_schmidt_def, finset.Ico_self, finset.sum_empty, sub_zero]

/-- **Gram-Schmidt Orthogonalisation**:
`gram_schmidt` produces an orthogonal system of vectors. -/
theorem gram_schmidt_orthogonal (f : Œπ ‚Üí E) {a b : Œπ} (h‚ÇÄ : a ‚â† b) :
  ‚ü™gram_schmidt ùïú f a, gram_schmidt ùïú f b‚ü´ = 0 :=
begin
  suffices : ‚àÄ a b : Œπ, a < b ‚Üí ‚ü™gram_schmidt ùïú f a, gram_schmidt ùïú f b‚ü´ = 0,
  { cases h‚ÇÄ.lt_or_lt with ha hb,
    { exact this _ _ ha, },
    { rw inner_eq_zero_sym,
      exact this _ _ hb, }, },
  clear h‚ÇÄ a b,
  intros a b h‚ÇÄ,
  revert a,
  apply well_founded.induction (@is_well_order.wf Œπ (<) _) b,
  intros b ih a h‚ÇÄ,
  simp only [gram_schmidt_def ùïú f b, inner_sub_right, inner_sum,
    orthogonal_projection_singleton, inner_smul_right],
  rw finset.sum_eq_single_of_mem a (finset.mem_Ico.mpr ‚ü®bot_le, h‚ÇÄ‚ü©),
  { by_cases h : gram_schmidt ùïú f a = 0,
    { simp only [h, inner_zero_left, zero_div, zero_mul, sub_zero], },
    { rw [‚Üê inner_self_eq_norm_sq_to_K, div_mul_cancel, sub_self],
      rwa [ne.def, inner_self_eq_zero], }, },
  simp_intros i hi hia only [finset.mem_range],
  simp only [mul_eq_zero, div_eq_zero_iff, inner_self_eq_zero],
  right,
  cases hia.lt_or_lt with hia‚ÇÅ hia‚ÇÇ,
  { rw inner_eq_zero_sym,
    exact ih a h‚ÇÄ i hia‚ÇÅ },
  { exact ih i (mem_Ico.1 hi).2 a hia‚ÇÇ }
end

/-- This is another version of `gram_schmidt_orthogonal` using `pairwise` instead. -/
theorem gram_schmidt_pairwise_orthogonal (f : Œπ ‚Üí E) :
  pairwise (Œª a b, ‚ü™gram_schmidt ùïú f a, gram_schmidt ùïú f b‚ü´ = 0) :=
Œª a b, gram_schmidt_orthogonal ùïú f

open submodule set order



/-- `gram_schmidt` preserves span of vectors. -/
lemma span_gram_schmidt (f : Œπ ‚Üí E) (c : Œπ) :
  span ùïú (gram_schmidt ùïú f '' Iio c) = span ùïú (f '' Iio c) :=
begin
  apply @succ.rec Œπ _ _ _ (Œª c, span ùïú (gram_schmidt ùïú f '' Iio c) = span ùïú (f '' Iio c)) ‚ä•
    _ _ _ bot_le,
  { simp only [set.Iio_bot, set.image_empty] },
  intros c _ hc,
  by_cases h : succ c = c,
  { rwa h },
  have h‚ÇÄ : ‚àÄ b, b ‚àà finset.Ico ‚ä• c ‚Üí gram_schmidt ùïú f b ‚àà span ùïú (f '' Iio c),
  { simp_intros b hb only [finset.mem_range, nat.succ_eq_add_one],
    rw ‚Üê hc,
    refine subset_span _,
    simp only [set.mem_image, set.mem_Iio],
    refine ‚ü®b, (finset.mem_Ico.1 hb).2, by refl‚ü© },
  rw not_iff_not.2 (order.succ_eq_self_iff_is_max _) at h,
  rw [order.Iio_succ_eq_insert' _ h],
  simp only [span_insert, image_insert_eq, hc],
  apply le_antisymm,
  { simp only [nat.succ_eq_succ,gram_schmidt_def ùïú f c, orthogonal_projection_singleton,
      _root_.sup_le_iff, span_singleton_le_iff_mem, le_sup_right, and_true],
    apply submodule.sub_mem _ _ _,
    { exact mem_sup_left (mem_span_singleton_self (f c)) },
    { exact submodule.sum_mem _ (Œª b hb, mem_sup_right (smul_mem _ _ (h‚ÇÄ b hb))) } },
  { rw [gram_schmidt_def' ùïú f c],
    simp only [orthogonal_projection_singleton,
      _root_.sup_le_iff, span_singleton_le_iff_mem, le_sup_right, and_true],
    apply submodule.add_mem _ _ _,
    { exact mem_sup_left (mem_span_singleton_self (gram_schmidt ùïú f c)), },
    { exact submodule.sum_mem _ (Œª b hb, mem_sup_right (smul_mem _ _ (h‚ÇÄ b hb))) } }
end

/-- If the input vectors of `gram_schmidt` are linearly independent,
then the output vectors are non-zero. -/
lemma gram_schmidt_ne_zero (f : Œπ ‚Üí E) (n : Œπ) (h‚ÇÄ : linear_independent ùïú f) :
  gram_schmidt ùïú f n ‚â† 0 :=
begin
  by_contra h,
  have h‚ÇÉ : f n ‚àà span ùïú (f '' Iio n),
  { rw [‚Üê span_gram_schmidt ùïú f n, gram_schmidt_def' _ f, h, zero_add],
    apply submodule.sum_mem _ _,
    simp_intros a ha only [finset.mem_Ico],
    simp only [set.mem_image, set.mem_Iio, orthogonal_projection_singleton],
    apply submodule.smul_mem _ _ _,
    exact subset_span ‚ü®a, ha.2, by refl‚ü© },
  apply linear_independent.not_mem_span_image h‚ÇÄ _ h‚ÇÉ,
  simp only [set.mem_Iio, lt_self_iff_false, not_false_iff]
end

/-- the normalized `gram_schmidt`
(i.e each vector in `gram_schmidt_normed` has unit length.) -/
noncomputable def gram_schmidt_normed (f : Œπ ‚Üí E) (n : Œπ) : E :=
(‚à•gram_schmidt ùïú f n‚à• : ùïú)‚Åª¬π ‚Ä¢ (gram_schmidt ùïú f n)

lemma gram_schmidt_normed_unit_length (f : Œπ ‚Üí E) (n : Œπ) (h‚ÇÄ : linear_independent ùïú f) :
    ‚à•gram_schmidt_normed ùïú f n‚à• = 1 :=
by simp only [gram_schmidt_ne_zero ùïú f n h‚ÇÄ,
  gram_schmidt_normed, norm_smul_inv_norm, ne.def, not_false_iff]

/-- **Gram-Schmidt Orthonormalization**:
`gram_schmidt_normed` produces an orthornormal system of vectors. -/
theorem gram_schmidt_orthonormal (f : Œπ ‚Üí E) (h‚ÇÄ : linear_independent ùïú f) :
  orthonormal ùïú (gram_schmidt_normed ùïú f) :=
begin
  unfold orthonormal,
  split,
  { simp only [gram_schmidt_normed_unit_length, h‚ÇÄ, forall_const] },
  { intros i j hij,
    simp only [gram_schmidt_normed, inner_smul_left, inner_smul_right, is_R_or_C.conj_inv,
      is_R_or_C.conj_of_real, mul_eq_zero, inv_eq_zero, is_R_or_C.of_real_eq_zero, norm_eq_zero],
    repeat { right },
    exact gram_schmidt_orthogonal ùïú f hij }
end
