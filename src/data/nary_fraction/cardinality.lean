import data.nary_fraction.basic
import set_theory.cardinal.continuum

/-!
-/

open cardinal
open_locale cardinal

namespace nary_fraction

variables {N : ‚Ñï}

instance : has_card_continuum (nary_fraction $ N + 2) := pi.has_card_continuum _ _

@[simp] protected lemma card_quotient :
  #(quotient (@nary_fraction.setoid $ N + 2)) = #(nary_fraction $ N + 2) :=
mk_quotient_le.antisymm $ mk_le_of_injective injective_interleave_zero

instance : has_card_continuum (quotient (@nary_fraction.setoid $ N + 2)) :=
‚ü®by rw [nary_fraction.card_quotient, mk_eq_continuum]‚ü©

end nary_fraction

namespace cardinal

open nary_fraction

universe u

variables {Œ± : Type u} [conditionally_complete_lattice Œ±] [densely_ordered Œ±]

section

variables {a b : Œ±}

lemma continuum_le_mk_Icc (h : a < b) : ùî† ‚â§ #(Icc a b) :=
begin
  set c : Œ† I : nontrivial_interval Œ±, I.Ioo :=
    Œª I, classical.indefinite_description _ I.nonempty_Ioo,
  set f : quotient binary_fraction.setoid ‚Üí Icc a b :=
    Œª x, ‚ü®x.out.decode c ‚ü®a, b, h‚ü©, x.out.decode_mem_Icc _ _ 0‚ü©,
  have hf : strict_mono f := strict_mono_decode_out c _,
  simpa using lift_mk_le'.2 ‚ü®‚ü®f, hf.injective‚ü©‚ü©,
end

lemma continuum_le_mk_Ioo (h : a < b) : ùî† ‚â§ #(Ioo a b) :=
begin
  rcases exists_between h with ‚ü®a‚ÇÅ, ha, hlt‚ü©, rcases exists_between hlt with ‚ü®b‚ÇÅ, hab, hb‚ü©,
  calc ùî† ‚â§ #(Icc a‚ÇÅ b‚ÇÅ) : continuum_le_mk_Icc hab
  ... ‚â§ #(Ioo a b) : mk_le_mk_of_subset (Icc_subset_Ioo ha hb)
end

lemma continuum_le_mk_Ico (h : a < b) : ùî† ‚â§ #(Ico a b) :=
(continuum_le_mk_Ioo h).trans (mk_le_mk_of_subset Ioo_subset_Ico_self)

lemma continuum_le_mk_Ioc (h : a < b) : ùî† ‚â§ #(Ioc a b) :=
(continuum_le_mk_Ioo h).trans (mk_le_mk_of_subset Ioo_subset_Ioc_self)

lemma continuum_le_mk_Ioi' (h : (Ioi a).nonempty) : ùî† ‚â§ #(Ioi a) :=
exists.elim h $ Œª b hb, (continuum_le_mk_Ioo hb).trans $ mk_le_mk_of_subset Ioo_subset_Ioi_self

lemma continuum_le_mk_Ioi [no_top_order Œ±] (a : Œ±) : ùî† ‚â§ #(Ioi a) :=
continuum_le_mk_Ioi' (no_top a)

lemma continuum_le_mk_Ici' (h : (Ioi a).nonempty) : ùî† ‚â§ #(Ici a) :=
(continuum_le_mk_Ioi' h).trans $ mk_le_mk_of_subset Ioi_subset_Ici_self

lemma continuum_le_mk_Ici [no_top_order Œ±] (a : Œ±) : ùî† ‚â§ #(Ici a) :=
continuum_le_mk_Ici' (no_top a)

lemma continuum_le_mk_Iio' (h : (Iio a).nonempty) : ùî† ‚â§ #(Iio a) :=
@continuum_le_mk_Ioi' (order_dual Œ±) _ _ a h

lemma continuum_le_mk_Iio [no_bot_order Œ±] (a : Œ±) : ùî† ‚â§ #(Iio a) :=
@continuum_le_mk_Ioi (order_dual Œ±) _ _ _ a

lemma continuum_le_mk_Iic' (h : (Iio a).nonempty) : ùî† ‚â§ #(Iic a) :=
@continuum_le_mk_Ici' (order_dual Œ±) _ _ a h

lemma continuum_le_mk_Iic [no_bot_order Œ±] (a : Œ±) : ùî† ‚â§ #(Iic a) :=
@continuum_le_mk_Ici (order_dual Œ±) _ _ _ a

variable (Œ±)

lemma continuum_le_mk [nontrivial Œ±] : ùî† ‚â§ #Œ± :=
let ‚ü®a, b, h‚ü© := exists_lt_of_inf Œ± in (continuum_le_mk_Icc h).trans $ mk_set_le _

end

variables [has_card_continuum Œ±] {a b : Œ±}

@[simp] lemma mk_Icc_eq_continuum (h : a < b) : #(Icc a b) = ùî† :=
le_antisymm ((mk_set_le _).trans_eq $ mk_eq_continuum Œ±) (continuum_le_mk_Icc h)

@[simp] lemma mk_Ico_eq_continuum (h : a < b) : #(Ico a b) = ùî† :=
le_antisymm ((mk_set_le _).trans_eq $ mk_eq_continuum Œ±) (continuum_le_mk_Ico h)

@[simp] lemma mk_Ioc_eq_continuum (h : a < b) : #(Ioc a b) = ùî† :=
le_antisymm ((mk_set_le _).trans_eq $ mk_eq_continuum Œ±) (continuum_le_mk_Ioc h)

@[simp] lemma mk_Ioo_eq_continuum (h : a < b) : #(Ioo a b) = ùî† :=
le_antisymm ((mk_set_le _).trans_eq $ mk_eq_continuum Œ±) (continuum_le_mk_Ioo h)

lemma mk_Ici_eq_continuum' (h : (Ioi a).nonempty) : #(Ici a) = ùî† :=
le_antisymm ((mk_set_le _).trans_eq $ mk_eq_continuum Œ±) (continuum_le_mk_Ici' h)

@[simp] lemma mk_Ici_eq_continuum [no_top_order Œ±] (a : Œ±) : #(Ici a) = ùî† :=
mk_Ici_eq_continuum' (no_top a)

lemma mk_Ioi_eq_continuum' (h : (Ioi a).nonempty) : #(Ioi a) = ùî† :=
le_antisymm ((mk_set_le _).trans_eq $ mk_eq_continuum Œ±) (continuum_le_mk_Ioi' h)

@[simp] lemma mk_Ioi_eq_continuum [no_top_order Œ±] (a : Œ±) : #(Ioi a) = ùî† :=
mk_Ioi_eq_continuum' (no_top a)

lemma mk_Iic_eq_continuum' (h : (Iio a).nonempty) : #(Iic a) = ùî† :=
le_antisymm ((mk_set_le _).trans_eq $ mk_eq_continuum Œ±) (continuum_le_mk_Iic' h)

@[simp] lemma mk_Iic_eq_continuum [no_bot_order Œ±] (a : Œ±) : #(Iic a) = ùî† :=
mk_Iic_eq_continuum' (no_bot a)

lemma mk_Iio_eq_continuum' (h : (Iio a).nonempty) : #(Iio a) = ùî† :=
le_antisymm ((mk_set_le _).trans_eq $ mk_eq_continuum Œ±) (continuum_le_mk_Iio' h)

@[simp] lemma mk_Iio_eq_continuum [no_bot_order Œ±] (a : Œ±) : #(Iio a) = ùî† :=
mk_Iio_eq_continuum' (no_bot a)

end cardinal
