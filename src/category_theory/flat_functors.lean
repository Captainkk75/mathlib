import category_theory.structured_arrow
import category_theory.filtered
import category_theory.limits.presheaf
import category_theory.limits.kan_extension
import category_theory.limits.filtered_colimit_commutes_finite_limit

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open category_theory
open category_theory.limits
open opposite


-- set_option pp.universes true
-- set_option trace.class_instances true

-- #check @types.sort.category_theory.limits.has_limits

-- instance inst : has_limits (C·µí·µñ ‚•§ Type u‚ÇÅ) := infer_instance
namespace category_theory

section defs
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

class representably_flat (u : C ‚•§ D) : Prop :=
(cofiltered : ‚àÄ (X : D), is_cofiltered (costructured_arrow u X))

def functor.flat_cofiltered (u : C ‚•§ D) [representably_flat u] (X : D) :
 is_cofiltered (costructured_arrow u X) := representably_flat.cofiltered X

variables (u : C ‚•§ D) [representably_flat u] {X : D} (Y‚ÇÅ Y‚ÇÇ : costructured_arrow u X)

instance cofiltered_of_flat := u.flat_cofiltered X

end defs
section sec1
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÅ} [category.{v‚ÇÇ} D]
variables {E : Type u‚ÇÉ} [category.{u‚ÇÅ} E] [has_limits E]

noncomputable
instance whiskering_left_preserves_small_limits (J : Type u‚ÇÅ) [H : small_category J]  (F) :
  preserves_limits_of_shape J ((whiskering_left C D E).obj F) := ‚ü®Œª K, ‚ü®Œª c hc,
begin
  apply evaluation_jointly_reflects_limits,
  intro Y,
  change is_limit (((evaluation D E).obj (F.obj Y)).map_cone c),
  exact preserves_limit.preserves hc,
end ‚ü©‚ü©
end sec1
section lems
variables {C D E: Type u‚ÇÅ} [category.{u‚ÇÅ} C] [category.{u‚ÇÅ} D] [category.{u‚ÇÅ} E]

-- include Y‚ÇÅ Y‚ÇÇ

-- noncomputable theory

-- def functor.flat_min : costructured_arrow u X :=
-- (category_theory.is_cofiltered_or_empty.cocone_objs Y‚ÇÅ Y‚ÇÇ).some

-- def functor.flat_min_left : u.flat_min Y‚ÇÅ Y‚ÇÇ ‚ü∂ Y‚ÇÅ :=
-- (category_theory.is_cofiltered_or_empty.cocone_objs Y‚ÇÅ Y‚ÇÇ).some_spec.some

-- def functor.flat_min_right : u.flat_min Y‚ÇÅ Y‚ÇÇ ‚ü∂ Y‚ÇÇ :=
-- (category_theory.is_cofiltered_or_empty.cocone_objs Y‚ÇÅ Y‚ÇÇ).some_spec.some_spec.some

-- def functor.flat_min_comm :=
-- (category_theory.is_cofiltered_or_empty.cocone_maps Y‚ÇÅ Y‚ÇÇ)

lemma lem0 (F : C ‚•§ D) (X : D·µí·µñ) :
  (((whiskering_left _ _ _).obj (costructured_arrow.proj F.op X)) ‚ãô colim : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ _) =
    Lan F.op ‚ãô (evaluation D·µí·µñ (Type u‚ÇÅ)).obj X :=
begin
  apply functor.hext,
  { intro Y, simp },
  intros Y‚ÇÅ Y‚ÇÇ f,
  simp only [functor.comp_map, evaluation_obj_map, whiskering_left_obj_map, Lan_map_app, heq_iff_eq],
  apply (colimit.is_colimit (Lan.diagram F.op Y‚ÇÅ X)).uniq { X := colimit _, Œπ := _ }
    (colim.map (whisker_left (costructured_arrow.proj F.op X) f)),
  intro Z,
  simp only [colimit.Œπ_map, colimit.cocone_Œπ, whisker_left_app, category.comp_id, category.assoc],
  transitivity f.app Z.left ‚â´ (colimit.Œπ (costructured_arrow.map Z.hom ‚ãô Lan.diagram F.op Y‚ÇÇ X :
    costructured_arrow F.op _ ‚•§ _) (costructured_arrow.mk (ùüô (F.op.obj Z.left))) : _)
    ‚â´ (colimit.pre (Lan.diagram F.op Y‚ÇÇ X) (costructured_arrow.map Z.hom)),
  { rw colimit.Œπ_pre,
    congr,
    simp only [category.id_comp, costructured_arrow.map_mk],
    apply costructured_arrow.eq_mk },
  { congr }
end

end lems
noncomputable theory
variables {C : Type u‚ÇÅ} [category.{u‚ÇÅ} C] {D : Type u‚ÇÅ} [category.{u‚ÇÅ} D]

def lem1 (F : C ‚•§ D) [representably_flat F] (J : Type u‚ÇÅ) [H : small_category J] [fin_category J] :
  preserves_limits_of_shape J (Lan F.op : _ ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) :=
begin
  -- have : category.{u‚ÇÅ} (D·µí·µñ ‚•§ Type u‚ÇÅ) := infer_instance,
  apply preserves_limits_of_shape_if_evaluation (Lan F.op : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) J,
  intro K,
  rw ‚Üê lem0,
  haveI : preserves_limits_of_shape J (colim : (costructured_arrow F.op K ‚•§ Type u‚ÇÅ) ‚•§ Type u‚ÇÅ),
  swap, apply_instance,
  haveI

end

theorem thm (F : C ‚•§ D) : representably_flat F ‚Üî
  ‚àÄ (J : Type u‚ÇÅ) [H : small_category J] [@fin_category J H],
    ‚àÉ (H : @preserves_limits_of_shape _ _ _ _ J H (Lan F.op : _ ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ))), true := sorry

end category_theory
