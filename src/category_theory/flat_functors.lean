import category_theory.structured_arrow
import category_theory.filtered
import category_theory.limits.presheaf
import category_theory.limits.kan_extension
import category_theory.limits.filtered_colimit_commutes_finite_limit
import category_theory.limits.preserves.functor_category

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open category_theory
open category_theory.limits
open opposite

namespace category_theory

section defs
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

class representably_flat (u : C ‚•§ D) : Prop :=
(cofiltered : ‚àÄ (X : D), is_cofiltered (structured_arrow X u))

lemma functor.flat_cofiltered (u : C ‚•§ D) [representably_flat u] (X : D) :
 is_cofiltered (structured_arrow X u) := representably_flat.cofiltered X

variables (u : C ‚•§ D) [representably_flat u] {X : D} (Y‚ÇÅ Y‚ÇÇ : costructured_arrow u X)

instance cofiltered_of_flat := u.flat_cofiltered X
end defs

section small_category
variables {C D : Type u‚ÇÅ} [category.{u‚ÇÅ} C] [category.{u‚ÇÅ} D]

lemma Lan_evaluation_eq_colim (E : Type u‚ÇÇ) [category.{u‚ÇÅ} E] (F : C ‚•§ D) (X : D)
  [‚àÄ (X : D), has_colimits_of_shape (costructured_arrow F X) E] :
  Lan F ‚ãô (evaluation D E).obj X =
  ((whiskering_left _ _ E).obj (costructured_arrow.proj F X)) ‚ãô colim :=
begin
  apply functor.hext,
  { intro Y, simp },
  intros Y‚ÇÅ Y‚ÇÇ f,
  simp only [functor.comp_map, evaluation_obj_map, whiskering_left_obj_map, Lan_map_app, heq_iff_eq],
  symmetry,
  apply (colimit.is_colimit (Lan.diagram F Y‚ÇÅ X)).uniq { X := colimit _, Œπ := _ }
    (colim.map (whisker_left (costructured_arrow.proj F X) f)),
  intro Z,
  simp only [colimit.Œπ_map, colimit.cocone_Œπ, whisker_left_app, category.comp_id, category.assoc],
  transitivity f.app Z.left ‚â´ (colimit.Œπ (costructured_arrow.map Z.hom ‚ãô Lan.diagram F Y‚ÇÇ X :
    costructured_arrow F _ ‚•§ _) (costructured_arrow.mk (ùüô (F.obj Z.left))) : _)
    ‚â´ (colimit.pre (Lan.diagram F Y‚ÇÇ X) (costructured_arrow.map Z.hom)),
  { rw colimit.Œπ_pre,
    congr,
    simp only [category.id_comp, costructured_arrow.map_mk],
    apply costructured_arrow.eq_mk },
  { congr }
end

noncomputable
def Lan_presesrves_finite_limit_of_flat (F : C ‚•§ D) [representably_flat F]
  (J : Type u‚ÇÅ) [H : small_category J] [fin_category J] :
  preserves_limits_of_shape J (Lan F.op : _ ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) :=
begin
  apply preserves_limits_of_shape_if_evaluation (Lan F.op : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) J,
  intro K,
  rw Lan_evaluation_eq_colim,
  haveI : is_filtered (costructured_arrow F.op K) :=
    is_filtered.of_equivalence (structured_arrow_op_equivalence F (unop K)),
  apply_instance
end

end small_category

end category_theory
