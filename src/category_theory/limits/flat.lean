import category_theory.limits.filtered_colimit_commutes_finite_limit2
import category_theory.elements
import category_theory.limits.elements
import category_theory.functor_category
import category_theory.limits.preserves.limits
import category_theory.limits.yoneda
import category_theory.limits.creates
import category_theory.adjunction.limits

namespace category_theory
open limits opposite

universes w v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variables (J : Type v‚ÇÅ) [category.{v‚ÇÇ} J]
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]

-- set_option pp.universes true

@[simps {rhs_md := semireducible}]
def my_functor (F : C ‚•§ Type v‚ÇÅ) : F.elements·µí·µñ ‚•§ C ‚•§ Type v‚ÇÅ :=
functor.op (category_of_elements.œÄ F) ‚ãô coyoneda

@[simps]
def alt_cocone (F : C ‚•§ Type v‚ÇÅ) :
  cocone (my_functor F) :=
{ X := F,
  Œπ :=
  { app := Œª p,
    { app := Œª Y f, F.map f p.unop.2,
      naturality' := Œª Y‚ÇÅ Y‚ÇÇ g,
      begin
        ext f,
        apply functor_to_types.map_comp_apply F f g,
      end },
    naturality' := Œª p‚ÇÅ p‚ÇÇ Œ±,
    begin
      ext X x,
      change F.map (Œ±.unop.1 ‚â´ x) _ = F.map _ _,
      rw [functor_to_types.map_comp_apply F, Œ±.unop.2],
    end } }


namespace flat_finite_limits

variables (F : C ‚•§ Type v‚ÇÅ) {J} (K : J ‚•§ C) (c : cone K) (t : is_limit c)

@[simps {rhs_md := semireducible}]
def Œì : F.elements·µí·µñ ‚•§ J ‚•§ Type v‚ÇÅ :=
my_functor F ‚ãô (whiskering_left J C _).obj K

def cj (q : F.elements·µí·µñ) : cone ((Œì F K).obj q) :=
((my_functor F).obj q).map_cone c

def ck (j : J) : cocone ((Œì F K).flip.obj j) :=
((evaluation C (Type v‚ÇÅ)).obj (K.obj j)).map_cocone (alt_cocone F)

def tj (q : F.elements·µí·µñ) (t : is_limit c) : is_limit (cj F K c q) :=
begin
  apply is_limit_of_preserves (coyoneda.obj (op (unop q).fst)) t,
end

def alt_cocone_eval (v : C) :
  is_colimit (((evaluation C (Type v‚ÇÅ)).obj v).map_cocone (alt_cocone F)) :=
{ desc := Œª s q, s.Œπ.app (op ‚ü®v, q‚ü©) (ùüô _ ),
  fac' := Œª s q,
  begin
    op_induction q,
    cases q with w hw,
    ext (f : w ‚ü∂ v),
    let w' : F.elements·µí·µñ := op ‚ü®w, hw‚ü©,
    let v' : F.elements·µí·µñ := op ‚ü®v, F.map f hw‚ü©,
    let f' : v' ‚ü∂ w' := has_hom.hom.op ‚ü®f, rfl‚ü©,
    change s.Œπ.app v' _ = _,
    rw ‚Üês.w f',
    dsimp,
    simp,
  end,
  uniq' := Œª s m w,
  begin
    ext,
    rw ‚Üê w,
    dsimp,
    simp
  end }

def tk (j : J) : is_colimit (ck F K j) :=
begin
  change is_colimit (functor.map_cocone _ _),
  apply alt_cocone_eval,
end

def c‚ÇÅ : cocone (cones_to_functor (Œª q, tj F K c q t)) :=
begin
  let : my_functor F ‚ãô (evaluation C (Type v‚ÇÅ)).obj c.X ‚âÖ cones_to_functor (Œª (q : (F.elements)·µí·µñ), tj F K c q t),
  { refine nat_iso.of_components (Œª q, iso.refl _) _,
    intros q‚ÇÅ q‚ÇÇ f,
    -- ext1 (x : (unop q‚ÇÅ).1 ‚ü∂ _),
    -- dsimp at x,
    dsimp,
    rw category.comp_id,
    rw category.id_comp,
    apply is_limit.hom_ext (tj F K c q‚ÇÇ t),
    intro j,
    rw is_limit.map_œÄ,
    ext1 (x : (unop q‚ÇÅ).1 ‚ü∂ _),
    dsimp [my_functor, cj],
    rw category.assoc },
  apply (cocones.precompose this.inv).obj _,
  apply ((evaluation C (Type v‚ÇÅ)).obj c.X).map_cocone (alt_cocone F)
end

noncomputable def c‚ÇÇ : cone (cocones_to_functor (tk F K)) :=
limit.cone _

def t‚ÇÅ : is_colimit (c‚ÇÅ F K c t) :=
begin
  change is_colimit ((cocones.precompose _).obj _),
  apply (is_colimit.precompose_inv_equiv _ _).symm _,
  apply alt_cocone_eval
end

noncomputable def t‚ÇÇ : is_limit (c‚ÇÇ F K) :=
limit.is_limit _
-- is_limit_of_preserves (coyoneda.obj (op (unop q).fst)) t

noncomputable def my_thm
  (J : Type v‚ÇÅ) [category.{v‚ÇÇ} J] [fin_category J]
  {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]
  (F : C ‚•§ Type v‚ÇÅ) (hF : is_filtered F.elements·µí·µñ) :
  preserves_limits_of_shape J F :=
begin
  split,
  intro K,
  split,
  intros c t,
  let Œì' := Œì F K,
  let tj : Œ† (q : F.elements·µí·µñ), is_limit (cj F K c q) := Œª q, tj F K c q t,
  let q : cocones_to_functor (tk F K) ‚âÖ K ‚ãô F,
  { refine nat_iso.of_components (Œª X, iso.refl _) _,
    intros X Y f,
    dsimp,
    rw [category.id_comp, category.comp_id],
    apply (tk F K X).hom_ext,
    intro j,
    rw is_colimit.Œπ_map,
    ext q,
    dsimp [alt_cocone, my_functor, ck],
    simp, },
  let i‚ÇÇ := has_limit.iso_of_nat_iso q,

  let i‚ÇÉ : F.obj c.X ‚âÖ limit (K ‚ãô F) :=
    filtered_colimit_finite_limit_iso Œì' tj (tk F K) (t‚ÇÅ F K c t) (t‚ÇÇ F K) ‚â™‚â´ i‚ÇÇ,
  apply is_limit.of_point_iso (limit.is_limit (K ‚ãô F)),
  dsimp,
  have : limit.lift (K ‚ãô F) (F.map_cone c) = i‚ÇÉ.hom,
  { apply limit.hom_ext,
    intro j,
    rw limit.lift_œÄ,
    dsimp,
    change _ = (_ ‚â´ _) ‚â´ _,
    rw category.assoc,
    simp only [iso.refl_hom, category.comp_id, nat_iso.of_components.hom_app,
      has_limit.iso_of_nat_iso_hom_œÄ],
    apply (t‚ÇÅ F K c t).hom_ext,
    intro k,
    change _ = _ ‚â´ _ ‚â´ (c‚ÇÇ F K).œÄ.app j,
    rw Œπ_colimit_to_limit_œÄ,
    ext q,
    dsimp [cj, ck,
           category_theory.flat_finite_limits.cj, c‚ÇÅ,
           category_theory.flat_finite_limits.c‚ÇÅ],
    simp, },
  rw this,
  apply is_iso.of_iso,
end

end flat_finite_limits

-- #exit

def is_set_flat (F : C ‚•§ Type w) := is_filtered F.elements·µí·µñ

lemma representable_is_set_flat (X : C·µí·µñ) : is_set_flat (coyoneda.obj X) :=
is_filtered.of_terminal (terminal_op_of_initial (is_initial X.unop))

variable (C)

@[derive category]
def ind := {F : C·µí·µñ ‚•§ Type w // is_set_flat F}

@[derive [full, faithful, reflects_isomorphisms]]
def ind_to_presheaf : ind C ‚•§ (C·µí·µñ ‚•§ Type v‚ÇÅ) := full_subcategory_inclusion _

@[simps]
def right (c : C) : Type v‚ÇÅ ‚•§ (C ‚•§ Type v‚ÇÅ) :=
{ obj := Œª X,
  { obj := Œª d, (d ‚ü∂ c) ‚Üí X,
    map := Œª d d' f g h, g (f ‚â´ h) },
  map := Œª X Y f,
  { app := Œª Z g h, f (g h) } }

def adj (c : C) : (evaluation _ (Type v‚ÇÅ)).obj c ‚ä£ right C c :=
adjunction.mk_of_hom_equiv
{ hom_equiv := Œª F Y,
  { to_fun := Œª f,
    { app := Œª X x g, f (F.map g x),
      naturality' := Œª X Y g,
      begin
        ext t,
        dsimp,
        rw functor_to_types.map_comp_apply,
      end },
    inv_fun := Œª f x, f.app c x (ùüô _),
    left_inv := Œª f,
    begin
      ext,
      simp,
    end,
    right_inv := Œª f,
    begin
      ext t g,
      dsimp,
      rw functor_to_types.naturality,
      dsimp,
      simp,
    end } }

-- #exit

-- def adj (c : C) : is_left_adjoint ((evaluation _ (Type u‚ÇÅ)).obj c)


def six_three_six {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] [is_filtered D]
  (H : D ‚•§ C ‚•§ Type v‚ÇÅ)
  {c : cocone H}
  (t : is_colimit c)
  (t' : ‚àÄ x, is_colimit (((evaluation C (Type v‚ÇÅ)).obj x).map_cocone c))
  (hD : ‚àÄ d, is_set_flat (H.obj d)) : is_set_flat c.X :=
{ nonempty :=
  begin
    haveI : nonempty D := is_filtered.nonempty,
    inhabit D,
    obtain ‚ü®t‚ü© := (hD (default D)).nonempty,
    refine ‚ü®op ‚ü®(unop t).1, (c.Œπ.app (default D)).app _ (unop t).2‚ü©‚ü©,
  end,
  cocone_objs :=
  begin
    intros Aa Bb,
    op_induction Aa,
    op_induction Bb,
    cases Aa with A a,
    cases Bb with B b,
    have : is_colimit (((evaluation C (Type v‚ÇÅ)).obj A).map_cocone c),
    { apply is_colimit_of_preserves ((evaluation C (Type v‚ÇÅ)).obj A) t,

    },
    rcases types.jointly_surjective _ (t' A) a with ‚ü®d, a' : (H.obj _).obj _, ha' : (c.Œπ.app d).app A a' = a‚ü©,
    rcases types.jointly_surjective _ (t' B) b with ‚ü®d', (b' : (H.obj _).obj _), hb' : (c.Œπ.app d').app B b' = b‚ü©,
    rcases is_filtered_or_empty.cocone_objs d d' with ‚ü®d'', f, g, ‚ü®‚ü©‚ü©,
    let a'' := (H.map f).app A a',
    have ha'' : (c.Œπ.app d'').app A a'' = a,
    { rw ‚Üêc.w f at ha',
      apply ha' },
    let b'' := (H.map g).app B b',
    have hb'' : (c.Œπ.app d'').app B b'' = b,
    { rw ‚Üêc.w g at hb',
      apply hb' },
    clear_value a'' b'',
    clear ha' hb' a' b' f g d d',
    subst ha'',
    subst hb'',
    rename d'' d,
    rename a'' a',
    rename b'' b',
    have cof := (hD d).cocone_objs,
    rcases cof (op ‚ü®_, a'‚ü©) (op ‚ü®_, b'‚ü©) with ‚ü®Cc, u, v, ‚ü®‚ü©‚ü©,

    -- Manually do the op_induction/cases on Cc
    let C' := Cc.unop.1,
    let c' : (H.obj _).obj C' := Cc.unop.2,
    have : Cc = op ‚ü®C', c'‚ü©,
    { simp },
    clear_value C' c',
    subst this,

    have ha' : (H.obj _).map u.unop.1 c' = a' := u.unop.2,
    have hb' : (H.obj _).map v.unop.1 c' = b' := v.unop.2,
    have : c.X.obj C' := (c.Œπ.app d).app C' c',
    refine ‚ü®op ‚ü®_, (c.Œπ.app d).app C' c'‚ü©,
            has_hom.hom.op ‚ü®u.unop.1, _‚ü©,
            has_hom.hom.op ‚ü®v.unop.1, _‚ü©, ‚ü®‚ü©‚ü©,
    { change ((c.Œπ.app d).app C' ‚â´ c.X.map u.unop.1) c' = (c.Œπ.app d).app A a',
      have : _ = (c.Œπ.app d).app C' ‚â´ c.X.map u.unop.val := (c.Œπ.app d).naturality u.unop.1,
      rw ‚Üê this,
      change (c.Œπ.app d).app A ((H.obj d).map u.unop.1 c') = (c.Œπ.app d).app A a',
      apply congr_arg _ ha' },
    { change ((c.Œπ.app d).app C' ‚â´ c.X.map v.unop.1) c' = (c.Œπ.app d).app B b',
      have : _ = (c.Œπ.app d).app C' ‚â´ c.X.map v.unop.val := (c.Œπ.app d).naturality v.unop.1,
      rw ‚Üê this,
      change (c.Œπ.app d).app B ((H.obj d).map v.unop.1 c') = (c.Œπ.app d).app B b',
      apply congr_arg _ hb' },
  end,
  cocone_maps :=
  begin
    intros Bb Aa u' v',
    let A := Aa.unop.1,
    let a : c.X.obj A := Aa.unop.2,
    let B := Bb.unop.1,
    let b : c.X.obj B := Bb.unop.2,
    have : Aa = op ‚ü®A, a‚ü©, simp,
    have : Bb = op ‚ü®B, b‚ü©, simp,
    clear_value A a B b,
    subst Aa,
    subst Bb,
    let u : A ‚ü∂ B := u'.unop.1,
    let v : A ‚ü∂ B := v'.unop.1,
    have hu : c.X.map u a = b := u'.unop.2,
    have hv : c.X.map v a = b := v'.unop.2,

    -- let t' : is_colimit (((evaluation C _).obj A).map_cocone c) := is_colimit_of_preserves _ t,
    rcases types.jointly_surjective _ (t' A) a with ‚ü®d, a' : (H.obj _).obj _, ha' : (c.Œπ.app d).app A a' = a‚ü©,
    -- let t'' : is_colimit (((evaluation C _).obj B).map_cocone c) := is_colimit_of_preserves _ t,
    rcases types.jointly_surjective _ (t' B) b with ‚ü®d', (b' : (H.obj _).obj _), hb' : (c.Œπ.app d').app B b' = b‚ü©,
    rcases is_filtered_or_empty.cocone_objs d d' with ‚ü®d'', f, g, ‚ü®‚ü©‚ü©,
    let a'' := (H.map f).app A a',
    have ha'' : (c.Œπ.app d'').app A a'' = a,
    { rw ‚Üêc.w f at ha',
      apply ha' },
    let b'' := (H.map g).app B b',
    have hb'' : (c.Œπ.app d'').app B b'' = b,
    { rw ‚Üêc.w g at hb',
      apply hb' },
    clear_value a'' b'',
    clear' a' b' ha' hb' f g d d',
    rename [d'' d, a'' a', b'' b', ha'' ha', hb'' hb'],
    have q : ((H.obj d).map u ‚â´ (c.Œπ.app d).app B) a' = ((H.obj d).map v ‚â´ (c.Œπ.app d).app B) a',
    { rw [(c.Œπ.app d).naturality, (c.Œπ.app d).naturality, types_comp_apply, types_comp_apply, ha'],
      change c.X.map u a = c.X.map v a,
      rw [hu, hv] },
    rw [types_comp_apply, types_comp_apply] at q,
    -- have : (c.Œπ.app d).app _ = _,
    have : (c.Œπ.app d).app B ((H.obj d).map u a') = (c.Œπ.app d).app B ((H.obj d).map v a') ‚Üî _ :=
      types.filtered_colimit.is_colimit_eq_iff' _ (t' B),
    dsimp at this,
    rw this at q,
    rcases q with ‚ü®d', dh, q‚ü©,
    let b'' := (H.map dh).app B ((H.obj d).map u a'),
    have hua : (H.obj d').map u ((H.map dh).app _ a') = b'',
    { rw ‚Üêfunctor_to_types.naturality },
    have hva : (H.obj d').map v ((H.map dh).app _ a') = b'',
    { rw ‚Üêfunctor_to_types.naturality, rw ‚Üêq },
    let A' : (H.obj d').elements·µí·µñ := op ‚ü®A, (H.map dh).app _ a'‚ü©,
    let B' : (H.obj d').elements·µí·µñ := op ‚ü®B, b''‚ü©,
    let u' : B' ‚ü∂ A' := has_hom.hom.op ‚ü®u, hua‚ü©,
    let v' : B' ‚ü∂ A' := has_hom.hom.op ‚ü®v, hva‚ü©,
    haveI : is_filtered _ := hD d',
    let Cc := is_filtered.coeq u' v',
    let w : A' ‚ü∂ Cc := is_filtered.coeq_hom u' v',
    refine ‚ü®op ‚ü®Cc.unop.1, (c.Œπ.app _).app _ Cc.unop.2‚ü©, _, _‚ü©,
    refine has_hom.hom.op ‚ü®w.unop.1, _‚ü©,
    change ((c.Œπ.app d').app _ ‚â´ c.X.map w.unop.1) _ = a,
    erw ‚Üê(c.Œπ.app d').naturality,
    rw types_comp_apply,
    rw w.unop.2,
    change ((H.map dh ‚â´ c.Œπ.app d').app A) a' = a,
    rw c.w, apply ha',
    apply has_hom.hom.unop_inj,
    ext1,
    change w.unop.1 ‚â´ u = w.unop.1 ‚â´ v,
    have := is_filtered.coeq_condition u' v',
    have := congr_arg has_hom.hom.unop this,
    rw subtype.ext_iff_val at this,
    exact this,
  end }.

instance {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {J : Type u‚ÇÇ} [category.{v‚ÇÇ} J]  :
  reflects_colimits_of_shape J (ind_to_presheaf C) :=
fully_faithful_reflects_colimits_of_shape (ind_to_presheaf C)

-- It *should* be possible to generalise the universe levels here
instance {C : Type u‚ÇÅ} [small_category C] {J : Type u‚ÇÅ} [small_category J] [is_filtered J] :
  creates_colimits_of_shape J (ind_to_presheaf C) :=
{ creates_colimit := Œª K,
  { lifts := Œª c t,
    { lifted_cocone :=
      { X := ‚ü®c.X, six_three_six (K ‚ãô ind_to_presheaf _) _ (Œª j, (K.obj j).2)‚ü©,
        Œπ :=
        { app := Œª j, c.Œπ.app j,
          naturality' := Œª j‚ÇÅ j‚ÇÇ f, c.Œπ.naturality f } },
      valid_lift :=
      begin
        refine cocones.ext (iso.refl _) _,
        intro j,
        apply category.comp_id
      end } } }

/-- If `C` is small, then the category of ind-objects has filtered colimits. -/
-- TODO: Figure out how much we can generalise the universes here.
instance {C : Type u‚ÇÅ} [small_category C] {J : Type u‚ÇÅ} [small_category J] [is_filtered J] :
  has_colimits_of_shape J (ind C) :=
has_colimits_of_shape_of_has_colimits_of_shape_creates_colimits_of_shape (ind_to_presheaf C)

-- set_option pp.universes true


-- def six_three_six {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÅ} [small_category D] [is_filtered D]
--   (H : D ‚•§ C ‚•§ Type u‚ÇÅ)
--   {c : cocone H} (t : is_colimit c)
--   (hD : ‚àÄ d, is_set_flat (H.obj d)) : is_set_flat c.X :=

def is_set_flat_of_filtered_colimit_of_representables
  {C : Type u‚ÇÅ} [category.{u‚ÇÅ} C]
  {D : Type u‚ÇÅ} [category.{v‚ÇÇ} D]
  (œà : D ‚•§ C·µí·µñ)
  [is_filtered D]
  (c : cocone (œà ‚ãô coyoneda))
  (t : is_colimit c) :
  is_set_flat c.X :=
six_three_six (œà ‚ãô coyoneda) t (Œª d, representable_is_set_flat _)

-- { nonempty :=
--   begin
--     haveI : nonempty D := is_filtered.nonempty,
--     inhabit D,
--     refine ‚ü®op ‚ü®op (œà.obj (default D)), (c.Œπ.app (default D)).app _ (ùüô _)‚ü©‚ü©,
--   end,
--   cocone_objs :=
--   begin
--     intros Aa Aa',
--     op_induction Aa,
--     op_induction Aa',
--     cases Aa with A a,
--     cases Aa' with A' a',

--   end,
--   cocone_maps := _


-- }

end category_theory
