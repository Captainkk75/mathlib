import analysis.specific_limits

variables {E F : Type*} [semi_normed_group E] [semi_normed_group F]

open set filter
open_locale big_operators topological_space uniformity

lemma controlled_sum_of_mem_closure {s : add_subgroup E} {g : E}
  (hg : g ‚àà closure (s : set E)) {b : ‚Ñï ‚Üí ‚Ñù} (b_pos : ‚àÄ n, 0 < b n) :
  ‚àÉ v : ‚Ñï ‚Üí E, summable (Œª n, ‚à•v n‚à•) ‚àß has_sum v g ‚àß
    (‚àÄ n, v n ‚àà s) ‚àß
    ‚à•v 0 - g‚à• < b 0 ‚àß
    ‚àÄ n > 0, ‚à•v n‚à• < b n :=
begin
  set b' : ‚Ñï ‚Üí ‚Ñù := Œª n, min (b n) ((1 / 2) ^ n),
  have b'_pos : ‚àÄ n, 0 < b' n, from Œª n, lt_min (b_pos n) (pow_pos one_half_pos n),
  have mem_ùì§ : ‚àÄ n, {p : E √ó E | ‚à•p.1 - p.2‚à• < b' n} ‚àà ùì§ E,
   from Œª n, by simpa only [‚Üê dist_eq_norm] using metric.dist_mem_uniformity (b'_pos n),
  obtain ‚ü®u : ‚Ñï ‚Üí E, u_in : ‚àÄ n, u n ‚àà s, lim_u : tendsto u at_top (ùìù g)‚ü© :=
    mem_closure_iff_seq_limit.mp hg,
  rcases lim_u.subseq_mem_entourage mem_ùì§ with ‚ü®œÜ, œÜ_mono, h0, h_norm‚ü©,
  set v : ‚Ñï ‚Üí E := Œª n, nat.cases_on n (u (œÜ 0)) (Œª n, u (œÜ (n + 1)) - u (œÜ n)),
  have hv : ‚àÄ n, 1 ‚â§ n ‚Üí ‚à•v n‚à• < b' n,
  { intros n hn, rcases le_iff_exists_add.1 hn with ‚ü®n, rfl‚ü©,
    rw add_comm, exact h_norm n },
  have hv_le : ‚àÄ·∂† n in at_top, ‚à•v n‚à• ‚â§ 1 * (1 / 2) ^ n,
  { filter_upwards [mem_at_top 1], intros n hn,
    simpa only [one_mul] using ((hv n hn).le.trans (min_le_right _ _)) },
  have hv_cauchy : cauchy_seq (Œª s, ‚àë k in s, v k),
    from cauchy_seq_finset_of_geometric_bound one_half_lt_one hv_le,
  have hv_summable : summable (Œª n, ‚à•v n‚à•),
    from summable_of_geometric_bound one_half_lt_one (by simpa only [norm_norm] using hv_le),
  have hvs : ‚àÄ n, v n ‚àà s,
  { rintro (_|n), exacts [u_in (œÜ 0), s.sub_mem (u_in _) (u_in _)] },
  refine ‚ü®v, hv_summable, _, hvs, lt_of_lt_of_le h0 (min_le_left _ _),
    Œª k hk, (hv k hk).trans_le (min_le_left _ _)‚ü©,
  refine tendsto_nhds_of_cauchy_seq_of_subseq hv_cauchy
    (tendsto_finset_range.comp (tendsto_add_at_top_nat 1)) _,
  exact (lim_u.comp œÜ_mono.tendsto_at_top).congr (finset.eq_sum_range_sub' _)
end

lemma controlled_sum_of_mem_closure_range {j : E ‚Üí+ F} {h : F}
  (Hh : h ‚àà (closure $ (j.range : set F))) {b : ‚Ñï ‚Üí ‚Ñù} (b_pos : ‚àÄ n, 0 < b n) :
  ‚àÉ g : ‚Ñï ‚Üí E, summable (Œª n, ‚à•j (g n)‚à•) ‚àß has_sum (j ‚àò g) h ‚àß
    ‚à•j (g 0) - h‚à• < b 0 ‚àß
    ‚àÄ n > 0, ‚à•j (g n)‚à• < b n :=
begin
  rcases controlled_sum_of_mem_closure Hh b_pos with ‚ü®v, sum_v, sum_vh, v_in, hv‚ÇÄ, hv_pos‚ü©,
  choose g hg using v_in,
  obtain rfl : j ‚àò g = v := funext hg,
  exact ‚ü®g, sum_v, sum_vh, hv‚ÇÄ, hv_pos‚ü©
end
