/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import category_theory.sites.sheaf
import category_theory.limits.kan_extension
import category_theory.flat_functors

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
noncomputable theory

open category_theory
open opposite
open category_theory.presieve.family_of_elements
open category_theory.presieve
open category_theory.limits

namespace category_theory
section cover_lifting
variables {C : Type*} [category C] {D : Type*} [category D] {E : Type*} [category E]
variables {J : grothendieck_topology C} {K : grothendieck_topology D}
variables {L : grothendieck_topology E}

/--
A functor `u : (C, J) ‚•§ (D, K)` between sites is called to have the cover-preserving property
if for all covering sieves `R` in `D`, `R.pushforward u` is a covering sieve in `C`.
-/
@[nolint has_inhabited_instance]
structure cover_preserving (J : grothendieck_topology C) (K : grothendieck_topology D) (u : C ‚•§ D) :=
(cover_preserve : ‚àÄ {U : C} {S : sieve U} (hS : S ‚àà J U), S.functor_pushforward u ‚àà K (u.obj U))

open category_theory.limits.walking_cospan (left right)

lemma compatible.functor_pushforward {C : Type*} {D : Type*} [category.{v‚ÇÅ} C] [category.{v‚ÇÅ} D]
  {u : C ‚•§ D} [representably_flat u] {P : D·µí·µñ ‚•§ Type _} {Z : C} {T : presieve Z}
  {x : family_of_elements (u.op ‚ãô P) T} (h : x.compatible) :
  (x.functor_pushforward u).compatible :=
begin
  /-
  It suffices to show that for each `g‚ÇÅ : W ‚ü∂ Z‚ÇÅ`, `g‚ÇÇ : W ‚ü∂ Z‚ÇÇ`, the restriction of
  `x.functor_pushforward u` along `g‚ÇÅ` and `g‚ÇÇ` are the same.
  Note that by the definition of `functor_pushforward`, `Z‚ÇÅ` and `Z‚ÇÇ` are in the images of `u`,
  i.e. `g‚ÇÅ`, `g‚ÇÇ` are costructured arrows over `W`.
   -/
  rintros Z‚ÇÅ Z‚ÇÇ W g‚ÇÅ g‚ÇÇ f‚ÇÅ' f‚ÇÇ' H‚ÇÅ H‚ÇÇ eq,
  let X‚ÇÅ := H‚ÇÅ.some, let f‚ÇÅ := H‚ÇÅ.some_spec.some, let h‚ÇÅ := H‚ÇÅ.some_spec.some_spec.some,
  obtain ‚ü®hf‚ÇÅ, hf‚ÇÅ'‚ü© : T f‚ÇÅ ‚àß f‚ÇÅ' = h‚ÇÅ ‚â´ u.map f‚ÇÅ := H‚ÇÅ.some_spec.some_spec.some_spec,
  let X‚ÇÇ := H‚ÇÇ.some, let f‚ÇÇ := H‚ÇÇ.some_spec.some, let h‚ÇÇ := H‚ÇÇ.some_spec.some_spec.some,
  obtain ‚ü®hf‚ÇÇ, hf‚ÇÇ'‚ü© : T f‚ÇÇ ‚àß f‚ÇÇ' = h‚ÇÇ ‚â´ u.map f‚ÇÇ := H‚ÇÇ.some_spec.some_spec.some_spec,
  rw [hf‚ÇÅ', hf‚ÇÇ'] at eq,
  suffices : P.map (g‚ÇÅ ‚â´ h‚ÇÅ).op (x f‚ÇÅ hf‚ÇÅ) = P.map (g‚ÇÇ ‚â´ h‚ÇÇ).op (x f‚ÇÇ hf‚ÇÇ), simpa using this,

  /- First, `g‚ÇÅ` and `g‚ÇÇ` forms a cone over `cospan f‚ÇÅ f‚ÇÇ`. -/
  let c : cone (cospan f‚ÇÅ f‚ÇÇ ‚ãô u) :=
    (cones.postcompose (diagram_iso_cospan (cospan f‚ÇÅ f‚ÇÇ ‚ãô u)).inv).obj
      (pullback_cone.mk (g‚ÇÅ ‚â´ h‚ÇÅ) (g‚ÇÇ ‚â´ h‚ÇÇ) (by simpa using eq)),

  /-
  This cone viewed as a cone over `cospan _ _ ‚ãô u` (since `f‚ÇÅ` `f‚ÇÇ` has preimages) can then be
  viewed as a cospan of structured arrows, and we may obtain an arbitrary cone over it since
  `structured_arrow W u` is cofiltered. Then, to prove that `x` is compatible when restricted onto
  `W`, it suffices to prove that it is compatible when restricted onto `u(c'.X.right)`.
  -/
  let c' := is_cofiltered.cone (structured_arrow_cone.to_diagram c ‚ãô structured_arrow.pre _ _ _),
  have eq‚ÇÅ : g‚ÇÅ ‚â´ h‚ÇÅ = (c'.X.hom ‚â´ u.map (c'.œÄ.app left).right) ‚â´ eq_to_hom (by simp),
  { erw ‚Üê (c'.œÄ.app left).w, dsimp, simp },
  have eq‚ÇÇ : g‚ÇÇ ‚â´ h‚ÇÇ = (c'.X.hom ‚â´ u.map (c'.œÄ.app right).right) ‚â´ eq_to_hom (by simp),
  { erw ‚Üê (c'.œÄ.app right).w, dsimp, simp },
  conv_lhs { rw eq‚ÇÅ },
  conv_rhs { rw eq‚ÇÇ },
  simp only [op_comp, functor.map_comp, types_comp_apply, eq_to_hom_op, eq_to_hom_map],
  congr' 1,

  /-
  Now, since everything now falls in the image of `u`,
  the result follows from the compatibleness of `x`.
  -/
  have : (c'.œÄ.app walking_cospan.left).right ‚â´ h‚ÇÅ.premap =
    (c'.œÄ.app walking_cospan.right).right ‚â´ h‚ÇÇ.premap,
  { injection c'.œÄ.naturality walking_cospan.hom.inl with _ e‚ÇÅ,
    injection c'.œÄ.naturality walking_cospan.hom.inr with _ e‚ÇÇ,
    exact e‚ÇÅ.symm.trans e‚ÇÇ },
  convert h (c'.œÄ.app walking_cospan.left).right (c'.œÄ.app walking_cospan.right).right
    h‚ÇÅ.premap_cover h‚ÇÇ.premap_cover this,
  { change (eq_to_hom _ ‚â´ eq_to_hom _ : (u.op ‚ãô P).obj _ ‚ü∂ _) (x h‚ÇÅ.premap _) = x h‚ÇÅ.premap _,
    simp },
  { change (eq_to_hom _ ‚â´ eq_to_hom _ : (u.op ‚ãô P).obj _ ‚ü∂ _) (x h‚ÇÇ.premap _) = x h‚ÇÇ.premap _,
    simp },
end


/-- The identity functor on a site is cover-preserving. -/
def id_cover_preserving : cover_preserving J J (ùü≠ _) := sorry

/-- The composition of two cover-preserving functors are cover-lifting -/
def comp_cover_preserving {u} (hu : cover_preserving J K u) {v} (hv : cover_preserving K L v) :
  cover_preserving J L (u ‚ãô v) := sorry

end cover_lifting

variables {C D : Type u‚ÇÅ} [category.{v‚ÇÅ} C] [category.{v‚ÇÅ} D]
variables {A : Type u‚ÇÇ} [category.{v‚ÇÅ} A] [has_limits A]
variables {J : grothendieck_topology C} {K : grothendieck_topology D}
/--
If `u` is cover_lifting, then `Ran u.op` pushes sheaves to sheaves.

This result is basically https://stacks.math.columbia.edu/tag/00XK,
but without the condition that `C` or `D` has pullbacks.
-/
theorem pullback_is_sheaf_of_cover_preserving {u : C ‚•§ D} [representably_flat u]
  (hu : cover_preserving J K u) (‚Ñ± : Sheaf K A) :
  presheaf.is_sheaf J (((whiskering_left _ _ _).obj u.op).obj ‚Ñ±.val) :=
begin
  intros X U S hS x hx,
  split, swap,
  { change family_of_elements (u.op ‚ãô ‚Ñ±.val ‚ãô coyoneda.obj (op X)) ‚áëS at x,
    apply (‚Ñ±.2 X _ (hu.cover_preserve hS)).amalgamate (x.functor_pushforward u),
    exact compatible.functor_pushforward hx },
  split,
  { intros V f hf, dsimp, sorry },
  { sorry }
end

end category_theory
