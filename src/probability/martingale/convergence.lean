/-
Copyright (c) 2022 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import probability.martingale.upcrossing

/-!

# Maringale convergence theorems

-/

open topological_space filter
open_locale nnreal ennreal measure_theory probability_theory big_operators topological_space

namespace measure_theory

variables {Œ± Œπ : Type*} {m0 : measurable_space Œ±} {Œº : measure Œ±} {‚Ñ± : filtration ‚Ñï m0}
variables {a b : ‚Ñù} {f : ‚Ñï ‚Üí Œ± ‚Üí ‚Ñù} {N : ‚Ñï} {n m : ‚Ñï} {x : Œ±}

/-!

We will now begin to prove the martingale convergence theorem.

Firstly, we want to show a real sequence `x` converges if
(a) `limsup |x| < ‚àû`,
(b) For all `a < b : ‚Ñö` we have `sup N, upcrossing_before a b x N < ‚àû`.

With this, for all `x` satisfying `limsup |Œª n, f n x| < ‚àû` and
for all `a < b : ‚Ñö`, `sup N, upcrossing_before a b f N x ‚â† ‚àû`, we have `Œª n, f n x` converges.

Assuming `f` is L¬π-bounded, using Fatou's lemma,
we have `ùîº[limsup |f|] ‚â§ limsup ùîº[|f|] < ‚àû` implying `limsup |f| < ‚àû a.e`. Furthermore, by
the upcrossing_before lemma, `sup N, upcrossing_before a b f N ‚â† ‚àû a.e.` implying `f` converges
pointwise almost everywhere.

-/

/-- If a stochastic process has bounded upcrossing from below `a` to above `b`,
then it does not frequently visit both below `a` and above `b`. -/
lemma not_frequently_of_upcrossing_lt_top (hab : a < b) (hx : upcrossing a b f x ‚â† ‚àû) :
  ¬¨((‚àÉ·∂† n in at_top, f n x < a) ‚àß (‚àÉ·∂† n in at_top, b < f n x)) :=
begin
  rw [‚Üê lt_top_iff_ne_top, upcrossing_lt_top_iff] at hx,
  replace hx : ‚àÉ k, ‚àÄ N, upcrossing_before a b f N x < k,
  { obtain ‚ü®k, hk‚ü© := hx,
    exact ‚ü®k + 1, Œª N, lt_of_le_of_lt (hk N) k.lt_succ_self‚ü© },
  rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  rw frequently_at_top at h‚ÇÅ h‚ÇÇ,
  refine not_not.2 hx _,
  push_neg,
  intro k,
  induction k with k ih,
  { simp only [zero_le', exists_const] },
  { obtain ‚ü®N, hN‚ü© := ih,
    obtain ‚ü®N‚ÇÅ, hN‚ÇÅ, hN‚ÇÅ'‚ü© := h‚ÇÅ N,
    obtain ‚ü®N‚ÇÇ, hN‚ÇÇ, hN‚ÇÇ'‚ü© := h‚ÇÇ N‚ÇÅ,
    exact ‚ü®(N‚ÇÇ + 1), nat.succ_le_of_lt $ lt_of_le_of_lt hN
      (upcrossing_lt_upcrossing_of_exists_upcrossing hab hN‚ÇÅ hN‚ÇÅ' hN‚ÇÇ hN‚ÇÇ')‚ü© }
end

/-- A stochastic process that frequently visits below `a` and above `b` have infinite
upcrossings. -/
lemma upcrossing_eq_top_of_frequently_lt (hab : a < b)
  (h‚ÇÅ : ‚àÉ·∂† n in at_top, f n x < a) (h‚ÇÇ : ‚àÉ·∂† n in at_top, b < f n x) :
  upcrossing a b f x = ‚àû :=
classical.by_contradiction (Œª h, not_frequently_of_upcrossing_lt_top hab h ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©)

lemma exists_frequently_lt_of_liminf_ne_top
  {x : ‚Ñï ‚Üí ‚Ñù} (hx : at_top.liminf (Œª n, (‚à•x n‚à•‚Çä : ‚Ñù‚â•0‚àû)) ‚â† ‚àû) :
  ‚àÉ R, ‚àÉ·∂† n in at_top, x n < R :=
begin
  by_contra h,
  simp_rw [not_exists, not_frequently, not_lt, eventually_at_top] at h,
  refine hx (ennreal.eq_top_of_forall_nnreal_le $ Œª r, _),
  obtain ‚ü®N, hN‚ü© := h r,
  exact le_Liminf_of_le (by is_bounded_default) (eventually_at_top.2
    ‚ü®N, Œª n hn, ennreal.coe_le_coe.2 $ nnreal.coe_le_coe.1 $ (hN n hn).trans (le_abs_self _)‚ü©),
end

lemma exists_frequently_lt_of_liminf_ne_top'
  {x : ‚Ñï ‚Üí ‚Ñù} (hx : at_top.liminf (Œª n, (‚à•x n‚à•‚Çä : ‚Ñù‚â•0‚àû)) ‚â† ‚àû) :
  ‚àÉ R, ‚àÉ·∂† n in at_top, R < x n :=
begin
  by_contra h,
  simp_rw [not_exists, not_frequently, not_lt, eventually_at_top] at h,
  refine hx (ennreal.eq_top_of_forall_nnreal_le $ Œª r, _),
  obtain ‚ü®N, hN‚ü© := h (-r),
  refine le_Liminf_of_le (by is_bounded_default) (eventually_at_top.2
    ‚ü®N, Œª n hn, ennreal.coe_le_coe.2 $ nnreal.coe_le_coe.1 $ (le_neg.1 $ hN n hn).trans _‚ü©),
  rw [coe_nnnorm, real.norm_eq_abs, ‚Üê abs_neg],
  exact le_abs_self _,
end

lemma exists_upcrossings_of_not_bounded_under
  (hf : at_top.liminf (Œª n, (‚à•f n x‚à•‚Çä : ‚Ñù‚â•0‚àû)) ‚â† ‚àû)
  (hbdd : ¬¨ is_bounded_under (‚â§) at_top (Œª n, |f n x|)) :
  ‚àÉ a b : ‚Ñö, a < b ‚àß (‚àÉ·∂† n in at_top, f n x < a) ‚àß (‚àÉ·∂† n in at_top, ‚Üëb < f n x) :=
begin
  rw [is_bounded_under_le_abs, not_and_distrib] at hbdd,
  obtain hbdd | hbdd := hbdd,
  { obtain ‚ü®R, hR‚ü© := exists_frequently_lt_of_liminf_ne_top hf,
    obtain ‚ü®q, hq‚ü© := exists_rat_gt R,
    refine ‚ü®q, q + 1, (lt_add_iff_pos_right _).2 zero_lt_one, _, _‚ü©,
    { rw frequently_at_top at hR ‚ä¢,
      intro a,
      obtain ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© := hR a,
      exact ‚ü®b, hb‚ÇÅ, hb‚ÇÇ.trans hq‚ü© },
    { simp only [is_bounded_under, is_bounded, eventually_map, eventually_at_top,
        ge_iff_le, not_exists, not_forall, not_le, exists_prop] at hbdd,
      rw frequently_at_top,
      exact Œª a, let ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© := hbdd ‚Üë(q + 1) a in ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© } },
  { obtain ‚ü®R, hR‚ü© := exists_frequently_lt_of_liminf_ne_top' hf,
    obtain ‚ü®q, hq‚ü© := exists_rat_lt R,
    refine ‚ü®q - 1, q, (sub_lt_self_iff _).2 zero_lt_one, _, _‚ü©,
    { simp only [is_bounded_under, is_bounded, eventually_map, eventually_at_top,
        ge_iff_le, not_exists, not_forall, not_le, exists_prop] at hbdd,
      rw frequently_at_top,
      exact Œª a, let ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© := hbdd ‚Üë(q - 1) a in ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© },
    { rw frequently_at_top at hR ‚ä¢,
      intro a,
      obtain ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© := hR a,
      exact ‚ü®b, hb‚ÇÅ, hq.trans hb‚ÇÇ‚ü© } }
end

/-- A realization of a stochastic process with bounded upcrossings and bounded limit infimums is
convergent.

We use the spelling `< ‚àû` instead of the standard `‚â† ‚àû` in the assumptions since it is difficult
to manipulate under binders. -/
lemma tendsto_of_uncrossing_lt_top {x : Œ±}
  (hf‚ÇÅ : at_top.liminf (Œª n, (‚à•f n x‚à•‚Çä : ‚Ñù‚â•0‚àû)) < ‚àû)
  (hf‚ÇÇ : ‚àÄ a b : ‚Ñö, a < b ‚Üí upcrossing a b f x < ‚àû) :
  ‚àÉ c, tendsto (Œª n, f n x) at_top (ùìù c) :=
begin
  by_cases h : is_bounded_under (‚â§) at_top (Œª n, |f n x|),
  { rw is_bounded_under_le_abs at h,
    refine tendsto_of_no_upcrossings rat.dense_range_cast _ h.1 h.2,
    { intros a ha b hb hab,
      obtain ‚ü®‚ü®a, rfl‚ü©, ‚ü®b, rfl‚ü©‚ü© := ‚ü®ha, hb‚ü©,
      exact not_frequently_of_upcrossing_lt_top hab (hf‚ÇÇ a b (rat.cast_lt.1 hab)).ne } },
  { -- if `(|f n x|)` is not bounded then either `f n x ‚Üí ¬±‚àû` or (`limsup f n x = ‚àû` or
    -- `liminf f n x = -‚àû`). The first case contradicts `liminf |f n x| ‚â† ‚àû` while the second
    -- case contradicts finite upcrossings.
    obtain ‚ü®a, b, hab, h‚ÇÅ, h‚ÇÇ‚ü© := exists_upcrossings_of_not_bounded_under hf‚ÇÅ.ne h,
    exact false.elim ((hf‚ÇÇ a b hab).ne
      (upcrossing_eq_top_of_frequently_lt (rat.cast_lt.2 hab) h‚ÇÅ h‚ÇÇ)) }
end

/-- An L¬π-bounded submartingale has bounded upcrossings almost everywhere. -/
lemma submartingale.upcrossing_ae_lt_top' [is_finite_measure Œº]
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÉ R : ‚Ñù‚â•0, ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) (hab : a < b) :
  ‚àÄ·µê x ‚àÇŒº, upcrossing a b f x < ‚àû :=
begin
  refine ae_lt_top (hf.adapted.measurable_upcrossing hab) _,
  have := hf.mul_lintegral_upcrossing_le_lintegral_pos_part a b,
  rw [mul_comm, ‚Üê ennreal.le_div_iff_mul_le] at this,
  { refine (lt_of_le_of_lt this (ennreal.div_lt_top _ _)).ne,
    { obtain ‚ü®R, hR‚ü© := hbdd,
      have hR' : ‚àÄ n, ‚à´‚Åª (x : Œ±), ‚à•f n x - a‚à•‚Çä ‚àÇŒº ‚â§ R + ‚à•a‚à•‚Çä * Œº set.univ,
      { simp_rw snorm_one_eq_lintegral_nnnorm at hR,
        intro n,
        refine (lintegral_mono _ : ‚à´‚Åª x, ‚à•f n x - a‚à•‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª x, ‚à•f n x‚à•‚Çä + ‚à•a‚à•‚Çä ‚àÇŒº).trans _,
        { intro x,
          simp_rw [sub_eq_add_neg, ‚Üê nnnorm_neg a, ‚Üê ennreal.coe_add, ennreal.coe_le_coe],
          exact nnnorm_add_le _ _ },
        { simp_rw [ lintegral_add_right _ measurable_const, lintegral_const],
          exact add_le_add (hR _) le_rfl } },
      refine ne_of_lt (supr_lt_iff.2 ‚ü®R + ‚à•a‚à•‚Çä * Œº set.univ, ennreal.add_lt_top.2
          ‚ü®ennreal.coe_lt_top, ennreal.mul_lt_top ennreal.coe_lt_top.ne (measure_ne_top _ _)‚ü©,
          Œª n, le_trans _ (hR' n)‚ü©),
      refine lintegral_mono (Œª x, _),
      rw [ennreal.of_real_le_iff_le_to_real, ennreal.coe_to_real, coe_nnnorm],
      by_cases hnonneg : 0 ‚â§ f n x - a,
      { rw [lattice_ordered_comm_group.pos_of_nonneg _ hnonneg,
          real.norm_eq_abs, abs_of_nonneg hnonneg] },
      { rw lattice_ordered_comm_group.pos_of_nonpos _ (not_le.1 hnonneg).le,
        exact norm_nonneg _ },
      { simp only [ne.def, ennreal.coe_ne_top, not_false_iff] } },
    { simp only [hab, ne.def, ennreal.of_real_eq_zero, sub_nonpos, not_le] } },
  { simp only [hab, ne.def, ennreal.of_real_eq_zero, sub_nonpos, not_le, true_or]},
  { simp only [ne.def, ennreal.of_real_ne_top, not_false_iff, true_or] }
end

lemma submartingale.upcrossing_ae_lt_top [is_finite_measure Œº]
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÉ R : ‚Ñù‚â•0, ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  ‚àÄ·µê x ‚àÇŒº, ‚àÄ a b : ‚Ñö, a < b ‚Üí upcrossing a b f x < ‚àû :=
begin
  suffices : ‚àÄ a b : ‚Ñö, a < b ‚Üí ‚àÄ·µê x ‚àÇŒº, upcrossing a b f x < ‚àû,
  { simp_rw ae_iff at this ‚ä¢,
    push_neg at this ‚ä¢,
    rw set.set_of_exists,
    refine nonpos_iff_eq_zero.1 ((measure_Union_le _).trans
      (((tsum_eq_zero_iff ennreal.summable).2 (Œª a, _)).le)),
    rw set.set_of_exists,
    refine nonpos_iff_eq_zero.1 ((measure_Union_le _).trans
      (((tsum_eq_zero_iff ennreal.summable).2 (Œª b, _)).le)),
    rw set.set_of_and,
    by_cases hab : a < b,
    { simp only [hab, set.set_of_true, set.univ_inter, this a b] },
    { simp only [hab, set.set_of_false, set.empty_inter, measure_empty] } },
  rintro a b hab,
  exact hf.upcrossing_ae_lt_top' hbdd (rat.cast_lt.2 hab),
end

lemma liminf_at_top_ae_bdd_of_snorm_bdd
  (hfmeas : ‚àÄ n, measurable (f n)) (hbdd : ‚àÉ R : ‚Ñù‚â•0, ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  ‚àÄ·µê x ‚àÇŒº, at_top.liminf (Œª n, (‚à•f n x‚à•‚Çä : ‚Ñù‚â•0‚àû)) < ‚àû :=
begin
  obtain ‚ü®R, hR‚ü© := hbdd,
  refine ae_lt_top (measurable_liminf (Œª n, (hfmeas n).nnnorm.coe_nnreal_ennreal))
    (lt_of_le_of_lt (lintegral_liminf_le (Œª n, (hfmeas n).nnnorm.coe_nnreal_ennreal))
    (lt_of_le_of_lt _ (ennreal.coe_lt_top : ‚ÜëR < ‚àû))).ne,
  simp_rw [‚Üê snorm_one_eq_lintegral_nnnorm, liminf_eq, eventually_at_top],
  exact Sup_le (Œª b ‚ü®a, ha‚ü©, (ha a le_rfl).trans (hR _)),
end

/-- An L¬π-bounded submartingale converges almost everywhere. -/
lemma submartingale.exists_ae_tendsto_of_bdd [is_finite_measure Œº]
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÉ R : ‚Ñù‚â•0, ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  ‚àÄ·µê x ‚àÇŒº, ‚àÉ c, tendsto (Œª n, f n x) at_top (ùìù c) :=
begin
  filter_upwards [hf.upcrossing_ae_lt_top hbdd, liminf_at_top_ae_bdd_of_snorm_bdd
    (Œª n, (hf.strongly_measurable n).measurable.mono (‚Ñ±.le n) le_rfl) hbdd] with x h‚ÇÅ h‚ÇÇ,
  exact tendsto_of_uncrossing_lt_top h‚ÇÇ h‚ÇÅ,
end

/-- **Almost everywhere martingale convergence theorem**: An L¬π-bounded submartingale converges
almost everywhere to a L¬π random variable. -/
lemma submartingale.exists_mem_‚Ñí1_ae_tendsto_of_bdd [is_finite_measure Œº]
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÉ R : ‚Ñù‚â•0, ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  ‚àÉ g : Œ± ‚Üí ‚Ñù, mem_‚Ñíp g 1 Œº ‚àß
  ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (g x)) :=
begin
  classical,
  set g : Œ± ‚Üí ‚Ñù := Œª x, if h : ‚àÉ c, tendsto (Œª n, f n x) at_top (ùìù c) then h.some else 0 with hgd,
  have hg : ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (g x)),
  { filter_upwards [hf.exists_ae_tendsto_of_bdd hbdd] with x hx,
    simp_rw [hgd, dif_pos hx],
    exact hx.some_spec },
  have hgmeas : ae_strongly_measurable g Œº :=
    ae_measurable.ae_strongly_measurable (ae_measurable_of_tendsto_metrizable_ae'
      (Œª n, ((hf.strongly_measurable n).measurable.mono (‚Ñ±.le n) le_rfl).ae_measurable) hg),
  refine ‚ü®g, ‚ü®hgmeas, _‚ü©, hg‚ü©,
  { obtain ‚ü®R, hR‚ü© := hbdd,
    refine lt_of_le_of_lt (Lp.snorm_lim_le_liminf_snorm
      (Œª n, ((hf.strongly_measurable n).measurable.mono (‚Ñ±.le n) le_rfl).ae_strongly_measurable)
      g hg) (lt_of_le_of_lt _ (ennreal.coe_lt_top : ‚ÜëR < ‚àû)),
    simp_rw [liminf_eq, eventually_at_top],
    exact Sup_le (Œª b ‚ü®a, ha‚ü©, (ha a le_rfl).trans (hR _)) }
end

end measure_theory
