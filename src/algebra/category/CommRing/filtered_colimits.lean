/-
Copyright (c) 2021 Justus Springer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Justus Springer
-/
import algebra.category.CommRing.basic
import algebra.category.Group.filtered_colimits
import category_theory.limits.concrete_category
import category_theory.limits.preserves.filtered

/-!
# The forgetful functor `Ring ‚•§ Type` preserves filtered colimits.

-/

universe v

noncomputable theory
open_locale classical

open category_theory
open category_theory.limits
open category_theory.is_filtered (renaming max ‚Üí max') -- avoid name collision with `_root_.max`.

-- dummy
namespace AddMon.filtered_colimits

end AddMon.filtered_colimits

open AddMon.filtered_colimits (colimit_zero colimit_zero_eq colimit_add colimit_add_eq)
open Mon.filtered_colimits (colimit_one colimit_one_eq colimit_mul colimit_mul_eq)

namespace SemiRing.filtered_colimits

section

parameters {J : Type v} [small_category J] [is_filtered J] (F : J ‚•§ SemiRing.{v})

abbreviation R : Mon := Mon.filtered_colimits.colimit (F ‚ãô forget‚ÇÇ SemiRing Mon)

abbreviation R.mk : (Œ£ j, F.obj j) ‚Üí R := quot.mk (types.quot.rel (F ‚ãô forget SemiRing))

instance semiring_obj (j : J) : semiring (((F ‚ãô forget‚ÇÇ SemiRing Mon.{v}) ‚ãô forget Mon).obj j) :=
begin change semiring (F.obj j), apply_instance end

lemma R.mk_eq (x y : Œ£ j, F.obj j)
  (h : ‚àÉ (k : J) (f : x.1 ‚ü∂ k) (g : y.1 ‚ü∂ k), F.map f x.2 = F.map g y.2) :
  R.mk x = R.mk y :=
quot.eqv_gen_sound (types.filtered_colimit.eqv_gen_quot_rel_of_rel (F ‚ãô forget SemiRing) x y h)

instance colimit_semiring : semiring R :=
{ mul_zero := Œª x, begin
    apply quot.induction_on x, clear x, intro x,
    cases x with j x,
    erw [colimit_zero_eq _ j, colimit_mul_eq _ ‚ü®j, _‚ü© ‚ü®j, _‚ü© j (ùüô j) (ùüô j)],
    rw [category_theory.functor.map_id, id_apply, id_apply, mul_zero x],
    refl,
  end,
  zero_mul := Œª x, begin
    apply quot.induction_on x, clear x, intro x,
    cases x with j x,
    erw [colimit_zero_eq _ j, colimit_mul_eq _ ‚ü®j, _‚ü© ‚ü®j, _‚ü© j (ùüô j) (ùüô j)],
    rw [category_theory.functor.map_id, id_apply, id_apply, zero_mul x],
    refl,
  end,
  left_distrib := Œª x y z, begin
    apply quot.induction_on‚ÇÉ x y z, clear x y z, intros x y z,
    cases x with j‚ÇÅ x, cases y with j‚ÇÇ y, cases z with j‚ÇÉ z,
    let k := max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let f := first_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let g := second_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let h := third_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    erw [colimit_add_eq _ ‚ü®j‚ÇÇ, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k g h, colimit_mul_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®k, _‚ü© k f (ùüô k),
      colimit_mul_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®j‚ÇÇ, _‚ü© k f g, colimit_mul_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k f h,
      colimit_add_eq _ ‚ü®k, _‚ü© ‚ü®k, _‚ü© k (ùüô k) (ùüô k)],
    simp only [category_theory.functor.map_id, id_apply],
    erw left_distrib (F.map f x) (F.map g y) (F.map h z),
    refl,
  end,
  right_distrib := Œª x y z, begin
    apply quot.induction_on‚ÇÉ x y z, clear x y z, intros x y z,
    cases x with j‚ÇÅ x, cases y with j‚ÇÇ y, cases z with j‚ÇÉ z,
    let k := max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let f := first_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let g := second_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    let h := third_to_max‚ÇÉ j‚ÇÅ j‚ÇÇ j‚ÇÉ,
    erw [colimit_add_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®j‚ÇÇ, _‚ü© k f g, colimit_mul_eq _ ‚ü®k, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k (ùüô k) h,
      colimit_mul_eq _ ‚ü®j‚ÇÅ, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k f h, colimit_mul_eq _ ‚ü®j‚ÇÇ, _‚ü© ‚ü®j‚ÇÉ, _‚ü© k g h,
      colimit_add_eq _ ‚ü®k, _‚ü© ‚ü®k, _‚ü© k (ùüô k) (ùüô k)],
    simp only [category_theory.functor.map_id, id_apply],
    erw right_distrib (F.map f x) (F.map g y) (F.map h z),
    refl,
  end,
  ..R.monoid,
  ..AddCommMon.filtered_colimits.colimit_add_comm_monoid (F ‚ãô forget‚ÇÇ SemiRing AddCommMon) }

def colimit : SemiRing := ‚ü®R, by apply_instance‚ü©

def colimit_cocone : cocone F :=
{ X := colimit,
  Œπ :=
  { app := Œª j,
    { ..(Mon.filtered_colimits.colimit_cocone (F ‚ãô forget‚ÇÇ SemiRing Mon)).Œπ.app j,
      ..(AddCommMon.filtered_colimits.colimit_cocone (F ‚ãô forget‚ÇÇ SemiRing AddCommMon)).Œπ.app j },
    naturality' := Œª j j' f,
      (ring_hom.coe_inj ((types.colimit_cocone (F ‚ãô forget SemiRing)).Œπ.naturality f)) } }

def colimit_cocone_is_colimit : is_colimit colimit_cocone :=
{ desc := Œª t,
  { .. (Mon.filtered_colimits.colimit_cocone_is_colimit
    (F ‚ãô forget‚ÇÇ SemiRing Mon)).desc ((forget‚ÇÇ SemiRing Mon).map_cocone t),
    .. (AddCommMon.filtered_colimits.colimit_cocone_is_colimit
    (F ‚ãô forget‚ÇÇ SemiRing AddCommMon)).desc ((forget‚ÇÇ SemiRing AddCommMon).map_cocone t), },
  fac' := Œª t j, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget SemiRing)).fac ((forget SemiRing).map_cocone t) j,
  uniq' := Œª t m h, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget SemiRing)).uniq ((forget SemiRing).map_cocone t) m
    (Œª j, funext $ Œª x, ring_hom.congr_fun (h j) x) }

instance forget‚ÇÇ_Mon_preserves_filtered_colimits :
  preserves_filtered_colimits (forget‚ÇÇ SemiRing Mon.{v}) :=
{ preserves_filtered_colimits := Œª J _ _, by exactI
  { preserves_colimit := Œª F, preserves_colimit_of_preserves_colimit_cocone
      (colimit_cocone_is_colimit F)
      (Mon.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ SemiRing Mon.{v})) } }

instance forget_preserves_filtered_colimits : preserves_filtered_colimits (forget SemiRing) :=
limits.comp_preserves_filtered_colimits (forget‚ÇÇ SemiRing Mon) (forget Mon)

end

end SemiRing.filtered_colimits


namespace CommSemiRing.filtered_colimits

section

parameters {J : Type v} [small_category J] [is_filtered J] (F : J ‚•§ CommSemiRing.{v})

abbreviation R : SemiRing :=
SemiRing.filtered_colimits.colimit (F ‚ãô forget‚ÇÇ CommSemiRing SemiRing)

abbreviation R.mk : (Œ£ j, F.obj j) ‚Üí R := quot.mk (types.quot.rel (F ‚ãô forget CommSemiRing))

instance semiring_obj (j : J) : comm_semiring
(((F ‚ãô forget‚ÇÇ CommSemiRing SemiRing.{v}) ‚ãô forget SemiRing).obj j) :=
begin change comm_semiring (F.obj j), apply_instance end

lemma R.mk_eq (x y : Œ£ j, F.obj j)
  (h : ‚àÉ (k : J) (f : x.1 ‚ü∂ k) (g : y.1 ‚ü∂ k), F.map f x.2 = F.map g y.2) :
  R.mk x = R.mk y :=
quot.eqv_gen_sound (types.filtered_colimit.eqv_gen_quot_rel_of_rel (F ‚ãô forget CommSemiRing) x y h)

instance colimit_comm_semiring : comm_semiring R :=
{ ..R.semiring,
  ..CommMon.filtered_colimits.colimit_comm_monoid (F ‚ãô forget‚ÇÇ CommSemiRing CommMon) }

def colimit : CommSemiRing := ‚ü®R, by apply_instance‚ü©

def colimit_cocone : cocone F :=
{ X := colimit,
  Œπ := { ..(SemiRing.filtered_colimits.colimit_cocone (F ‚ãô forget‚ÇÇ CommSemiRing SemiRing)).Œπ } }

def colimit_cocone_is_colimit : is_colimit colimit_cocone :=
{ desc := Œª t,
  (SemiRing.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ CommSemiRing SemiRing)).desc
    ((forget‚ÇÇ CommSemiRing SemiRing).map_cocone t),
  fac' := Œª t j, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget CommSemiRing)).fac
    ((forget CommSemiRing).map_cocone t) j,
  uniq' := Œª t m h, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget CommSemiRing)).uniq
    ((forget CommSemiRing).map_cocone t) m (Œª j, funext $ Œª x, ring_hom.congr_fun (h j) x) }

instance forget‚ÇÇ_SemiRing_preserves_filtered_colimits :
  preserves_filtered_colimits (forget‚ÇÇ CommSemiRing SemiRing.{v}) :=
{ preserves_filtered_colimits := Œª J _ _, by exactI
  { preserves_colimit := Œª F, preserves_colimit_of_preserves_colimit_cocone
      (colimit_cocone_is_colimit F)
      (SemiRing.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ CommSemiRing SemiRing.{v})) } }

instance forget_preserves_filtered_colimits : preserves_filtered_colimits (forget CommSemiRing) :=
limits.comp_preserves_filtered_colimits (forget‚ÇÇ CommSemiRing SemiRing) (forget SemiRing)

end

end CommSemiRing.filtered_colimits


namespace Ring.filtered_colimits

section

parameters {J : Type v} [small_category J] [is_filtered J] (F : J ‚•§ Ring.{v})

abbreviation R : SemiRing :=
SemiRing.filtered_colimits.colimit (F ‚ãô forget‚ÇÇ Ring SemiRing)

abbreviation R.mk : (Œ£ j, F.obj j) ‚Üí R := quot.mk (types.quot.rel (F ‚ãô forget Ring))

instance ring_obj (j : J) : ring
(((F ‚ãô forget‚ÇÇ Ring SemiRing.{v}) ‚ãô forget SemiRing).obj j) :=
begin change ring (F.obj j), apply_instance end

lemma R.mk_eq (x y : Œ£ j, F.obj j)
  (h : ‚àÉ (k : J) (f : x.1 ‚ü∂ k) (g : y.1 ‚ü∂ k), F.map f x.2 = F.map g y.2) :
  R.mk x = R.mk y :=
quot.eqv_gen_sound (types.filtered_colimit.eqv_gen_quot_rel_of_rel (F ‚ãô forget Ring) x y h)

instance colimit_ring : ring R :=
{ ..R.semiring,
  ..AddCommGroup.filtered_colimits.colimit_add_comm_group (F ‚ãô forget‚ÇÇ Ring AddCommGroup) }

def colimit : Ring := ‚ü®R, by apply_instance‚ü©

def colimit_cocone : cocone F :=
{ X := colimit,
  Œπ := { ..(SemiRing.filtered_colimits.colimit_cocone (F ‚ãô forget‚ÇÇ Ring SemiRing)).Œπ } }

def colimit_cocone_is_colimit : is_colimit colimit_cocone :=
{ desc := Œª t,
  (SemiRing.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ Ring SemiRing)).desc
    ((forget‚ÇÇ Ring SemiRing).map_cocone t),
  fac' := Œª t j, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget Ring)).fac ((forget Ring).map_cocone t) j,
  uniq' := Œª t m h, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget Ring)).uniq
    ((forget Ring).map_cocone t) m (Œª j, funext $ Œª x, ring_hom.congr_fun (h j) x) }

instance forget‚ÇÇ_SemiRing_preserves_filtered_colimits :
  preserves_filtered_colimits (forget‚ÇÇ Ring SemiRing.{v}) :=
{ preserves_filtered_colimits := Œª J _ _, by exactI
  { preserves_colimit := Œª F, preserves_colimit_of_preserves_colimit_cocone
      (colimit_cocone_is_colimit F)
      (SemiRing.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ Ring SemiRing.{v})) } }

instance forget_preserves_filtered_colimits : preserves_filtered_colimits (forget Ring) :=
limits.comp_preserves_filtered_colimits (forget‚ÇÇ Ring SemiRing) (forget SemiRing)

end

end Ring.filtered_colimits


namespace CommRing.filtered_colimits

section

parameters {J : Type v} [small_category J] [is_filtered J] (F : J ‚•§ CommRing.{v})

abbreviation R : Ring :=
Ring.filtered_colimits.colimit (F ‚ãô forget‚ÇÇ CommRing Ring)

abbreviation R.mk : (Œ£ j, F.obj j) ‚Üí R := quot.mk (types.quot.rel (F ‚ãô forget CommRing))

instance semiring_obj (j : J) : comm_ring
(((F ‚ãô forget‚ÇÇ CommRing Ring.{v}) ‚ãô forget Ring).obj j) :=
begin change comm_ring (F.obj j), apply_instance end

lemma R.mk_eq (x y : Œ£ j, F.obj j)
  (h : ‚àÉ (k : J) (f : x.1 ‚ü∂ k) (g : y.1 ‚ü∂ k), F.map f x.2 = F.map g y.2) :
  R.mk x = R.mk y :=
quot.eqv_gen_sound (types.filtered_colimit.eqv_gen_quot_rel_of_rel (F ‚ãô forget CommRing) x y h)

instance colimit_comm_semiring : comm_ring R :=
{ ..R.ring,
  ..CommSemiRing.filtered_colimits.colimit_comm_semiring (F ‚ãô forget‚ÇÇ CommRing CommSemiRing) }

def colimit : CommRing := ‚ü®R, by apply_instance‚ü©

def colimit_cocone : cocone F :=
{ X := colimit,
  Œπ := { ..(Ring.filtered_colimits.colimit_cocone (F ‚ãô forget‚ÇÇ CommRing Ring)).Œπ } }

def colimit_cocone_is_colimit : is_colimit colimit_cocone :=
{ desc := Œª t,
  (Ring.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ CommRing Ring)).desc
    ((forget‚ÇÇ CommRing Ring).map_cocone t),
  fac' := Œª t j, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget CommRing)).fac ((forget CommRing).map_cocone t) j,
  uniq' := Œª t m h, ring_hom.coe_inj $
  (types.colimit_cocone_is_colimit (F ‚ãô forget CommRing)).uniq
    ((forget CommRing).map_cocone t) m (Œª j, funext $ Œª x, ring_hom.congr_fun (h j) x) }

instance forget‚ÇÇ_Ring_preserves_filtered_colimits :
  preserves_filtered_colimits (forget‚ÇÇ CommRing Ring.{v}) :=
{ preserves_filtered_colimits := Œª J _ _, by exactI
  { preserves_colimit := Œª F, preserves_colimit_of_preserves_colimit_cocone
      (colimit_cocone_is_colimit F)
      (Ring.filtered_colimits.colimit_cocone_is_colimit (F ‚ãô forget‚ÇÇ CommRing Ring.{v})) } }

instance forget_preserves_filtered_colimits : preserves_filtered_colimits (forget CommRing) :=
limits.comp_preserves_filtered_colimits (forget‚ÇÇ CommRing Ring) (forget Ring)

end

end CommRing.filtered_colimits
