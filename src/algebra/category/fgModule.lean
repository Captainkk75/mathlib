/-
Copyright (c) 2021 Jakob von Raumer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob von Raumer, Scott Morrison
-/
import category_theory.monoidal.rigid.basic
import linear_algebra.tensor_product_basis
import linear_algebra.coevaluation
import algebra.category.Module.monoidal

/-!
# The category of finitely generated modules over a ring

This introduces `fgModule R`, the category of finitely generated modules over a ring `R`.
It is implemented as a full subcategory on a subtype of `Module R`.

When `K` is a field, `fgModule K` is the category of finite dimensional vector spaces over `K`.

We first create the instance as a preadditive category.
When `R` is commutative we then give the structure as an `R`-linear category.
When `R` is a field we give it the structure of a monoidal category
and then as a right-rigid monoidal category.

## Future work

* Show that `fgModule R` is abelian when `R` is (left)-noetherian.
* Generalize the `monoidal_category` instance to any commutative ring.
* Show that `fgModule R` is a symmetric monoidal category when `R` is commutative.
* Show that `fgModule R` is rigid (it is already right rigid) when `R` is a field.

-/
noncomputable theory

open category_theory Module.monoidal_category
open_locale classical big_operators

universes u

section
variables (R : Type u) [ring R]

/-- Define `fgModule` as the subtype of `Module.{u} K` of finitely generated modules. -/
@[derive [large_category, Œª Œ±, has_coe_to_sort Œ± (Sort*), concrete_category, preadditive]]
def fgModule := { V : Module.{u} R // module.finite R V }

end

namespace fgModule

section ring
variables (R : Type u) [ring R]

instance finite (V : fgModule R) : module.finite K V := V.prop

instance : inhabited (fgModule R) := ‚ü®‚ü®Module.of K K, module.finite.self K‚ü©‚ü©

instance : has_coe (fgModule.{u} R) (Module.{u} R) := { coe := Œª V, V.1, }

protected lemma coe_comp {U V W : fgModule R} (f : U ‚ü∂ V) (g : V ‚ü∂ W) :
  ((f ‚â´ g) : U ‚Üí W) = (g : V ‚Üí W) ‚àò (f : U ‚Üí V) := rfl

/-- Lift an unbundled finitely generated module to `fgModule R`. -/
def of (V : Type u) [add_comm_group V] [module R V] [module.finite R V] : fgModule R :=
‚ü®Module.of R V, by { change module.finite R V, apply_instance }‚ü©

instance : has_forget‚ÇÇ (fgModule.{u} R) (Module.{u} R) :=
by { dsimp [fgModule], apply_instance, }

instance : full (forget‚ÇÇ (fgModule R) (Module.{u} R)) :=
{ preimage := Œª X Y f, f, }

end ring

section comm_ring
variables (K : Type u) [comm_ring K]

instance : linear R (fgModule R) := by { dsimp [fgModule], apply_instance, }

end comm_ring

section field
variables (K : Type u) [field K]

instance (V W : fgModule K) : finite_dimensional K (V ‚ü∂ W) :=
(by apply_instance : finite_dimensional K (V ‚Üí‚Çó[K] W))

-- TODO this instance works for any commutative ring, but we don't have `finite_tensor_product` yet.
instance monoidal_category : monoidal_category (fgModule K) :=
monoidal_category.full_monoidal_subcategory
  (Œª V, module.finite K V)
  (module.finite.self K)
  (Œª X Y hX hY, by exactI finite_dimensional_tensor_product X Y)

/-- The forgetful functor `fgModule K ‚•§ Module K` as a monoidal functor. -/
def forget‚ÇÇ_monoidal : monoidal_functor (fgModule K) (Module.{u} K) :=
{ to_functor := forget‚ÇÇ (fgModule K) (Module.{u} K),
  Œµ := ùüô _,
  Œº := Œª X Y, ùüô _, }

instance forget‚ÇÇ_monoidal_faithful : faithful (forget‚ÇÇ_monoidal K).to_functor :=
by { dsimp [forget‚ÇÇ_monoidal], apply_instance, }

instance forget‚ÇÇ_monoidal_additive : (forget‚ÇÇ_monoidal K).to_functor.additive :=
functor.full_subcategory_inclusion_additive _

instance : monoidal_preadditive (fgModule K) :=
monoidal_preadditive_of_faithful (forget‚ÇÇ_monoidal K)

instance forget‚ÇÇ_monoidal_linear : (forget‚ÇÇ_monoidal K).to_functor.linear K :=
functor.full_subcategory_inclusion_linear K _

instance : monoidal_linear K (fgModule K) :=
monoidal_linear_of_faithful K (forget‚ÇÇ_monoidal K)

variables (V : fgModule K)

/-- The dual module is the dual in the rigid monoidal category `fgModule K`. -/
def fgModule_dual : fgModule K :=
‚ü®Module.of K (module.dual K V), subspace.module.dual.finite_dimensional‚ü©

instance : has_coe_to_fun (fgModule_dual K V) (Œª _, V ‚Üí K) :=
{ coe := Œª v, by { change V ‚Üí‚Çó[K] K at v, exact v, } }

open category_theory.monoidal_category

/-- The coevaluation map is defined in `linear_algebra.coevaluation`. -/
def fgModule_coevaluation : ùüô_ (fgModule K) ‚ü∂ V ‚äó (fgModule_dual K V) :=
by apply coevaluation K V

lemma fgModule_coevaluation_apply_one : fgModule_coevaluation K V (1 : K) =
   ‚àë (i : basis.of_vector_space_index K V),
    (basis.of_vector_space K V) i ‚äó‚Çú[K] (basis.of_vector_space K V).coord i :=
by apply coevaluation_apply_one K V

/-- The evaluation morphism is given by the contraction map. -/
def fgModule_evaluation : (fgModule_dual K V) ‚äó V ‚ü∂ ùüô_ (fgModule K) :=
by apply contract_left K V

@[simp]
lemma fgModule_evaluation_apply (f : (fgModule_dual K V)) (x : V) :
  (fgModule_evaluation K V) (f ‚äó‚Çú x) = f x :=
by apply contract_left_apply f x

private theorem coevaluation_evaluation :
  let V' : fgModule K := fgModule_dual K V in
  (ùüô V' ‚äó (fgModule_coevaluation K V)) ‚â´ (Œ±_ V' V V').inv ‚â´ (fgModule_evaluation K V ‚äó ùüô V')
  = (œÅ_ V').hom ‚â´ (Œª_ V').inv :=
by apply contract_left_assoc_coevaluation K V

private theorem evaluation_coevaluation :
  (fgModule_coevaluation K V ‚äó ùüô V)
  ‚â´ (Œ±_ V (fgModule_dual K V) V).hom ‚â´ (ùüô V ‚äó fgModule_evaluation K V)
  = (Œª_ V).hom ‚â´ (œÅ_ V).inv :=
by apply contract_left_assoc_coevaluation' K V

instance exact_pairing : exact_pairing V (fgModule_dual K V) :=
{ coevaluation := fgModule_coevaluation K V,
  evaluation := fgModule_evaluation K V,
  coevaluation_evaluation' := coevaluation_evaluation K V,
  evaluation_coevaluation' := evaluation_coevaluation K V }

instance right_dual : has_right_dual V := ‚ü®fgModule_dual K V‚ü©

instance right_rigid_category : right_rigid_category (fgModule K) := { }

end field

end fgModule
