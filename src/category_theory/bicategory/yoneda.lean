-- /-
-- Copyright (c) 2021 Yuma Mizuno. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Yuma Mizuno
-- -/
-- import category_theory.bicategory.equivalence
-- import category_theory.bicategory.opposites
-- import category_theory.bicategory.natural_transformation
-- import category_theory.category.Cat

-- open opposite

-- namespace category_theory

-- universes w v u

-- open bicategory category
-- open_locale bicategory

-- namespace bicategory

-- section

-- variables {B : Type u} [bicategory.{w v} B] (a b c d : B)

-- /--
-- Left composition of 1-morphisms as a functor.
-- -/
-- @[simps]
-- def lcomp : (a ‚ü∂ b) ‚•§ (b ‚ü∂ c) ‚•§ (a ‚ü∂ c) :=
-- { obj := Œª f,
--   { obj := Œª g, f ‚â´ g,
--     map := Œª g h Œ∑, f ‚óÅ Œ∑ },
--   map := Œª f g Œ∑, { app := Œª h, Œ∑ ‚ñ∑ h } }

-- -- @[simp]
-- -- lemma lcomp_obj (f : a ‚ü∂ b) :
-- --   (lcomp a b c).obj f =
-- --   { obj := Œª g, f ‚â´ g,
-- --     map := Œª g h Œ∑, f ‚óÅ Œ∑ } := rfl

-- /--
-- Right composition of 1-morphisms as a functor.
-- -/
-- @[simps]
-- def rcomp : (b ‚ü∂ c) ‚•§ (a ‚ü∂ b) ‚•§ (a ‚ü∂ c) :=
-- { obj := Œª f,
--   { obj := Œª g, g ‚â´ f,
--     map := Œª g h Œ∑, Œ∑ ‚ñ∑ f },
--   map := Œª f g Œ∑, { app := Œª h, h ‚óÅ Œ∑ } }

-- variables {a b c d}

-- /--
-- Left component of an associator as a natural isomorphism.
-- -/
-- @[simps]
-- def associator_nat_iso_left (a) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
--   (rcomp a _ _).obj g ‚ãô (rcomp a _ _).obj h
--   ‚âÖ (rcomp a _ _).obj (g ‚â´ h) :=
-- nat_iso.of_components
--   (Œª f, Œ±_ f g h)
--   (by { intros, apply associator_naturality_left })

-- /--
-- Middle component of an associator as a natural isomorphism.
-- -/
-- @[simps]
-- def associator_nat_iso_middle (f : a ‚ü∂ b) (h : c ‚ü∂ d) :
--   (lcomp _ _ _).obj f ‚ãô (rcomp _ _ _).obj h
--   ‚âÖ (rcomp _ _ _).obj h ‚ãô (lcomp _ _ _).obj f :=
-- nat_iso.of_components
--   (Œª g, Œ±_ f g h)
--   (by { intros, apply associator_naturality_middle })

-- /--
-- Right component of an associator as a natural isomorphism.
-- -/
-- @[simps]
-- def associator_nat_iso_right (d) (f : a ‚ü∂ b) (g : b ‚ü∂ c) :
--   (lcomp _ _ d).obj (f ‚â´ g)
--   ‚âÖ (lcomp _ _ d).obj g ‚ãô (lcomp _ _ d).obj f :=
-- nat_iso.of_components
--   (Œª h, Œ±_ f g h)
--   (by { intros, apply associator_naturality_right })

-- /--
-- Left unitor as a natural isomorphism.
-- -/
-- @[simps]
-- def left_unitor_nat_iso (a b : B) : (lcomp _ _ b).obj (ùüô a) ‚âÖ ùü≠ (a ‚ü∂ b) :=
-- nat_iso.of_components
--   (Œª f, Œª_ f)
--   (by { intros, apply left_unitor_naturality })

-- /--
-- Right unitor as a natural isomorphism.
-- -/
-- @[simps]
-- def right_unitor_nat_iso (a b : B) : (rcomp a _ _).obj (ùüô b) ‚âÖ ùü≠ (a ‚ü∂ b) :=
-- nat_iso.of_components
--   (Œª f, œÅ_ f)
--   (by { intros, apply right_unitor_naturality })

-- end

-- end bicategory

-- section

-- open bicategory

-- variables {B : Type u} [bicategory.{w v} B]

-- -- local attribute [simp] Cat.bicategory

-- namespace oplax_functor

-- /--
-- The Yoneda embedding at the level of objects.
-- -/
-- @[simps]
-- def yoneda_obj (a : B) : oplax_functor B·µí·µñ Cat :=
-- { obj := Œª s, Cat.of (unop s ‚ü∂ a),
--   map := Œª s t f, (lcomp (unop t) (unop s) a).obj f,
--   map‚ÇÇ := Œª s t f g Œ≤, (lcomp (unop t) (unop s) a).map Œ≤,
--   map_id   := Œª s, (left_unitor_nat_iso (unop s) a).hom,
--   map_comp := Œª s t r (p : unop t ‚ü∂ unop s) (q : unop r ‚ü∂ unop t), (associator_nat_iso_right a q p).hom,
--   map_comp_naturality_left'  := by { intros, ext, apply associator_naturality_middle },
--   map_comp_naturality_right' := by { intros, ext, apply associator_naturality_left },
--   map‚ÇÇ_id'    := by { intros, ext, apply bicategory.whisker_right_id },
--   map‚ÇÇ_comp'  := by { intros, ext, apply bicategory.whisker_right_comp },
--   map‚ÇÇ_associator'  := by { intros, dsimp, ext, dsimp,
--     simp only [iso.refl_hom, strict.associator_eq_to_iso, nat_trans.id_app, eq_to_iso_refl],
--     erw comp_id, rw pentagon_inv_hom_hom_hom_hom },
--   map‚ÇÇ_left_unitor'   := by { intros, ext, dsimp,
--     simp only [iso.refl_hom, strict.left_unitor_eq_to_iso, triangle_assoc, nat_trans.id_app, eq_to_iso_refl],
--     erw comp_id },
--   map‚ÇÇ_right_unitor'  := by { intros, ext, dsimp,
--     simp only [iso.refl_hom, left_unitor_comp, strict.right_unitor_eq_to_iso, iso.hom_inv_id_assoc, nat_trans.id_app, assoc,
--   eq_to_iso_refl],
--   dsimp,
--   simp only [comp_id],
--   erw Cat.comp_obj,
--   dsimp only [Cat.bicategory],
--   dsimp,
--   rw comp_id } }

-- /--
-- The Yoneda embedding at the level of 1-morphisms.
-- -/
-- @[simps]
-- def yoneda_map {a b : B} (f : a ‚ü∂ b) : (yoneda_obj a) ‚ü∂ (yoneda_obj b) :=
-- { app := Œª s, (rcomp (unop s) a b).obj f,
--   naturality := Œª (s t : B·µí·µñ) (p : unop t ‚ü∂ unop s), (associator_nat_iso_middle p f).hom,
--   naturality_naturality' := by { intros, ext, apply associator_naturality_left },
--   naturality_id' := by { intros, ext, dsimp, simp only [left_unitor_comp, iso.hom_inv_id_assoc, comp_id] },
--   naturality_comp' := by { intros, ext, dsimp,
--     simp only [iso.refl_hom, strict.associator_eq_to_iso, iso.refl_inv, nat_trans.id_app, eq_to_iso_refl],
--     dsimp, simp only [id_comp, comp_id],
--     erw id_comp, rw pentagon } }

-- /--
-- The Yoneda embedding at the level of 2-morphisms.
-- -/
-- @[simps]
-- def yoneda_map‚ÇÇ {a b : B} {f g : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) :
--   (yoneda_map f) ‚ü∂ (yoneda_map g) :=
-- { app := Œª s,
--   { app := Œª h : unop s ‚ü∂ a, h ‚óÅ Œ∑,
--     naturality' := by { intros, dsimp, rw whisker_exchange } },
--   naturality' := by { intros, ext, dsimp, apply associator_naturality_right } }

-- @[simps]
-- def yoneda_map_id_aux (a : B) : yoneda_map (ùüô a) ‚ü∂ ùüô (yoneda_obj a) :=
-- oplax_nat_trans.modification.mk
--   (Œª s : B·µí·µñ, (right_unitor_nat_iso (unop s) a).hom)
--   (by { dsimp, intros, ext, dsimp, simp only [right_unitor_comp, comp_id] })

-- @[simps]
-- def yoneda_map_comp_aux (a b c : B) (f : a ‚ü∂ b) (g : b ‚ü∂ c) :
--   yoneda_map (f ‚â´ g) ‚ü∂ yoneda_map f ‚â´ yoneda_map g :=
-- oplax_nat_trans.modification.mk
--   (Œª s : B·µí·µñ, (associator_nat_iso_left (unop s) f g).inv)
--   (by { dsimp, intros, ext, dsimp, simp only [id_comp, comp_id], erw pentagon_inv_hom_hom_hom_inv })

-- /--
-- The Yoneda embedding as an oplax functor from `B` into 2-presheaves on `B`.
-- -/
-- @[simps]
-- def yoneda : oplax_functor B (oplax_functor B·µí·µñ Cat) :=
-- { obj := yoneda_obj,
--   map := Œª _ _, yoneda_map,
--   map‚ÇÇ := Œª _ _ _ _, yoneda_map‚ÇÇ,
--   map_id := yoneda_map_id_aux,
--   map_comp := yoneda_map_comp_aux,
--   map_comp_naturality_left'  := by { intros, ext, dsimp, apply associator_inv_naturality_middle },
--   map_comp_naturality_right' := by { intros, ext, dsimp, apply associator_inv_naturality_right },
--   map‚ÇÇ_id'    := by { intros, ext, dsimp, apply bicategory.whisker_left_id },
--   map‚ÇÇ_comp'  := by { intros, ext, dsimp, apply bicategory.whisker_left_comp },
--   map‚ÇÇ_associator'  := by { intros, ext, dsimp, simp only [pentagon_hom_inv_inv_inv_inv, comp_id] },
--   map‚ÇÇ_left_unitor'   := by { intros, ext, dsimp, simp only [triangle_assoc_comp_right, comp_id] },
--   map‚ÇÇ_right_unitor'  := by { intros, ext, dsimp, simp only [right_unitor_comp, iso.inv_hom_id_assoc, comp_id] } }

-- end oplax_functor

-- namespace pseudofunctor

-- /--
-- The Yoneda embedding at the level of objects.
-- -/
-- @[simps]
-- def yoneda_obj (a : B) : pseudofunctor B·µí·µñ Cat :=
-- { obj := Œª s, Cat.of (unop s ‚ü∂ a),
--   map := Œª s t f, (lcomp (unop t) (unop s) a).obj f,
--   map‚ÇÇ := Œª s t f g Œ≤, (lcomp (unop t) (unop s) a).map Œ≤,
--   map_id   := Œª s, (left_unitor_nat_iso (unop s) a).hom,
--   map_id_iso   := Œª s, (left_unitor_nat_iso (unop s) a),
--   map_comp := Œª s t r (p : unop t ‚ü∂ unop s) (q : unop r ‚ü∂ unop t), (associator_nat_iso_right a q p).hom,
--   map_comp_iso := Œª s t r p q, (associator_nat_iso_right a q p),
--   map_comp_naturality_left'  := by { intros, ext, apply associator_naturality_middle },
--   map_comp_naturality_right' := by { intros, ext, apply associator_naturality_left },
--   map‚ÇÇ_id'    := by { intros, ext, apply bicategory.whisker_right_id },
--   map‚ÇÇ_comp'  := by { intros, ext, apply bicategory.whisker_right_comp },
--   map‚ÇÇ_associator'  := by { intros, ext, dsimp, simp only [pentagon_inv_hom_hom_hom_hom, comp_id] },
--   map‚ÇÇ_left_unitor'   := by { intros, ext, dsimp, simp only [triangle_assoc, comp_id] },
--   map‚ÇÇ_right_unitor'  := by { intros, ext, dsimp, simp only [left_unitor_comp, iso.hom_inv_id_assoc, comp_id] } }

-- /--
-- The Yoneda embedding at the level of 1-morphisms.
-- -/
-- @[simps]
-- def yoneda_map {a b : B} (f : a ‚ü∂ b) : (yoneda_obj a) ‚ü∂ (yoneda_obj b) :=
-- { app := Œª s, (rcomp (unop s) a b).obj f,
--   naturality := Œª (s t : B·µí·µñ) (p : unop t ‚ü∂ unop s), (associator_nat_iso_middle p f).hom,
--   naturality_iso := Œª (s t : B·µí·µñ) (p : unop t ‚ü∂ unop s), associator_nat_iso_middle p f,
--   naturality_naturality' := by { intros, ext, apply associator_naturality_left },
--   naturality_id' := by { intros, ext, dsimp, simp only [left_unitor_comp, iso.hom_inv_id_assoc, comp_id] },
--   naturality_comp' := by { intros, ext, dsimp, simp only [id_comp, comp_id, pentagon] } }

-- /--
-- The Yoneda embedding at the level of 2-morphisms.
-- -/
-- @[simps]
-- def yoneda_map‚ÇÇ {a b : B} {f g : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) :
--   (yoneda_map f) ‚ü∂ (yoneda_map g) :=
-- { app := Œª s,
--   { app := Œª h : unop s ‚ü∂ a, h ‚óÅ Œ∑,
--     naturality' := by { intros, dsimp, rw whisker_exchange } },
--   naturality' := by { intros, ext, dsimp, apply associator_naturality_right } }

-- @[simps]
-- def yoneda_map_id_aux (a : B) : yoneda_map (ùüô a) ‚âÖ (ùüô (yoneda_obj a)) :=
-- pseudonat_trans.modification_iso.of_components
--   (Œª s : B·µí·µñ, (right_unitor_nat_iso (unop s) a))
--   (by { intros, ext, dsimp, simp only [right_unitor_comp, comp_id] })


-- @[simps]
-- def yoneda_map_comp_aux (a b c : B) (f : a ‚ü∂ b) (g : b ‚ü∂ c) :
--   yoneda_map (f ‚â´ g) ‚âÖ yoneda_map f ‚â´ yoneda_map g :=
-- pseudonat_trans.modification_iso.of_components
--   (Œª s : B·µí·µñ, (associator_nat_iso_left (unop s) f g).symm)
--   (by { dsimp, intros, ext, dsimp, simp only [pentagon_inv_hom_hom_hom_inv, id_comp, comp_id] })

-- /--
-- The Yoneda embedding as a pseudofunctor from `B` into 2-presheaves on `B`.
-- -/
-- @[simps]
-- def yoneda : pseudofunctor B (pseudofunctor B·µí·µñ Cat) :=
-- { obj := yoneda_obj,
--   map := Œª _ _, yoneda_map,
--   map‚ÇÇ := Œª _ _ _ _, yoneda_map‚ÇÇ,
--   map_id_iso := yoneda_map_id_aux,
--   map_id := Œª a, (yoneda_map_id_aux a).hom,
--   map_comp_iso := yoneda_map_comp_aux,
--   map_comp := Œª (a b c : B) (f : a ‚ü∂ b) (g : b ‚ü∂ c), (yoneda_map_comp_aux a b c f g).hom,
--   map_comp_naturality_left'  := by { intros, ext, dsimp, apply associator_inv_naturality_middle },
--   map_comp_naturality_right' := by { intros, ext, dsimp, apply associator_inv_naturality_right },
--   map‚ÇÇ_id'    := by { intros, ext, dsimp, apply bicategory.whisker_left_id },
--   map‚ÇÇ_comp'  := by { intros, ext, dsimp, apply bicategory.whisker_left_comp },
--   map‚ÇÇ_associator'  := by { intros, ext, dsimp, simp only [pentagon_hom_inv_inv_inv_inv, comp_id], },
--   map‚ÇÇ_left_unitor'   := by { intros, ext, dsimp, simp only [triangle_assoc_comp_right, comp_id]},
--   map‚ÇÇ_right_unitor'  := by { intros, ext, dsimp, simp only [right_unitor_comp, iso.inv_hom_id_assoc, comp_id] } }

-- end pseudofunctor

-- end

-- section
-- open bicategory pseudofunctor


-- variables
-- universes u‚ÇÅ u‚ÇÇ u‚ÇÉ

-- variables {B : Type u} [bicategory.{u u} B] {F : pseudofunctor B·µí·µñ Cat.{u u}}

-- set_option pp.universes false

-- variables (a : B·µí·µñ)

-- @[simps]
-- def yoneda_lemma_hom_app_aux (a : B·µí·µñ) :
--   ((yoneda.op.comp (yoneda_obj F)).obj a) ‚ü∂ (F.obj a) :=
-- { obj := Œª œÉ, (œÉ.app a).obj (ùüô (unop a)),
--   map := Œª œÉ œÑ Œì, (Œì.app a).app (ùüô (unop a)),
--   map_id' := by { intros, refl },
--   map_comp' := by { intros, refl } }

-- @[simps]
-- def yoneda_lemma_hom_naturality_aux (a b : B·µí·µñ)
--   (f : a ‚ü∂ b) :
--   (yoneda.op.comp (yoneda_obj F)).to_oplax_functor.map f ‚â´ yoneda_lemma_hom_app_aux b ‚âÖ
--     yoneda_lemma_hom_app_aux a ‚â´ F.to_oplax_functor.map f :=
-- nat_iso.of_components
--   (Œª œÉ, (œÉ.app b).map_iso (Œª_ f) ‚â™‚â´ ((œÉ.app b).map_iso (œÅ_ f)).symm ‚â™‚â´
--     (œÉ.naturality_iso f).app (ùüô (unop a)))
--   (Œª (œÉ œÑ : yoneda_obj (unop a) ‚ü∂ F) (Œì : œÉ ‚ü∂ œÑ), by
--   { simp only [functor.map_iso_inv, iso.app_hom, iso.symm_hom, functor.map_iso_hom, assoc, iso.trans_hom,
--     pseudonat_trans.naturality_iso_hom],
--     have naturality := congr_app (oplax_nat_trans.modification.naturality Œì f) (ùüô (unop a)),
--     dsimp only [Cat.bicategory] at ‚ä¢ naturality,
--     rw [‚Üênaturality, nat_trans.naturality_assoc, nat_trans.naturality_assoc] })

-- lemma yoneda_lemma_naturality_naturality_aux
--   (a b : B·µí·µñ)
--   (f g : a ‚ü∂ b)
--   (Œ∑ : f ‚ü∂ g) :
--   ((yoneda.op.comp (yoneda_obj F)).to_oplax_functor.map‚ÇÇ Œ∑ ‚ñ∑ yoneda_lemma_hom_app_aux b) ‚â´
--       (yoneda_lemma_hom_naturality_aux a b g).hom =
--     (yoneda_lemma_hom_naturality_aux a b f).hom ‚â´
--       (whisker_left (yoneda_lemma_hom_app_aux a) (F.to_oplax_functor.map‚ÇÇ Œ∑)) :=
-- begin
--   ext œÉ, simp only [assoc, nat_trans.comp_app, yoneda_lemma_hom_naturality_aux_hom_app],
--   have naturality := congr_app (œÉ.to_oplax_nat_trans.naturality_naturality Œ∑) (ùüô (unop a)),
--   dsimp [Cat.bicategory] at *, erw [‚Üênaturality],
--   simp only [‚Üêfunctor.map_comp_assoc],
--   rwa [left_unitor_naturality_assoc, right_unitor_inv_naturality]
-- end

-- lemma yoneda_lemma_naturality_id_aux
--   (a : B·µí·µñ) :
--   (yoneda_lemma_hom_naturality_aux a a (ùüô a)).hom ‚â´
--       (yoneda_lemma_hom_app_aux a ‚óÅ F.to_oplax_functor.map_id a) =
--     ((yoneda.op.comp (yoneda_obj F)).to_oplax_functor.map_id a ‚ñ∑
--          yoneda_lemma_hom_app_aux a) ‚â´
--       (Œª_ (yoneda_lemma_hom_app_aux a)).hom ‚â´
--         (œÅ_ (yoneda_lemma_hom_app_aux a)).inv :=
-- begin
--   ext œÉ, dsimp only [Cat.bicategory], simp only [functor.right_unitor_inv_app, functor.left_unitor_hom_app, whisker_right_app, whisker_left_app, assoc,
--   yoneda_lemma_hom_app_aux_map, comp_id, nat_trans.comp_app, yoneda_lemma_hom_naturality_aux_hom_app],
--   erw comp_id,
--   have naturality := congr_app (œÉ.to_oplax_nat_trans.naturality_id a) (ùüô _),
--   dsimp [Cat.bicategory] at *, simp only [comp_id, unitors_equal] at naturality,
--   rw naturality,
--   simp only [comp_id, ‚Üêfunctor.map_comp, unitors_equal, iso.hom_inv_id_assoc]
-- end

-- set_option profiler false

-- lemma yoneda_lemma_naturality_comp_aux
--   (a b c : B·µí·µñ)
--   (f : a ‚ü∂ b)
--   (g : b ‚ü∂ c) :
--   (yoneda_lemma_hom_naturality_aux a c (f ‚â´ g)).hom ‚â´
--       (yoneda_lemma_hom_app_aux a ‚óÅ F.map_comp f g) =
--     ((yoneda.op.comp (yoneda_obj F)).map_comp f g ‚ñ∑
--          yoneda_lemma_hom_app_aux c) ‚â´
--       (Œ±_ ((yoneda.op.comp (yoneda_obj F)).map f)
--            ((yoneda.op.comp (yoneda_obj F)).map g)
--            (yoneda_lemma_hom_app_aux c)).hom ‚â´
--         ((yoneda.op.comp (yoneda_obj F)).map f ‚óÅ
--              (yoneda_lemma_hom_naturality_aux b c g).hom) ‚â´
--           (Œ±_ ((yoneda.op.comp (yoneda_obj F)).map f)
--                (yoneda_lemma_hom_app_aux b)
--                (F.map g)).inv ‚â´
--             ((yoneda_lemma_hom_naturality_aux a b f).hom ‚ñ∑
--                  F.map g) ‚â´
--               (Œ±_ (yoneda_lemma_hom_app_aux a) (F.map f)
--                  (F.map g)).hom :=
-- begin
--   ext œÉ, dsimp only [Cat.bicategory], simp only [functor.associator_hom_app, functor.associator_inv_app, whisker_right_app, whisker_left_app, assoc, id_comp,
--   yoneda_lemma_hom_app_aux_map, comp_id, functor.map_comp, nat_trans.comp_app, yoneda_lemma_hom_naturality_aux_hom_app],
--   have naturality := congr_app (œÉ.to_oplax_nat_trans.naturality_comp f g) (ùüô _),
--   dsimp [Cat.bicategory] at *, simp only [id_comp, comp_id] at naturality,
--   simp only [left_unitor_comp, assoc, id_comp, functor.map_comp, right_unitor_comp_inv],
--   -- erw [left_unitor_comp_assoc, iso.hom_inv_id_assoc, right_unitor_comp_inv,
--   -- triangle_assoc_comp_right_inv],
--   -- simp only [category_theory.category.assoc, category_theory.functor.map_comp],
--   rw naturality,
--   erw ‚Üênat_trans.naturality_assoc,
--   erw ‚Üênat_trans.naturality_assoc,
--   dsimp,
--   simp only [‚Üêfunctor.map_comp_assoc],
--   simp only [triangle_assoc, inv_hom_whisker_right_assoc, comp_id, iso.inv_hom_id],
-- end

-- variables (F)

-- @[simps]
-- def yoneda_lemma_hom : pseudonat_trans (yoneda.op.comp (yoneda_obj F)) F :=
-- { app := yoneda_lemma_hom_app_aux,
--   naturality_iso := yoneda_lemma_hom_naturality_aux,
--   naturality := Œª a b f, (yoneda_lemma_hom_naturality_aux a b f).hom,
--   naturality_iso_hom' := by { intros, refl },
--   naturality_naturality' := yoneda_lemma_naturality_naturality_aux,
--   naturality_id' := yoneda_lemma_naturality_id_aux,
--   naturality_comp' := yoneda_lemma_naturality_comp_aux }

-- variables {F}

-- @[simps]
-- def yoneda_lemma_inv_pseudonat_trans_app_aux
--   {a : B·µí·µñ}
--   (u : F.to_oplax_functor.obj a)
--   (s : B·µí·µñ) :
--   (yoneda_obj (unop a)).to_oplax_functor.obj s ‚ü∂ F.to_oplax_functor.obj s :=
-- { obj := Œª g : a ‚ü∂ s, (F.map g).obj u,
--   map := Œª (g h : a ‚ü∂ s) (Œ≤ : g ‚ü∂ h), (F.map‚ÇÇ Œ≤).app u,
--   map_id'     := by { intros, simp only [nat_trans.id_app, oplax_functor.map‚ÇÇ_id] },
--   map_comp'   := by { intros, simp only [nat_trans.comp_app, oplax_functor.map‚ÇÇ_comp] } }

-- @[simps]
-- def yoneda_lemma_inv_pseudonat_trans_naturality_aux
--   {a : B·µí·µñ}
--   (u : F.to_oplax_functor.obj a)
--   {s t : B·µí·µñ} (p : s ‚ü∂ t) :
--     (yoneda_obj (unop a)).to_oplax_functor.map p ‚â´ yoneda_lemma_inv_pseudonat_trans_app_aux u t ‚âÖ
--       yoneda_lemma_inv_pseudonat_trans_app_aux u s ‚â´ F.to_oplax_functor.map p :=
--  nat_iso.of_components
--   (Œª g : a ‚ü∂ s, ((F.map_comp_iso g p).app u))
--   (Œª (g h : a ‚ü∂ s) (Œ≤ : g ‚ü∂ h), by
--   { dsimp [Cat.bicategory], simp only [map_comp_iso_hom, ‚Üênat_trans.comp_app],
--     erw oplax_functor.map_comp_naturality_left, refl })

-- @[simps]
-- def yoneda_lemma_inv_pseudonat_trans {a : B·µí·µñ} (u : F.obj a) :
--   pseudonat_trans (yoneda_obj (unop a)) F :=
-- { app := yoneda_lemma_inv_pseudonat_trans_app_aux u,
--   naturality_iso := Œª s t, yoneda_lemma_inv_pseudonat_trans_naturality_aux u,
--   -- nat_iso.of_components
--   --   (Œª g : a ‚ü∂ s, ((F.map_comp_iso g p).app u).symm)
--   --   (Œª (g h : a ‚ü∂ s) (Œ≤ : g ‚ü∂ h), by
--   --   { dsimp, simp only [‚Üêwhisker_right_app, ‚Üênat_trans.comp_app],
--   --     rw F.map_comp_inv_naturality_left, refl }),
--   naturality := Œª s t p, (yoneda_lemma_inv_pseudonat_trans_naturality_aux u p).hom,
--   naturality_naturality' := Œª (s t : B·µí·µñ) (p q : s ‚ü∂ t) (Œ≤ : p ‚ü∂ q), by
--   { ext (g : a ‚ü∂ s),
--     dsimp [Cat.bicategory],
--     simp only [yoneda_lemma_inv_pseudonat_trans_naturality_aux_hom_app],
--     simp only [‚Üêwhisker_left_app, ‚Üênat_trans.comp_app],
--     erw oplax_functor.map_comp_naturality_right, refl },
--   naturality_id' := Œª s : B·µí·µñ, by
--   { ext (g : a ‚ü∂ s),
--     dsimp [Cat.bicategory],
--     simp only [yoneda_lemma_inv_pseudonat_trans_naturality_aux_hom_app],
--     simp only [comp_id],
--     simp only [category.id_comp, ‚Üêwhisker_left_app, ‚Üênat_trans.comp_app],
--     erw [oplax_functor.map‚ÇÇ_right_unitor],
--     simp only [strict.right_unitor_eq_to_iso, eq_to_hom_app, whisker_left_app, eq_to_hom_refl, eq_to_iso.hom, comp_id,
--       nat_trans.comp_app], refl, },
--   naturality_comp' := Œª (s t r : B·µí·µñ) (p : s ‚ü∂ t) (q : t ‚ü∂ r), by
--   { ext (g : a ‚ü∂ s), dsimp [Cat.bicategory],
--     simp only [yoneda_lemma_inv_pseudonat_trans_naturality_aux_hom_app],
--     simp only [id_comp, comp_id, ‚Üêwhisker_left_app, ‚Üêwhisker_right_app, ‚Üênat_trans.comp_app],
--     erw oplax_functor.map‚ÇÇ_associator_inv,
--     simp only [strict.associator_eq_to_iso, iso.refl_inv, whisker_left_app,
--       eq_to_iso_refl], erw comp_id, refl } }

-- @[simps]
-- def yoneda_lemma_inv_modification {a : B·µí·µñ} {u v : F.obj a} (k : u ‚ü∂ v) :
--   (yoneda_lemma_inv_pseudonat_trans u) ‚ü∂ (yoneda_lemma_inv_pseudonat_trans v) :=
-- { app := Œª s : B·µí·µñ,
--   { app := Œª g : a ‚ü∂ s, (F.map g).map k,
--     naturality' := by { intros, dsimp, rw nat_trans.naturality } },
--   naturality' := by { intros, ext, dsimp, rw nat_trans.naturality, refl } }

-- @[simps]
-- def yoneda_lemma_inv_functor (a : B·µí·µñ) : ‚Ü•(F.obj a) ‚•§ pseudonat_trans (yoneda_obj (unop a)) F :=
-- { obj := Œª u : F.obj a, yoneda_lemma_inv_pseudonat_trans u,
--   map := Œª (u v : F.obj a) (k : u ‚ü∂ v), yoneda_lemma_inv_modification k,
--   map_id'     := by { intros, ext, dsimp, rw functor.map_id },
--   map_comp'   := by { intros, ext, dsimp, rw functor.map_comp } }

-- @[simps]
-- def yoneda_lemma_inv_iso {a b : B·µí·µñ} (f : a ‚ü∂ b) (u : F.obj a) :
--   ((yoneda.op.comp (yoneda_obj F)).map f).obj (yoneda_lemma_inv_pseudonat_trans u) ‚âÖ
--     yoneda_lemma_inv_pseudonat_trans ((F.map f).obj u) := by
-- { apply modification_iso.of_components (Œª s : B·µí·µñ, _) _,
--   apply nat_iso.of_components (Œª g : b ‚ü∂ s, _) _,
--   apply iso.app (F.map_comp f g).symm u,
--   { intros g h Œ≤, dsimp, simp only [‚Üêwhisker_left_app, ‚Üênat_trans.comp_app],
--     erw F.map_comp_inv_naturality_right, refl },
--   { intros s t p, ext (g : b ‚ü∂ s),
--     dsimp, simp,
--     simp only [‚Üêwhisker_left_app, ‚Üêwhisker_right_app, ‚Üênat_trans.comp_app],
--     erw [F.map‚ÇÇ_associator_inv_eq_assoc, iso.hom_inv_id_assoc],
--     dsimp, simp only [‚Üêfunctor.map_comp, ‚Üênat_trans.comp_app],
--     erw [iso.hom_inv_id, functor.map_id], simp, refl } }

-- variables (F)

-- section aux
-- variables {a b c : B·µí·µñ}

-- lemma yoneda_lemma_inv_aux‚ÇÅ (f : unop b ‚ü∂ unop a) (u : F.obj a)
--   {s : B·µí·µñ} {g h : unop s ‚ü∂ unop b} (Œ≤ : g ‚ü∂ h) :
--   (((yoneda_lemma_inv_functor b).obj ((F.map f).obj u)).app s).map Œ≤ ‚â´
--       (F.map_comp f h).hom.app u =
--     (F.map_comp f g).hom.app u ‚â´
--       (((yoneda_lemma_inv_functor a).obj u).app s).map (Œ≤ ‚ñ∑ f) :=
-- begin
--   dsimp [yoneda_lemma_inv_functor], simp only [‚Üêwhisker_left_app, ‚Üênat_trans.comp_app],
--   erw F.map_comp_naturality_right, refl,
-- end

-- lemma yoneda_lemma_inv_aux‚ÇÇ (f : unop b ‚ü∂ unop a) (u : F.obj a)
--   {s t : B·µí·µñ} (p : unop t ‚ü∂ unop s) (g : unop s ‚ü∂ unop b) :
-- (F.map_comp f (g ‚â´ p)).hom.app u ‚â´
--   ((((yoneda.op.comp (yoneda_obj F)).map f).obj ((yoneda_lemma_inv_functor a).obj u)).naturality p).hom.app g
--   = (((yoneda_lemma_inv_functor b).obj ((F.map f).obj u)).naturality p).hom.app g ‚â´
--       (F.map p).map ((F.map_comp f g).hom.app u) :=
-- begin
--   dsimp [yoneda_lemma_inv_functor], simp,
--   simp only [‚Üêwhisker_left_app, ‚Üêwhisker_right_app, ‚Üênat_trans.comp_app],
--   erw [F.map‚ÇÇ_associator_inv_eq_assoc, iso.hom_inv_id_assoc,
--       iso.hom_inv_id, category.comp_id],
--   simp, erw category.id_comp
-- end

-- lemma yoneda_lemma_inv_aux‚ÇÉ (f : unop b ‚ü∂ unop a) {u v : F.obj a}
--   (k : u ‚ü∂ v) {s : B·µí·µñ} (g : b ‚ü∂ s) :
-- (((yoneda_lemma_inv_functor b).map ((F.map f).map k)).app s).app g ‚â´
--   (F.map_comp f g).hom.app v
--   = (F.map_comp f g).hom.app u ‚â´
--       (((yoneda_lemma_inv_functor a).map k).app s).app (g ‚â´ f) :=
-- begin
--   erw ‚Üênat_trans.naturality, refl
-- end

-- lemma yoneda_lemma_inv_aux‚ÇÑ (f g : unop b ‚ü∂ unop a) (Œ≤ : f ‚ü∂ g) (u : F.obj a)
--   {s : B·µí·µñ} (h : unop s ‚ü∂ unop b) :
-- (((yoneda_lemma_inv_functor b).map ((F.map‚ÇÇ Œ≤).app u)).app s).app h ‚â´
--   (F.map_comp g h).hom.app u
--   = (F.map_comp f h).hom.app u ‚â´
--       (((yoneda_lemma_inv_functor a).obj u).app s).map (h ‚óÅ Œ≤) :=
-- begin
--   dsimp [yoneda_lemma_inv_functor],
--   simp only [‚Üêwhisker_right_app, ‚Üênat_trans.comp_app],
--   erw F.map_comp_naturality_left, refl
-- end

-- lemma yoneda_lemma_inv_aux‚ÇÖ (u : F.obj a) {s : B·µí·µñ} (g : unop s ‚ü∂ unop a) :
-- (((yoneda_lemma_inv_functor a).map ((F.map_id a).hom.app u)).app s).app g ‚â´
--   (F.map_comp (ùüô a) g).hom.app u
--   = ùüô _ ‚â´ ùüô _ ‚â´
--     ((((yoneda.op.comp (yoneda_obj F)).map_id a).hom.app
--       ((yoneda_lemma_inv_functor a).obj u)).app s).app g :=
-- begin
-- dsimp [yoneda_lemma_inv_functor],simp,
--     simp only [‚Üêwhisker_left_app, ‚Üêwhisker_right_app, ‚Üênat_trans.comp_app],
--     erw F.map‚ÇÇ_left_unitor_inv_eq,
--     dsimp, erw category.id_comp, refl
-- end

-- lemma yoneda_lemma_inv_aux‚ÇÜ (f : unop b ‚ü∂ unop a) (g : unop c ‚ü∂ unop b)
--   (u : F.obj a) {s : B·µí·µñ} (h : unop s ‚ü∂ unop c) :
-- (((yoneda_lemma_inv_functor c).map ((F.map_comp f g).hom.app u)).app s).app h ‚â´
--   (F.map_comp (f ‚â´ g) h).hom.app u
-- = ùüô _ ‚â´ (F.map_comp g h).hom.app ((F.map f).obj u) ‚â´
--     ùüô _ ‚â´ (F.map_comp f (g ‚â´ h)).hom.app u ‚â´
--       ùüô _ ‚â´ ((((yoneda.op.comp (yoneda_obj F)).map_comp f g).hom.app
--                 ((yoneda_lemma_inv_functor a).obj u)).app s).app h :=
-- begin
--   dsimp [yoneda_lemma_inv_functor], simp,
--   simp only [‚Üêwhisker_left_app, ‚Üêwhisker_right_app, ‚Üênat_trans.comp_app],
--   erw [F.map‚ÇÇ_associator_inv_eq, iso.hom_inv_id_assoc], simp,
--   erw category.id_comp
-- end

-- end aux

-- @[simps]
-- def yoneda_lemma_inv : pseudonat_trans F (yoneda.op.comp (yoneda_obj F)) :=
-- { app := Œª a : B·µí·µñ, yoneda_lemma_inv_functor a,
--   naturality := Œª (a b : B·µí·µñ) (f : a ‚ü∂ b), by
--   { apply nat_iso.of_components (Œª u : F.obj a, _) _,
--     apply modification_iso.of_components (Œª s : B·µí·µñ, _) _,
--     apply nat_iso.of_components (Œª g : b ‚ü∂ s, _) _,
--     apply iso.app (F.map_comp f g) u,
--     { intros, dsimp only, apply yoneda_lemma_inv_aux‚ÇÅ },
--     { intros, ext, apply yoneda_lemma_inv_aux‚ÇÇ },
--     { intros, ext, apply yoneda_lemma_inv_aux‚ÇÉ } },
--   naturality_naturality' := by { intros, ext, apply yoneda_lemma_inv_aux‚ÇÑ },
--   naturality_id' := by { intros, ext, apply yoneda_lemma_inv_aux‚ÇÖ },
--   naturality_comp' := by { intros, ext, apply yoneda_lemma_inv_aux‚ÇÜ } }

-- section aux
-- variables {a b : B·µí·µñ} (f : unop b ‚ü∂ unop a)
-- (œÉ : pseudonat_trans (yoneda_obj (unop a)) F)


-- lemma yoneda_lemma_aux‚ÇÅ {s : B·µí·µñ} {g h : unop s ‚ü∂ unop a} (Œ≤ : g ‚ü∂ h) :
--   (œÉ.app s).map Œ≤ ‚â´ (œÉ.app s).map (œÅ_ h).inv ‚â´ (œÉ.naturality h).hom.app (ùüô (unop a))
--   = ((œÉ.app s).map (œÅ_ g).inv ‚â´ (œÉ.naturality g).hom.app (ùüô (unop a))) ‚â´
--       ((((yoneda_lemma_inv F).app a).obj (((yoneda_lemma_hom F).app a).obj œÉ)).app s).map Œ≤ :=
-- begin
--   dsimp, simp only [‚Üêfunctor.map_comp_assoc],
--   rw right_unitor_inv_naturality,
--   simp,
--   have naturality := nat_trans.congr_app (œÉ.naturality_naturality Œ≤) (ùüô _),
--   dsimp at naturality,
--   simp only [‚Üêwhisker_left_app, ‚Üêwhisker_right_app, ‚Üênat_trans.comp_app,
--     ‚Üêfunctor.map_comp],
--   erw naturality, refl
-- end

-- lemma yoneda_lemma_aux‚ÇÇ {s t : B·µí·µñ} (p : unop t ‚ü∂ unop s) (g : unop s ‚ü∂ unop a) :
-- ((œÉ.app t).map (œÅ_ (p ‚â´ g)).inv ‚â´ (œÉ.naturality (g ‚â´ p)).hom.app (ùüô (unop a))) ‚â´
--   ((((yoneda_lemma_inv F).app a).obj
--     (((yoneda_lemma_hom F).app a).obj œÉ)).naturality p).hom.app g
-- = (œÉ.naturality p).hom.app g ‚â´ (F.map p).map ((œÉ.app s).map (œÅ_ g).inv ‚â´
--     (œÉ.naturality g).hom.app (ùüô (unop a))) :=
-- begin
--   dsimp, simp,
--   have comp := nat_trans.congr_app (œÉ.naturality_comp g p) (ùüô (unop a)),
--   have naturality := ((œÉ.naturality p).hom.naturality _),
--   dsimp at comp naturality, simp at comp,
--   slice_rhs 1 2 { erw ‚Üênaturality },
--   slice_lhs 2 3 { erw comp },
--   simp, erw category.comp_id
-- end

-- lemma yoneda_lemma_aux‚ÇÉ {œÉ œÑ : pseudonat_trans (yoneda_obj (unop a)) F}
--   (Œ¶ : œÉ ‚ü∂ œÑ) {s : B·µí·µñ} (g : unop s ‚ü∂ unop a) :
-- (Œ¶.app s).app g ‚â´ (œÑ.app s).map (œÅ_ g).inv ‚â´ (œÑ.naturality g).hom.app (ùüô (unop a))
-- = ((œÉ.app s).map (œÅ_ g).inv ‚â´ (œÉ.naturality g).hom.app (ùüô (unop a))) ‚â´
--     ((((yoneda_lemma_inv F).app a).map (((yoneda_lemma_hom F).app a).map Œ¶)).app s).app g :=
-- begin
--   dsimp, simp,
--   erw ‚Üênat_trans.naturality_assoc,
--   have naturality := nat_trans.congr_app (Œ¶.naturality g) (ùüô _),
--   dsimp at naturality,
--   erw naturality
-- end

-- lemma yoneda_lemma_aux‚ÇÑ {s : B·µí·µñ} (g : unop s ‚ü∂ unop b) :
-- ((œÉ.app s).map ((œÅ_ g).inv ‚ñ∑ f) ‚â´
--   ((((yoneda.op.comp (yoneda_obj F)).map f).obj œÉ).naturality g).hom.app (ùüô (unop b))) ‚â´ ùüô _ ‚â´
--     ((((yoneda_lemma_inv F).app b).map
--       (((yoneda_lemma_hom F).naturality f).hom.app œÉ)).app s).app g ‚â´ ùüô _ ‚â´
--         ((((yoneda_lemma_inv F).naturality f).hom.app
--           (((yoneda_lemma_hom F).app a).obj œÉ)).app s).app g ‚â´ ùüô _
-- = (ùüô _ ‚â´ ùüô _) ‚â´
--     (œÉ.app s).map (œÅ_ (g ‚â´ f)).inv ‚â´
--       (œÉ.naturality (f ‚â´ g)).hom.app (ùüô (unop a)) :=
-- begin
--   dsimp, simp,
--   have comp := nat_trans.congr_app (œÉ.naturality_comp f g) (ùüô (unop a)),
--   dsimp at comp, simp at comp,
--   erw comp,
--   simp only [‚Üêcategory.assoc], congr' 2, simp only [category.assoc],
--   simp only [‚Üêfunctor.map_comp],
--   erw ‚Üênat_trans.naturality,
--   simp,
--   simp only [‚Üêfunctor.map_comp_assoc],
--   erw triangle_assoc,
--   simp
-- end

-- lemma yoneda_lemma_aux‚ÇÖ {u v : F.obj a} (k :u ‚ü∂ v) :
-- ((yoneda_lemma_hom F).app a).map (((yoneda_lemma_inv F).app a).map k) ‚â´ (F.map_id a).inv.app v
-- = (F.map_id a).inv.app u ‚â´ k :=
-- begin
--   dsimp,
--   simp [nat_trans.naturality]
-- end

-- lemma yoneda_lemma_aux‚ÇÜ (f : unop b ‚ü∂ unop a) (u : F.obj a) :
-- (F.map_id b).inv.app ((F.map f).obj u) ‚â´ ùüô _ ‚â´ ùüô _
-- = (ùüô _ ‚â´
--   ((yoneda_lemma_hom F).app b).map
--     (((yoneda_lemma_inv F).naturality f).hom.app u) ‚â´ ùüô _ ‚â´
--       ((yoneda_lemma_hom F).naturality f).hom.app
--         (((yoneda_lemma_inv F).app a).obj u) ‚â´ ùüô _) ‚â´
--           (F.map f).map ((F.map_id a).inv.app u) :=
-- begin
--   dsimp, simp,
--   simp only [‚Üêwhisker_left_app, ‚Üêwhisker_right_app, ‚Üênat_trans.comp_app],
--   erw [F.map‚ÇÇ_left_unitor_inv_eq_assoc, F.map‚ÇÇ_right_unitor_eq_assoc,
--       iso.hom_inv_id_assoc, iso.hom_inv_id_assoc, iso.hom_inv_id_assoc],
--   simp, simp only [‚Üêfunctor.map_comp, ‚Üênat_trans.comp_app],
--   erw iso.hom_inv_id,
--   simp,
--   erw category.comp_id
-- end

-- end aux

-- /--
-- The Yoneda lemma. It is an equivalence between `yoneda.op.comp (yoneda_obj F)` and `F` in
-- the bicategory `pseudofunctor B·µí·µñ Cat`.
-- -/
-- def yoneda_lemma : bicategory.equivalence (yoneda.op.comp (yoneda_obj F)) F :=
-- { hom := yoneda_lemma_hom F,
--   inv := yoneda_lemma_inv F,
--   unit_iso := by
--   { apply modification_iso.of_components (Œª a : B·µí·µñ, _) _,
--     apply nat_iso.of_components (Œª œÉ : pseudonat_trans (yoneda_obj (unop a)) F, _) _,
--     apply modification_iso.of_components (Œª s : B·µí·µñ, _) _,
--     apply nat_iso.of_components (Œª g : a ‚ü∂ s, _) _,
--     exact (œÉ.app s).map_iso (Œª_ g).symm ‚â™‚â´ (œÉ.naturality g).app (ùüô (unop a)),
--     { intros, dsimp only, apply yoneda_lemma_aux‚ÇÅ, },
--     { intros, ext, apply yoneda_lemma_aux‚ÇÇ },
--     { intros, ext, apply yoneda_lemma_aux‚ÇÉ },
--     { intros, ext, apply yoneda_lemma_aux‚ÇÑ } },
--   counit_iso := by
--   { apply modification_iso.of_components (Œª a : B·µí·µñ, _) _,
--     apply nat_iso.of_components (Œª u : F.obj a, _) _,
--     exact (F.map_id a).symm.app u,
--     { intros, dsimp only, apply yoneda_lemma_aux‚ÇÖ },
--     { intros, ext, apply yoneda_lemma_aux‚ÇÜ } } }

-- end

-- end category_theory
