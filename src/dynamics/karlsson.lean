/-
Copyright (c) 2021 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import analysis.fekete
import analysis.inner_product_space.dual
import tactic.by_contra
import analysis.normed_space.dual

/-!
# Karlsson's proof of the existence of an asymptotic vector for semicontractions
-/

noncomputable theory
open_locale topological_space
open filter normed_space metric

notation `‚ü™`x`, `y`‚ü´` := @inner ‚Ñù _ _ x y


variables {Œ± Œ≤ : Type*} [metric_space Œ±] [metric_space Œ≤]

lemma exists_high_score (u : ‚Ñï ‚Üí ‚Ñù) (hu : tendsto u at_top at_top) (N : ‚Ñï) :
  ‚àÉ n ‚â• N, ‚àÄ m ‚â§ n, u m ‚â§ u n :=
begin
  by_contra' hN,
  let M := (finset.image u (finset.range (N+1))).max' (by simp),
  have A : ‚àÄ n, u n ‚â§ M,
  { assume n,
    induction n using nat.strong_induction_on with n IH,
    rcases le_total n N with hnN|hNn,
    { apply finset.le_max',
      simp,
      exact ‚ü®n, by linarith, rfl‚ü© },
    { obtain ‚ü®m, m_le_n, hm‚ü© : ‚àÉ (m : ‚Ñï), m ‚â§ n ‚àß u n < u m := hN n hNn,
      have m_lt_n : m < n,
      { apply lt_of_le_of_ne m_le_n,
        rintros rfl,
        exact lt_irrefl _ hm },
      apply hm.le.trans (IH _ m_lt_n) } },
  obtain ‚ü®n, hn‚ü© : ‚àÉ n, M + 1 ‚â§ u n := (filter.tendsto_at_top.mp hu (M + 1)).exists,
  show false, by linarith [A n],
end

/-- A semicontraction between two metric spaces is a map that does not increase distances. -/
def semicontraction (f : Œ± ‚Üí Œ≤) :=
‚àÄ x y, dist (f x) (f y) ‚â§ dist x y

namespace semicontraction

lemma comp {Œ≥ : Type*} [metric_space Œ≥] {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤}
  (hg : semicontraction g) (hf : semicontraction f) :
  semicontraction (g ‚àò f) :=
Œª x y, (hg (f x) (f y)).trans (hf x y)

lemma iterate {f : Œ± ‚Üí Œ±} (h : semicontraction f) (n : ‚Ñï) :
  semicontraction (f ^[n]) :=
begin
  induction n with n IH,
  { simp [semicontraction] },
  { simp [IH.comp h] }
end

variables {E : Type*} [inner_product_space ‚Ñù E] [finite_dimensional ‚Ñù E]
  {f : E ‚Üí E} (h : semicontraction f)
include h

/-- A convenient notation for the distance between `0` and `f^n 0`. -/
def u (n : ‚Ñï) : ‚Ñù := dist (0 : E) (f^[n] 0)

lemma u_subadditive : subadditive h.u :=
begin
  assume m n,
  calc h.u (m + n) = dist (0 : E) (f^[m + n] 0) : rfl
  ... ‚â§ dist (0 : E) (f^[m] 0) + dist (f^[m] 0) (f^[m+n] 0) : dist_triangle _ _ _
  ... = dist (0 : E) (f^[m] 0) + dist (f^[m] 0) (f^[m] (f^[n] 0)) :
    by simp [function.iterate_add_apply]
  ... ‚â§ dist (0 : E) (f^[m] 0) + dist (0 : E) (f^[n] 0) :
    add_le_add le_rfl (h.iterate _ _ _)
  ... = h.u m + h.u n : rfl
end

/-- `h.l` is such that `h.u n` grows like `n * h.l`. -/
def l := h.u_subadditive.lim

lemma tendsto_lim : tendsto (Œª n, h.u n / n) at_top (ùìù h.l) :=
begin
  have B : bdd_below (set.range (Œª (n : ‚Ñï), h.u n / ‚Üën)),
  { refine ‚ü®0, Œª x, _‚ü©,
    simp,
    rintros n rfl,
    simp [u, div_nonneg] },
  exact h.u_subadditive.tendsto_lim B,
end

lemma l_nonneg : 0 ‚â§ h.l :=
ge_of_tendsto' h.tendsto_lim (Œª n, div_nonneg dist_nonneg (nat.cast_nonneg _))

lemma tendsto_sub_at_top {w : ‚Ñù} (hw : w < h.l) :
  tendsto (Œª (n : ‚Ñï), h.u n - n * w) at_top at_top :=
begin
  have A : tendsto (Œª n, h.u n / n - w) at_top (ùìù (h.l - w)) :=
    h.tendsto_lim.sub tendsto_const_nhds,
  have : tendsto (Œª (n : ‚Ñï), (h.u n / n - w) * n) at_top at_top,
  { have I : 0 < h.l - w, by linarith,
    apply A.mul_at_top I,
    exact tendsto_coe_nat_at_top_at_top }, -- library_search
  apply tendsto.congr' _ this,
  apply eventually_at_top.2 ‚ü®1, Œª n hn, _‚ü©,
  have n_ne_zero : n ‚â† 0 := (zero_lt_one.trans_le hn).ne',
  field_simp [n_ne_zero],
end

lemma exists_dual_up_to_of_lt {w : ‚Ñù} (hw : w < h.l) (N : ‚Ñï) :
  ‚àÉ (v : dual ‚Ñù E), ‚à•v‚à• ‚â§ 1 ‚àß ‚àÄ i ‚â§ N, v (f^[i] 0) ‚â§ - i * w :=
begin
  obtain ‚ü®n, Nn, hn‚ü© : ‚àÉ n ‚â• N, ‚àÄ m ‚â§ n, h.u m - m * w ‚â§ h.u n - n * w :=
    exists_high_score _ (h.tendsto_sub_at_top hw) N,
  obtain ‚ü®v, vnorm, hv‚ü© : ‚àÉ (v : dual ‚Ñù E), ‚à•v‚à• ‚â§ 1 ‚àß v (-(f^[n] 0)) = ‚à•-(f^[n] 0)‚à• :=
    exists_dual_vector'' ‚Ñù (-(f^[n] 0)),
  refine ‚ü®v, vnorm, Œª i hi, _‚ü©,
  have A : i ‚â§ n := hi.trans Nn,
  show v (f^[i] 0) ‚â§ -i * w, from calc
  v (f^[i] 0) = v (f^[i] 0 - (f^[n]) 0) - v (- (f^[n] 0)) :
    by simp only [continuous_linear_map.map_neg, sub_add_cancel, continuous_linear_map.map_sub,
                  sub_neg_eq_add] -- squeeze_simp
  ... ‚â§ 1 * ‚à•(f^[i]) 0 - (f^[n]) 0‚à• - ‚à•-(f^[n]) 0‚à• :
    begin
      rw hv,
      refine sub_le_sub ((le_abs_self _).trans _) le_rfl,
      rw ‚Üê real.norm_eq_abs,
      exact v.le_of_op_norm_le vnorm _,
    end
  ... = dist (f^[i] 0) (f^[i] (f^[n-i] 0)) - dist 0 (f^[n] 0) :
    by rw [‚Üê function.iterate_add_apply, one_mul, dist_eq_norm, dist_eq_norm, zero_sub,
           ‚Üê nat.add_sub_assoc A, nat.add_sub_cancel_left]
  ... ‚â§ dist 0 (f^[n-i] 0) - dist 0 (f^[n] 0) : sub_le_sub (h.iterate i _ _) le_rfl
  ... = h.u (n-i) - h.u n : rfl
  ... ‚â§ - n * w + (n-i : ‚Ñï) * w : by linarith [hn (n-i) (nat.sub_le n i)]
  ... = - i * w : by { rw [nat.cast_sub A], ring }
end

lemma exists_dual : ‚àÉ (v : dual ‚Ñù E), ‚à•v‚à• ‚â§ 1 ‚àß ‚àÄ i, v (f^[i] 0) ‚â§ -i * h.l :=
begin
  obtain ‚ü®w, -, w_lt, w_lim‚ü© : ‚àÉ (w : ‚Ñï ‚Üí ‚Ñù), strict_mono w ‚àß (‚àÄ (n : ‚Ñï), w n < h.l)
    ‚àß tendsto w at_top (ùìù h.l) := exists_seq_strict_mono_tendsto _,
  have : ‚àÄ n, ‚àÉ (y : dual ‚Ñù E), ‚à•y‚à• ‚â§ 1 ‚àß ‚àÄ i ‚â§ n, y (f^[i] 0) ‚â§ - i * w n :=
    Œª n, h.exists_dual_up_to_of_lt (w_lt n) n,
  choose y hy using this,
  obtain ‚ü®v, v_mem, œÜ, œÜ_mono, œÜlim‚ü© : ‚àÉ v ‚àà closed_ball (0 : dual ‚Ñù E) 1, ‚àÉ (œÜ : ‚Ñï ‚Üí ‚Ñï),
    strict_mono œÜ ‚àß tendsto (y ‚àò œÜ) at_top (ùìù v),
  { -- dual ‚Ñù E est propre
    refine is_compact.tendsto_subseq (proper_space.is_compact_closed_ball _ _) _,
    assume n,
    simp [(hy n).1] },
  refine ‚ü®v, by simpa using v_mem, Œª i, _‚ü©,
  have A : tendsto (Œª n, ((y ‚àò œÜ) n) (f^[i] 0)) at_top (ùìù (v (f^[i] 0))) :=
    ((is_bounded_bilinear_map_apply.is_bounded_linear_map_left (f^[i] 0)).continuous.tendsto _)
      .comp œÜlim,
  have B : tendsto (Œª n, -(i : ‚Ñù) * w (œÜ n)) at_top (ùìù (- i * h.l)) :=
    (tendsto_const_nhds.mul w_lim).comp œÜ_mono.tendsto_at_top,
  have C : ‚àÄ·∂† n in at_top, ((y ‚àò œÜ) n) (f^[i] 0) ‚â§ - i * w (œÜ n),
  { apply eventually_at_top.2 ‚ü®i, Œª n hn, _‚ü©,
    apply (hy (œÜ n)).2 i,
    exact le_trans hn (œÜ_mono.id_le n) },
  exact le_of_tendsto_of_tendsto A B C
end

lemma exists_asymp_vector :
  ‚àÉ (v : E), ‚à•v‚à• ‚â§ 1 ‚àß ‚àÄ (i : ‚Ñï), (i : ‚Ñù) * h.l ‚â§ ‚ü™v, (f^[i] 0)‚ü´ :=
begin
  obtain ‚ü®v', v'_norm, hv'‚ü© : ‚àÉ (v' : dual ‚Ñù E), ‚à•v'‚à• ‚â§ 1 ‚àß ‚àÄ i, v' (f^[i] 0) ‚â§ -i * h.l :=
    h.exists_dual,
  let v := (inner_product_space.to_dual ‚Ñù E).symm (-v'),
  refine ‚ü®v, by simpa using v'_norm, Œª i, _‚ü©,
  simp [v],
  linarith [hv' i]
end

/-- A semicontraction on a finite-dimensional vector space admits an asymptotic
translation vector. -/
theorem exists_tendsto_div :
  ‚àÉ (v : E), tendsto (Œª (n : ‚Ñï), (1 / (n : ‚Ñù)) ‚Ä¢ (f^[n] 0)) at_top (ùìù v) :=
begin
  obtain ‚ü®v‚ÇÄ, v‚ÇÄ_norm, h‚ÇÄ‚ü© : ‚àÉ (v : E), ‚à•v‚à• ‚â§ 1 ‚àß ‚àÄ (i : ‚Ñï), (i : ‚Ñù) * h.l ‚â§ ‚ü™v, (f^[i] 0)‚ü´ :=
    h.exists_asymp_vector,
  let v := h.l ‚Ä¢ v‚ÇÄ,
  use v,
  have A : ‚àÄ·∂† (n : ‚Ñï) in at_top,
    ‚à•(1 / (n : ‚Ñù)) ‚Ä¢ (f^[n] 0) - v‚à•^2 ‚â§ (h.u n / n)^2 - h.l^2,
  { apply eventually_at_top.2 ‚ü®1, Œª n hn, _‚ü©,
    have n_ne_zero : n ‚â† 0 := (zero_lt_one.trans_le hn).ne',
    calc ‚à•(1 / (n : ‚Ñù)) ‚Ä¢ (f^[n] 0) - v‚à• ^ 2 =
    ‚à•(1 / (n : ‚Ñù)) ‚Ä¢ (f^[n] 0)‚à•^2 - 2 * ‚ü™(1 / (n : ‚Ñù)) ‚Ä¢ (f^[n] 0), v‚ü´ + ‚à•v‚à•^2 :
      norm_sub_sq_real
    ... = (h.u n / n)^2 - 2 * h.l / n * ‚ü™v‚ÇÄ, (f^[n] 0)‚ü´ + h.l^2 * ‚à•v‚ÇÄ‚à•^2 :
       begin
        congr' 2,
        { simp [norm_smul, real.norm_eq_abs, u, dist_zero_left, div_eq_inv_mul, mul_pow] },
        { simp [real_inner_smul_left, real_inner_smul_right, div_eq_inv_mul, real_inner_comm],
          ring },
        { simp [norm_smul, real.norm_eq_abs, mul_pow] }
      end
    ... ‚â§ (h.u n / n)^2 - 2 * h.l / n * (n * h.l) + h.l^2 * 1^2 :
      begin
        refine add_le_add (sub_le_sub le_rfl _) _,
        { apply mul_le_mul_of_nonneg_left (h‚ÇÄ n),
          exact mul_nonneg (mul_nonneg zero_le_two h.l_nonneg) (by simp) },
        { refine mul_le_mul_of_nonneg_left _ (sq_nonneg _),
          exact pow_le_pow_of_le_left (norm_nonneg _) v‚ÇÄ_norm _ }
      end
    ... = (h.u n / n)^2 - h.l^2 : by { field_simp [n_ne_zero], ring } },
  have B : tendsto (Œª (n : ‚Ñï), (h.u n / n)^2 - h.l^2) at_top (ùìù (h.l^2 - h.l^2)) :=
    (h.tendsto_lim.pow 2).sub tendsto_const_nhds,
  have C : tendsto (Œª (n : ‚Ñï), ‚à•(1 / (n : ‚Ñù)) ‚Ä¢ (f^[n] 0) - v‚à•^2) at_top (ùìù 0),
  { rw [sub_self] at B,
    apply tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds B _ A,
    exact eventually_of_forall (Œª n, by simp) },
  have D : tendsto (Œª (n : ‚Ñï), ‚à•(1 / (n : ‚Ñù)) ‚Ä¢ (f^[n] 0) - v‚à•) at_top (ùìù 0),
    by { convert C.sqrt; simp },
  exact tendsto_iff_norm_tendsto_zero.2 D,
end






/-- Attention: si on ne fait pas attention √† l'√©nonc√©, on peut donner une preuve triviale
d'un r√©sultat stupide. -/
lemma wrong_exists_tendsto_div' :
  ‚àÉ (v : E), tendsto (Œª (n : ‚Ñï), (1 / n) ‚Ä¢ (f^[n] 0)) at_top (ùìù v) :=
‚ü®(0 : E), tendsto_const_nhds.congr' $
  eventually_at_top.2 ‚ü®2, Œª n hn, by simp [nat.div_eq_of_lt hn]‚ü©‚ü©

/-- Version un peu plus d√©taill√©e du pr√©c√©dent -/
lemma wrong_exists_tendsto_div :
  ‚àÉ (v : E), tendsto (Œª (n : ‚Ñï), (1 / n) ‚Ä¢ (f^[n] 0)) at_top (ùìù v) :=
begin
  use 0,
  have A : ‚àÄ n ‚â• 2, 1/n = 0,
  { assume n hn,
    exact nat.div_eq_of_lt hn },
  have : tendsto (Œª (n : ‚Ñï), (0 : E)) at_top (ùìù 0) := tendsto_const_nhds,
  apply tendsto.congr' _ this,
  apply eventually_at_top.2 ‚ü®2, _‚ü©,
  assume n hn,
  simp [A n hn]
end


end semicontraction

#lint
