import measure_theory.covering.vitali
import measure_theory.covering.differentiation

-- TODO Tidy up this mess

noncomputable theory

open set filter function metric measure_theory measure_theory.measure_space
open_locale nnreal ennreal topological_space

variables {Œ± : Type*} [metric_space Œ±] [measurable_space Œ±] {Œº : measure Œ±} {f : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0} {d : ‚Ñù}
variables (hfd : ‚àÄ (t : ‚Ñù‚â•0), ‚àÄ·∂† (Œµ : ‚Ñù‚â•0) in ùìù 0, f (t * Œµ) = t^d * f Œµ)
variables (hfŒº : ‚àÄ·∂† (Œµ : ‚Ñù‚â•0) in ùìù 0, ‚àÄ x, Œº (closed_ball x Œµ) = f Œµ)

/- TODO Consider weakening `hfd` to allow for curved spaces. [In a Riemannian
manifold the ratio of volume to the Euclidean case has an even expansion about radius = 0 with
leading term 1 but with the negative of scalar curvature appearing as the coefficient of the
degree-two term. For example on the (homogeneous) space that is the unit two sphere, the area of a
disc of radius `r` is `2œÄ * (1 - cos r)` (for `r` small).] -/
include hfd hfŒº

/-- Technical / convenience lemma for use with `vitali.vitali_family`. -/
lemma vitali.exists_mem_Ioc_measure_closed_ball_le (x : Œ±) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ r ‚àà Ioc (0 : ‚Ñù) Œµ, Œº (closed_ball x (6 * r)) ‚â§ (6^d : ‚Ñù‚â•0) * Œº (closed_ball x r) :=
begin
  suffices : ‚àÄ·∂† r in ùìù[>] 0, Œº (closed_ball x (6 * r)) = (6^d : ‚Ñù‚â•0) * Œº (closed_ball x r),
  { obtain ‚ü®v, hv‚ÇÄ, hv‚ÇÅ‚ü© := this.exists_mem,
    obtain ‚ü®Œ¥, hŒ¥‚ÇÄ : 0 < Œ¥, hŒ¥‚ÇÅ‚ü© := mem_nhds_within_Ioi_iff_exists_Ioo_subset.mp hv‚ÇÄ,
    refine ‚ü®min (Œ¥/2) Œµ, by simp [hŒµ, half_pos hŒ¥‚ÇÄ], _‚ü©,
    have hŒ¥v : min (Œ¥ / 2) Œµ ‚àà v, { apply hŒ¥‚ÇÅ, simp [half_pos hŒ¥‚ÇÄ, hŒµ, half_lt_self hŒ¥‚ÇÄ], },
    rw hv‚ÇÅ _ hŒ¥v,
    exact le_refl _, },
  clear hŒµ Œµ,
  rw [eventually_nhds_within_iff, eventually_iff_exists_mem],
  obtain ‚ü®R, hR‚ÇÄ, hR‚ÇÅ‚ü© := nnreal.nhds_zero_basis.eventually_iff.mp (hfŒº.and (hfd 6)),
  simp only [mem_Iio] at hR‚ÇÅ,
  refine ‚ü®Iio $ R/6, Iio_mem_nhds _, Œª y hy‚ÇÄ hy‚ÇÅ, _‚ü©,
  { norm_cast,
    apply nnreal.div_pos hR‚ÇÄ,
    rw ‚Üê nnreal.coe_lt_coe,
    norm_cast,
    linarith, },
  { rw [mem_Iio, lt_div_iff' (by linarith : 0 < (6 : ‚Ñù))] at hy‚ÇÄ,
    replace hy‚ÇÅ := (mem_Ioi.mp hy‚ÇÅ).le,
    have h‚ÇÅ : (‚ü®y, hy‚ÇÅ‚ü© : ‚Ñù‚â•0) < R,
    { rw ‚Üê nnreal.coe_lt_coe,
      have aux : y ‚â§ 6 * y, { linarith, },
      exact lt_of_le_of_lt aux hy‚ÇÄ, },
    have h‚ÇÇ : (‚ü®6*y, by linarith‚ü© : ‚Ñù‚â•0) < R := hy‚ÇÄ,
    obtain h‚ÇÉ := (hR‚ÇÅ h‚ÇÇ).1 x,
    obtain ‚ü®h‚ÇÑ, h‚ÇÖ‚ü© := hR‚ÇÅ h‚ÇÅ,
    specialize h‚ÇÑ x,
    simp only [subtype.coe_mk] at h‚ÇÉ h‚ÇÑ h‚ÇÖ,
    rw [h‚ÇÉ, h‚ÇÑ],
    norm_cast,
    exact h‚ÇÖ, },
end

variables (Œº f d)

/-- A version of the Lebesgue Density Theorem. -/
lemma closed_ball.ae_tendsto_measure_inter_div
  [proper_space Œ±] [borel_space Œ±] [is_locally_finite_measure Œº] (S : set Œ±) :
  ‚àÄ·µê x ‚àÇŒº.restrict S, ‚àÄ (w : ‚Ñï ‚Üí Œ±) (Œ¥ : ‚Ñï ‚Üí ‚Ñù)
    (hŒ¥‚ÇÄ : ‚àÄ j, 0 < Œ¥ j) (hŒ¥‚ÇÅ : tendsto Œ¥ at_top (ùìù 0)) (hŒ¥‚ÇÇ : ‚àÄ j, x ‚àà closed_ball (w j) (Œ¥ j)),
    tendsto (Œª j, Œº (S ‚à© closed_ball (w j) (Œ¥ j)) / Œº (closed_ball (w j) (Œ¥ j))) at_top (ùìù 1) :=
begin
  refine ((vitali.vitali_family Œº _
    (vitali.exists_mem_Ioc_measure_closed_ball_le hfd hfŒº)).ae_tendsto_measure_inter_div S).mono
    (Œª x hx w Œ¥ hŒ¥‚ÇÄ hŒ¥‚ÇÅ hŒ¥‚ÇÇ, _),
  let g‚ÇÅ : ‚Ñï ‚Üí set Œ± := Œª j, closed_ball (w j) (Œ¥ j),
  let g‚ÇÇ : set Œ± ‚Üí ‚Ñù‚â•0‚àû := Œª a, Œº (S ‚à© a) / Œº a,
  change tendsto g‚ÇÇ (map g‚ÇÅ at_top) (ùìù 1),
  refine hx.mono_left (Œª X hX', _),
  obtain ‚ü®Œµ, hŒµ, hX‚ü© := (vitali_family.mem_filter_at_iff _).mp hX', clear hX',
  simp only [mem_map, mem_at_top_sets, ge_iff_le, mem_preimage, g‚ÇÅ],
  simp only [vitali.vitali_family, mem_set_of_eq, and_imp] at hX,
  obtain ‚ü®R, hR‚ÇÄ, hR‚ÇÅ‚ü© := nnreal.nhds_zero_basis.eventually_iff.mp (hfŒº.and (hfd 6)),
  simp only [mem_Iio] at hR‚ÇÅ,
  rw ‚Üê nnreal.coe_pos at hR‚ÇÄ,
  have hRŒµ : 0 < min (Œµ/2) (R/6), { simp only [lt_min_iff], split; linarith, },
  obtain ‚ü®n, hn‚ÇÄ‚ü© := metric.tendsto_at_top.mp hŒ¥‚ÇÅ _ hRŒµ,
  simp only [ge_iff_le, dist_zero_right, real.norm_eq_abs, lt_min_iff,
    abs_eq_self.mpr (hŒ¥‚ÇÄ _).le] at hn‚ÇÄ,
  have hn‚ÇÅ : ‚àÄ j, n ‚â§ j ‚Üí Œ¥ j < Œµ / 2 := Œª j hj, (hn‚ÇÄ j hj).1,
  have hn‚ÇÇ : ‚àÄ j, n ‚â§ j ‚Üí 6 * Œ¥ j < R := Œª j hj, by linarith [(hn‚ÇÄ j hj).2],
  refine ‚ü®n, Œª j hj, hX _ (hŒ¥‚ÇÇ j) is_closed_ball _ _ (Œª y hy, _)‚ü©,
  { exact (nonempty_ball.mpr (hŒ¥‚ÇÄ j)).mono ball_subset_interior_closed_ball, },
  { have hdiam : 3 * diam (closed_ball (w j) (Œ¥ j)) ‚â§ 6 * Œ¥ j,
    { linarith [@diam_closed_ball _ _ (w j) _ (hŒ¥‚ÇÄ j).le], },
    refine (measure_mono (closed_ball_subset_closed_ball hdiam)).trans _,
    have h‚ÇÅ : (‚ü®6 * Œ¥ j, by { linarith [hŒ¥‚ÇÄ j], }‚ü© : ‚Ñù‚â•0) < R,
    { rw ‚Üê nnreal.coe_lt_coe, exact hn‚ÇÇ j hj, },
    have h‚ÇÇ : (‚ü®Œ¥ j, (hŒ¥‚ÇÄ j).le‚ü© : ‚Ñù‚â•0) < R,
    { rw [‚Üê nnreal.coe_lt_coe, ‚Üê mul_lt_mul_left (by linarith : 0 < (6 : ‚Ñù))],
      simp only [subtype.coe_mk],
      refine (hn‚ÇÇ j hj).trans _,
      linarith, },
    obtain ‚ü®h‚ÇÉ, h‚ÇÑ‚ü© := hR‚ÇÅ h‚ÇÇ,
    specialize h‚ÇÉ (w j),
    obtain h‚ÇÖ := (hR‚ÇÅ h‚ÇÅ).1 x,
    simp only [subtype.coe_mk] at h‚ÇÉ h‚ÇÑ h‚ÇÖ,
    rw [h‚ÇÉ, h‚ÇÖ],
    norm_cast,
    rw ‚Üê h‚ÇÑ,
    convert le_refl _, },
  { simp only [mem_closed_ball] at hŒ¥‚ÇÇ hy ‚ä¢,
    specialize hŒ¥‚ÇÇ j,
    specialize hn‚ÇÅ j hj,
    simp only [mem_closed_ball] at hŒ¥‚ÇÇ hy ‚ä¢,
    calc dist y x ‚â§ dist y (w j) + dist (w j) x : dist_triangle _ _ _
              ... ‚â§ Œµ : by { rw dist_comm (w j), linarith, } },
end
