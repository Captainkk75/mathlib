/-
Copyright (c) 2020 Kevin Buzzard. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kevin Buzzard
-/

import topology.category.CompHaus
import category_theory.sites.pretopology
import category_theory.Fintype
import topology.connected
import topology.subset_properties
import category_theory.adjunction.reflective


/-!
# The category of Profinite Types
We construct the category of profinite topological spaces,
often called profinite sets -- perhaps they could be called
profinite types in Lean.

The type of profinite topological spaces is called `Profinite`. It has a category
instance and is a fully faithful subcategory of `Top`. The fully faithful functor
is called `Profinite_to_Top`.

## Implementation notes

A profinite type is defined to be a topological space which is
compact, Hausdorff and totally disconnected.

## TODO

0. Link to category of projective limits of finite discrete sets.
1. existence of products, limits(?), finite coproducts
2. `Profinite_to_Top` creates limits?
3. Clausen/Scholze topology on the category `Profinite`.

## Tags

profinite

-/

open category_theory

/-- The type of profinite topological spaces. -/
structure Profinite :=
(to_Top : Top)
[is_compact : compact_space to_Top]
[is_t2 : t2_space to_Top]
[is_totally_disconnected : totally_disconnected_space to_Top]

namespace Profinite

def Profinite.pempty : Profinite := {to_Top := { Œ± := pempty }}

instance : inhabited Profinite := ‚ü®{to_Top := { Œ± := pempty }}‚ü©

instance : has_coe_to_sort Profinite := ‚ü®Type*, Œª X, X.to_Top‚ü©
instance {X : Profinite} : compact_space X := X.is_compact
instance {X : Profinite} : t2_space X := X.is_t2
instance {X : Profinite} : totally_disconnected_space X := X.is_totally_disconnected

instance category : category Profinite := induced_category.category to_Top

@[simp]
lemma coe_to_Top {X : Profinite} : (X.to_Top : Type*) = X :=
rfl

end Profinite

/-- The fully faithful embedding of `Profinite` in `Top`. -/
@[simps, derive [full, faithful]]
def Profinite_to_Top : Profinite ‚•§ Top := induced_functor _

instance : concrete_category Profinite :=
{ forget := Profinite_to_Top ‚ãô forget _ }

/-- The fully faithful embedding of `Profinite` in `CompHaus`. -/
@[simps] def Profinite_to_CompHaus : Profinite ‚•§ CompHaus :=
{ obj := Œª X, { to_Top := X.to_Top },
  map := Œª _ _ f, f }

instance : full Profinite_to_CompHaus := { preimage := Œª _ _ f, f }
instance : faithful Profinite_to_CompHaus := {}

@[simp] lemma Profinite_to_CompHaus_to_Top :
  Profinite_to_CompHaus ‚ãô CompHaus_to_Top = Profinite_to_Top :=
rfl

def Fintype_to_Profinite : Fintype ‚•§ Profinite :=
{ obj := Œª X,
  { to_Top := ‚ü®X, ‚ä•‚ü©,
    is_t2 := @t2_space_discrete _ _ ‚ü®rfl‚ü©,
    is_totally_disconnected := by letI:topological_space X := ‚ä•; letI:discrete_topology X := ‚ü®rfl‚ü©; apply_instance },
  map := Œª X Y f, by letI:topological_space X := ‚ä•; letI:discrete_topology X := ‚ü®rfl‚ü©;
                  by letI:topological_space Y := ‚ä•; letI:discrete_topology Y := ‚ü®rfl‚ü©;
                  exact ‚ü®f, continuous_of_discrete_topology‚ü© }

namespace Profinite

open category_theory.limits

variable {J : Type*}
variables [small_category J]
variable G : J ‚•§ Profinite

def limit_cone (F : J ‚•§ Profinite) : cone F :=
{ X := { to_Top := { Œ± := { u : Œ† j, F.obj j // ‚àÄ {j j'} (f : j ‚ü∂ j'), F.map f (u j) = u j' } },
        is_compact :=
          compact_iff_compact_space.1 (compact_of_is_closed_subset compact_univ
            ( begin
                convert (_:
                  is_closed (‚ãÇ (j j' : J) (f : j ‚ü∂ j'), {u : Œ† j, F.obj j | F.map f (u j) = u j'})),
                { ext1,
                  simp only [forall_apply_eq_imp_iff', set.mem_sInter, set.mem_range,
                            set.mem_Inter, set.mem_set_of_eq, exists_imp_distrib],
                  refl },
                exact (
                  is_closed_Inter (Œª j, is_closed_Inter (Œª j', is_closed_Inter
                    (Œª f, is_closed_eq ((F.map f).2.comp (continuous_apply _))
                      (continuous_apply _))))),
              end )
            (set.subset_univ _)),
        is_t2 := subtype.t2_space,
        is_totally_disconnected := subtype.totally_disconnected_space},
  œÄ := { app := Œª j, ‚ü® Œª u, u.val j,
    begin
      dsimp only [set.subset_univ, set.mem_Inter, set.mem_set_of_eq],
      convert (_:continuous ((Œª u : (Œ† j', F.obj j'), u j) ‚àò subtype.val)),
      exact (continuous.comp (continuous_apply _) continuous_subtype_val),
    end ‚ü© } }

def limit_cone_is_limit (F : J ‚•§ Profinite) : is_limit (limit_cone F) :=
{ lift := Œª s, ‚ü®Œª (x : s.X), ‚ü®Œª j, s.œÄ.app j x, Œª j j' f,
        by {  rw ‚ÜêTop.comp_app,
              have H1 : (s.œÄ.app j ‚â´ F.map f).to_fun = (s.œÄ.app j').to_fun, { rw cone.w s f },
              apply congr_fun H1 _,}‚ü©,
    continuous_subtype_mk _ (continuous_pi (Œª i, (s.œÄ.app i).2)) ‚ü©,
  uniq' := by {intros, ext x j, apply (congr_fun (congr_arg (@continuous_map.to_fun s.X ( F.obj j) _ _) (w j)) x), } }

instance Profinite_has_limits : has_limits Profinite :=
{ has_limits_of_shape := Œª J ùí•, by exactI
  { has_limit := Œª F, has_limit.mk { cone := limit_cone F, is_limit := limit_cone_is_limit F } } }

universe u
open set
open topological_space
open category_theory.limits

/-
In this section we formalize that a profinite set can be seen as a limit of finite sets by
following: https://stacks.math.columbia.edu/tag/08ZY
-/

/-- (Implementation) The skeleton, i.e. the points, of the diagram which X is the limit of -/
def profinite_skeleton (X : Profinite) :=
{ I : set (set (X.to_Top.Œ±)) // (I.finite) ‚àß (‚àÄ U ‚àà I, is_clopen U ‚àß U.nonempty) ‚àß
  (‚ãÉ‚ÇÄ I = univ) ‚àß (‚àÄ U V ‚àà I, (U ‚à© V : set X.to_Top.Œ±).nonempty ‚Üí (U = V) ) }

variable {X : Profinite}

lemma refinement_unique {I J : profinite_skeleton X} {U V W : set X.to_Top.Œ±} (hU : U ‚àà I.1)
  (hV : V ‚àà J.1) (hW : W ‚àà J.1) (hUV : U ‚äÜ V) (hUW : U ‚äÜ W) : V = W :=
J.2.2.2.2 V W hV hW (nonempty.mono (subset_inter hUV hUW) (I.2.2.1 U hU).2)

/-- (Implementation) profinite_skeleton forms a partial order-/
instance profinite_skeleton.partial_order : preorder (profinite_skeleton X) :=
{ le := Œª I J, (‚àÄ (U ‚àà I.1), (‚àÉ V : set X.to_Top.Œ±, V ‚àà J.1 ‚àß U ‚äÜ V)),
  le_refl := Œª I U hU, exists.intro U ‚ü®hU, subset.refl U‚ü©,
  le_trans :=
  begin
    intros I J K hIJ hJK U hU,
    rcases hIJ U hU with ‚ü®V, hV, hUV‚ü©,
    rcases hJK V hV with ‚ü®W, hW, hVW‚ü©,
    use W,
    exact ‚ü®hW, subset.trans hUV hVW‚ü©,
  end }

-- TODO: MAKE SURE the right ‚â§ is the one used!!

/-- profinite_skeleton forms a category, this will be the codomain of our diagram -/
instance profinite_limit_category : small_category (profinite_skeleton X) :=
preorder.small_category (profinite_skeleton X)

/-
To define our diagram we first make a short API in order to work with the associated maps
on objects and morphisms
-/

/-- Map on objects of profinite_diagram -/
noncomputable def profinite_diagram_obj (I : profinite_skeleton X) : Fintype :=
{ Œ± := I.1,
  str := finite.fintype I.2.1 }

@[simp]
lemma profinite_diagram_obj_eq (I : profinite_skeleton X) : (profinite_diagram_obj I).1 = I.1 := rfl

lemma profinite_diagram_obj' {I : profinite_skeleton X} (U : (profinite_diagram_obj I).Œ±) :
U.1 ‚àà I.1 := U.2

-- TODO: termmode????
/-- Map on morphisms of profinite_diagram-/
def profinite_diagram_map {I J : profinite_skeleton X} (f : I ‚ü∂ J) :
  (profinite_diagram_obj I) ‚ü∂ (profinite_diagram_obj J) :=
by {exact Œª U, ‚ü®(classical.some (f.1.1 U.1 U.2)), (classical.some_spec (f.1.1 U.1 U.2)).1‚ü©}

@[simp]
lemma profinite_diagram_map_sub {I J : profinite_skeleton X} (f : I ‚ü∂ J)
  (U : (profinite_diagram_obj I).Œ±) : U.1 ‚äÜ (profinite_diagram_map f U).1 :=
(classical.some_spec (f.1.1 U.1 U.2)).2

@[simp]
lemma profinite_diagram_map_unique {I J : profinite_skeleton X} (f : I ‚ü∂ J)
  (U : (profinite_diagram_obj I).Œ±) (V : (profinite_diagram_obj J).Œ±)
  (hUV : U.1 ‚äÜ V.1) : profinite_diagram_map f U = V :=
subtype.ext $
  refinement_unique U.2 (profinite_diagram_map f U).2 V.2 (profinite_diagram_map_sub f U) hUV

/-- The diagram into Fintype associated to X -/
noncomputable def profinite_diagram' (X : Profinite) : profinite_skeleton X ‚•§ Fintype :=
{ obj := profinite_diagram_obj,
  map := Œª I J, @profinite_diagram_map X I J,
  map_id' := by {refine Œª I, funext (Œª U, profinite_diagram_map_unique _ _ _ (subset.refl U.1)) },
  map_comp' :=
  begin
    refine Œª I J K f g, funext (Œª U, profinite_diagram_map_unique _ _ _ _),
    -- TODO: change this line
    change U.val ‚äÜ ((profinite_diagram_map g) ((profinite_diagram_map f) U)).1,
    exact subset.trans (profinite_diagram_map_sub f U) (profinite_diagram_map_sub g _),
  end, }

/-- The diagram of which a given profinite set is the limit of -/
noncomputable def profinite_diagram (X : Profinite) : profinite_skeleton X ‚•§ Profinite :=
(profinite_diagram' X) ‚ãô Fintype_to_Profinite

lemma profinite_diagram.map {X : Profinite} {I J : profinite_skeleton X} (f : I ‚ü∂ J) :
  (X.profinite_diagram.map f).to_fun = (profinite_diagram_map f) := rfl

/-
Now we create an API for the maps making X into a cone over profinite_diagram
-/


/-- Map from X to a given object of the diagram -/
def X_to_partition_map (I : profinite_skeleton X) : X ‚Üí (profinite_diagram_obj I) :=
Œª x, by { have H := mem_sUnion.1 ((I.2.2.2.1).symm ‚ñ∏ (mem_univ x) : x ‚àà ‚ãÉ‚ÇÄ I.1),
  exact ‚ü®classical.some H, classical.some (classical.some_spec H)‚ü© }

-- TODO: renaming
lemma component_unique' (I : profinite_skeleton X) {x : X} {U V: set X} (hU : U ‚àà I.1)
  (hV : V ‚àà I.1) (hxU : x ‚àà U) (hxV : x ‚àà V) : U = V :=
I.2.2.2.2 U V hU hV (nonempty_of_mem (mem_inter hxU hxV))

lemma X_to_partition_map_mem' (I : profinite_skeleton X) (x : X) :
  (X_to_partition_map I x).1 ‚àà I.1 :=
classical.some (classical.some_spec (mem_sUnion.1 ((I.2.2.2.1).symm ‚ñ∏ (mem_univ x) : x ‚àà ‚ãÉ‚ÇÄ I.1)))

lemma X_to_partition_map_point_mem (I : profinite_skeleton X) (x : X) :
  x ‚àà (X_to_partition_map I x).1 :=
classical.some_spec $ classical.some_spec
  (mem_sUnion.1 ((I.2.2.2.1).symm ‚ñ∏ (mem_univ x) : x ‚àà ‚ãÉ‚ÇÄ I.1))

lemma X_to_partition_map_unique (I : profinite_skeleton X) (x : X) (U : set X) (hU : U ‚àà I.1)
  (hx : x ‚àà U) : (X_to_partition_map I x).1 = U :=
component_unique' I (X_to_partition_map_mem' I x) hU (X_to_partition_map_point_mem I x) hx

lemma X_to_partition_map_preimage (I : profinite_skeleton X) (A : set (profinite_diagram_obj I)) :
  (X_to_partition_map I ‚Åª¬π' A) = ‚ãÉ (a : A), a.1.1 :=
begin
  refine set.ext (Œª x, ‚ü®Œª hx, _ , Œª hx, _‚ü©),
  -- TODO: golf
  { rw mem_Union,
    use X_to_partition_map I x,
    { exact mem_preimage.1 hx },
    exact X_to_partition_map_point_mem I x },
  rcases mem_Union.1 hx with ‚ü®‚ü®U, hU‚ü©, hx‚ü©,
  rw [mem_preimage],
  suffices : X_to_partition_map I x = U,
  { rw this, exact hU },
  apply subtype.ext,
  apply (X_to_partition_map_unique I x U.1 U.2 hx),
end

/-- X forms a cone over profinite_diagram -/
noncomputable def profinite_limit_cone (X : Profinite) : cone (profinite_diagram X) :=
{ X := X,
  œÄ :=
  { app := Œª I,
    { to_fun := X_to_partition_map I,
      continuous_to_fun :=
      begin
        fsplit,
        intros A hA,
        rw X_to_partition_map_preimage,
        refine is_open_Union (Œª U, _),
        exact (I.2.2.1 U.1.1 U.1.2).1.1,
      end },
    naturality' :=
    begin
      intros I J f,
      apply continuous_map.ext, intro x, apply subtype.ext,
      simp only [coe_id, functor.const.obj_map, coe_comp],
      change ‚Üë(X_to_partition_map J x) =
        ‚Üë(profinite_diagram_map f (X_to_partition_map I x)),
      apply X_to_partition_map_unique J x,
      { exact (profinite_diagram_map f (X_to_partition_map I x)).2 },
      apply mem_of_subset_of_mem (profinite_diagram_map_sub f _),
      exact X_to_partition_map_point_mem I x
    end } }


/-
Now we make an API for the limit of profinite_diagram and its lifts
-/

/-- Limit object over profinite_diagram -/
noncomputable def profinite_limit (X : Profinite) : Profinite :=
  (limit_cone (profinite_diagram X)).X

/-- Map from X to the limit of profinite_diagram -/
noncomputable def profinite_limit_map (X : Profinite) : X ‚ü∂ profinite_limit X :=
(limit_cone_is_limit (profinite_diagram X)).lift (profinite_limit_cone X)

lemma profinite_limit.Œ± (X : Profinite) : ‚Ü•(profinite_limit X).to_Top =
{ u : Œ† (I : profinite_skeleton X), (profinite_diagram X).obj I // ‚àÄ {I J} (f : I ‚ü∂ J),
  (profinite_diagram X).map f (u I) = (u J)} := rfl

/-- Explicit form of the map from X to the limit of profinite_diagram -/
def profinite_limit.image_elem {X : Profinite} (x : X) :
  (profinite_limit X).to_Top.Œ± :=
‚ü®(Œª I, X_to_partition_map I x), Œª I J f, subtype.ext $ eq.symm $ X_to_partition_map_unique J x
  (profinite_diagram_map f (X_to_partition_map I x)).1
  (profinite_diagram_map f (X_to_partition_map I x)).2
  (mem_of_subset_of_mem (profinite_diagram_map_sub _ _) (X_to_partition_map_point_mem I x))‚ü©

lemma profinite_limit_map_elem {X : Profinite} (x : X) :
  (X.profinite_limit_map).1 x = profinite_limit.image_elem x := rfl

/-
As in https://stacks.math.columbia.edu/tag/08ZY, what remains now is to show
that profinite_limit_map is a homeomorphism.

First we show injectivity, to do this we make a short API for defining points of.....
-/

-- TODO: naming
def profinite_limit_map.obj {X : Profinite} {Z : set X.to_Top.Œ±} (hZ : is_clopen Z)
  (hZ_ne : Z.nonempty) (hZ_compl : Z·∂ú.nonempty) : profinite_skeleton X :=
begin
  refine ‚ü®{Z, Z·∂ú}, ‚ü®_,_,_,_‚ü©‚ü©,
  { simp only [finite.insert, finite_singleton] },
  { rintros U ‚ü®hU, _‚ü©,
    { refine ‚ü®hZ, hZ_ne‚ü© },
    rw mem_singleton_iff at H,
    rw H,
    refine ‚ü®is_clopen_compl_iff.2 hZ, hZ_compl‚ü© },
  { simp only [sUnion_singleton, union_compl_self, sUnion_insert] },
  intros U V hU hV hUV,
    cases hU with hU hU,
    { cases hV with hV hV,
      { rwa [hU, hV] },
      rw mem_singleton_iff at hV,
      rw [hU, hV, inter_compl_self] at hUV,
      exfalso,
      revert hUV,
      exact empty_not_nonempty },
    rw mem_singleton_iff at hU,
    cases hV with hV hV,
    { rw [hU, hV, inter_comm, inter_compl_self] at hUV,
      exfalso,
      revert hUV,
      exact empty_not_nonempty },
    rw mem_singleton_iff at hV,
    rwa [hU, hV],
end

lemma profinite_limit_map.obj_val {X : Profinite} {Z : set X.to_Top.Œ±} (hZ : is_clopen Z)
  (hZ_ne : Z.nonempty) (hZ_compl : Z·∂ú.nonempty) :
  (profinite_limit_map.obj hZ hZ_ne hZ_compl).1 = {Z, Z·∂ú} := rfl


lemma profinite_limit_map.mem {X : Profinite} {x y : X} {Z : set X.to_Top.Œ±} (hZ : is_clopen Z)
  (hxy : (X.profinite_limit_map).1 x = (X.profinite_limit_map).1 y) (hx : x ‚àà Z) : y ‚àà Z :=
begin
  rw [profinite_limit_map_elem x, profinite_limit_map_elem y] at hxy,
  by_cases (Z·∂ú).nonempty,
  { set I := profinite_limit_map.obj hZ (nonempty_of_mem hx) h,
    have hXY : (X_to_partition_map I x).1 = (X_to_partition_map I y).1,
    { change ((profinite_limit.image_elem x).1 I).1 = ((profinite_limit.image_elem y).1 I).1,
      rw hxy },
    rw X_to_partition_map_unique I x Z (by {left, refl}) hx at hXY,
    rw hXY, exact X_to_partition_map_point_mem I y,
  },
  rw [not_nonempty_iff_eq_empty, compl_empty_iff] at h,
  rw h,
  exact mem_univ y,
end

/-- Injectivity of profinite_limit_map -/
lemma profinite_limit_map.injective (X : Profinite) : function.injective (profinite_limit_map X) :=
begin
  intros x y hxy,
  rw ‚Üêsingleton_eq_singleton_iff,
  rw ‚Üê(totally_disconnected_space_iff_connected_component_singleton.1 X.is_totally_disconnected),
  rw connected_component_eq_Inter_clopen,
  rw ‚Üê(totally_disconnected_space_iff_connected_component_singleton.1 X.is_totally_disconnected),
  rw connected_component_eq_Inter_clopen,
  suffices : ‚àÄ Z : set X.to_Top.Œ±, is_clopen Z ‚Üí (x ‚àà Z ‚Üî y ‚àà Z),
  { apply eq_of_subset_of_subset,
    -- TODO: symmetry??
    { apply subset_Inter,
      rintro ‚ü®Z, ‚ü®hZ, hyZ‚ü©‚ü©,
      exact Inter_subset (Œª Z : {Z // is_clopen Z ‚àß x ‚àà Z}, ‚ÜëZ) ‚ü®Z, ‚ü®hZ, (this Z hZ).2 hyZ‚ü©‚ü© },
    apply subset_Inter,
    rintro ‚ü®Z, ‚ü®hZ, hxZ‚ü©‚ü©,
    exact Inter_subset (Œª Z : {Z // is_clopen Z ‚àß y ‚àà Z}, ‚ÜëZ) ‚ü®Z, ‚ü®hZ, (this Z hZ).1 hxZ‚ü©‚ü© },
  intros Z hZ,
  refine ‚ü®Œª hx, profinite_limit_map.mem hZ hxy hx, Œª hy, profinite_limit_map.mem hZ hxy.symm hy‚ü©,
end

def profinite_inter_obj {X : Profinite} (I J : profinite_skeleton X) : set (set X.to_Top.Œ±) :=
Œª U, ‚àÉ (V W : set X.to_Top.Œ±), (V ‚àà I.1) ‚àß (W ‚àà J.1) ‚àß U = V ‚à© W ‚àß U.nonempty

def profinite_inter_obj_injection {X : Profinite} (I J : profinite_skeleton X) :
  (profinite_inter_obj I J) ‚Üí (prod I.1 J.1) :=
Œª U,
{ fst := ‚ü®classical.some U.2, (classical.some_spec (classical.some_spec U.2)).1‚ü©,
  snd := ‚ü®classical.some (classical.some_spec U.2),
          (classical.some_spec (classical.some_spec U.2)).2.1‚ü© }

lemma profinite_inter_obj_injection_eq {X : Profinite} {I J : profinite_skeleton X}
  (U : profinite_inter_obj I J) :
  ‚ÜëU = (profinite_inter_obj_injection I J U).1.1 ‚à© (profinite_inter_obj_injection I J U).2.1 :=
(classical.some_spec (classical.some_spec U.2)).2.2.1

lemma profinite_inter_obj_injection.injective {X : Profinite} (I J : profinite_skeleton X) :
  function.injective (profinite_inter_obj_injection I J) :=
begin
  refine Œª U V hUV, subtype.ext _,
  rw [profinite_inter_obj_injection_eq U, profinite_inter_obj_injection_eq V, hUV],
end

def profinite_inter_map {X : Profinite} (I J : profinite_skeleton X) : profinite_skeleton X :=
‚ü®profinite_inter_obj I J,
begin
  refine ‚ü®‚ü®_‚ü©,_,_,_‚ü©,
  { exact @fintype.of_injective _ _ (@prod.fintype I.1 J.1 I.2.1.fintype J.2.1.fintype)
      (profinite_inter_obj_injection I J) (profinite_inter_obj_injection.injective I J) },
  { intros U hU,
    refine ‚ü®_,(classical.some_spec (classical.some_spec hU)).2.2.2‚ü©,
    have H : U = (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).1.1 ‚à©
      (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).2.1 := profinite_inter_obj_injection_eq ‚ü®U, hU‚ü©,
    rw H,
    { apply is_clopen_inter,
      { apply (I.2.2.1 (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).1.1
          (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).1.2).1 },
      apply (J.2.2.1 (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).2.1
          (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).2.2).1 } },
  { refine eq_univ_of_subset (Œª x hx, _) (eq.refl univ),
    have hI : x ‚àà ‚ãÉ‚ÇÄI.val, { rwa I.2.2.2.1 },
    have hJ : x ‚àà ‚ãÉ‚ÇÄJ.val, { rwa J.2.2.2.1 },
    rw mem_sUnion at hI hJ,
    rw mem_sUnion,
    rcases hI with ‚ü®U,‚ü®hU, hxU‚ü©‚ü©,
    rcases hJ with ‚ü®V,‚ü®hV, hxV‚ü©‚ü©,
    refine ‚ü®U ‚à© V, ‚ü®U, V, hU, hV, ‚ü®rfl, nonempty_of_mem (mem_inter hxU hxV)‚ü©‚ü©, mem_inter hxU hxV‚ü© },

  intros U V hU hV hUV,
  have hUi : U = (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).1.1 ‚à©
      (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).2.1 := profinite_inter_obj_injection_eq ‚ü®U, hU‚ü©,
  have hVi : V = (profinite_inter_obj_injection I J ‚ü®V, hV‚ü©).1.1 ‚à©
      (profinite_inter_obj_injection I J ‚ü®V, hV‚ü©).2.1 := profinite_inter_obj_injection_eq ‚ü®V, hV‚ü©,
  rw [hUi, inter_assoc, hVi] at hUV,
  conv at hUV {congr, congr, skip, rw [inter_comm, inter_assoc]},
  rw ‚Üêinter_assoc at hUV,

  -- SYMMETRIC ARGUMENT:
  have hI : (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).1.1 =
    (profinite_inter_obj_injection I J ‚ü®V, hV‚ü©).1.1,
  { apply I.2.2.2.2 _ _ (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).1.2
      (profinite_inter_obj_injection I J ‚ü®V, hV‚ü©).1.2,
    refine nonempty.mono (Œª a ha, _) hUV,
    exact ha.1,
  },
  have hJ : (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).2.1 =
    (profinite_inter_obj_injection I J ‚ü®V, hV‚ü©).2.1,
  { apply J.2.2.2.2 _ _ (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).2.2
      (profinite_inter_obj_injection I J ‚ü®V, hV‚ü©).2.2,
    refine nonempty.mono (Œª a ha, _) hUV,
    exact ‚ü®ha.2.2, ha.2.1‚ü©,
  },
  rw [hUi, hVi, hI, hJ],
end‚ü©

lemma profinite_skeleton_directed {X : Profinite} (I J : profinite_skeleton X) :
  ‚àÉ K : profinite_skeleton X, K ‚â§ I ‚àß K ‚â§ J :=
begin
  refine ‚ü®profinite_inter_map I J,_,_‚ü©; intros U hU,
  { refine ‚ü®(profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).1.1,
            (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).1.2,_‚ü©,
    change ‚Üë(‚ü®U, hU‚ü© : profinite_inter_obj I J ) ‚äÜ (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).1.1,
    rw [profinite_inter_obj_injection_eq ‚ü®U, hU‚ü©],
    exact inter_subset_left _ _ },
  refine ‚ü®(profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).2.1,
          (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).2.2,_‚ü©,
  change ‚Üë(‚ü®U, hU‚ü© : profinite_inter_obj I J ) ‚äÜ (profinite_inter_obj_injection I J ‚ü®U, hU‚ü©).2.1,
  rw [profinite_inter_obj_injection_eq ‚ü®U, hU‚ü©],
  exact inter_subset_right _ _,
end

lemma profinite_category_directed {X : Profinite} (I J : profinite_skeleton X) :
  ‚àÉ (K : profinite_skeleton X) (f : K ‚ü∂ I) (g : K ‚ü∂ J), true :=
begin
  rcases (profinite_skeleton_directed I J) with ‚ü®K,‚ü®hKI,hKJ‚ü©‚ü©,
  refine ‚ü®K, ‚ü®‚ü®hKI‚ü©‚ü©, ‚ü®‚ü®hKJ‚ü©‚ü©, by trivial‚ü©,
end

def section_to_set {X : Profinite} (u : X.profinite_limit.to_Top) :
 Œ† (I : X.profinite_skeleton), set X.to_Top.Œ± := Œª I, (u.1 I).1

@[simp]
lemma section_to_set_eq {X : Profinite} (u : X.profinite_limit.to_Top)
  (I : X.profinite_skeleton) : section_to_set u I = (u.1 I).1 := rfl

@[simp]
lemma section_to_set_mem {X : Profinite } (u : X.profinite_limit.to_Top)
  (I : X.profinite_skeleton) : section_to_set u I ‚àà I.1 := (u.1 I).2

lemma limit_section_directed {X : Profinite} (u : X.profinite_limit.to_Top) :
  directed (‚äá) (Œª I, (u.1 I).1) :=
begin
  cases u with u hu,
  intros I J,
  rcases (profinite_category_directed I J) with ‚ü®K,f,g,‚ü®‚ü©‚ü©,
  refine ‚ü®K,_,_‚ü©,
  { change (u K).1 ‚äÜ (u I).1,
    rw [‚Üê(hu f)],
    apply profinite_diagram_map_sub f },
  change (u K).1 ‚äÜ (u J).1,
  rw [‚Üê(hu g)],
  apply profinite_diagram_map_sub g,
end

noncomputable def profinite_skeleton_univ (X : Profinite) : X.profinite_skeleton :=
begin
  by_cases nonempty X,
  { refine ‚ü®{univ},finite_singleton _,Œª U hU, _,_,_‚ü©,
    { rw mem_singleton_iff at hU,
      rw hU,
      refine ‚ü®is_clopen_univ,_‚ü©,
      exactI univ_nonempty },
    { simp only [sUnion_singleton] },
    intros U V hU hV hUV,
    rw mem_singleton_iff at hU,
    rw mem_singleton_iff at hV,
    rw [hU, hV] },
  refine ‚ü®{},finite_empty,_,_,_‚ü©,
  { rintro _ ‚ü®‚ü© },
  { simp,
    symmetry,
    rw univ_eq_empty_iff,
    exact h },
  rintro _ _ ‚ü®‚ü©,
end

instance profinite_skeleton_nonempty (X : Profinite):
  nonempty X.profinite_skeleton := ‚ü®profinite_skeleton_univ X‚ü©

lemma profinite_limit_map.surjective (X : Profinite) :
  function.surjective (profinite_limit_map X) :=
begin
  rintro ‚ü®u, hu‚ü©,
  have H : (‚ãÇ (I : (X.profinite_skeleton)), (u I).1).nonempty,
  { apply @is_compact.nonempty_Inter_of_directed_nonempty_compact_closed _ _ _ _ (Œª I, (u I).1)
      (limit_section_directed ‚ü®u, @hu‚ü©); intro I,
    { exact (I.2.2.1 (u I).1 (u I).2).2 },
    { exact (I.2.2.1 (u I).1 (u I).2).1.2.compact },
    exact (I.2.2.1 (u I).1 (u I).2).1.2 },
  cases H with x hx,
  use x,
  change ((X.profinite_limit_map).1 x) = ‚ü®u, @hu‚ü©,
  rw profinite_limit_map_elem,
  refine subtype.ext (funext (Œª I, _)),
  change X_to_partition_map I x = u I,
  apply subtype.ext,
  apply X_to_partition_map_unique,
  { apply profinite_diagram_obj' },
  apply mem_of_subset_of_mem (Inter_subset _ _) hx,
end

lemma profinite_limit_map.bijective (X : Profinite) : function.bijective (profinite_limit_map X) :=
‚ü®profinite_limit_map.injective X, profinite_limit_map.surjective X‚ü©

variables {Œ± : Type*} {Œ≤ : Type*}
variables [topological_space Œ±] [topological_space Œ≤]

#check continuous_iff_is_closed

lemma continuous.is_closed [compact_space Œ±] [t2_space Œ≤] (f : Œ± ‚Üí Œ≤) (h : continuous f) :
  is_closed_map f := Œª Z hZ, (hZ.compact.image h).is_closed

def homeomorph_of_continuous_closed (e : Œ± ‚âÉ Œ≤) (h‚ÇÅ : continuous e) (h‚ÇÇ : is_closed_map e) :
  Œ± ‚âÉ‚Çú Œ≤ :=
{ continuous_to_fun := h‚ÇÅ,
  continuous_inv_fun :=
  begin
    rw continuous_iff_is_closed,
    intros s hs,
    convert ‚Üê h‚ÇÇ s hs using 1,
    apply e.image_eq_preimage
  end,
  .. e }

def homeomorph_of_continuous_equiv [compact_space Œ±] [t2_space Œ≤] (e : Œ± ‚âÉ Œ≤) (h : continuous e) :
  Œ± ‚âÉ‚Çú Œ≤ := homeomorph_of_continuous_closed e h (continuous.is_closed e h)

noncomputable def profinite_lift_homeomorph (X : Profinite) : X ‚âÉ‚Çú (profinite_limit X) :=
homeomorph_of_continuous_equiv (equiv.of_bijective _ (profinite_limit_map.bijective X))
  (profinite_limit_map X).2

lemma profinite_lift_homeomorph_to_fun (X : Profinite) :
  (profinite_lift_homeomorph X).to_fun = profinite_limit_map X := rfl

noncomputable instance profinite_lift_is_iso (X : Profinite) : is_iso (profinite_limit_map X) :=
{ inv := ‚ü®(profinite_lift_homeomorph X).inv_fun, (profinite_lift_homeomorph X).continuous_inv_fun‚ü©,
  hom_inv_id' :=
  begin
    refine continuous_map.ext (Œª x, _),
    rw [coe_comp, ‚Üê(profinite_lift_homeomorph_to_fun X)],
    change X.profinite_lift_homeomorph.to_equiv.symm (X.profinite_lift_homeomorph.to_equiv.to_fun x) = x,
    simp only [equiv.to_fun_as_coe, equiv.symm_apply_apply],
  end,
  inv_hom_id' :=
  begin
    refine continuous_map.ext (Œª x, _),
    rw [coe_comp, ‚Üê(profinite_lift_homeomorph_to_fun X)],
    change X.profinite_lift_homeomorph.to_equiv.to_fun (X.profinite_lift_homeomorph.to_equiv.symm x) = x,
    simp only [equiv.to_fun_as_coe, equiv.apply_symm_apply],
  end, }

noncomputable lemma profinite_cone_is_limit (X : Profinite) : is_limit (profinite_limit_cone X) :=
@is_limit.of_point_iso _ _ _ _ _ _ _ (limit_cone_is_limit (profinite_diagram X))
  (Profinite.profinite_lift_is_iso X)


/-
{ right_adjoint_proof := by apply_instance,
  full_proof := by apply_instance,
  faithful_proof := by apply_instance } -/

-- inductive finite_jointly_surjective (Y : Profinite)
-- | mk {Œπ : Type*} [fintype Œπ] (X : Œπ ‚Üí Profinite) (f : Œ† (i : Œπ), X i ‚ü∂ Y)
--      (hf : ‚àÄ (y : Y), ‚àÉ (i : Œπ) (x : X i), f i x = y) :
--     finite_jointly_surjective Y

inductive presieve_of_arrows {X : Profinite} {Œπ : Type*} (Y : Œπ ‚Üí Profinite) (f : Œ† i, Y i ‚ü∂ X) :
  presieve X
| mk {i : Œπ} : presieve_of_arrows (f i)

def proetale_pretopology : pretopology Profinite :=
{ coverings := Œª X S, ‚àÉ (Œπ : Type*) [fintype Œπ] (Y : Œπ ‚Üí Profinite) (f : Œ† (i : Œπ), Y i ‚ü∂ X),
      (‚àÄ (x : X), ‚àÉ i y, f i y = x) ‚àß S = presieve_of_arrows Y f,
  has_isos := Œª X Y f i,
  begin
    refine ‚ü®punit, infer_instance, Œª _, Y, Œª _, f, _, _‚ü©,
    intro x,
    refine ‚ü®punit.star, _, _‚ü©,
    resetI,
    apply (forget _).map (inv f) x,
    dsimp,
    sorry,
    ext Y g,
    split,
    { rintro ‚ü®_‚ü©,
      apply presieve_of_arrows.mk,
      apply punit.star },
    { rintro ‚ü®_‚ü©,
      apply presieve.singleton.mk },
  end,
  pullbacks := Œª X Y f S,
  begin
    rintro ‚ü®Œπ, hŒπ, Z, g, hg, rfl‚ü©,
    refine ‚ü®Œπ, hŒπ, Œª i, pullback (g i) f, Œª i, pullback.snd, _, _‚ü©,
    intro y,
    rcases hg (f y) with ‚ü®i, z, hz‚ü©,
    refine ‚ü®i, _, _‚ü©,
    sorry, sorry,
    ext W k,
    split,
    { intro hk,
      cases hk with W k hk‚ÇÅ,
      cases hk‚ÇÅ with i hi,
      apply presieve_of_arrows.mk },
    { intro hk,
      cases hk with i,
      apply pullback_arrows.mk,
      apply presieve_of_arrows.mk }
  end,
  transitive := Œª X S Ti,
  begin
    rintro ‚ü®Œπ, hŒπ, Z, g, hY, rfl‚ü© hTi,
    choose j hj W k hk‚ÇÅ hk‚ÇÇ using hTi,
    refine ‚ü®Œ£ (i : Œπ), j (g i) presieve_of_arrows.mk, _, Œª ij, W _ _ ij.2, _, _, _‚ü©,
    { apply sigma.fintype _,
      { apply hŒπ },
      { intro i,
        apply hj } },
    { intro ij,
      apply k _ _ ij.2 ‚â´ g ij.1 },
    { intro x,
      rcases hY x with ‚ü®i, y, hy‚ü©,
      rcases hk‚ÇÅ (g i) presieve_of_arrows.mk y with ‚ü®j', z, hz‚ü©,
      refine ‚ü®‚ü®i, j'‚ü©, z, _‚ü©,
      rw ‚Üê hy,
      rw ‚Üê hz,
      refl },
    { ext Y f,
      split,
      { sorry },
      { sorry } }
  end }



/-

{ sieves := Œª A, {S | ‚àÄ x, ‚àÉ B (f : B ‚ü∂ A) b, S.arrows f ‚àß f b = x},
  top_mem' := Œª A, (Œª x, by {use A, use (ùüô A), use x, split, work_on_goal 0 { exact dec_trivial }, refl,}),
  pullback_stable' := Œª X Y S f h, (Œª y,
    begin
      cases h (f y),
    end),
  transitive' := _ }




lemma profinite_is_limit_of_discrete {Œπ : Type*} (I : Œπ ‚Üí Type) (h : ‚àÄ i, fintype (I i)) (X : Profinite) : _
-/
end Profinite
