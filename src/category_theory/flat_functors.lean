/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import category_theory.limits.kan_extension
import category_theory.limits.filtered_colimit_commutes_finite_limit
import category_theory.limits.preserves.functor_category
import category_theory.limits.preserves.shapes.equalizers
import category_theory.limits.shapes.bicones
import category_theory.limits.presheaf
import category_theory.limits.yoneda
import category_theory.limits.comma
import category_theory.sites.sheaf_of_types

/-!
# Representably flat functors

We define representably flat functors as functors such that the category of structured arrows
over `X` is cofiltered for each `X`. This concept is also knows as flat functors as in [Elephant]
Remark C2.3.7, and this name is suggested by Mike Shulman in
https://golem.ph.utexas.edu/category/2011/06/flat_functors_and_morphisms_of.html to differentiate
this concept from other notions of flatness.

This definition is equivalent to left exact functors (functors that preserves finite limits) when
`C` has all finite limits.

## Main results

* `flat_of_preserves_finite_limit`: If `F : C ‚•§ D` preserves finite limits and `C` has all finite
limits, then `F` is flat.
* `preserves_finite_limit_of_flat`: If `F : C ‚•§ D` is flat, then it preserves all finite limits.
* `Lan_preserves_finite_limit_of_flat`: If `F : C ‚•§ D` is a flat functor between small categories,
then the functor `Lan F.op` between presheaves of sets preserves all finite limits.
* `preserves_limit_of_Lan_preserves_limit`: If the functor `Lan F.op` between presheaves of sets
preserves limits of shape `J`, then so will `F`.
* `family_of_elements_compatible_of_flat`: If `F : C ‚•§ D` is a flat functor, and a
`family_of_elements` over a sieve in `C` that factors through `u.op` is compatible,
then the family of elements viewed as a family over the image sieve in `D` is also compatible.

-/

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open category_theory
open category_theory.limits
open opposite

namespace category_theory


namespace structured_arrow_cone
open structured_arrow
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÅ} D]
variables {J : Type v‚ÇÅ} [small_category J]
variables {K : J ‚•§ C} (F : C ‚•§ D) (c : cone K)

/--
Given a cone `c : cone K` and a map `f : X ‚ü∂ c.X`, we can construct a cone of structured
arrows over `X` with `f` as the cone point. This is the underlying diagram.
-/
@[simps]
def to_diagram : J ‚•§ structured_arrow c.X K :=
{ obj := Œª j, structured_arrow.mk (c.œÄ.app j),
  map := Œª j k g, structured_arrow.hom_mk g (by simpa),
  map_id' := Œª X, by simpa,
  map_comp' := Œª X Y Z g h, by { ext, simp } }

/-- Given a diagram of `structured_arrow X F`s, we may obtain a cone with cone point `X`. -/
@[simps]
def diagram_to_cone {X : D} (G : J ‚•§ structured_arrow X F) : cone (G ‚ãô proj X F ‚ãô F) := {
  X := X, œÄ := { app := Œª j, (G.obj j).hom } }

/--
Given a cone `c : cone K` and a map `f : X ‚ü∂ F.obj c.X`, we can construct a cone of structured
arrows over `X` with `f` as the cone point.
-/
@[simps]
def to_cone {X : D} (f : X ‚ü∂ F.obj c.X) :
  cone (to_diagram (F.map_cone c) ‚ãô map f ‚ãô pre _ K F) :=
{ X := mk f, œÄ := { app := Œª j, hom_mk (c.œÄ.app j) rfl,
                    naturality' := Œª j k g, by { ext, dsimp, simp } } }

lemma eq_to_hom_right {A : Type*} [category A] {B : Type*} [category B] {T : Type*} [category T]
  {L : A ‚•§ T} {R : B ‚•§ T} (X Y : comma L R) (H : X = Y) :
  comma_morphism.right (eq_to_hom H) = eq_to_hom (by { cases H, refl }) := by { cases H, refl }

local attribute[simp] eq_to_hom_right

/--
If a cone `s‚ÇÅ` factors through another cone `s‚ÇÇ`, then the two constructed diagrams are actually
the same.
-/
lemma to_diagram_comp_map (s‚ÇÅ s‚ÇÇ : cone K)
  (f : s‚ÇÅ.X ‚ü∂ s‚ÇÇ.X) (H : ‚àÄ (j : J), f ‚â´ s‚ÇÇ.œÄ.app j = s‚ÇÅ.œÄ.app j) :
    to_diagram s‚ÇÇ ‚ãô structured_arrow.map f = to_diagram s‚ÇÅ := by { apply functor.ext, tidy, }

end structured_arrow_cone

section representably_flat
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

/--
A functor `F : C ‚•§ D` is representably flat if the comma category `(X/F)`
is cofiltered for each `X : C`.
-/
class representably_flat (F : C ‚•§ D) : Prop :=
(cofiltered : ‚àÄ (X : D), is_cofiltered (structured_arrow X F))

instance functor.flat_cofiltered (F : C ‚•§ D) [representably_flat F] (X : D) :
 is_cofiltered (structured_arrow X F) := representably_flat.cofiltered X

end representably_flat

section has_limit
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÅ} D]

@[priority 100]
instance cofiltered_of_has_finite_limit [has_finite_limits C] : is_cofiltered C :=
{ cocone_objs := Œª A B, ‚ü®limits.prod A B, limits.prod.fst, limits.prod.snd, trivial‚ü©,
  cocone_maps :=  Œª A B f g, ‚ü®equalizer f g, equalizer.Œπ f g, equalizer.condition f g‚ü©,
  nonempty := ‚ü®‚ä§_ C‚ü© }

lemma flat_of_preserves_finite_limit [has_limits C] (F : C ‚•§ D)
  (H : ‚àÄ (J : Type v‚ÇÅ) [h : small_category J] [h' : @fin_category J h],
    @preserves_limits_of_shape _ _ _ _ J h F) : representably_flat F := ‚ü®Œª X,
begin
  haveI : has_finite_limits (structured_arrow X F) :=
    { out := Œª J _ _, by { resetI, apply_instance } },
  apply_instance
end‚ü©

namespace preserves_finite_limit_of_flat
open structured_arrow
open structured_arrow_cone
variables {J : Type v‚ÇÅ} [small_category J] [fin_category J] {K : J ‚•§ C}
variables (F : C ‚•§ D) [representably_flat F] {c : cone K} (hc : is_limit c) (s : cone (K ‚ãô F))
include hc

/--
(Implementation).
Given a limit cone `c : cone K` and a cone `s : cone (K ‚ãô F)` with `F` representably flat,
`s` can factor through `F.map_cone c`.
-/
noncomputable def lift : s.X ‚ü∂ F.obj c.X :=
let s' := is_cofiltered.cone (to_diagram s ‚ãô structured_arrow.pre _ K F) in
s'.X.hom ‚â´ F.map (hc.lift ((cones.postcompose (eq_to_hom (by apply functor.hext; tidy))).obj
  ((structured_arrow.proj s.X F).map_cone s')))

lemma fac (x : J) : lift F hc s ‚â´ (F.map_cone c).œÄ.app x = s.œÄ.app x :=
by { dsimp [lift], simpa [‚Üê F.map_comp, -category.id_comp] using category.id_comp (s.œÄ.app x) }

lemma uniq {K : J ‚•§ C} {c : cone K} (hc : is_limit c)
  (s : cone (K ‚ãô F)) (f‚ÇÅ f‚ÇÇ : s.X ‚ü∂ F.obj c.X)
  (h‚ÇÅ : ‚àÄ (j : J), f‚ÇÅ ‚â´ (F.map_cone c).œÄ.app j = s.œÄ.app j)
  (h‚ÇÇ : ‚àÄ (j : J), f‚ÇÇ ‚â´ (F.map_cone c).œÄ.app j = s.œÄ.app j) : f‚ÇÅ = f‚ÇÇ :=
begin
  -- We can make two cones over the diagram of `s` via `f‚ÇÅ` and `f‚ÇÇ`.
  let c‚ÇÅ : cone (to_diagram s ‚ãô pre s.X K F) := (cones.postcompose
    (eq_to_hom (by simpa [‚Üêto_diagram_comp_map s (F.map_cone c) f‚ÇÅ h‚ÇÅ]))).obj (to_cone F c f‚ÇÅ),
  let c‚ÇÇ : cone (to_diagram s ‚ãô pre s.X K F) := (cones.postcompose
    (eq_to_hom (by simpa [‚Üêto_diagram_comp_map s (F.map_cone c) f‚ÇÇ h‚ÇÇ]))).obj (to_cone F c f‚ÇÇ),

  -- The two cones can then be combined and we may obtain a cone over the two cones since
  -- `structured_arrow s.X F` is cofiltered.
  let c‚ÇÄ := is_cofiltered.cone (bicone_mk _ c‚ÇÅ c‚ÇÇ),
  let g‚ÇÅ : c‚ÇÄ.X ‚ü∂ c‚ÇÅ.X := c‚ÇÄ.œÄ.app (bicone.left),
  let g‚ÇÇ : c‚ÇÄ.X ‚ü∂ c‚ÇÇ.X := c‚ÇÄ.œÄ.app (bicone.right),

  -- Then `g‚ÇÅ.right` and `g‚ÇÇ.right` are two maps from the same cone into the `c`.
  have : ‚àÄ (j : J), g‚ÇÅ.right ‚â´ c.œÄ.app j = g‚ÇÇ.right ‚â´ c.œÄ.app j,
  { intro j,
    injection c‚ÇÄ.œÄ.naturality (bicone_hom.left  j) with _ e‚ÇÅ,
    injection c‚ÇÄ.œÄ.naturality (bicone_hom.right j) with _ e‚ÇÇ,
    simpa [eq_to_hom_right] using e‚ÇÅ.symm.trans e‚ÇÇ },
  have : c.extend g‚ÇÅ.right = c.extend g‚ÇÇ.right,
  { unfold cone.extend, congr' 1, ext x, apply this },

  -- And thus they are equal as `c` is the limit.
  have : g‚ÇÅ.right = g‚ÇÇ.right,
  calc g‚ÇÅ.right = hc.lift (c.extend g‚ÇÅ.right) : by { apply hc.uniq (c.extend _), tidy }
            ... = hc.lift (c.extend g‚ÇÇ.right) : by { congr, exact this }
            ... = g‚ÇÇ.right                    : by { symmetry, apply hc.uniq (c.extend _), tidy },

  -- Finally, since `f·µ¢` factors through `F(g·µ¢)`, the result follows.
  calc f‚ÇÅ = ùüô _ ‚â´ f‚ÇÅ                  : by simp
      ... = c‚ÇÄ.X.hom ‚â´ F.map g‚ÇÅ.right : g‚ÇÅ.w
      ... = c‚ÇÄ.X.hom ‚â´ F.map g‚ÇÇ.right : by rw this
      ... = ùüô _ ‚â´ f‚ÇÇ                  : g‚ÇÇ.w.symm
      ... = f‚ÇÇ                         : by simp
end

end preserves_finite_limit_of_flat

/-- Representably flat functors preserve finite limits. -/
noncomputable
def preserves_finite_limit_of_flat (F : C ‚•§ D) [representably_flat F]
(J : Type v‚ÇÅ) [small_category J] [fin_category J]
: preserves_limits_of_shape J F := ‚ü®Œª K, ‚ü®Œª c hc,
{ lift := preserves_finite_limit_of_flat.lift F hc,
  fac' := preserves_finite_limit_of_flat.fac F hc,
  uniq' := Œª s m h, by
  { apply preserves_finite_limit_of_flat.uniq F hc,
    exact h,
    exact preserves_finite_limit_of_flat.fac F hc s } }‚ü©‚ü©

end has_limit

section small_category
variables {C D : Type u‚ÇÅ} [small_category C] [small_category D]

/--
(Implementation)
The evaluation of `Lan F` at `X` is the colimit over the costructured arrows over `X`.
-/
lemma Lan_evaluation_eq_colim (E : Type u‚ÇÇ) [category.{u‚ÇÅ} E] (F : C ‚•§ D) (X : D)
  [‚àÄ (X : D), has_colimits_of_shape (costructured_arrow F X) E] :
  Lan F ‚ãô (evaluation D E).obj X =
  ((whiskering_left _ _ E).obj (costructured_arrow.proj F X)) ‚ãô colim :=
begin
  apply functor.hext,
  { intro Y, simp },
  intros Y‚ÇÅ Y‚ÇÇ f,
  simp only [functor.comp_map, evaluation_obj_map,
    whiskering_left_obj_map, Lan_map_app, heq_iff_eq],
  symmetry,
  apply (colimit.is_colimit (Lan.diagram F Y‚ÇÅ X)).uniq { X := colimit _, Œπ := _ }
    (colim.map (whisker_left (costructured_arrow.proj F X) f)),
  intro Z,
  simp only [colimit.Œπ_map, colimit.cocone_Œπ, whisker_left_app, category.comp_id, category.assoc],
  transitivity f.app Z.left ‚â´ (colimit.Œπ (costructured_arrow.map Z.hom ‚ãô Lan.diagram F Y‚ÇÇ X :
    costructured_arrow F _ ‚•§ _) (costructured_arrow.mk (ùüô (F.obj Z.left))) : _)
    ‚â´ (colimit.pre (Lan.diagram F Y‚ÇÇ X) (costructured_arrow.map Z.hom)),
  { rw colimit.Œπ_pre,
    congr,
    simp only [category.id_comp, costructured_arrow.map_mk],
    apply costructured_arrow.eq_mk },
  { congr }
end

/--
If `F : C ‚•§ D` is a representably flat functor between small categories, then the functor
`Lan F.op` that takes presheaves over `C` to presheaves over `D` preserves finite limits.
-/
noncomputable
def Lan_presesrves_finite_limit_of_flat (F : C ‚•§ D) [representably_flat F]
  (J : Type u‚ÇÅ) [small_category J] [fin_category J] :
  preserves_limits_of_shape J (Lan F.op : _ ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) :=
begin
  apply preserves_limits_of_shape_of_evaluation (Lan F.op : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ)) J,
  intro K,
  rw Lan_evaluation_eq_colim,
  haveI : is_filtered (costructured_arrow F.op K) :=
    is_filtered.of_equivalence (structured_arrow_op_equivalence F (unop K)),
  apply_instance
end

/-- If `Lan F.op : (C·µí·µñ ‚•§ Type*) ‚•§ (D·µí·µñ ‚•§ Type*)` preserves limits of shape `J`, so will `F`. -/
noncomputable
def preserves_limit_of_Lan_presesrves_limit (F : C ‚•§ D) (J : Type u‚ÇÅ) [small_category J]
  [preserves_limits_of_shape J (Lan F.op : _ ‚•§ (D·µí·µñ ‚•§ Type u‚ÇÅ))] :
  preserves_limits_of_shape J F :=
begin
  apply preserves_limits_of_shape_of_reflects_of_preserves F yoneda,
  exact preserves_limits_of_shape_of_nat_iso (comp_yoneda_iso_yoneda_comp_Lan F).symm,
  apply_instance
end

end small_category

namespace presieve.family_of_elements
open presieve
open category_theory.limits.walking_cospan (left right)
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÅ} D]
variables (u : C ‚•§ D) [representably_flat u] {P : D·µí·µñ ‚•§ Type v‚ÇÅ} {Z : C} {T : presieve Z}
variables {x : family_of_elements (u.op ‚ãô P) T} (h : x.compatible)
include h

/-
We ought to show that for each `f‚ÇÅ ‚â´ u.map g‚ÇÅ = f‚ÇÇ ‚â´ u.map g‚ÇÇ`, the restriction of
`x` along the two paths are the same given `x` is compatible in the image of `u`.
  -/
lemma family_of_elements_compatible_of_flat {Y‚ÇÅ Y‚ÇÇ : C} {X : D}
  (f‚ÇÅ : X ‚ü∂ u.obj Y‚ÇÅ) (f‚ÇÇ : X ‚ü∂ u.obj Y‚ÇÇ) {g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z} {g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z}
  (hg‚ÇÅ : T g‚ÇÅ) (hg‚ÇÇ : T g‚ÇÇ) (eq : f‚ÇÅ ‚â´ u.map g‚ÇÅ = f‚ÇÇ ‚â´ u.map g‚ÇÇ) :
  P.map f‚ÇÅ.op (x g‚ÇÅ hg‚ÇÅ) = P.map f‚ÇÇ.op (x g‚ÇÇ hg‚ÇÇ) :=
begin
  /- First, `f‚ÇÅ` and `f‚ÇÇ` forms a cone over `cospan g‚ÇÅ g‚ÇÇ ‚ãô u`. -/
  let c : cone (cospan g‚ÇÅ g‚ÇÇ ‚ãô u) :=
    (cones.postcompose (diagram_iso_cospan (cospan g‚ÇÅ g‚ÇÇ ‚ãô u)).inv).obj
      (pullback_cone.mk f‚ÇÅ f‚ÇÇ eq),

  /-
  This can then be viewed as a cospan of structured arrows, and we may obtain an arbitrary cone
  over it since `structured_arrow W u` is cofiltered.
  Then, it suffices to prove that it is compatible when restricted onto `u(c'.X.right)`.
  -/
  let c' := is_cofiltered.cone (structured_arrow_cone.to_diagram c ‚ãô structured_arrow.pre _ _ _),
  have eq‚ÇÅ : f‚ÇÅ = (c'.X.hom ‚â´ u.map (c'.œÄ.app left).right) ‚â´ eq_to_hom (by simp),
  { erw ‚Üê (c'.œÄ.app left).w, dsimp, simp },
  have eq‚ÇÇ : f‚ÇÇ = (c'.X.hom ‚â´ u.map (c'.œÄ.app right).right) ‚â´ eq_to_hom (by simp),
  { erw ‚Üê (c'.œÄ.app right).w, dsimp, simp },
  conv_lhs { rw eq‚ÇÅ },
  conv_rhs { rw eq‚ÇÇ },
  simp only [op_comp, functor.map_comp, types_comp_apply, eq_to_hom_op, eq_to_hom_map],
  congr' 1,

  /-
  Now, since everything now falls in the image of `u`,
  the result follows from the compatibility of `x` in the image of `u`.
  -/
  injection c'.œÄ.naturality walking_cospan.hom.inl with _ e‚ÇÅ,
  injection c'.œÄ.naturality walking_cospan.hom.inr with _ e‚ÇÇ,
  exact h (c'.œÄ.app left).right (c'.œÄ.app right).right hg‚ÇÅ hg‚ÇÇ (e‚ÇÅ.symm.trans e‚ÇÇ),

end

lemma compatible.functor_pushforward : (x.functor_pushforward u).compatible :=
begin
  rintros Z‚ÇÅ Z‚ÇÇ W g‚ÇÅ g‚ÇÇ f‚ÇÅ' f‚ÇÇ' H‚ÇÅ H‚ÇÇ eq,
  unfold family_of_elements.functor_pushforward,
  rcases get_functor_pushforward_structure H‚ÇÅ with ‚ü®X‚ÇÅ, f‚ÇÅ, h‚ÇÅ, hf‚ÇÅ, rfl‚ü©,
  rcases get_functor_pushforward_structure H‚ÇÇ with ‚ü®X‚ÇÇ, f‚ÇÇ, h‚ÇÇ, hf‚ÇÇ, rfl‚ü©,
  suffices : P.map (g‚ÇÅ ‚â´ h‚ÇÅ).op (x f‚ÇÅ hf‚ÇÅ) = P.map (g‚ÇÇ ‚â´ h‚ÇÇ).op (x f‚ÇÇ hf‚ÇÇ), simpa using this,
  apply family_of_elements_compatible_of_flat u h,
  simpa using eq,
end

lemma functor_pushforward_apply_map {Y : C} {f: Y ‚ü∂ Z} (hf) :
  x.functor_pushforward u (u.map f) (image_mem_functor_pushforward u T hf) = x f hf :=
begin
  unfold family_of_elements.functor_pushforward,
  rcases e‚ÇÅ : get_functor_pushforward_structure (image_mem_functor_pushforward u T hf) with
    ‚ü®X, g, f', hg, eq‚ü©,
  simpa using family_of_elements_compatible_of_flat u h f' (ùüô _) hg hf (by simp[eq]),
end

end presieve.family_of_elements

end category_theory
